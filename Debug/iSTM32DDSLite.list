
iSTM32DDSLite.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088d4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  080089e0  080089e0  000189e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b18  08008b18  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08008b18  08008b18  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008b18  08008b18  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b18  08008b18  00018b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b1c  08008b1c  00018b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008b20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001534  200001e0  08008d00  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001714  08008d00  00021714  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015cd1  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030e2  00000000  00000000  00035eda  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001060  00000000  00000000  00038fc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ee8  00000000  00000000  0003a020  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001acf4  00000000  00000000  0003af08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000101ef  00000000  00000000  00055bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d42e  00000000  00000000  00065deb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f3219  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b38  00000000  00000000  000f3294  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         0000009c  00000000  00000000  000f7dcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000014d  00000000  00000000  000f7e68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	080089c8 	.word	0x080089c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	080089c8 	.word	0x080089c8

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000152:	f000 fb6d 	bl	8000830 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f833 	bl	80001c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f961 	bl	8000420 <MX_GPIO_Init>
  MX_TIM1_Init();
 800015e:	f000 f889 	bl	8000274 <MX_TIM1_Init>
  MX_DMA_Init();
 8000162:	f000 f8e7 	bl	8000334 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000166:	f006 ff85 	bl	8007074 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  /*Square wave generation and put it into aOutputWave */
  for (int i = 0; i < BUFFER_SIZE; ++i)
 800016a:	2300      	movs	r3, #0
 800016c:	607b      	str	r3, [r7, #4]
 800016e:	e011      	b.n	8000194 <main+0x48>
  {
	  if (i < BUFFER_SIZE/2) aOutputWave[i]=0;
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	2bb3      	cmp	r3, #179	; 0xb3
 8000174:	dc05      	bgt.n	8000182 <main+0x36>
 8000176:	4a10      	ldr	r2, [pc, #64]	; (80001b8 <main+0x6c>)
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2100      	movs	r1, #0
 800017c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000180:	e005      	b.n	800018e <main+0x42>
	  else aOutputWave[i]=0xFFFF;
 8000182:	4a0d      	ldr	r2, [pc, #52]	; (80001b8 <main+0x6c>)
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800018a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0; i < BUFFER_SIZE; ++i)
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	3301      	adds	r3, #1
 8000192:	607b      	str	r3, [r7, #4]
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800019a:	dbe9      	blt.n	8000170 <main+0x24>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800019c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001a0:	4806      	ldr	r0, [pc, #24]	; (80001bc <main+0x70>)
 80001a2:	f001 f87f 	bl	80012a4 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80001a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001aa:	f000 fba3 	bl	80008f4 <HAL_Delay>
//	    CDC_Transmit_FS(HiMsg, sizeof(HiMsg));
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_Delay(1000);
 80001ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001b2:	f000 fb9f 	bl	80008f4 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80001b6:	e7f1      	b.n	800019c <main+0x50>
 80001b8:	20000200 	.word	0x20000200
 80001bc:	40011000 	.word	0x40011000

080001c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b094      	sub	sp, #80	; 0x50
 80001c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001ca:	2228      	movs	r2, #40	; 0x28
 80001cc:	2100      	movs	r1, #0
 80001ce:	4618      	mov	r0, r3
 80001d0:	f007 fc7c 	bl	8007acc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d4:	f107 0314 	add.w	r3, r7, #20
 80001d8:	2200      	movs	r2, #0
 80001da:	601a      	str	r2, [r3, #0]
 80001dc:	605a      	str	r2, [r3, #4]
 80001de:	609a      	str	r2, [r3, #8]
 80001e0:	60da      	str	r2, [r3, #12]
 80001e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001e4:	1d3b      	adds	r3, r7, #4
 80001e6:	2200      	movs	r2, #0
 80001e8:	601a      	str	r2, [r3, #0]
 80001ea:	605a      	str	r2, [r3, #4]
 80001ec:	609a      	str	r2, [r3, #8]
 80001ee:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001f0:	2301      	movs	r3, #1
 80001f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001fa:	2300      	movs	r3, #0
 80001fc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001fe:	2301      	movs	r3, #1
 8000200:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000202:	2302      	movs	r3, #2
 8000204:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000206:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800020a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800020c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000210:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000212:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000216:	4618      	mov	r0, r3
 8000218:	f002 fc04 	bl	8002a24 <HAL_RCC_OscConfig>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d001      	beq.n	8000226 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000222:	f000 fa09 	bl	8000638 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000226:	230f      	movs	r3, #15
 8000228:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800022a:	2302      	movs	r3, #2
 800022c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800022e:	2300      	movs	r3, #0
 8000230:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000232:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000236:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000238:	2300      	movs	r3, #0
 800023a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800023c:	f107 0314 	add.w	r3, r7, #20
 8000240:	2102      	movs	r1, #2
 8000242:	4618      	mov	r0, r3
 8000244:	f002 fe6e 	bl	8002f24 <HAL_RCC_ClockConfig>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800024e:	f000 f9f3 	bl	8000638 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000252:	2310      	movs	r3, #16
 8000254:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000256:	2300      	movs	r3, #0
 8000258:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	4618      	mov	r0, r3
 800025e:	f002 ffcb 	bl	80031f8 <HAL_RCCEx_PeriphCLKConfig>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000268:	f000 f9e6 	bl	8000638 <Error_Handler>
  }
}
 800026c:	bf00      	nop
 800026e:	3750      	adds	r7, #80	; 0x50
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}

08000274 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b088      	sub	sp, #32
 8000278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800027a:	f107 0310 	add.w	r3, r7, #16
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
 8000282:	605a      	str	r2, [r3, #4]
 8000284:	609a      	str	r2, [r3, #8]
 8000286:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000288:	f107 0308 	add.w	r3, r7, #8
 800028c:	2200      	movs	r2, #0
 800028e:	601a      	str	r2, [r3, #0]
 8000290:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */
	__HAL_RCC_TIM1_CLK_ENABLE();
 8000292:	4b25      	ldr	r3, [pc, #148]	; (8000328 <MX_TIM1_Init+0xb4>)
 8000294:	699b      	ldr	r3, [r3, #24]
 8000296:	4a24      	ldr	r2, [pc, #144]	; (8000328 <MX_TIM1_Init+0xb4>)
 8000298:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800029c:	6193      	str	r3, [r2, #24]
 800029e:	4b22      	ldr	r3, [pc, #136]	; (8000328 <MX_TIM1_Init+0xb4>)
 80002a0:	699b      	ldr	r3, [r3, #24]
 80002a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002a6:	607b      	str	r3, [r7, #4]
 80002a8:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002aa:	4b20      	ldr	r3, [pc, #128]	; (800032c <MX_TIM1_Init+0xb8>)
 80002ac:	4a20      	ldr	r2, [pc, #128]	; (8000330 <MX_TIM1_Init+0xbc>)
 80002ae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0; // 1000;
 80002b0:	4b1e      	ldr	r3, [pc, #120]	; (800032c <MX_TIM1_Init+0xb8>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002b6:	4b1d      	ldr	r3, [pc, #116]	; (800032c <MX_TIM1_Init+0xb8>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7; //65535;
 80002bc:	4b1b      	ldr	r3, [pc, #108]	; (800032c <MX_TIM1_Init+0xb8>)
 80002be:	2207      	movs	r2, #7
 80002c0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002c2:	4b1a      	ldr	r3, [pc, #104]	; (800032c <MX_TIM1_Init+0xb8>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80002c8:	4b18      	ldr	r3, [pc, #96]	; (800032c <MX_TIM1_Init+0xb8>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002ce:	4b17      	ldr	r3, [pc, #92]	; (800032c <MX_TIM1_Init+0xb8>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80002d4:	4815      	ldr	r0, [pc, #84]	; (800032c <MX_TIM1_Init+0xb8>)
 80002d6:	f003 f845 	bl	8003364 <HAL_TIM_Base_Init>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 80002e0:	f000 f9aa 	bl	8000638 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80002ea:	f107 0310 	add.w	r3, r7, #16
 80002ee:	4619      	mov	r1, r3
 80002f0:	480e      	ldr	r0, [pc, #56]	; (800032c <MX_TIM1_Init+0xb8>)
 80002f2:	f003 f886 	bl	8003402 <HAL_TIM_ConfigClockSource>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 80002fc:	f000 f99c 	bl	8000638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000300:	2300      	movs	r3, #0
 8000302:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000304:	2300      	movs	r3, #0
 8000306:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000308:	f107 0308 	add.w	r3, r7, #8
 800030c:	4619      	mov	r1, r3
 800030e:	4807      	ldr	r0, [pc, #28]	; (800032c <MX_TIM1_Init+0xb8>)
 8000310:	f003 fa26 	bl	8003760 <HAL_TIMEx_MasterConfigSynchronization>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 800031a:	f000 f98d 	bl	8000638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800031e:	bf00      	nop
 8000320:	3720      	adds	r7, #32
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	40021000 	.word	0x40021000
 800032c:	200006fc 	.word	0x200006fc
 8000330:	40012c00 	.word	0x40012c00

08000334 <MX_DMA_Init>:

static void MX_DMA_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800033a:	4b31      	ldr	r3, [pc, #196]	; (8000400 <MX_DMA_Init+0xcc>)
 800033c:	695b      	ldr	r3, [r3, #20]
 800033e:	4a30      	ldr	r2, [pc, #192]	; (8000400 <MX_DMA_Init+0xcc>)
 8000340:	f043 0301 	orr.w	r3, r3, #1
 8000344:	6153      	str	r3, [r2, #20]
 8000346:	4b2e      	ldr	r3, [pc, #184]	; (8000400 <MX_DMA_Init+0xcc>)
 8000348:	695b      	ldr	r3, [r3, #20]
 800034a:	f003 0301 	and.w	r3, r3, #1
 800034e:	607b      	str	r3, [r7, #4]
 8000350:	687b      	ldr	r3, [r7, #4]
  /* DMA configuration */
  hdma_tim1_up.Instance = DMA1_Channel5;
 8000352:	4b2c      	ldr	r3, [pc, #176]	; (8000404 <MX_DMA_Init+0xd0>)
 8000354:	4a2c      	ldr	r2, [pc, #176]	; (8000408 <MX_DMA_Init+0xd4>)
 8000356:	601a      	str	r2, [r3, #0]
  hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000358:	4b2a      	ldr	r3, [pc, #168]	; (8000404 <MX_DMA_Init+0xd0>)
 800035a:	2210      	movs	r2, #16
 800035c:	605a      	str	r2, [r3, #4]
  hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800035e:	4b29      	ldr	r3, [pc, #164]	; (8000404 <MX_DMA_Init+0xd0>)
 8000360:	2200      	movs	r2, #0
 8000362:	609a      	str	r2, [r3, #8]
  hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8000364:	4b27      	ldr	r3, [pc, #156]	; (8000404 <MX_DMA_Init+0xd0>)
 8000366:	2280      	movs	r2, #128	; 0x80
 8000368:	60da      	str	r2, [r3, #12]
  hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD; // 16 bits
 800036a:	4b26      	ldr	r3, [pc, #152]	; (8000404 <MX_DMA_Init+0xd0>)
 800036c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000370:	611a      	str	r2, [r3, #16]
  hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000372:	4b24      	ldr	r3, [pc, #144]	; (8000404 <MX_DMA_Init+0xd0>)
 8000374:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000378:	615a      	str	r2, [r3, #20]
  hdma_tim1_up.Init.Mode = DMA_CIRCULAR;//DMA_NORMAL;
 800037a:	4b22      	ldr	r3, [pc, #136]	; (8000404 <MX_DMA_Init+0xd0>)
 800037c:	2220      	movs	r2, #32
 800037e:	619a      	str	r2, [r3, #24]
  hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 8000380:	4b20      	ldr	r3, [pc, #128]	; (8000404 <MX_DMA_Init+0xd0>)
 8000382:	2200      	movs	r2, #0
 8000384:	61da      	str	r2, [r3, #28]
  HAL_DMA_Init(&hdma_tim1_up);
 8000386:	481f      	ldr	r0, [pc, #124]	; (8000404 <MX_DMA_Init+0xd0>)
 8000388:	f000 fbe4 	bl	8000b54 <HAL_DMA_Init>
//  __HAL_DMA1_REMAP(HAL_DMA1_CH3_TIM6_UP);
  __HAL_LINKDMA(&htim1,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 800038c:	4b1f      	ldr	r3, [pc, #124]	; (800040c <MX_DMA_Init+0xd8>)
 800038e:	4a1d      	ldr	r2, [pc, #116]	; (8000404 <MX_DMA_Init+0xd0>)
 8000390:	621a      	str	r2, [r3, #32]
 8000392:	4b1c      	ldr	r3, [pc, #112]	; (8000404 <MX_DMA_Init+0xd0>)
 8000394:	4a1d      	ldr	r2, [pc, #116]	; (800040c <MX_DMA_Init+0xd8>)
 8000396:	625a      	str	r2, [r3, #36]	; 0x24
  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000398:	2200      	movs	r2, #0
 800039a:	2100      	movs	r1, #0
 800039c:	200f      	movs	r0, #15
 800039e:	f000 fba2 	bl	8000ae6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80003a2:	200f      	movs	r0, #15
 80003a4:	f000 fbbb 	bl	8000b1e <HAL_NVIC_EnableIRQ>
  /* Select Callbacks functions called after Transfer complete and Transfer error */
  HAL_DMA_RegisterCallback(&hdma_tim1_up, HAL_DMA_XFER_CPLT_CB_ID, TransferComplete);
 80003a8:	4a19      	ldr	r2, [pc, #100]	; (8000410 <MX_DMA_Init+0xdc>)
 80003aa:	2100      	movs	r1, #0
 80003ac:	4815      	ldr	r0, [pc, #84]	; (8000404 <MX_DMA_Init+0xd0>)
 80003ae:	f000 fd91 	bl	8000ed4 <HAL_DMA_RegisterCallback>
  HAL_DMA_RegisterCallback(&hdma_tim1_up, HAL_DMA_XFER_ERROR_CB_ID, TransferError);
 80003b2:	4a18      	ldr	r2, [pc, #96]	; (8000414 <MX_DMA_Init+0xe0>)
 80003b4:	2102      	movs	r1, #2
 80003b6:	4813      	ldr	r0, [pc, #76]	; (8000404 <MX_DMA_Init+0xd0>)
 80003b8:	f000 fd8c 	bl	8000ed4 <HAL_DMA_RegisterCallback>
  /* (Callbacks for DMA IRQs) */
//  htim1->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = data_tramsmitted_handler;
//  htim1->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = transmit_error_handler;
  /*  (Enable DMA) */
  HAL_DMA_Start_IT(htim1.hdma[TIM_DMA_ID_UPDATE],(uint32_t)&aOutputWave,
 80003bc:	4b13      	ldr	r3, [pc, #76]	; (800040c <MX_DMA_Init+0xd8>)
 80003be:	6a18      	ldr	r0, [r3, #32]
 80003c0:	4915      	ldr	r1, [pc, #84]	; (8000418 <MX_DMA_Init+0xe4>)
 80003c2:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80003c6:	4a15      	ldr	r2, [pc, #84]	; (800041c <MX_DMA_Init+0xe8>)
 80003c8:	f000 fc1e 	bl	8000c08 <HAL_DMA_Start_IT>
  		(uint32_t)&GPIOB->ODR, BUFFER_SIZE);
  /*  (Enable TIM for DMA events) */
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 80003cc:	4b0f      	ldr	r3, [pc, #60]	; (800040c <MX_DMA_Init+0xd8>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	68da      	ldr	r2, [r3, #12]
 80003d2:	4b0e      	ldr	r3, [pc, #56]	; (800040c <MX_DMA_Init+0xd8>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80003da:	60da      	str	r2, [r3, #12]

  /*  (Run TIM) */
  __HAL_TIM_ENABLE(&htim1);
 80003dc:	4b0b      	ldr	r3, [pc, #44]	; (800040c <MX_DMA_Init+0xd8>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	681a      	ldr	r2, [r3, #0]
 80003e2:	4b0a      	ldr	r3, [pc, #40]	; (800040c <MX_DMA_Init+0xd8>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	f042 0201 	orr.w	r2, r2, #1
 80003ea:	601a      	str	r2, [r3, #0]
  __HAL_RCC_TIM1_CLK_DISABLE();//stop clocking interrupt timer
 80003ec:	4b04      	ldr	r3, [pc, #16]	; (8000400 <MX_DMA_Init+0xcc>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a03      	ldr	r2, [pc, #12]	; (8000400 <MX_DMA_Init+0xcc>)
 80003f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80003f6:	6193      	str	r3, [r2, #24]
}
 80003f8:	bf00      	nop
 80003fa:	3708      	adds	r7, #8
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	40021000 	.word	0x40021000
 8000404:	20000744 	.word	0x20000744
 8000408:	40020058 	.word	0x40020058
 800040c:	200006fc 	.word	0x200006fc
 8000410:	08000585 	.word	0x08000585
 8000414:	080005f1 	.word	0x080005f1
 8000418:	20000200 	.word	0x20000200
 800041c:	40010c0c 	.word	0x40010c0c

08000420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b088      	sub	sp, #32
 8000424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000426:	f107 0310 	add.w	r3, r7, #16
 800042a:	2200      	movs	r2, #0
 800042c:	601a      	str	r2, [r3, #0]
 800042e:	605a      	str	r2, [r3, #4]
 8000430:	609a      	str	r2, [r3, #8]
 8000432:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000434:	4b4e      	ldr	r3, [pc, #312]	; (8000570 <MX_GPIO_Init+0x150>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	4a4d      	ldr	r2, [pc, #308]	; (8000570 <MX_GPIO_Init+0x150>)
 800043a:	f043 0310 	orr.w	r3, r3, #16
 800043e:	6193      	str	r3, [r2, #24]
 8000440:	4b4b      	ldr	r3, [pc, #300]	; (8000570 <MX_GPIO_Init+0x150>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	f003 0310 	and.w	r3, r3, #16
 8000448:	60fb      	str	r3, [r7, #12]
 800044a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800044c:	4b48      	ldr	r3, [pc, #288]	; (8000570 <MX_GPIO_Init+0x150>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	4a47      	ldr	r2, [pc, #284]	; (8000570 <MX_GPIO_Init+0x150>)
 8000452:	f043 0320 	orr.w	r3, r3, #32
 8000456:	6193      	str	r3, [r2, #24]
 8000458:	4b45      	ldr	r3, [pc, #276]	; (8000570 <MX_GPIO_Init+0x150>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	f003 0320 	and.w	r3, r3, #32
 8000460:	60bb      	str	r3, [r7, #8]
 8000462:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000464:	4b42      	ldr	r3, [pc, #264]	; (8000570 <MX_GPIO_Init+0x150>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	4a41      	ldr	r2, [pc, #260]	; (8000570 <MX_GPIO_Init+0x150>)
 800046a:	f043 0304 	orr.w	r3, r3, #4
 800046e:	6193      	str	r3, [r2, #24]
 8000470:	4b3f      	ldr	r3, [pc, #252]	; (8000570 <MX_GPIO_Init+0x150>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	f003 0304 	and.w	r3, r3, #4
 8000478:	607b      	str	r3, [r7, #4]
 800047a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800047c:	4b3c      	ldr	r3, [pc, #240]	; (8000570 <MX_GPIO_Init+0x150>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	4a3b      	ldr	r2, [pc, #236]	; (8000570 <MX_GPIO_Init+0x150>)
 8000482:	f043 0308 	orr.w	r3, r3, #8
 8000486:	6193      	str	r3, [r2, #24]
 8000488:	4b39      	ldr	r3, [pc, #228]	; (8000570 <MX_GPIO_Init+0x150>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	f003 0308 	and.w	r3, r3, #8
 8000490:	603b      	str	r3, [r7, #0]
 8000492:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_RESET);
 8000494:	2200      	movs	r2, #0
 8000496:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800049a:	4836      	ldr	r0, [pc, #216]	; (8000574 <MX_GPIO_Init+0x154>)
 800049c:	f000 feea 	bl	8001274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DACA_0_Pin|DACA_1_Pin|DACA_2_Pin|DACA_3_Pin
 80004a0:	2200      	movs	r2, #0
 80004a2:	f248 01ff 	movw	r1, #33023	; 0x80ff
 80004a6:	4834      	ldr	r0, [pc, #208]	; (8000578 <MX_GPIO_Init+0x158>)
 80004a8:	f000 fee4 	bl	8001274 <HAL_GPIO_WritePin>
                          |DACA_4_Pin|DACA_5_Pin|DACA_6_Pin|DACA_7_Pin
                          |LED_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DACB_0_Pin|DACB_1_Pin|DACB_2_Pin|DACB_10_Pin
 80004ac:	2200      	movs	r2, #0
 80004ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80004b2:	4832      	ldr	r0, [pc, #200]	; (800057c <MX_GPIO_Init+0x15c>)
 80004b4:	f000 fede 	bl	8001274 <HAL_GPIO_WritePin>
                          |DACB_11_Pin|DACB_12_Pin|DACB_13_Pin|DACB_14_Pin
                          |DACB_15_Pin|DACB_3_Pin|DACB_4_Pin|DACB_5_Pin
                          |DACB_6_Pin|DACB_7_Pin|DACB_8_Pin|DACB_9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_0_Pin */
  GPIO_InitStruct.Pin = LED_0_Pin;
 80004b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80004be:	2311      	movs	r3, #17
 80004c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c2:	2300      	movs	r3, #0
 80004c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c6:	2302      	movs	r3, #2
 80004c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_0_GPIO_Port, &GPIO_InitStruct);
 80004ca:	f107 0310 	add.w	r3, r7, #16
 80004ce:	4619      	mov	r1, r3
 80004d0:	4828      	ldr	r0, [pc, #160]	; (8000574 <MX_GPIO_Init+0x154>)
 80004d2:	f000 fd75 	bl	8000fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DACA_0_Pin DACA_1_Pin DACA_2_Pin DACA_3_Pin
                           DACA_4_Pin DACA_5_Pin DACA_6_Pin DACA_7_Pin */
  GPIO_InitStruct.Pin = DACA_0_Pin|DACA_1_Pin|DACA_2_Pin|DACA_3_Pin
 80004d6:	23ff      	movs	r3, #255	; 0xff
 80004d8:	613b      	str	r3, [r7, #16]
                          |DACA_4_Pin|DACA_5_Pin|DACA_6_Pin|DACA_7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004da:	2301      	movs	r3, #1
 80004dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004de:	2300      	movs	r3, #0
 80004e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e2:	2302      	movs	r3, #2
 80004e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e6:	f107 0310 	add.w	r3, r7, #16
 80004ea:	4619      	mov	r1, r3
 80004ec:	4822      	ldr	r0, [pc, #136]	; (8000578 <MX_GPIO_Init+0x158>)
 80004ee:	f000 fd67 	bl	8000fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DACB_0_Pin DACB_1_Pin DACB_2_Pin DACB_10_Pin
                           DACB_11_Pin DACB_12_Pin DACB_13_Pin DACB_14_Pin
                           DACB_15_Pin DACB_3_Pin DACB_4_Pin DACB_5_Pin
                           DACB_6_Pin DACB_7_Pin DACB_8_Pin DACB_9_Pin */
  GPIO_InitStruct.Pin = DACB_0_Pin|DACB_1_Pin|DACB_2_Pin|DACB_10_Pin
 80004f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004f6:	613b      	str	r3, [r7, #16]
                          |DACB_11_Pin|DACB_12_Pin|DACB_13_Pin|DACB_14_Pin
                          |DACB_15_Pin|DACB_3_Pin|DACB_4_Pin|DACB_5_Pin
                          |DACB_6_Pin|DACB_7_Pin|DACB_8_Pin|DACB_9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f8:	2301      	movs	r3, #1
 80004fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fc:	2300      	movs	r3, #0
 80004fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000500:	2303      	movs	r3, #3
 8000502:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000504:	f107 0310 	add.w	r3, r7, #16
 8000508:	4619      	mov	r1, r3
 800050a:	481c      	ldr	r0, [pc, #112]	; (800057c <MX_GPIO_Init+0x15c>)
 800050c:	f000 fd58 	bl	8000fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB_MODE_Pin PB_UP_Pin PB_DOWN_Pin */
  GPIO_InitStruct.Pin = PB_MODE_Pin|PB_UP_Pin|PB_DOWN_Pin;
 8000510:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000514:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000516:	4b1a      	ldr	r3, [pc, #104]	; (8000580 <MX_GPIO_Init+0x160>)
 8000518:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051a:	2300      	movs	r3, #0
 800051c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051e:	f107 0310 	add.w	r3, r7, #16
 8000522:	4619      	mov	r1, r3
 8000524:	4814      	ldr	r0, [pc, #80]	; (8000578 <MX_GPIO_Init+0x158>)
 8000526:	f000 fd4b 	bl	8000fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_1_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin;
 800052a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800052e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000530:	2311      	movs	r3, #17
 8000532:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000534:	2300      	movs	r3, #0
 8000536:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000538:	2302      	movs	r3, #2
 800053a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 800053c:	f107 0310 	add.w	r3, r7, #16
 8000540:	4619      	mov	r1, r3
 8000542:	480d      	ldr	r0, [pc, #52]	; (8000578 <MX_GPIO_Init+0x158>)
 8000544:	f000 fd3c 	bl	8000fc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000548:	2200      	movs	r2, #0
 800054a:	2101      	movs	r1, #1
 800054c:	2017      	movs	r0, #23
 800054e:	f000 faca 	bl	8000ae6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000552:	2017      	movs	r0, #23
 8000554:	f000 fae3 	bl	8000b1e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000558:	2200      	movs	r2, #0
 800055a:	2100      	movs	r1, #0
 800055c:	2028      	movs	r0, #40	; 0x28
 800055e:	f000 fac2 	bl	8000ae6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000562:	2028      	movs	r0, #40	; 0x28
 8000564:	f000 fadb 	bl	8000b1e <HAL_NVIC_EnableIRQ>

}
 8000568:	bf00      	nop
 800056a:	3720      	adds	r7, #32
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40021000 	.word	0x40021000
 8000574:	40011000 	.word	0x40011000
 8000578:	40010800 	.word	0x40010800
 800057c:	40010c00 	.word	0x40010c00
 8000580:	10210000 	.word	0x10210000

08000584 <TransferComplete>:

/* USER CODE BEGIN 4 */
/*  (DMA IRQ callbacks) */
void TransferComplete(DMA_HandleTypeDef *hdma)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
    /* Stop timer */
    __HAL_TIM_DISABLE(&htim1);
 800058c:	4b15      	ldr	r3, [pc, #84]	; (80005e4 <TransferComplete+0x60>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	6a1a      	ldr	r2, [r3, #32]
 8000592:	f241 1311 	movw	r3, #4369	; 0x1111
 8000596:	4013      	ands	r3, r2
 8000598:	2b00      	cmp	r3, #0
 800059a:	d10f      	bne.n	80005bc <TransferComplete+0x38>
 800059c:	4b11      	ldr	r3, [pc, #68]	; (80005e4 <TransferComplete+0x60>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	6a1a      	ldr	r2, [r3, #32]
 80005a2:	f240 4344 	movw	r3, #1092	; 0x444
 80005a6:	4013      	ands	r3, r2
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d107      	bne.n	80005bc <TransferComplete+0x38>
 80005ac:	4b0d      	ldr	r3, [pc, #52]	; (80005e4 <TransferComplete+0x60>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	681a      	ldr	r2, [r3, #0]
 80005b2:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <TransferComplete+0x60>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	f022 0201 	bic.w	r2, r2, #1
 80005ba:	601a      	str	r2, [r3, #0]
    /* Reconfigure DMA */
    HAL_DMA_Start_IT(htim1.hdma[TIM_DMA_ID_UPDATE],(uint32_t)&aOutputWave,
 80005bc:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <TransferComplete+0x60>)
 80005be:	6a18      	ldr	r0, [r3, #32]
 80005c0:	4909      	ldr	r1, [pc, #36]	; (80005e8 <TransferComplete+0x64>)
 80005c2:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80005c6:	4a09      	ldr	r2, [pc, #36]	; (80005ec <TransferComplete+0x68>)
 80005c8:	f000 fb1e 	bl	8000c08 <HAL_DMA_Start_IT>
    		(uint32_t)&GPIOB->ODR, BUFFER_SIZE);
    /* Start timer for new data transmit */
    __HAL_TIM_ENABLE(&htim1);
 80005cc:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <TransferComplete+0x60>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	681a      	ldr	r2, [r3, #0]
 80005d2:	4b04      	ldr	r3, [pc, #16]	; (80005e4 <TransferComplete+0x60>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f042 0201 	orr.w	r2, r2, #1
 80005da:	601a      	str	r2, [r3, #0]
}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	200006fc 	.word	0x200006fc
 80005e8:	20000200 	.word	0x20000200
 80005ec:	40010c0c 	.word	0x40010c0c

080005f0 <TransferError>:

void TransferError(DMA_HandleTypeDef *hdma)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
    /* Stop timer */
    __HAL_TIM_DISABLE(&htim1);
 80005f8:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <TransferError+0x44>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	6a1a      	ldr	r2, [r3, #32]
 80005fe:	f241 1311 	movw	r3, #4369	; 0x1111
 8000602:	4013      	ands	r3, r2
 8000604:	2b00      	cmp	r3, #0
 8000606:	d10f      	bne.n	8000628 <TransferError+0x38>
 8000608:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <TransferError+0x44>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	6a1a      	ldr	r2, [r3, #32]
 800060e:	f240 4344 	movw	r3, #1092	; 0x444
 8000612:	4013      	ands	r3, r2
 8000614:	2b00      	cmp	r3, #0
 8000616:	d107      	bne.n	8000628 <TransferError+0x38>
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <TransferError+0x44>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	4b05      	ldr	r3, [pc, #20]	; (8000634 <TransferError+0x44>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f022 0201 	bic.w	r2, r2, #1
 8000626:	601a      	str	r2, [r3, #0]
    /* !!! Some error handle for future implementation */
}
 8000628:	bf00      	nop
 800062a:	370c      	adds	r7, #12
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	200006fc 	.word	0x200006fc

08000638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800063c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800063e:	e7fe      	b.n	800063e <Error_Handler+0x6>

08000640 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000646:	4b15      	ldr	r3, [pc, #84]	; (800069c <HAL_MspInit+0x5c>)
 8000648:	699b      	ldr	r3, [r3, #24]
 800064a:	4a14      	ldr	r2, [pc, #80]	; (800069c <HAL_MspInit+0x5c>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	6193      	str	r3, [r2, #24]
 8000652:	4b12      	ldr	r3, [pc, #72]	; (800069c <HAL_MspInit+0x5c>)
 8000654:	699b      	ldr	r3, [r3, #24]
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800065e:	4b0f      	ldr	r3, [pc, #60]	; (800069c <HAL_MspInit+0x5c>)
 8000660:	69db      	ldr	r3, [r3, #28]
 8000662:	4a0e      	ldr	r2, [pc, #56]	; (800069c <HAL_MspInit+0x5c>)
 8000664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000668:	61d3      	str	r3, [r2, #28]
 800066a:	4b0c      	ldr	r3, [pc, #48]	; (800069c <HAL_MspInit+0x5c>)
 800066c:	69db      	ldr	r3, [r3, #28]
 800066e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000676:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <HAL_MspInit+0x60>)
 8000678:	685b      	ldr	r3, [r3, #4]
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	4a04      	ldr	r2, [pc, #16]	; (80006a0 <HAL_MspInit+0x60>)
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000692:	bf00      	nop
 8000694:	3714      	adds	r7, #20
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr
 800069c:	40021000 	.word	0x40021000
 80006a0:	40010000 	.word	0x40010000

080006a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a1d      	ldr	r2, [pc, #116]	; (8000728 <HAL_TIM_Base_MspInit+0x84>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d134      	bne.n	8000720 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80006b6:	4b1d      	ldr	r3, [pc, #116]	; (800072c <HAL_TIM_Base_MspInit+0x88>)
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	4a1c      	ldr	r2, [pc, #112]	; (800072c <HAL_TIM_Base_MspInit+0x88>)
 80006bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006c0:	6193      	str	r3, [r2, #24]
 80006c2:	4b1a      	ldr	r3, [pc, #104]	; (800072c <HAL_TIM_Base_MspInit+0x88>)
 80006c4:	699b      	ldr	r3, [r3, #24]
 80006c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA1_Channel5;
 80006ce:	4b18      	ldr	r3, [pc, #96]	; (8000730 <HAL_TIM_Base_MspInit+0x8c>)
 80006d0:	4a18      	ldr	r2, [pc, #96]	; (8000734 <HAL_TIM_Base_MspInit+0x90>)
 80006d2:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80006d4:	4b16      	ldr	r3, [pc, #88]	; (8000730 <HAL_TIM_Base_MspInit+0x8c>)
 80006d6:	2210      	movs	r2, #16
 80006d8:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80006da:	4b15      	ldr	r3, [pc, #84]	; (8000730 <HAL_TIM_Base_MspInit+0x8c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 80006e0:	4b13      	ldr	r3, [pc, #76]	; (8000730 <HAL_TIM_Base_MspInit+0x8c>)
 80006e2:	2280      	movs	r2, #128	; 0x80
 80006e4:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006e6:	4b12      	ldr	r3, [pc, #72]	; (8000730 <HAL_TIM_Base_MspInit+0x8c>)
 80006e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006ec:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006ee:	4b10      	ldr	r3, [pc, #64]	; (8000730 <HAL_TIM_Base_MspInit+0x8c>)
 80006f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006f4:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <HAL_TIM_Base_MspInit+0x8c>)
 80006f8:	2220      	movs	r2, #32
 80006fa:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <HAL_TIM_Base_MspInit+0x8c>)
 80006fe:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000702:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8000704:	480a      	ldr	r0, [pc, #40]	; (8000730 <HAL_TIM_Base_MspInit+0x8c>)
 8000706:	f000 fa25 	bl	8000b54 <HAL_DMA_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <HAL_TIM_Base_MspInit+0x70>
    {
      Error_Handler();
 8000710:	f7ff ff92 	bl	8000638 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4a06      	ldr	r2, [pc, #24]	; (8000730 <HAL_TIM_Base_MspInit+0x8c>)
 8000718:	621a      	str	r2, [r3, #32]
 800071a:	4a05      	ldr	r2, [pc, #20]	; (8000730 <HAL_TIM_Base_MspInit+0x8c>)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000720:	bf00      	nop
 8000722:	3710      	adds	r7, #16
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40012c00 	.word	0x40012c00
 800072c:	40021000 	.word	0x40021000
 8000730:	20000744 	.word	0x20000744
 8000734:	40020058 	.word	0x40020058

08000738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800073c:	e7fe      	b.n	800073c <NMI_Handler+0x4>

0800073e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000742:	e7fe      	b.n	8000742 <HardFault_Handler+0x4>

08000744 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000748:	e7fe      	b.n	8000748 <MemManage_Handler+0x4>

0800074a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800074e:	e7fe      	b.n	800074e <BusFault_Handler+0x4>

08000750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000754:	e7fe      	b.n	8000754 <UsageFault_Handler+0x4>

08000756 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800075a:	bf00      	nop
 800075c:	46bd      	mov	sp, r7
 800075e:	bc80      	pop	{r7}
 8000760:	4770      	bx	lr

08000762 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr

0800076e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr

0800077a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800077a:	b580      	push	{r7, lr}
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800077e:	f000 f89d 	bl	80008bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 800078c:	4802      	ldr	r0, [pc, #8]	; (8000798 <DMA1_Channel5_IRQHandler+0x10>)
 800078e:	f000 fa9b 	bl	8000cc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000744 	.word	0x20000744

0800079c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80007a0:	4802      	ldr	r0, [pc, #8]	; (80007ac <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80007a2:	f000 feec 	bl	800157e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20001424 	.word	0x20001424

080007b0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80007b4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80007b8:	f000 fd8e 	bl	80012d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80007bc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007c0:	f000 fd8a 	bl	80012d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80007cc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80007d0:	f000 fd82 	bl	80012d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr

080007e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80007e4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80007e6:	e003      	b.n	80007f0 <LoopCopyDataInit>

080007e8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80007e8:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80007ea:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80007ec:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80007ee:	3104      	adds	r1, #4

080007f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80007f0:	480a      	ldr	r0, [pc, #40]	; (800081c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80007f4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80007f6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80007f8:	d3f6      	bcc.n	80007e8 <CopyDataInit>
  ldr r2, =_sbss
 80007fa:	4a0a      	ldr	r2, [pc, #40]	; (8000824 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80007fc:	e002      	b.n	8000804 <LoopFillZerobss>

080007fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80007fe:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000800:	f842 3b04 	str.w	r3, [r2], #4

08000804 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000804:	4b08      	ldr	r3, [pc, #32]	; (8000828 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000806:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000808:	d3f9      	bcc.n	80007fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800080a:	f7ff ffe5 	bl	80007d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800080e:	f007 f939 	bl	8007a84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000812:	f7ff fc9b 	bl	800014c <main>
  bx lr
 8000816:	4770      	bx	lr
  ldr r3, =_sidata
 8000818:	08008b20 	.word	0x08008b20
  ldr r0, =_sdata
 800081c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000820:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8000824:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8000828:	20001714 	.word	0x20001714

0800082c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800082c:	e7fe      	b.n	800082c <ADC1_2_IRQHandler>
	...

08000830 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000834:	4b08      	ldr	r3, [pc, #32]	; (8000858 <HAL_Init+0x28>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a07      	ldr	r2, [pc, #28]	; (8000858 <HAL_Init+0x28>)
 800083a:	f043 0310 	orr.w	r3, r3, #16
 800083e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000840:	2003      	movs	r0, #3
 8000842:	f000 f945 	bl	8000ad0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000846:	2000      	movs	r0, #0
 8000848:	f000 f808 	bl	800085c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800084c:	f7ff fef8 	bl	8000640 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000850:	2300      	movs	r3, #0
}
 8000852:	4618      	mov	r0, r3
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40022000 	.word	0x40022000

0800085c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000864:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <HAL_InitTick+0x54>)
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <HAL_InitTick+0x58>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	4619      	mov	r1, r3
 800086e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000872:	fbb3 f3f1 	udiv	r3, r3, r1
 8000876:	fbb2 f3f3 	udiv	r3, r2, r3
 800087a:	4618      	mov	r0, r3
 800087c:	f000 f95d 	bl	8000b3a <HAL_SYSTICK_Config>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000886:	2301      	movs	r3, #1
 8000888:	e00e      	b.n	80008a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2b0f      	cmp	r3, #15
 800088e:	d80a      	bhi.n	80008a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000890:	2200      	movs	r2, #0
 8000892:	6879      	ldr	r1, [r7, #4]
 8000894:	f04f 30ff 	mov.w	r0, #4294967295
 8000898:	f000 f925 	bl	8000ae6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800089c:	4a06      	ldr	r2, [pc, #24]	; (80008b8 <HAL_InitTick+0x5c>)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008a2:	2300      	movs	r3, #0
 80008a4:	e000      	b.n	80008a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008a6:	2301      	movs	r3, #1
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000000 	.word	0x20000000
 80008b4:	20000008 	.word	0x20000008
 80008b8:	20000004 	.word	0x20000004

080008bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008c0:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <HAL_IncTick+0x1c>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	461a      	mov	r2, r3
 80008c6:	4b05      	ldr	r3, [pc, #20]	; (80008dc <HAL_IncTick+0x20>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4413      	add	r3, r2
 80008cc:	4a03      	ldr	r2, [pc, #12]	; (80008dc <HAL_IncTick+0x20>)
 80008ce:	6013      	str	r3, [r2, #0]
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bc80      	pop	{r7}
 80008d6:	4770      	bx	lr
 80008d8:	20000008 	.word	0x20000008
 80008dc:	20000788 	.word	0x20000788

080008e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  return uwTick;
 80008e4:	4b02      	ldr	r3, [pc, #8]	; (80008f0 <HAL_GetTick+0x10>)
 80008e6:	681b      	ldr	r3, [r3, #0]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr
 80008f0:	20000788 	.word	0x20000788

080008f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008fc:	f7ff fff0 	bl	80008e0 <HAL_GetTick>
 8000900:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800090c:	d005      	beq.n	800091a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <HAL_Delay+0x40>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	461a      	mov	r2, r3
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	4413      	add	r3, r2
 8000918:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800091a:	bf00      	nop
 800091c:	f7ff ffe0 	bl	80008e0 <HAL_GetTick>
 8000920:	4602      	mov	r2, r0
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	68fa      	ldr	r2, [r7, #12]
 8000928:	429a      	cmp	r2, r3
 800092a:	d8f7      	bhi.n	800091c <HAL_Delay+0x28>
  {
  }
}
 800092c:	bf00      	nop
 800092e:	3710      	adds	r7, #16
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000008 	.word	0x20000008

08000938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	f003 0307 	and.w	r3, r3, #7
 8000946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <__NVIC_SetPriorityGrouping+0x44>)
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800094e:	68ba      	ldr	r2, [r7, #8]
 8000950:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000954:	4013      	ands	r3, r2
 8000956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000960:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800096a:	4a04      	ldr	r2, [pc, #16]	; (800097c <__NVIC_SetPriorityGrouping+0x44>)
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	60d3      	str	r3, [r2, #12]
}
 8000970:	bf00      	nop
 8000972:	3714      	adds	r7, #20
 8000974:	46bd      	mov	sp, r7
 8000976:	bc80      	pop	{r7}
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000984:	4b04      	ldr	r3, [pc, #16]	; (8000998 <__NVIC_GetPriorityGrouping+0x18>)
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	0a1b      	lsrs	r3, r3, #8
 800098a:	f003 0307 	and.w	r3, r3, #7
}
 800098e:	4618      	mov	r0, r3
 8000990:	46bd      	mov	sp, r7
 8000992:	bc80      	pop	{r7}
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	db0b      	blt.n	80009c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	f003 021f 	and.w	r2, r3, #31
 80009b4:	4906      	ldr	r1, [pc, #24]	; (80009d0 <__NVIC_EnableIRQ+0x34>)
 80009b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ba:	095b      	lsrs	r3, r3, #5
 80009bc:	2001      	movs	r0, #1
 80009be:	fa00 f202 	lsl.w	r2, r0, r2
 80009c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009c6:	bf00      	nop
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr
 80009d0:	e000e100 	.word	0xe000e100

080009d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	6039      	str	r1, [r7, #0]
 80009de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	db0a      	blt.n	80009fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	b2da      	uxtb	r2, r3
 80009ec:	490c      	ldr	r1, [pc, #48]	; (8000a20 <__NVIC_SetPriority+0x4c>)
 80009ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f2:	0112      	lsls	r2, r2, #4
 80009f4:	b2d2      	uxtb	r2, r2
 80009f6:	440b      	add	r3, r1
 80009f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009fc:	e00a      	b.n	8000a14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	b2da      	uxtb	r2, r3
 8000a02:	4908      	ldr	r1, [pc, #32]	; (8000a24 <__NVIC_SetPriority+0x50>)
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	f003 030f 	and.w	r3, r3, #15
 8000a0a:	3b04      	subs	r3, #4
 8000a0c:	0112      	lsls	r2, r2, #4
 8000a0e:	b2d2      	uxtb	r2, r2
 8000a10:	440b      	add	r3, r1
 8000a12:	761a      	strb	r2, [r3, #24]
}
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000e100 	.word	0xe000e100
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b089      	sub	sp, #36	; 0x24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	f003 0307 	and.w	r3, r3, #7
 8000a3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a3c:	69fb      	ldr	r3, [r7, #28]
 8000a3e:	f1c3 0307 	rsb	r3, r3, #7
 8000a42:	2b04      	cmp	r3, #4
 8000a44:	bf28      	it	cs
 8000a46:	2304      	movcs	r3, #4
 8000a48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a4a:	69fb      	ldr	r3, [r7, #28]
 8000a4c:	3304      	adds	r3, #4
 8000a4e:	2b06      	cmp	r3, #6
 8000a50:	d902      	bls.n	8000a58 <NVIC_EncodePriority+0x30>
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	3b03      	subs	r3, #3
 8000a56:	e000      	b.n	8000a5a <NVIC_EncodePriority+0x32>
 8000a58:	2300      	movs	r3, #0
 8000a5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a60:	69bb      	ldr	r3, [r7, #24]
 8000a62:	fa02 f303 	lsl.w	r3, r2, r3
 8000a66:	43da      	mvns	r2, r3
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	401a      	ands	r2, r3
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a70:	f04f 31ff 	mov.w	r1, #4294967295
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	fa01 f303 	lsl.w	r3, r1, r3
 8000a7a:	43d9      	mvns	r1, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a80:	4313      	orrs	r3, r2
         );
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3724      	adds	r7, #36	; 0x24
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr

08000a8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a9c:	d301      	bcc.n	8000aa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e00f      	b.n	8000ac2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aa2:	4a0a      	ldr	r2, [pc, #40]	; (8000acc <SysTick_Config+0x40>)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	3b01      	subs	r3, #1
 8000aa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aaa:	210f      	movs	r1, #15
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	f7ff ff90 	bl	80009d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ab4:	4b05      	ldr	r3, [pc, #20]	; (8000acc <SysTick_Config+0x40>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aba:	4b04      	ldr	r3, [pc, #16]	; (8000acc <SysTick_Config+0x40>)
 8000abc:	2207      	movs	r2, #7
 8000abe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ac0:	2300      	movs	r3, #0
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	e000e010 	.word	0xe000e010

08000ad0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f7ff ff2d 	bl	8000938 <__NVIC_SetPriorityGrouping>
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b086      	sub	sp, #24
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	4603      	mov	r3, r0
 8000aee:	60b9      	str	r1, [r7, #8]
 8000af0:	607a      	str	r2, [r7, #4]
 8000af2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000af8:	f7ff ff42 	bl	8000980 <__NVIC_GetPriorityGrouping>
 8000afc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	68b9      	ldr	r1, [r7, #8]
 8000b02:	6978      	ldr	r0, [r7, #20]
 8000b04:	f7ff ff90 	bl	8000a28 <NVIC_EncodePriority>
 8000b08:	4602      	mov	r2, r0
 8000b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b0e:	4611      	mov	r1, r2
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff ff5f 	bl	80009d4 <__NVIC_SetPriority>
}
 8000b16:	bf00      	nop
 8000b18:	3718      	adds	r7, #24
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b082      	sub	sp, #8
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	4603      	mov	r3, r0
 8000b26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff ff35 	bl	800099c <__NVIC_EnableIRQ>
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f7ff ffa2 	bl	8000a8c <SysTick_Config>
 8000b48:	4603      	mov	r3, r0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
	...

08000b54 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d101      	bne.n	8000b6a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	e043      	b.n	8000bf2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	4b22      	ldr	r3, [pc, #136]	; (8000bfc <HAL_DMA_Init+0xa8>)
 8000b72:	4413      	add	r3, r2
 8000b74:	4a22      	ldr	r2, [pc, #136]	; (8000c00 <HAL_DMA_Init+0xac>)
 8000b76:	fba2 2303 	umull	r2, r3, r2, r3
 8000b7a:	091b      	lsrs	r3, r3, #4
 8000b7c:	009a      	lsls	r2, r3, #2
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4a1f      	ldr	r2, [pc, #124]	; (8000c04 <HAL_DMA_Init+0xb0>)
 8000b86:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2202      	movs	r2, #2
 8000b8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000b9e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000ba2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000bac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	68db      	ldr	r3, [r3, #12]
 8000bb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	695b      	ldr	r3, [r3, #20]
 8000bbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	69db      	ldr	r3, [r3, #28]
 8000bca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000bcc:	68fa      	ldr	r2, [r7, #12]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	68fa      	ldr	r2, [r7, #12]
 8000bd8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2201      	movs	r2, #1
 8000be4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2200      	movs	r2, #0
 8000bec:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3714      	adds	r7, #20
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr
 8000bfc:	bffdfff8 	.word	0xbffdfff8
 8000c00:	cccccccd 	.word	0xcccccccd
 8000c04:	40020000 	.word	0x40020000

08000c08 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
 8000c14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000c16:	2300      	movs	r3, #0
 8000c18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d101      	bne.n	8000c28 <HAL_DMA_Start_IT+0x20>
 8000c24:	2302      	movs	r3, #2
 8000c26:	e04a      	b.n	8000cbe <HAL_DMA_Start_IT+0xb6>
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d13a      	bne.n	8000cb0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	2202      	movs	r2, #2
 8000c3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	2200      	movs	r2, #0
 8000c46:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f022 0201 	bic.w	r2, r2, #1
 8000c56:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	68b9      	ldr	r1, [r7, #8]
 8000c5e:	68f8      	ldr	r0, [r7, #12]
 8000c60:	f000 f980 	bl	8000f64 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d008      	beq.n	8000c7e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f042 020e 	orr.w	r2, r2, #14
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	e00f      	b.n	8000c9e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f022 0204 	bic.w	r2, r2, #4
 8000c8c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f042 020a 	orr.w	r2, r2, #10
 8000c9c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f042 0201 	orr.w	r2, r2, #1
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	e005      	b.n	8000cbc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3718      	adds	r7, #24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce4:	2204      	movs	r2, #4
 8000ce6:	409a      	lsls	r2, r3
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	4013      	ands	r3, r2
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d04f      	beq.n	8000d90 <HAL_DMA_IRQHandler+0xc8>
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	f003 0304 	and.w	r3, r3, #4
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d04a      	beq.n	8000d90 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f003 0320 	and.w	r3, r3, #32
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d107      	bne.n	8000d18 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f022 0204 	bic.w	r2, r2, #4
 8000d16:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a66      	ldr	r2, [pc, #408]	; (8000eb8 <HAL_DMA_IRQHandler+0x1f0>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d029      	beq.n	8000d76 <HAL_DMA_IRQHandler+0xae>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a65      	ldr	r2, [pc, #404]	; (8000ebc <HAL_DMA_IRQHandler+0x1f4>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d022      	beq.n	8000d72 <HAL_DMA_IRQHandler+0xaa>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a63      	ldr	r2, [pc, #396]	; (8000ec0 <HAL_DMA_IRQHandler+0x1f8>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d01a      	beq.n	8000d6c <HAL_DMA_IRQHandler+0xa4>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a62      	ldr	r2, [pc, #392]	; (8000ec4 <HAL_DMA_IRQHandler+0x1fc>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d012      	beq.n	8000d66 <HAL_DMA_IRQHandler+0x9e>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a60      	ldr	r2, [pc, #384]	; (8000ec8 <HAL_DMA_IRQHandler+0x200>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d00a      	beq.n	8000d60 <HAL_DMA_IRQHandler+0x98>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a5f      	ldr	r2, [pc, #380]	; (8000ecc <HAL_DMA_IRQHandler+0x204>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d102      	bne.n	8000d5a <HAL_DMA_IRQHandler+0x92>
 8000d54:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d58:	e00e      	b.n	8000d78 <HAL_DMA_IRQHandler+0xb0>
 8000d5a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000d5e:	e00b      	b.n	8000d78 <HAL_DMA_IRQHandler+0xb0>
 8000d60:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000d64:	e008      	b.n	8000d78 <HAL_DMA_IRQHandler+0xb0>
 8000d66:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d6a:	e005      	b.n	8000d78 <HAL_DMA_IRQHandler+0xb0>
 8000d6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d70:	e002      	b.n	8000d78 <HAL_DMA_IRQHandler+0xb0>
 8000d72:	2340      	movs	r3, #64	; 0x40
 8000d74:	e000      	b.n	8000d78 <HAL_DMA_IRQHandler+0xb0>
 8000d76:	2304      	movs	r3, #4
 8000d78:	4a55      	ldr	r2, [pc, #340]	; (8000ed0 <HAL_DMA_IRQHandler+0x208>)
 8000d7a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	f000 8094 	beq.w	8000eae <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000d8e:	e08e      	b.n	8000eae <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d94:	2202      	movs	r2, #2
 8000d96:	409a      	lsls	r2, r3
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d056      	beq.n	8000e4e <HAL_DMA_IRQHandler+0x186>
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d051      	beq.n	8000e4e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f003 0320 	and.w	r3, r3, #32
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d10b      	bne.n	8000dd0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f022 020a 	bic.w	r2, r2, #10
 8000dc6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2201      	movs	r2, #1
 8000dcc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a38      	ldr	r2, [pc, #224]	; (8000eb8 <HAL_DMA_IRQHandler+0x1f0>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d029      	beq.n	8000e2e <HAL_DMA_IRQHandler+0x166>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a37      	ldr	r2, [pc, #220]	; (8000ebc <HAL_DMA_IRQHandler+0x1f4>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d022      	beq.n	8000e2a <HAL_DMA_IRQHandler+0x162>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a35      	ldr	r2, [pc, #212]	; (8000ec0 <HAL_DMA_IRQHandler+0x1f8>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d01a      	beq.n	8000e24 <HAL_DMA_IRQHandler+0x15c>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a34      	ldr	r2, [pc, #208]	; (8000ec4 <HAL_DMA_IRQHandler+0x1fc>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d012      	beq.n	8000e1e <HAL_DMA_IRQHandler+0x156>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a32      	ldr	r2, [pc, #200]	; (8000ec8 <HAL_DMA_IRQHandler+0x200>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d00a      	beq.n	8000e18 <HAL_DMA_IRQHandler+0x150>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a31      	ldr	r2, [pc, #196]	; (8000ecc <HAL_DMA_IRQHandler+0x204>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d102      	bne.n	8000e12 <HAL_DMA_IRQHandler+0x14a>
 8000e0c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000e10:	e00e      	b.n	8000e30 <HAL_DMA_IRQHandler+0x168>
 8000e12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e16:	e00b      	b.n	8000e30 <HAL_DMA_IRQHandler+0x168>
 8000e18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e1c:	e008      	b.n	8000e30 <HAL_DMA_IRQHandler+0x168>
 8000e1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e22:	e005      	b.n	8000e30 <HAL_DMA_IRQHandler+0x168>
 8000e24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e28:	e002      	b.n	8000e30 <HAL_DMA_IRQHandler+0x168>
 8000e2a:	2320      	movs	r3, #32
 8000e2c:	e000      	b.n	8000e30 <HAL_DMA_IRQHandler+0x168>
 8000e2e:	2302      	movs	r3, #2
 8000e30:	4a27      	ldr	r2, [pc, #156]	; (8000ed0 <HAL_DMA_IRQHandler+0x208>)
 8000e32:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2200      	movs	r2, #0
 8000e38:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d034      	beq.n	8000eae <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000e4c:	e02f      	b.n	8000eae <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	2208      	movs	r2, #8
 8000e54:	409a      	lsls	r2, r3
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d028      	beq.n	8000eb0 <HAL_DMA_IRQHandler+0x1e8>
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	f003 0308 	and.w	r3, r3, #8
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d023      	beq.n	8000eb0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f022 020e 	bic.w	r2, r2, #14
 8000e76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e80:	2101      	movs	r1, #1
 8000e82:	fa01 f202 	lsl.w	r2, r1, r2
 8000e86:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2201      	movs	r2, #1
 8000e92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d004      	beq.n	8000eb0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	4798      	blx	r3
    }
  }
  return;
 8000eae:	bf00      	nop
 8000eb0:	bf00      	nop
}
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40020008 	.word	0x40020008
 8000ebc:	4002001c 	.word	0x4002001c
 8000ec0:	40020030 	.word	0x40020030
 8000ec4:	40020044 	.word	0x40020044
 8000ec8:	40020058 	.word	0x40020058
 8000ecc:	4002006c 	.word	0x4002006c
 8000ed0:	40020000 	.word	0x40020000

08000ed4 <HAL_DMA_RegisterCallback>:
  * @param pCallback: pointer to private callbacsk function which has pointer to 
  *                   a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                          
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b087      	sub	sp, #28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	460b      	mov	r3, r1
 8000ede:	607a      	str	r2, [r7, #4]
 8000ee0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	75fb      	strb	r3, [r7, #23]
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d101      	bne.n	8000ef4 <HAL_DMA_RegisterCallback+0x20>
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	e032      	b.n	8000f5a <HAL_DMA_RegisterCallback+0x86>
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d122      	bne.n	8000f4c <HAL_DMA_RegisterCallback+0x78>
  {
    switch (CallbackID)
 8000f06:	7afb      	ldrb	r3, [r7, #11]
 8000f08:	2b03      	cmp	r3, #3
 8000f0a:	d81b      	bhi.n	8000f44 <HAL_DMA_RegisterCallback+0x70>
 8000f0c:	a201      	add	r2, pc, #4	; (adr r2, 8000f14 <HAL_DMA_RegisterCallback+0x40>)
 8000f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f12:	bf00      	nop
 8000f14:	08000f25 	.word	0x08000f25
 8000f18:	08000f2d 	.word	0x08000f2d
 8000f1c:	08000f35 	.word	0x08000f35
 8000f20:	08000f3d 	.word	0x08000f3d
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8000f2a:	e011      	b.n	8000f50 <HAL_DMA_RegisterCallback+0x7c>
      
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	62da      	str	r2, [r3, #44]	; 0x2c
      break;         
 8000f32:	e00d      	b.n	8000f50 <HAL_DMA_RegisterCallback+0x7c>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	631a      	str	r2, [r3, #48]	; 0x30
      break;         
 8000f3a:	e009      	b.n	8000f50 <HAL_DMA_RegisterCallback+0x7c>
      
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	635a      	str	r2, [r3, #52]	; 0x34
      break; 
 8000f42:	e005      	b.n	8000f50 <HAL_DMA_RegisterCallback+0x7c>
      
    default:
      status = HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	75fb      	strb	r3, [r7, #23]
      break;                                                            
 8000f48:	bf00      	nop
 8000f4a:	e001      	b.n	8000f50 <HAL_DMA_RegisterCallback+0x7c>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	75fb      	strb	r3, [r7, #23]
  } 
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	2200      	movs	r2, #0
 8000f54:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status;
 8000f58:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	371c      	adds	r7, #28
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr

08000f64 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
 8000f70:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f80:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	683a      	ldr	r2, [r7, #0]
 8000f88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	2b10      	cmp	r3, #16
 8000f90:	d108      	bne.n	8000fa4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	68ba      	ldr	r2, [r7, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000fa2:	e007      	b.n	8000fb4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	68ba      	ldr	r2, [r7, #8]
 8000faa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	60da      	str	r2, [r3, #12]
}
 8000fb4:	bf00      	nop
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bc80      	pop	{r7}
 8000fbc:	4770      	bx	lr
	...

08000fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b08b      	sub	sp, #44	; 0x2c
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fd2:	e127      	b.n	8001224 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	69fa      	ldr	r2, [r7, #28]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	f040 8116 	bne.w	800121e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	2b12      	cmp	r3, #18
 8000ff8:	d034      	beq.n	8001064 <HAL_GPIO_Init+0xa4>
 8000ffa:	2b12      	cmp	r3, #18
 8000ffc:	d80d      	bhi.n	800101a <HAL_GPIO_Init+0x5a>
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d02b      	beq.n	800105a <HAL_GPIO_Init+0x9a>
 8001002:	2b02      	cmp	r3, #2
 8001004:	d804      	bhi.n	8001010 <HAL_GPIO_Init+0x50>
 8001006:	2b00      	cmp	r3, #0
 8001008:	d031      	beq.n	800106e <HAL_GPIO_Init+0xae>
 800100a:	2b01      	cmp	r3, #1
 800100c:	d01c      	beq.n	8001048 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800100e:	e048      	b.n	80010a2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001010:	2b03      	cmp	r3, #3
 8001012:	d043      	beq.n	800109c <HAL_GPIO_Init+0xdc>
 8001014:	2b11      	cmp	r3, #17
 8001016:	d01b      	beq.n	8001050 <HAL_GPIO_Init+0x90>
          break;
 8001018:	e043      	b.n	80010a2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800101a:	4a89      	ldr	r2, [pc, #548]	; (8001240 <HAL_GPIO_Init+0x280>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d026      	beq.n	800106e <HAL_GPIO_Init+0xae>
 8001020:	4a87      	ldr	r2, [pc, #540]	; (8001240 <HAL_GPIO_Init+0x280>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d806      	bhi.n	8001034 <HAL_GPIO_Init+0x74>
 8001026:	4a87      	ldr	r2, [pc, #540]	; (8001244 <HAL_GPIO_Init+0x284>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d020      	beq.n	800106e <HAL_GPIO_Init+0xae>
 800102c:	4a86      	ldr	r2, [pc, #536]	; (8001248 <HAL_GPIO_Init+0x288>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d01d      	beq.n	800106e <HAL_GPIO_Init+0xae>
          break;
 8001032:	e036      	b.n	80010a2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001034:	4a85      	ldr	r2, [pc, #532]	; (800124c <HAL_GPIO_Init+0x28c>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d019      	beq.n	800106e <HAL_GPIO_Init+0xae>
 800103a:	4a85      	ldr	r2, [pc, #532]	; (8001250 <HAL_GPIO_Init+0x290>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d016      	beq.n	800106e <HAL_GPIO_Init+0xae>
 8001040:	4a84      	ldr	r2, [pc, #528]	; (8001254 <HAL_GPIO_Init+0x294>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d013      	beq.n	800106e <HAL_GPIO_Init+0xae>
          break;
 8001046:	e02c      	b.n	80010a2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	623b      	str	r3, [r7, #32]
          break;
 800104e:	e028      	b.n	80010a2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	3304      	adds	r3, #4
 8001056:	623b      	str	r3, [r7, #32]
          break;
 8001058:	e023      	b.n	80010a2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	3308      	adds	r3, #8
 8001060:	623b      	str	r3, [r7, #32]
          break;
 8001062:	e01e      	b.n	80010a2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	330c      	adds	r3, #12
 800106a:	623b      	str	r3, [r7, #32]
          break;
 800106c:	e019      	b.n	80010a2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d102      	bne.n	800107c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001076:	2304      	movs	r3, #4
 8001078:	623b      	str	r3, [r7, #32]
          break;
 800107a:	e012      	b.n	80010a2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d105      	bne.n	8001090 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001084:	2308      	movs	r3, #8
 8001086:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	69fa      	ldr	r2, [r7, #28]
 800108c:	611a      	str	r2, [r3, #16]
          break;
 800108e:	e008      	b.n	80010a2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001090:	2308      	movs	r3, #8
 8001092:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	69fa      	ldr	r2, [r7, #28]
 8001098:	615a      	str	r2, [r3, #20]
          break;
 800109a:	e002      	b.n	80010a2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800109c:	2300      	movs	r3, #0
 800109e:	623b      	str	r3, [r7, #32]
          break;
 80010a0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	2bff      	cmp	r3, #255	; 0xff
 80010a6:	d801      	bhi.n	80010ac <HAL_GPIO_Init+0xec>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	e001      	b.n	80010b0 <HAL_GPIO_Init+0xf0>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3304      	adds	r3, #4
 80010b0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	2bff      	cmp	r3, #255	; 0xff
 80010b6:	d802      	bhi.n	80010be <HAL_GPIO_Init+0xfe>
 80010b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	e002      	b.n	80010c4 <HAL_GPIO_Init+0x104>
 80010be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c0:	3b08      	subs	r3, #8
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	210f      	movs	r1, #15
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	fa01 f303 	lsl.w	r3, r1, r3
 80010d2:	43db      	mvns	r3, r3
 80010d4:	401a      	ands	r2, r3
 80010d6:	6a39      	ldr	r1, [r7, #32]
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	fa01 f303 	lsl.w	r3, r1, r3
 80010de:	431a      	orrs	r2, r3
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	f000 8096 	beq.w	800121e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010f2:	4b59      	ldr	r3, [pc, #356]	; (8001258 <HAL_GPIO_Init+0x298>)
 80010f4:	699b      	ldr	r3, [r3, #24]
 80010f6:	4a58      	ldr	r2, [pc, #352]	; (8001258 <HAL_GPIO_Init+0x298>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6193      	str	r3, [r2, #24]
 80010fe:	4b56      	ldr	r3, [pc, #344]	; (8001258 <HAL_GPIO_Init+0x298>)
 8001100:	699b      	ldr	r3, [r3, #24]
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800110a:	4a54      	ldr	r2, [pc, #336]	; (800125c <HAL_GPIO_Init+0x29c>)
 800110c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110e:	089b      	lsrs	r3, r3, #2
 8001110:	3302      	adds	r3, #2
 8001112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001116:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111a:	f003 0303 	and.w	r3, r3, #3
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	220f      	movs	r2, #15
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43db      	mvns	r3, r3
 8001128:	68fa      	ldr	r2, [r7, #12]
 800112a:	4013      	ands	r3, r2
 800112c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a4b      	ldr	r2, [pc, #300]	; (8001260 <HAL_GPIO_Init+0x2a0>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d013      	beq.n	800115e <HAL_GPIO_Init+0x19e>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a4a      	ldr	r2, [pc, #296]	; (8001264 <HAL_GPIO_Init+0x2a4>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d00d      	beq.n	800115a <HAL_GPIO_Init+0x19a>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a49      	ldr	r2, [pc, #292]	; (8001268 <HAL_GPIO_Init+0x2a8>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d007      	beq.n	8001156 <HAL_GPIO_Init+0x196>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a48      	ldr	r2, [pc, #288]	; (800126c <HAL_GPIO_Init+0x2ac>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d101      	bne.n	8001152 <HAL_GPIO_Init+0x192>
 800114e:	2303      	movs	r3, #3
 8001150:	e006      	b.n	8001160 <HAL_GPIO_Init+0x1a0>
 8001152:	2304      	movs	r3, #4
 8001154:	e004      	b.n	8001160 <HAL_GPIO_Init+0x1a0>
 8001156:	2302      	movs	r3, #2
 8001158:	e002      	b.n	8001160 <HAL_GPIO_Init+0x1a0>
 800115a:	2301      	movs	r3, #1
 800115c:	e000      	b.n	8001160 <HAL_GPIO_Init+0x1a0>
 800115e:	2300      	movs	r3, #0
 8001160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001162:	f002 0203 	and.w	r2, r2, #3
 8001166:	0092      	lsls	r2, r2, #2
 8001168:	4093      	lsls	r3, r2
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	4313      	orrs	r3, r2
 800116e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001170:	493a      	ldr	r1, [pc, #232]	; (800125c <HAL_GPIO_Init+0x29c>)
 8001172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001174:	089b      	lsrs	r3, r3, #2
 8001176:	3302      	adds	r3, #2
 8001178:	68fa      	ldr	r2, [r7, #12]
 800117a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d006      	beq.n	8001198 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800118a:	4b39      	ldr	r3, [pc, #228]	; (8001270 <HAL_GPIO_Init+0x2b0>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	4938      	ldr	r1, [pc, #224]	; (8001270 <HAL_GPIO_Init+0x2b0>)
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	4313      	orrs	r3, r2
 8001194:	600b      	str	r3, [r1, #0]
 8001196:	e006      	b.n	80011a6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001198:	4b35      	ldr	r3, [pc, #212]	; (8001270 <HAL_GPIO_Init+0x2b0>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	43db      	mvns	r3, r3
 80011a0:	4933      	ldr	r1, [pc, #204]	; (8001270 <HAL_GPIO_Init+0x2b0>)
 80011a2:	4013      	ands	r3, r2
 80011a4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d006      	beq.n	80011c0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011b2:	4b2f      	ldr	r3, [pc, #188]	; (8001270 <HAL_GPIO_Init+0x2b0>)
 80011b4:	685a      	ldr	r2, [r3, #4]
 80011b6:	492e      	ldr	r1, [pc, #184]	; (8001270 <HAL_GPIO_Init+0x2b0>)
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	604b      	str	r3, [r1, #4]
 80011be:	e006      	b.n	80011ce <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011c0:	4b2b      	ldr	r3, [pc, #172]	; (8001270 <HAL_GPIO_Init+0x2b0>)
 80011c2:	685a      	ldr	r2, [r3, #4]
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	43db      	mvns	r3, r3
 80011c8:	4929      	ldr	r1, [pc, #164]	; (8001270 <HAL_GPIO_Init+0x2b0>)
 80011ca:	4013      	ands	r3, r2
 80011cc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d006      	beq.n	80011e8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011da:	4b25      	ldr	r3, [pc, #148]	; (8001270 <HAL_GPIO_Init+0x2b0>)
 80011dc:	689a      	ldr	r2, [r3, #8]
 80011de:	4924      	ldr	r1, [pc, #144]	; (8001270 <HAL_GPIO_Init+0x2b0>)
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	608b      	str	r3, [r1, #8]
 80011e6:	e006      	b.n	80011f6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011e8:	4b21      	ldr	r3, [pc, #132]	; (8001270 <HAL_GPIO_Init+0x2b0>)
 80011ea:	689a      	ldr	r2, [r3, #8]
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	43db      	mvns	r3, r3
 80011f0:	491f      	ldr	r1, [pc, #124]	; (8001270 <HAL_GPIO_Init+0x2b0>)
 80011f2:	4013      	ands	r3, r2
 80011f4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d006      	beq.n	8001210 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001202:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <HAL_GPIO_Init+0x2b0>)
 8001204:	68da      	ldr	r2, [r3, #12]
 8001206:	491a      	ldr	r1, [pc, #104]	; (8001270 <HAL_GPIO_Init+0x2b0>)
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	4313      	orrs	r3, r2
 800120c:	60cb      	str	r3, [r1, #12]
 800120e:	e006      	b.n	800121e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001210:	4b17      	ldr	r3, [pc, #92]	; (8001270 <HAL_GPIO_Init+0x2b0>)
 8001212:	68da      	ldr	r2, [r3, #12]
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	43db      	mvns	r3, r3
 8001218:	4915      	ldr	r1, [pc, #84]	; (8001270 <HAL_GPIO_Init+0x2b0>)
 800121a:	4013      	ands	r3, r2
 800121c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800121e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001220:	3301      	adds	r3, #1
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122a:	fa22 f303 	lsr.w	r3, r2, r3
 800122e:	2b00      	cmp	r3, #0
 8001230:	f47f aed0 	bne.w	8000fd4 <HAL_GPIO_Init+0x14>
  }
}
 8001234:	bf00      	nop
 8001236:	372c      	adds	r7, #44	; 0x2c
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	10210000 	.word	0x10210000
 8001244:	10110000 	.word	0x10110000
 8001248:	10120000 	.word	0x10120000
 800124c:	10310000 	.word	0x10310000
 8001250:	10320000 	.word	0x10320000
 8001254:	10220000 	.word	0x10220000
 8001258:	40021000 	.word	0x40021000
 800125c:	40010000 	.word	0x40010000
 8001260:	40010800 	.word	0x40010800
 8001264:	40010c00 	.word	0x40010c00
 8001268:	40011000 	.word	0x40011000
 800126c:	40011400 	.word	0x40011400
 8001270:	40010400 	.word	0x40010400

08001274 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	460b      	mov	r3, r1
 800127e:	807b      	strh	r3, [r7, #2]
 8001280:	4613      	mov	r3, r2
 8001282:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001284:	787b      	ldrb	r3, [r7, #1]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d003      	beq.n	8001292 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800128a:	887a      	ldrh	r2, [r7, #2]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001290:	e003      	b.n	800129a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001292:	887b      	ldrh	r3, [r7, #2]
 8001294:	041a      	lsls	r2, r3, #16
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	611a      	str	r2, [r3, #16]
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr

080012a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012b6:	887a      	ldrh	r2, [r7, #2]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4013      	ands	r3, r2
 80012bc:	041a      	lsls	r2, r3, #16
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	43d9      	mvns	r1, r3
 80012c2:	887b      	ldrh	r3, [r7, #2]
 80012c4:	400b      	ands	r3, r1
 80012c6:	431a      	orrs	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	611a      	str	r2, [r3, #16]
}
 80012cc:	bf00      	nop
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr
	...

080012d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80012e2:	4b08      	ldr	r3, [pc, #32]	; (8001304 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012e4:	695a      	ldr	r2, [r3, #20]
 80012e6:	88fb      	ldrh	r3, [r7, #6]
 80012e8:	4013      	ands	r3, r2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d006      	beq.n	80012fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012ee:	4a05      	ldr	r2, [pc, #20]	; (8001304 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012f0:	88fb      	ldrh	r3, [r7, #6]
 80012f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012f4:	88fb      	ldrh	r3, [r7, #6]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 f806 	bl	8001308 <HAL_GPIO_EXTI_Callback>
  }
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40010400 	.word	0x40010400

08001308 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr

0800131c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800131c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800131e:	b08b      	sub	sp, #44	; 0x2c
 8001320:	af06      	add	r7, sp, #24
 8001322:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d101      	bne.n	800132e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e0fd      	b.n	800152a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	d106      	bne.n	8001348 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f006 f8f4 	bl	8007530 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2203      	movs	r2, #3
 800134c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f002 fa87 	bl	8003868 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	603b      	str	r3, [r7, #0]
 8001360:	687e      	ldr	r6, [r7, #4]
 8001362:	466d      	mov	r5, sp
 8001364:	f106 0410 	add.w	r4, r6, #16
 8001368:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800136a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800136c:	6823      	ldr	r3, [r4, #0]
 800136e:	602b      	str	r3, [r5, #0]
 8001370:	1d33      	adds	r3, r6, #4
 8001372:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001374:	6838      	ldr	r0, [r7, #0]
 8001376:	f002 fa51 	bl	800381c <USB_CoreInit>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d005      	beq.n	800138c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2202      	movs	r2, #2
 8001384:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e0ce      	b.n	800152a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2100      	movs	r1, #0
 8001392:	4618      	mov	r0, r3
 8001394:	f002 fa82 	bl	800389c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001398:	2300      	movs	r3, #0
 800139a:	73fb      	strb	r3, [r7, #15]
 800139c:	e04c      	b.n	8001438 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800139e:	7bfb      	ldrb	r3, [r7, #15]
 80013a0:	6879      	ldr	r1, [r7, #4]
 80013a2:	1c5a      	adds	r2, r3, #1
 80013a4:	4613      	mov	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4413      	add	r3, r2
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	440b      	add	r3, r1
 80013ae:	3301      	adds	r3, #1
 80013b0:	2201      	movs	r2, #1
 80013b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013b4:	7bfb      	ldrb	r3, [r7, #15]
 80013b6:	6879      	ldr	r1, [r7, #4]
 80013b8:	1c5a      	adds	r2, r3, #1
 80013ba:	4613      	mov	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4413      	add	r3, r2
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	440b      	add	r3, r1
 80013c4:	7bfa      	ldrb	r2, [r7, #15]
 80013c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013c8:	7bfa      	ldrb	r2, [r7, #15]
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
 80013cc:	b298      	uxth	r0, r3
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	4613      	mov	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	4413      	add	r3, r2
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	440b      	add	r3, r1
 80013da:	3336      	adds	r3, #54	; 0x36
 80013dc:	4602      	mov	r2, r0
 80013de:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	6879      	ldr	r1, [r7, #4]
 80013e4:	1c5a      	adds	r2, r3, #1
 80013e6:	4613      	mov	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4413      	add	r3, r2
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	440b      	add	r3, r1
 80013f0:	3303      	adds	r3, #3
 80013f2:	2200      	movs	r2, #0
 80013f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013f6:	7bfa      	ldrb	r2, [r7, #15]
 80013f8:	6879      	ldr	r1, [r7, #4]
 80013fa:	4613      	mov	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4413      	add	r3, r2
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	440b      	add	r3, r1
 8001404:	3338      	adds	r3, #56	; 0x38
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800140a:	7bfa      	ldrb	r2, [r7, #15]
 800140c:	6879      	ldr	r1, [r7, #4]
 800140e:	4613      	mov	r3, r2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	4413      	add	r3, r2
 8001414:	00db      	lsls	r3, r3, #3
 8001416:	440b      	add	r3, r1
 8001418:	333c      	adds	r3, #60	; 0x3c
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800141e:	7bfa      	ldrb	r2, [r7, #15]
 8001420:	6879      	ldr	r1, [r7, #4]
 8001422:	4613      	mov	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	440b      	add	r3, r1
 800142c:	3340      	adds	r3, #64	; 0x40
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001432:	7bfb      	ldrb	r3, [r7, #15]
 8001434:	3301      	adds	r3, #1
 8001436:	73fb      	strb	r3, [r7, #15]
 8001438:	7bfa      	ldrb	r2, [r7, #15]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	429a      	cmp	r2, r3
 8001440:	d3ad      	bcc.n	800139e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001442:	2300      	movs	r3, #0
 8001444:	73fb      	strb	r3, [r7, #15]
 8001446:	e044      	b.n	80014d2 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001448:	7bfa      	ldrb	r2, [r7, #15]
 800144a:	6879      	ldr	r1, [r7, #4]
 800144c:	4613      	mov	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	440b      	add	r3, r1
 8001456:	f203 1369 	addw	r3, r3, #361	; 0x169
 800145a:	2200      	movs	r2, #0
 800145c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800145e:	7bfa      	ldrb	r2, [r7, #15]
 8001460:	6879      	ldr	r1, [r7, #4]
 8001462:	4613      	mov	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4413      	add	r3, r2
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	440b      	add	r3, r1
 800146c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001470:	7bfa      	ldrb	r2, [r7, #15]
 8001472:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001474:	7bfa      	ldrb	r2, [r7, #15]
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	4613      	mov	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	440b      	add	r3, r1
 8001482:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001486:	2200      	movs	r2, #0
 8001488:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800148a:	7bfa      	ldrb	r2, [r7, #15]
 800148c:	6879      	ldr	r1, [r7, #4]
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	440b      	add	r3, r1
 8001498:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014a0:	7bfa      	ldrb	r2, [r7, #15]
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	4613      	mov	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	4413      	add	r3, r2
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	440b      	add	r3, r1
 80014ae:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014b6:	7bfa      	ldrb	r2, [r7, #15]
 80014b8:	6879      	ldr	r1, [r7, #4]
 80014ba:	4613      	mov	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	440b      	add	r3, r1
 80014c4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
 80014ce:	3301      	adds	r3, #1
 80014d0:	73fb      	strb	r3, [r7, #15]
 80014d2:	7bfa      	ldrb	r2, [r7, #15]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d3b5      	bcc.n	8001448 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	603b      	str	r3, [r7, #0]
 80014e2:	687e      	ldr	r6, [r7, #4]
 80014e4:	466d      	mov	r5, sp
 80014e6:	f106 0410 	add.w	r4, r6, #16
 80014ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ee:	6823      	ldr	r3, [r4, #0]
 80014f0:	602b      	str	r3, [r5, #0]
 80014f2:	1d33      	adds	r3, r6, #4
 80014f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014f6:	6838      	ldr	r0, [r7, #0]
 80014f8:	f002 f9dc 	bl	80038b4 <USB_DevInit>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d005      	beq.n	800150e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2202      	movs	r2, #2
 8001506:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e00d      	b.n	800152a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2201      	movs	r2, #1
 800151a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f004 f976 	bl	8005814 <USB_DevDisconnect>

  return HAL_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3714      	adds	r7, #20
 800152e:	46bd      	mov	sp, r7
 8001530:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001532 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b082      	sub	sp, #8
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001540:	2b01      	cmp	r3, #1
 8001542:	d101      	bne.n	8001548 <HAL_PCD_Start+0x16>
 8001544:	2302      	movs	r3, #2
 8001546:	e016      	b.n	8001576 <HAL_PCD_Start+0x44>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2201      	movs	r2, #1
 800154c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f002 f971 	bl	800383c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800155a:	2101      	movs	r1, #1
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f006 fa5a 	bl	8007a16 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f004 f94a 	bl	8005800 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b088      	sub	sp, #32
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f004 f94c 	bl	8005828 <USB_ReadInterrupts>
 8001590:	4603      	mov	r3, r0
 8001592:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001596:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800159a:	d102      	bne.n	80015a2 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f000 fb61 	bl	8001c64 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f004 f93e 	bl	8005828 <USB_ReadInterrupts>
 80015ac:	4603      	mov	r3, r0
 80015ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015b6:	d112      	bne.n	80015de <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015ca:	b292      	uxth	r2, r2
 80015cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f006 f828 	bl	8007626 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80015d6:	2100      	movs	r1, #0
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 f925 	bl	8001828 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f004 f920 	bl	8005828 <USB_ReadInterrupts>
 80015e8:	4603      	mov	r3, r0
 80015ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015f2:	d10b      	bne.n	800160c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001606:	b292      	uxth	r2, r2
 8001608:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f004 f909 	bl	8005828 <USB_ReadInterrupts>
 8001616:	4603      	mov	r3, r0
 8001618:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800161c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001620:	d10b      	bne.n	800163a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800162a:	b29a      	uxth	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001634:	b292      	uxth	r2, r2
 8001636:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f004 f8f2 	bl	8005828 <USB_ReadInterrupts>
 8001644:	4603      	mov	r3, r0
 8001646:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800164a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800164e:	d126      	bne.n	800169e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001658:	b29a      	uxth	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f022 0204 	bic.w	r2, r2, #4
 8001662:	b292      	uxth	r2, r2
 8001664:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001670:	b29a      	uxth	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 0208 	bic.w	r2, r2, #8
 800167a:	b292      	uxth	r2, r2
 800167c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f006 f809 	bl	8007698 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800168e:	b29a      	uxth	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001698:	b292      	uxth	r2, r2
 800169a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f004 f8c0 	bl	8005828 <USB_ReadInterrupts>
 80016a8:	4603      	mov	r3, r0
 80016aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016b2:	f040 8084 	bne.w	80017be <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80016b6:	2300      	movs	r3, #0
 80016b8:	77fb      	strb	r3, [r7, #31]
 80016ba:	e011      	b.n	80016e0 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	461a      	mov	r2, r3
 80016c2:	7ffb      	ldrb	r3, [r7, #31]
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	441a      	add	r2, r3
 80016c8:	7ffb      	ldrb	r3, [r7, #31]
 80016ca:	8812      	ldrh	r2, [r2, #0]
 80016cc:	b292      	uxth	r2, r2
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	f107 0120 	add.w	r1, r7, #32
 80016d4:	440b      	add	r3, r1
 80016d6:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80016da:	7ffb      	ldrb	r3, [r7, #31]
 80016dc:	3301      	adds	r3, #1
 80016de:	77fb      	strb	r3, [r7, #31]
 80016e0:	7ffb      	ldrb	r3, [r7, #31]
 80016e2:	2b07      	cmp	r3, #7
 80016e4:	d9ea      	bls.n	80016bc <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f042 0201 	orr.w	r2, r2, #1
 80016f8:	b292      	uxth	r2, r2
 80016fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001706:	b29a      	uxth	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f022 0201 	bic.w	r2, r2, #1
 8001710:	b292      	uxth	r2, r2
 8001712:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001716:	bf00      	nop
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001720:	b29b      	uxth	r3, r3
 8001722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001726:	2b00      	cmp	r3, #0
 8001728:	d0f6      	beq.n	8001718 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001732:	b29a      	uxth	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800173c:	b292      	uxth	r2, r2
 800173e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001742:	2300      	movs	r3, #0
 8001744:	77fb      	strb	r3, [r7, #31]
 8001746:	e010      	b.n	800176a <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001748:	7ffb      	ldrb	r3, [r7, #31]
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	6812      	ldr	r2, [r2, #0]
 800174e:	4611      	mov	r1, r2
 8001750:	7ffa      	ldrb	r2, [r7, #31]
 8001752:	0092      	lsls	r2, r2, #2
 8001754:	440a      	add	r2, r1
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	f107 0120 	add.w	r1, r7, #32
 800175c:	440b      	add	r3, r1
 800175e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001762:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001764:	7ffb      	ldrb	r3, [r7, #31]
 8001766:	3301      	adds	r3, #1
 8001768:	77fb      	strb	r3, [r7, #31]
 800176a:	7ffb      	ldrb	r3, [r7, #31]
 800176c:	2b07      	cmp	r3, #7
 800176e:	d9eb      	bls.n	8001748 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001778:	b29a      	uxth	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f042 0208 	orr.w	r2, r2, #8
 8001782:	b292      	uxth	r2, r2
 8001784:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001790:	b29a      	uxth	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800179a:	b292      	uxth	r2, r2
 800179c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f042 0204 	orr.w	r2, r2, #4
 80017b2:	b292      	uxth	r2, r2
 80017b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f005 ff53 	bl	8007664 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f004 f830 	bl	8005828 <USB_ReadInterrupts>
 80017c8:	4603      	mov	r3, r0
 80017ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017d2:	d10e      	bne.n	80017f2 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017dc:	b29a      	uxth	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017e6:	b292      	uxth	r2, r2
 80017e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f005 ff0c 	bl	800760a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f004 f816 	bl	8005828 <USB_ReadInterrupts>
 80017fc:	4603      	mov	r3, r0
 80017fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001806:	d10b      	bne.n	8001820 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001810:	b29a      	uxth	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800181a:	b292      	uxth	r2, r2
 800181c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001820:	bf00      	nop
 8001822:	3720      	adds	r7, #32
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	460b      	mov	r3, r1
 8001832:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800183a:	2b01      	cmp	r3, #1
 800183c:	d101      	bne.n	8001842 <HAL_PCD_SetAddress+0x1a>
 800183e:	2302      	movs	r3, #2
 8001840:	e013      	b.n	800186a <HAL_PCD_SetAddress+0x42>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2201      	movs	r2, #1
 8001846:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	78fa      	ldrb	r2, [r7, #3]
 800184e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	78fa      	ldrb	r2, [r7, #3]
 8001858:	4611      	mov	r1, r2
 800185a:	4618      	mov	r0, r3
 800185c:	f003 ffbd 	bl	80057da <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b084      	sub	sp, #16
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
 800187a:	4608      	mov	r0, r1
 800187c:	4611      	mov	r1, r2
 800187e:	461a      	mov	r2, r3
 8001880:	4603      	mov	r3, r0
 8001882:	70fb      	strb	r3, [r7, #3]
 8001884:	460b      	mov	r3, r1
 8001886:	803b      	strh	r3, [r7, #0]
 8001888:	4613      	mov	r3, r2
 800188a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800188c:	2300      	movs	r3, #0
 800188e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001890:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001894:	2b00      	cmp	r3, #0
 8001896:	da0e      	bge.n	80018b6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001898:	78fb      	ldrb	r3, [r7, #3]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	1c5a      	adds	r2, r3, #1
 80018a0:	4613      	mov	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	4413      	add	r3, r2
 80018ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2201      	movs	r2, #1
 80018b2:	705a      	strb	r2, [r3, #1]
 80018b4:	e00e      	b.n	80018d4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018b6:	78fb      	ldrb	r3, [r7, #3]
 80018b8:	f003 0207 	and.w	r2, r3, #7
 80018bc:	4613      	mov	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	4413      	add	r3, r2
 80018cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2200      	movs	r2, #0
 80018d2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80018d4:	78fb      	ldrb	r3, [r7, #3]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80018e0:	883a      	ldrh	r2, [r7, #0]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	78ba      	ldrb	r2, [r7, #2]
 80018ea:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	785b      	ldrb	r3, [r3, #1]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d004      	beq.n	80018fe <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80018fe:	78bb      	ldrb	r3, [r7, #2]
 8001900:	2b02      	cmp	r3, #2
 8001902:	d102      	bne.n	800190a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2200      	movs	r2, #0
 8001908:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001910:	2b01      	cmp	r3, #1
 8001912:	d101      	bne.n	8001918 <HAL_PCD_EP_Open+0xa6>
 8001914:	2302      	movs	r3, #2
 8001916:	e00e      	b.n	8001936 <HAL_PCD_EP_Open+0xc4>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	68f9      	ldr	r1, [r7, #12]
 8001926:	4618      	mov	r0, r3
 8001928:	f001 ffe4 	bl	80038f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001934:	7afb      	ldrb	r3, [r7, #11]
}
 8001936:	4618      	mov	r0, r3
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b084      	sub	sp, #16
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
 8001946:	460b      	mov	r3, r1
 8001948:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800194a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800194e:	2b00      	cmp	r3, #0
 8001950:	da0e      	bge.n	8001970 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001952:	78fb      	ldrb	r3, [r7, #3]
 8001954:	f003 0307 	and.w	r3, r3, #7
 8001958:	1c5a      	adds	r2, r3, #1
 800195a:	4613      	mov	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	4413      	add	r3, r2
 8001966:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2201      	movs	r2, #1
 800196c:	705a      	strb	r2, [r3, #1]
 800196e:	e00e      	b.n	800198e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001970:	78fb      	ldrb	r3, [r7, #3]
 8001972:	f003 0207 	and.w	r2, r3, #7
 8001976:	4613      	mov	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4413      	add	r3, r2
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	4413      	add	r3, r2
 8001986:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2200      	movs	r2, #0
 800198c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800198e:	78fb      	ldrb	r3, [r7, #3]
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	b2da      	uxtb	r2, r3
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d101      	bne.n	80019a8 <HAL_PCD_EP_Close+0x6a>
 80019a4:	2302      	movs	r3, #2
 80019a6:	e00e      	b.n	80019c6 <HAL_PCD_EP_Close+0x88>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	68f9      	ldr	r1, [r7, #12]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f002 fb06 	bl	8003fc8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b086      	sub	sp, #24
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	60f8      	str	r0, [r7, #12]
 80019d6:	607a      	str	r2, [r7, #4]
 80019d8:	603b      	str	r3, [r7, #0]
 80019da:	460b      	mov	r3, r1
 80019dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019de:	7afb      	ldrb	r3, [r7, #11]
 80019e0:	f003 0207 	and.w	r2, r3, #7
 80019e4:	4613      	mov	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	4413      	add	r3, r2
 80019f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	2200      	movs	r2, #0
 8001a06:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a0e:	7afb      	ldrb	r3, [r7, #11]
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a1a:	7afb      	ldrb	r3, [r7, #11]
 8001a1c:	f003 0307 	and.w	r3, r3, #7
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d106      	bne.n	8001a32 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6979      	ldr	r1, [r7, #20]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f002 fcb8 	bl	80043a0 <USB_EPStartXfer>
 8001a30:	e005      	b.n	8001a3e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	6979      	ldr	r1, [r7, #20]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f002 fcb1 	bl	80043a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3718      	adds	r7, #24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	460b      	mov	r3, r1
 8001a52:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001a54:	78fb      	ldrb	r3, [r7, #3]
 8001a56:	f003 0207 	and.w	r2, r3, #7
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	440b      	add	r3, r1
 8001a66:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001a6a:	681b      	ldr	r3, [r3, #0]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr

08001a76 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b086      	sub	sp, #24
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	60f8      	str	r0, [r7, #12]
 8001a7e:	607a      	str	r2, [r7, #4]
 8001a80:	603b      	str	r3, [r7, #0]
 8001a82:	460b      	mov	r3, r1
 8001a84:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a86:	7afb      	ldrb	r3, [r7, #11]
 8001a88:	f003 0307 	and.w	r3, r3, #7
 8001a8c:	1c5a      	adds	r2, r3, #1
 8001a8e:	4613      	mov	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4413      	add	r3, r2
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	4413      	add	r3, r2
 8001a9a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ac2:	7afb      	ldrb	r3, [r7, #11]
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ace:	7afb      	ldrb	r3, [r7, #11]
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d106      	bne.n	8001ae6 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6979      	ldr	r1, [r7, #20]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f002 fc5e 	bl	80043a0 <USB_EPStartXfer>
 8001ae4:	e005      	b.n	8001af2 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6979      	ldr	r1, [r7, #20]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f002 fc57 	bl	80043a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001b08:	78fb      	ldrb	r3, [r7, #3]
 8001b0a:	f003 0207 	and.w	r2, r3, #7
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d901      	bls.n	8001b1a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e04c      	b.n	8001bb4 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	da0e      	bge.n	8001b40 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b22:	78fb      	ldrb	r3, [r7, #3]
 8001b24:	f003 0307 	and.w	r3, r3, #7
 8001b28:	1c5a      	adds	r2, r3, #1
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4413      	add	r3, r2
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	4413      	add	r3, r2
 8001b36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	705a      	strb	r2, [r3, #1]
 8001b3e:	e00c      	b.n	8001b5a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b40:	78fa      	ldrb	r2, [r7, #3]
 8001b42:	4613      	mov	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4413      	add	r3, r2
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	4413      	add	r3, r2
 8001b52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2200      	movs	r2, #0
 8001b58:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b60:	78fb      	ldrb	r3, [r7, #3]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d101      	bne.n	8001b7a <HAL_PCD_EP_SetStall+0x7e>
 8001b76:	2302      	movs	r3, #2
 8001b78:	e01c      	b.n	8001bb4 <HAL_PCD_EP_SetStall+0xb8>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68f9      	ldr	r1, [r7, #12]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f003 fd29 	bl	80055e0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b8e:	78fb      	ldrb	r3, [r7, #3]
 8001b90:	f003 0307 	and.w	r3, r3, #7
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d108      	bne.n	8001baa <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4610      	mov	r0, r2
 8001ba6:	f003 fe4e 	bl	8005846 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001bc8:	78fb      	ldrb	r3, [r7, #3]
 8001bca:	f003 020f 	and.w	r2, r3, #15
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d901      	bls.n	8001bda <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e040      	b.n	8001c5c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001bda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	da0e      	bge.n	8001c00 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001be2:	78fb      	ldrb	r3, [r7, #3]
 8001be4:	f003 0307 	and.w	r3, r3, #7
 8001be8:	1c5a      	adds	r2, r3, #1
 8001bea:	4613      	mov	r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	4413      	add	r3, r2
 8001bf0:	00db      	lsls	r3, r3, #3
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	705a      	strb	r2, [r3, #1]
 8001bfe:	e00e      	b.n	8001c1e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c00:	78fb      	ldrb	r3, [r7, #3]
 8001c02:	f003 0207 	and.w	r2, r3, #7
 8001c06:	4613      	mov	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	4413      	add	r3, r2
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	4413      	add	r3, r2
 8001c16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2200      	movs	r2, #0
 8001c22:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c24:	78fb      	ldrb	r3, [r7, #3]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d101      	bne.n	8001c3e <HAL_PCD_EP_ClrStall+0x82>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	e00e      	b.n	8001c5c <HAL_PCD_EP_ClrStall+0xa0>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68f9      	ldr	r1, [r7, #12]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f003 fd17 	bl	8005680 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08e      	sub	sp, #56	; 0x38
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001c6c:	e2df      	b.n	800222e <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c76:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001c78:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	f003 030f 	and.w	r3, r3, #15
 8001c80:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001c84:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f040 8158 	bne.w	8001f3e <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001c8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c90:	f003 0310 	and.w	r3, r3, #16
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d152      	bne.n	8001d3e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	881b      	ldrh	r3, [r3, #0]
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ca8:	81fb      	strh	r3, [r7, #14]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	89fb      	ldrh	r3, [r7, #14]
 8001cb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3328      	adds	r3, #40	; 0x28
 8001cc0:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	461a      	mov	r2, r3
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	4413      	add	r3, r2
 8001cd6:	3302      	adds	r3, #2
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	6812      	ldr	r2, [r2, #0]
 8001cde:	4413      	add	r3, r2
 8001ce0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ce4:	881b      	ldrh	r3, [r3, #0]
 8001ce6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf0:	695a      	ldr	r2, [r3, #20]
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	441a      	add	r2, r3
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfa:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f005 fc69 	bl	80075d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 828e 	beq.w	800222e <PCD_EP_ISR_Handler+0x5ca>
 8001d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f040 8289 	bne.w	800222e <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	b292      	uxth	r2, r2
 8001d30:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001d3c:	e277      	b.n	800222e <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d44:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	881b      	ldrh	r3, [r3, #0]
 8001d4c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001d4e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001d50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d034      	beq.n	8001dc2 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	461a      	mov	r2, r3
 8001d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	3306      	adds	r3, #6
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	6812      	ldr	r2, [r2, #0]
 8001d74:	4413      	add	r3, r2
 8001d76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d7a:	881b      	ldrh	r3, [r3, #0]
 8001d7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d82:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6818      	ldr	r0, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d90:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	f003 fda4 	bl	80058e4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	881b      	ldrh	r3, [r3, #0]
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001da8:	4013      	ands	r3, r2
 8001daa:	823b      	strh	r3, [r7, #16]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	8a3a      	ldrh	r2, [r7, #16]
 8001db2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001db6:	b292      	uxth	r2, r2
 8001db8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f005 fbde 	bl	800757c <HAL_PCD_SetupStageCallback>
 8001dc0:	e235      	b.n	800222e <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001dc2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f280 8231 	bge.w	800222e <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	881b      	ldrh	r3, [r3, #0]
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001dd8:	4013      	ands	r3, r2
 8001dda:	83bb      	strh	r3, [r7, #28]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	8bba      	ldrh	r2, [r7, #28]
 8001de2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001de6:	b292      	uxth	r2, r2
 8001de8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	461a      	mov	r2, r3
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	4413      	add	r3, r2
 8001dfe:	3306      	adds	r3, #6
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	6812      	ldr	r2, [r2, #0]
 8001e06:	4413      	add	r3, r2
 8001e08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e0c:	881b      	ldrh	r3, [r3, #0]
 8001e0e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d019      	beq.n	8001e52 <PCD_EP_ISR_Handler+0x1ee>
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d015      	beq.n	8001e52 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6818      	ldr	r0, [r3, #0]
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	6959      	ldr	r1, [r3, #20]
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	f003 fd54 	bl	80058e4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3e:	695a      	ldr	r2, [r3, #20]
 8001e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e42:	69db      	ldr	r3, [r3, #28]
 8001e44:	441a      	add	r2, r3
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f005 fba7 	bl	80075a0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	61bb      	str	r3, [r7, #24]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	461a      	mov	r2, r3
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	4413      	add	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001e70:	617b      	str	r3, [r7, #20]
 8001e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d112      	bne.n	8001ea0 <PCD_EP_ISR_Handler+0x23c>
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	881b      	ldrh	r3, [r3, #0]
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	801a      	strh	r2, [r3, #0]
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	881b      	ldrh	r3, [r3, #0]
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	801a      	strh	r2, [r3, #0]
 8001e9e:	e02f      	b.n	8001f00 <PCD_EP_ISR_Handler+0x29c>
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	2b3e      	cmp	r3, #62	; 0x3e
 8001ea6:	d813      	bhi.n	8001ed0 <PCD_EP_ISR_Handler+0x26c>
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	085b      	lsrs	r3, r3, #1
 8001eae:	633b      	str	r3, [r7, #48]	; 0x30
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d002      	beq.n	8001ec2 <PCD_EP_ISR_Handler+0x25e>
 8001ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	633b      	str	r3, [r7, #48]	; 0x30
 8001ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	029b      	lsls	r3, r3, #10
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	801a      	strh	r2, [r3, #0]
 8001ece:	e017      	b.n	8001f00 <PCD_EP_ISR_Handler+0x29c>
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	095b      	lsrs	r3, r3, #5
 8001ed6:	633b      	str	r3, [r7, #48]	; 0x30
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	f003 031f 	and.w	r3, r3, #31
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d102      	bne.n	8001eea <PCD_EP_ISR_Handler+0x286>
 8001ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	633b      	str	r3, [r7, #48]	; 0x30
 8001eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	029b      	lsls	r3, r3, #10
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ef6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f10:	827b      	strh	r3, [r7, #18]
 8001f12:	8a7b      	ldrh	r3, [r7, #18]
 8001f14:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001f18:	827b      	strh	r3, [r7, #18]
 8001f1a:	8a7b      	ldrh	r3, [r7, #18]
 8001f1c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001f20:	827b      	strh	r3, [r7, #18]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	8a7b      	ldrh	r3, [r7, #18]
 8001f28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	8013      	strh	r3, [r2, #0]
 8001f3c:	e177      	b.n	800222e <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	461a      	mov	r2, r3
 8001f44:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4413      	add	r3, r2
 8001f4c:	881b      	ldrh	r3, [r3, #0]
 8001f4e:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f50:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f280 80ea 	bge.w	800212e <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4413      	add	r3, r2
 8001f68:	881b      	ldrh	r3, [r3, #0]
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f70:	4013      	ands	r3, r2
 8001f72:	853b      	strh	r3, [r7, #40]	; 0x28
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001f84:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f88:	b292      	uxth	r2, r2
 8001f8a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001f8c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001f90:	4613      	mov	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4413      	add	r3, r2
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	7b1b      	ldrb	r3, [r3, #12]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d122      	bne.n	8001ff0 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	4413      	add	r3, r2
 8001fbe:	3306      	adds	r3, #6
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	6812      	ldr	r2, [r2, #0]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fcc:	881b      	ldrh	r3, [r3, #0]
 8001fce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fd2:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001fd4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f000 8087 	beq.w	80020ea <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6818      	ldr	r0, [r3, #0]
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe2:	6959      	ldr	r1, [r3, #20]
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	88da      	ldrh	r2, [r3, #6]
 8001fe8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fea:	f003 fc7b 	bl	80058e4 <USB_ReadPMA>
 8001fee:	e07c      	b.n	80020ea <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	78db      	ldrb	r3, [r3, #3]
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d108      	bne.n	800200a <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001ff8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 f923 	bl	800224a <HAL_PCD_EP_DB_Receive>
 8002004:	4603      	mov	r3, r0
 8002006:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002008:	e06f      	b.n	80020ea <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	461a      	mov	r2, r3
 8002010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	881b      	ldrh	r3, [r3, #0]
 800201a:	b29b      	uxth	r3, r3
 800201c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002020:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002024:	847b      	strh	r3, [r7, #34]	; 0x22
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	461a      	mov	r2, r3
 800202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	441a      	add	r2, r3
 8002034:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002036:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800203a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800203e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002042:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002046:	b29b      	uxth	r3, r3
 8002048:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	461a      	mov	r2, r3
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	881b      	ldrh	r3, [r3, #0]
 800205a:	b29b      	uxth	r3, r3
 800205c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d021      	beq.n	80020a8 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800206c:	b29b      	uxth	r3, r3
 800206e:	461a      	mov	r2, r3
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	4413      	add	r3, r2
 8002078:	3302      	adds	r3, #2
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	6812      	ldr	r2, [r2, #0]
 8002080:	4413      	add	r3, r2
 8002082:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800208c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800208e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002090:	2b00      	cmp	r3, #0
 8002092:	d02a      	beq.n	80020ea <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6818      	ldr	r0, [r3, #0]
 8002098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209a:	6959      	ldr	r1, [r3, #20]
 800209c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209e:	891a      	ldrh	r2, [r3, #8]
 80020a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020a2:	f003 fc1f 	bl	80058e4 <USB_ReadPMA>
 80020a6:	e020      	b.n	80020ea <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	461a      	mov	r2, r3
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	4413      	add	r3, r2
 80020bc:	3306      	adds	r3, #6
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	6812      	ldr	r2, [r2, #0]
 80020c4:	4413      	add	r3, r2
 80020c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020ca:	881b      	ldrh	r3, [r3, #0]
 80020cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020d0:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80020d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d008      	beq.n	80020ea <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6818      	ldr	r0, [r3, #0]
 80020dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020de:	6959      	ldr	r1, [r3, #20]
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	895a      	ldrh	r2, [r3, #10]
 80020e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020e6:	f003 fbfd 	bl	80058e4 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	69da      	ldr	r2, [r3, #28]
 80020ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020f0:	441a      	add	r2, r3
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	695a      	ldr	r2, [r3, #20]
 80020fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020fc:	441a      	add	r2, r3
 80020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002100:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d004      	beq.n	8002114 <PCD_EP_ISR_Handler+0x4b0>
 800210a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	429a      	cmp	r2, r3
 8002112:	d206      	bcs.n	8002122 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	4619      	mov	r1, r3
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f005 fa40 	bl	80075a0 <HAL_PCD_DataOutStageCallback>
 8002120:	e005      	b.n	800212e <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002128:	4618      	mov	r0, r3
 800212a:	f002 f939 	bl	80043a0 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800212e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002134:	2b00      	cmp	r3, #0
 8002136:	d07a      	beq.n	800222e <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8002138:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800213c:	1c5a      	adds	r2, r3, #1
 800213e:	4613      	mov	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	4413      	add	r3, r2
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	4413      	add	r3, r2
 800214a:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	461a      	mov	r2, r3
 8002152:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	881b      	ldrh	r3, [r3, #0]
 800215c:	b29b      	uxth	r3, r3
 800215e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002166:	843b      	strh	r3, [r7, #32]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	461a      	mov	r2, r3
 800216e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	441a      	add	r2, r3
 8002176:	8c3b      	ldrh	r3, [r7, #32]
 8002178:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800217c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002180:	b29b      	uxth	r3, r3
 8002182:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002186:	78db      	ldrb	r3, [r3, #3]
 8002188:	2b02      	cmp	r3, #2
 800218a:	d108      	bne.n	800219e <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002190:	2b02      	cmp	r3, #2
 8002192:	d146      	bne.n	8002222 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002194:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219a:	2b00      	cmp	r3, #0
 800219c:	d141      	bne.n	8002222 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	461a      	mov	r2, r3
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	4413      	add	r3, r2
 80021b2:	3302      	adds	r3, #2
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	6812      	ldr	r2, [r2, #0]
 80021ba:	4413      	add	r3, r2
 80021bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021c0:	881b      	ldrh	r3, [r3, #0]
 80021c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021c6:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80021c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ca:	699a      	ldr	r2, [r3, #24]
 80021cc:	8bfb      	ldrh	r3, [r7, #30]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d906      	bls.n	80021e0 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	699a      	ldr	r2, [r3, #24]
 80021d6:	8bfb      	ldrh	r3, [r7, #30]
 80021d8:	1ad2      	subs	r2, r2, r3
 80021da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021dc:	619a      	str	r2, [r3, #24]
 80021de:	e002      	b.n	80021e6 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 80021e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e2:	2200      	movs	r2, #0
 80021e4:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d106      	bne.n	80021fc <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	4619      	mov	r1, r3
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f005 f9ee 	bl	80075d6 <HAL_PCD_DataInStageCallback>
 80021fa:	e018      	b.n	800222e <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80021fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fe:	695a      	ldr	r2, [r3, #20]
 8002200:	8bfb      	ldrh	r3, [r7, #30]
 8002202:	441a      	add	r2, r3
 8002204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002206:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220a:	69da      	ldr	r2, [r3, #28]
 800220c:	8bfb      	ldrh	r3, [r7, #30]
 800220e:	441a      	add	r2, r3
 8002210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002212:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800221a:	4618      	mov	r0, r3
 800221c:	f002 f8c0 	bl	80043a0 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002220:	e005      	b.n	800222e <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002222:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002224:	461a      	mov	r2, r3
 8002226:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 f91b 	bl	8002464 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002236:	b29b      	uxth	r3, r3
 8002238:	b21b      	sxth	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	f6ff ad17 	blt.w	8001c6e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3738      	adds	r7, #56	; 0x38
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b088      	sub	sp, #32
 800224e:	af00      	add	r7, sp, #0
 8002250:	60f8      	str	r0, [r7, #12]
 8002252:	60b9      	str	r1, [r7, #8]
 8002254:	4613      	mov	r3, r2
 8002256:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002258:	88fb      	ldrh	r3, [r7, #6]
 800225a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d07e      	beq.n	8002360 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800226a:	b29b      	uxth	r3, r3
 800226c:	461a      	mov	r2, r3
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	4413      	add	r3, r2
 8002276:	3302      	adds	r3, #2
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	6812      	ldr	r2, [r2, #0]
 800227e:	4413      	add	r3, r2
 8002280:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002284:	881b      	ldrh	r3, [r3, #0]
 8002286:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800228a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	699a      	ldr	r2, [r3, #24]
 8002290:	8b7b      	ldrh	r3, [r7, #26]
 8002292:	429a      	cmp	r2, r3
 8002294:	d306      	bcc.n	80022a4 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	699a      	ldr	r2, [r3, #24]
 800229a:	8b7b      	ldrh	r3, [r7, #26]
 800229c:	1ad2      	subs	r2, r2, r3
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	619a      	str	r2, [r3, #24]
 80022a2:	e002      	b.n	80022aa <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	2200      	movs	r2, #0
 80022a8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d123      	bne.n	80022fa <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	461a      	mov	r2, r3
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	881b      	ldrh	r3, [r3, #0]
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022cc:	833b      	strh	r3, [r7, #24]
 80022ce:	8b3b      	ldrh	r3, [r7, #24]
 80022d0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80022d4:	833b      	strh	r3, [r7, #24]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	461a      	mov	r2, r3
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	441a      	add	r2, r3
 80022e4:	8b3b      	ldrh	r3, [r7, #24]
 80022e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80022fa:	88fb      	ldrh	r3, [r7, #6]
 80022fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002300:	2b00      	cmp	r3, #0
 8002302:	d01f      	beq.n	8002344 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	461a      	mov	r2, r3
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	881b      	ldrh	r3, [r3, #0]
 8002314:	b29b      	uxth	r3, r3
 8002316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800231a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800231e:	82fb      	strh	r3, [r7, #22]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	461a      	mov	r2, r3
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	441a      	add	r2, r3
 800232e:	8afb      	ldrh	r3, [r7, #22]
 8002330:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002334:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002338:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800233c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002340:	b29b      	uxth	r3, r3
 8002342:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002344:	8b7b      	ldrh	r3, [r7, #26]
 8002346:	2b00      	cmp	r3, #0
 8002348:	f000 8087 	beq.w	800245a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6818      	ldr	r0, [r3, #0]
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	6959      	ldr	r1, [r3, #20]
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	891a      	ldrh	r2, [r3, #8]
 8002358:	8b7b      	ldrh	r3, [r7, #26]
 800235a:	f003 fac3 	bl	80058e4 <USB_ReadPMA>
 800235e:	e07c      	b.n	800245a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002368:	b29b      	uxth	r3, r3
 800236a:	461a      	mov	r2, r3
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	4413      	add	r3, r2
 8002374:	3306      	adds	r3, #6
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	6812      	ldr	r2, [r2, #0]
 800237c:	4413      	add	r3, r2
 800237e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002382:	881b      	ldrh	r3, [r3, #0]
 8002384:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002388:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	699a      	ldr	r2, [r3, #24]
 800238e:	8b7b      	ldrh	r3, [r7, #26]
 8002390:	429a      	cmp	r2, r3
 8002392:	d306      	bcc.n	80023a2 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	699a      	ldr	r2, [r3, #24]
 8002398:	8b7b      	ldrh	r3, [r7, #26]
 800239a:	1ad2      	subs	r2, r2, r3
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	619a      	str	r2, [r3, #24]
 80023a0:	e002      	b.n	80023a8 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	2200      	movs	r2, #0
 80023a6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d123      	bne.n	80023f8 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	461a      	mov	r2, r3
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4413      	add	r3, r2
 80023be:	881b      	ldrh	r3, [r3, #0]
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ca:	83fb      	strh	r3, [r7, #30]
 80023cc:	8bfb      	ldrh	r3, [r7, #30]
 80023ce:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80023d2:	83fb      	strh	r3, [r7, #30]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	461a      	mov	r2, r3
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	441a      	add	r2, r3
 80023e2:	8bfb      	ldrh	r3, [r7, #30]
 80023e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80023f8:	88fb      	ldrh	r3, [r7, #6]
 80023fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d11f      	bne.n	8002442 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	461a      	mov	r2, r3
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4413      	add	r3, r2
 8002410:	881b      	ldrh	r3, [r3, #0]
 8002412:	b29b      	uxth	r3, r3
 8002414:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002418:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800241c:	83bb      	strh	r3, [r7, #28]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	461a      	mov	r2, r3
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	441a      	add	r2, r3
 800242c:	8bbb      	ldrh	r3, [r7, #28]
 800242e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002432:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002436:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800243a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800243e:	b29b      	uxth	r3, r3
 8002440:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002442:	8b7b      	ldrh	r3, [r7, #26]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d008      	beq.n	800245a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6818      	ldr	r0, [r3, #0]
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	6959      	ldr	r1, [r3, #20]
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	895a      	ldrh	r2, [r3, #10]
 8002454:	8b7b      	ldrh	r3, [r7, #26]
 8002456:	f003 fa45 	bl	80058e4 <USB_ReadPMA>
    }
  }

  return count;
 800245a:	8b7b      	ldrh	r3, [r7, #26]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3720      	adds	r7, #32
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b092      	sub	sp, #72	; 0x48
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	4613      	mov	r3, r2
 8002470:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002472:	88fb      	ldrh	r3, [r7, #6]
 8002474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 8132 	beq.w	80026e2 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002486:	b29b      	uxth	r3, r3
 8002488:	461a      	mov	r2, r3
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	4413      	add	r3, r2
 8002492:	3302      	adds	r3, #2
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	6812      	ldr	r2, [r2, #0]
 800249a:	4413      	add	r3, r2
 800249c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024a0:	881b      	ldrh	r3, [r3, #0]
 80024a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024a6:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	699a      	ldr	r2, [r3, #24]
 80024ac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d906      	bls.n	80024c0 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	699a      	ldr	r2, [r3, #24]
 80024b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80024b8:	1ad2      	subs	r2, r2, r3
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	619a      	str	r2, [r3, #24]
 80024be:	e002      	b.n	80024c6 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	2200      	movs	r2, #0
 80024c4:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d12c      	bne.n	8002528 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	4619      	mov	r1, r3
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f005 f87e 	bl	80075d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80024da:	88fb      	ldrh	r3, [r7, #6]
 80024dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f000 822f 	beq.w	8002944 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	461a      	mov	r2, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4413      	add	r3, r2
 80024f4:	881b      	ldrh	r3, [r3, #0]
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002500:	827b      	strh	r3, [r7, #18]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	461a      	mov	r2, r3
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	441a      	add	r2, r3
 8002510:	8a7b      	ldrh	r3, [r7, #18]
 8002512:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002516:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800251a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800251e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002522:	b29b      	uxth	r3, r3
 8002524:	8013      	strh	r3, [r2, #0]
 8002526:	e20d      	b.n	8002944 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002528:	88fb      	ldrh	r3, [r7, #6]
 800252a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d01f      	beq.n	8002572 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	461a      	mov	r2, r3
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4413      	add	r3, r2
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	b29b      	uxth	r3, r3
 8002544:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800254c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	461a      	mov	r2, r3
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	441a      	add	r2, r3
 800255c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800255e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002562:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002566:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800256a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800256e:	b29b      	uxth	r3, r3
 8002570:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002578:	2b01      	cmp	r3, #1
 800257a:	f040 81e3 	bne.w	8002944 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	695a      	ldr	r2, [r3, #20]
 8002582:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002584:	441a      	add	r2, r3
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	69da      	ldr	r2, [r3, #28]
 800258e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002590:	441a      	add	r2, r3
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	6a1a      	ldr	r2, [r3, #32]
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d309      	bcc.n	80025b6 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	6a1a      	ldr	r2, [r3, #32]
 80025ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ae:	1ad2      	subs	r2, r2, r3
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	621a      	str	r2, [r3, #32]
 80025b4:	e014      	b.n	80025e0 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d106      	bne.n	80025cc <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 80025be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80025c0:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80025ca:	e009      	b.n	80025e0 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	2200      	movs	r2, #0
 80025de:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	785b      	ldrb	r3, [r3, #1]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d155      	bne.n	8002694 <HAL_PCD_EP_DB_Transmit+0x230>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	61bb      	str	r3, [r7, #24]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	461a      	mov	r2, r3
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	4413      	add	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	011a      	lsls	r2, r3, #4
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	4413      	add	r3, r2
 800260a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800260e:	617b      	str	r3, [r7, #20]
 8002610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002612:	2b00      	cmp	r3, #0
 8002614:	d112      	bne.n	800263c <HAL_PCD_EP_DB_Transmit+0x1d8>
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	881b      	ldrh	r3, [r3, #0]
 800261a:	b29b      	uxth	r3, r3
 800261c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002620:	b29a      	uxth	r2, r3
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	801a      	strh	r2, [r3, #0]
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	881b      	ldrh	r3, [r3, #0]
 800262a:	b29b      	uxth	r3, r3
 800262c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002630:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002634:	b29a      	uxth	r2, r3
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	801a      	strh	r2, [r3, #0]
 800263a:	e047      	b.n	80026cc <HAL_PCD_EP_DB_Transmit+0x268>
 800263c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800263e:	2b3e      	cmp	r3, #62	; 0x3e
 8002640:	d811      	bhi.n	8002666 <HAL_PCD_EP_DB_Transmit+0x202>
 8002642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002644:	085b      	lsrs	r3, r3, #1
 8002646:	62bb      	str	r3, [r7, #40]	; 0x28
 8002648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d002      	beq.n	8002658 <HAL_PCD_EP_DB_Transmit+0x1f4>
 8002652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002654:	3301      	adds	r3, #1
 8002656:	62bb      	str	r3, [r7, #40]	; 0x28
 8002658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265a:	b29b      	uxth	r3, r3
 800265c:	029b      	lsls	r3, r3, #10
 800265e:	b29a      	uxth	r2, r3
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	801a      	strh	r2, [r3, #0]
 8002664:	e032      	b.n	80026cc <HAL_PCD_EP_DB_Transmit+0x268>
 8002666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002668:	095b      	lsrs	r3, r3, #5
 800266a:	62bb      	str	r3, [r7, #40]	; 0x28
 800266c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800266e:	f003 031f 	and.w	r3, r3, #31
 8002672:	2b00      	cmp	r3, #0
 8002674:	d102      	bne.n	800267c <HAL_PCD_EP_DB_Transmit+0x218>
 8002676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002678:	3b01      	subs	r3, #1
 800267a:	62bb      	str	r3, [r7, #40]	; 0x28
 800267c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267e:	b29b      	uxth	r3, r3
 8002680:	029b      	lsls	r3, r3, #10
 8002682:	b29b      	uxth	r3, r3
 8002684:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002688:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800268c:	b29a      	uxth	r2, r3
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	801a      	strh	r2, [r3, #0]
 8002692:	e01b      	b.n	80026cc <HAL_PCD_EP_DB_Transmit+0x268>
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	785b      	ldrb	r3, [r3, #1]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d117      	bne.n	80026cc <HAL_PCD_EP_DB_Transmit+0x268>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	623b      	str	r3, [r7, #32]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	461a      	mov	r2, r3
 80026ae:	6a3b      	ldr	r3, [r7, #32]
 80026b0:	4413      	add	r3, r2
 80026b2:	623b      	str	r3, [r7, #32]
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	011a      	lsls	r2, r3, #4
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	4413      	add	r3, r2
 80026be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80026c2:	61fb      	str	r3, [r7, #28]
 80026c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6818      	ldr	r0, [r3, #0]
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	6959      	ldr	r1, [r3, #20]
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	891a      	ldrh	r2, [r3, #8]
 80026d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026da:	b29b      	uxth	r3, r3
 80026dc:	f003 f8be 	bl	800585c <USB_WritePMA>
 80026e0:	e130      	b.n	8002944 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	461a      	mov	r2, r3
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	4413      	add	r3, r2
 80026f6:	3306      	adds	r3, #6
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	6812      	ldr	r2, [r2, #0]
 80026fe:	4413      	add	r3, r2
 8002700:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002704:	881b      	ldrh	r3, [r3, #0]
 8002706:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800270a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	699a      	ldr	r2, [r3, #24]
 8002710:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002712:	429a      	cmp	r2, r3
 8002714:	d306      	bcc.n	8002724 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	699a      	ldr	r2, [r3, #24]
 800271a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800271c:	1ad2      	subs	r2, r2, r3
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	619a      	str	r2, [r3, #24]
 8002722:	e002      	b.n	800272a <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	2200      	movs	r2, #0
 8002728:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d12c      	bne.n	800278c <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	4619      	mov	r1, r3
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f004 ff4c 	bl	80075d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800273e:	88fb      	ldrh	r3, [r7, #6]
 8002740:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002744:	2b00      	cmp	r3, #0
 8002746:	f040 80fd 	bne.w	8002944 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	461a      	mov	r2, r3
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	881b      	ldrh	r3, [r3, #0]
 800275a:	b29b      	uxth	r3, r3
 800275c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002760:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002764:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	461a      	mov	r2, r3
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	441a      	add	r2, r3
 8002774:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002776:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800277a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800277e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002786:	b29b      	uxth	r3, r3
 8002788:	8013      	strh	r3, [r2, #0]
 800278a:	e0db      	b.n	8002944 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800278c:	88fb      	ldrh	r3, [r7, #6]
 800278e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d11f      	bne.n	80027d6 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	461a      	mov	r2, r3
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4413      	add	r3, r2
 80027a4:	881b      	ldrh	r3, [r3, #0]
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027b0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	461a      	mov	r2, r3
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	441a      	add	r2, r3
 80027c0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80027c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027dc:	2b01      	cmp	r3, #1
 80027de:	f040 80b1 	bne.w	8002944 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	695a      	ldr	r2, [r3, #20]
 80027e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80027e8:	441a      	add	r2, r3
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	69da      	ldr	r2, [r3, #28]
 80027f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80027f4:	441a      	add	r2, r3
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	6a1a      	ldr	r2, [r3, #32]
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	429a      	cmp	r2, r3
 8002804:	d309      	bcc.n	800281a <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	6a1a      	ldr	r2, [r3, #32]
 8002810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002812:	1ad2      	subs	r2, r2, r3
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	621a      	str	r2, [r3, #32]
 8002818:	e014      	b.n	8002844 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d106      	bne.n	8002830 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8002822:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002824:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800282e:	e009      	b.n	8002844 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	2200      	movs	r2, #0
 800283a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	637b      	str	r3, [r7, #52]	; 0x34
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	785b      	ldrb	r3, [r3, #1]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d155      	bne.n	80028fe <HAL_PCD_EP_DB_Transmit+0x49a>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	647b      	str	r3, [r7, #68]	; 0x44
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002860:	b29b      	uxth	r3, r3
 8002862:	461a      	mov	r2, r3
 8002864:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002866:	4413      	add	r3, r2
 8002868:	647b      	str	r3, [r7, #68]	; 0x44
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	011a      	lsls	r2, r3, #4
 8002870:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002872:	4413      	add	r3, r2
 8002874:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002878:	643b      	str	r3, [r7, #64]	; 0x40
 800287a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800287c:	2b00      	cmp	r3, #0
 800287e:	d112      	bne.n	80028a6 <HAL_PCD_EP_DB_Transmit+0x442>
 8002880:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002882:	881b      	ldrh	r3, [r3, #0]
 8002884:	b29b      	uxth	r3, r3
 8002886:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800288a:	b29a      	uxth	r2, r3
 800288c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800288e:	801a      	strh	r2, [r3, #0]
 8002890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002892:	881b      	ldrh	r3, [r3, #0]
 8002894:	b29b      	uxth	r3, r3
 8002896:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800289a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800289e:	b29a      	uxth	r2, r3
 80028a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028a2:	801a      	strh	r2, [r3, #0]
 80028a4:	e044      	b.n	8002930 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80028a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a8:	2b3e      	cmp	r3, #62	; 0x3e
 80028aa:	d811      	bhi.n	80028d0 <HAL_PCD_EP_DB_Transmit+0x46c>
 80028ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ae:	085b      	lsrs	r3, r3, #1
 80028b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d002      	beq.n	80028c2 <HAL_PCD_EP_DB_Transmit+0x45e>
 80028bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028be:	3301      	adds	r3, #1
 80028c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	029b      	lsls	r3, r3, #10
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028cc:	801a      	strh	r2, [r3, #0]
 80028ce:	e02f      	b.n	8002930 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80028d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d2:	095b      	lsrs	r3, r3, #5
 80028d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d8:	f003 031f 	and.w	r3, r3, #31
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d102      	bne.n	80028e6 <HAL_PCD_EP_DB_Transmit+0x482>
 80028e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028e2:	3b01      	subs	r3, #1
 80028e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	029b      	lsls	r3, r3, #10
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028fa:	801a      	strh	r2, [r3, #0]
 80028fc:	e018      	b.n	8002930 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	785b      	ldrb	r3, [r3, #1]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d114      	bne.n	8002930 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800290e:	b29b      	uxth	r3, r3
 8002910:	461a      	mov	r2, r3
 8002912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002914:	4413      	add	r3, r2
 8002916:	637b      	str	r3, [r7, #52]	; 0x34
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	011a      	lsls	r2, r3, #4
 800291e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002920:	4413      	add	r3, r2
 8002922:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002926:	633b      	str	r3, [r7, #48]	; 0x30
 8002928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800292a:	b29a      	uxth	r2, r3
 800292c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800292e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6818      	ldr	r0, [r3, #0]
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	6959      	ldr	r1, [r3, #20]
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	895a      	ldrh	r2, [r3, #10]
 800293c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800293e:	b29b      	uxth	r3, r3
 8002940:	f002 ff8c 	bl	800585c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	461a      	mov	r2, r3
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4413      	add	r3, r2
 8002952:	881b      	ldrh	r3, [r3, #0]
 8002954:	b29b      	uxth	r3, r3
 8002956:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800295a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800295e:	823b      	strh	r3, [r7, #16]
 8002960:	8a3b      	ldrh	r3, [r7, #16]
 8002962:	f083 0310 	eor.w	r3, r3, #16
 8002966:	823b      	strh	r3, [r7, #16]
 8002968:	8a3b      	ldrh	r3, [r7, #16]
 800296a:	f083 0320 	eor.w	r3, r3, #32
 800296e:	823b      	strh	r3, [r7, #16]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	461a      	mov	r2, r3
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	441a      	add	r2, r3
 800297e:	8a3b      	ldrh	r3, [r7, #16]
 8002980:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002984:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002988:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800298c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002990:	b29b      	uxth	r3, r3
 8002992:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3748      	adds	r7, #72	; 0x48
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800299e:	b480      	push	{r7}
 80029a0:	b087      	sub	sp, #28
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	60f8      	str	r0, [r7, #12]
 80029a6:	607b      	str	r3, [r7, #4]
 80029a8:	460b      	mov	r3, r1
 80029aa:	817b      	strh	r3, [r7, #10]
 80029ac:	4613      	mov	r3, r2
 80029ae:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80029b0:	897b      	ldrh	r3, [r7, #10]
 80029b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00b      	beq.n	80029d4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029bc:	897b      	ldrh	r3, [r7, #10]
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	1c5a      	adds	r2, r3, #1
 80029c4:	4613      	mov	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	4413      	add	r3, r2
 80029d0:	617b      	str	r3, [r7, #20]
 80029d2:	e009      	b.n	80029e8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029d4:	897a      	ldrh	r2, [r7, #10]
 80029d6:	4613      	mov	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4413      	add	r3, r2
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	4413      	add	r3, r2
 80029e6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80029e8:	893b      	ldrh	r3, [r7, #8]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d107      	bne.n	80029fe <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	2200      	movs	r2, #0
 80029f2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	80da      	strh	r2, [r3, #6]
 80029fc:	e00b      	b.n	8002a16 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	2201      	movs	r2, #1
 8002a02:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	0c1b      	lsrs	r3, r3, #16
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	371c      	adds	r7, #28
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr
	...

08002a24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e26c      	b.n	8002f10 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 8087 	beq.w	8002b52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a44:	4b92      	ldr	r3, [pc, #584]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f003 030c 	and.w	r3, r3, #12
 8002a4c:	2b04      	cmp	r3, #4
 8002a4e:	d00c      	beq.n	8002a6a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a50:	4b8f      	ldr	r3, [pc, #572]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f003 030c 	and.w	r3, r3, #12
 8002a58:	2b08      	cmp	r3, #8
 8002a5a:	d112      	bne.n	8002a82 <HAL_RCC_OscConfig+0x5e>
 8002a5c:	4b8c      	ldr	r3, [pc, #560]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a68:	d10b      	bne.n	8002a82 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a6a:	4b89      	ldr	r3, [pc, #548]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d06c      	beq.n	8002b50 <HAL_RCC_OscConfig+0x12c>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d168      	bne.n	8002b50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e246      	b.n	8002f10 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a8a:	d106      	bne.n	8002a9a <HAL_RCC_OscConfig+0x76>
 8002a8c:	4b80      	ldr	r3, [pc, #512]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a7f      	ldr	r2, [pc, #508]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002a92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a96:	6013      	str	r3, [r2, #0]
 8002a98:	e02e      	b.n	8002af8 <HAL_RCC_OscConfig+0xd4>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10c      	bne.n	8002abc <HAL_RCC_OscConfig+0x98>
 8002aa2:	4b7b      	ldr	r3, [pc, #492]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a7a      	ldr	r2, [pc, #488]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002aa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aac:	6013      	str	r3, [r2, #0]
 8002aae:	4b78      	ldr	r3, [pc, #480]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a77      	ldr	r2, [pc, #476]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002ab4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ab8:	6013      	str	r3, [r2, #0]
 8002aba:	e01d      	b.n	8002af8 <HAL_RCC_OscConfig+0xd4>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ac4:	d10c      	bne.n	8002ae0 <HAL_RCC_OscConfig+0xbc>
 8002ac6:	4b72      	ldr	r3, [pc, #456]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a71      	ldr	r2, [pc, #452]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002acc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	4b6f      	ldr	r3, [pc, #444]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a6e      	ldr	r2, [pc, #440]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	e00b      	b.n	8002af8 <HAL_RCC_OscConfig+0xd4>
 8002ae0:	4b6b      	ldr	r3, [pc, #428]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a6a      	ldr	r2, [pc, #424]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aea:	6013      	str	r3, [r2, #0]
 8002aec:	4b68      	ldr	r3, [pc, #416]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a67      	ldr	r2, [pc, #412]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002af2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002af6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d013      	beq.n	8002b28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b00:	f7fd feee 	bl	80008e0 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b08:	f7fd feea 	bl	80008e0 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b64      	cmp	r3, #100	; 0x64
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e1fa      	b.n	8002f10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1a:	4b5d      	ldr	r3, [pc, #372]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0f0      	beq.n	8002b08 <HAL_RCC_OscConfig+0xe4>
 8002b26:	e014      	b.n	8002b52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b28:	f7fd feda 	bl	80008e0 <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b30:	f7fd fed6 	bl	80008e0 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b64      	cmp	r3, #100	; 0x64
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e1e6      	b.n	8002f10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b42:	4b53      	ldr	r3, [pc, #332]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1f0      	bne.n	8002b30 <HAL_RCC_OscConfig+0x10c>
 8002b4e:	e000      	b.n	8002b52 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d063      	beq.n	8002c26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b5e:	4b4c      	ldr	r3, [pc, #304]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f003 030c 	and.w	r3, r3, #12
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00b      	beq.n	8002b82 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b6a:	4b49      	ldr	r3, [pc, #292]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f003 030c 	and.w	r3, r3, #12
 8002b72:	2b08      	cmp	r3, #8
 8002b74:	d11c      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x18c>
 8002b76:	4b46      	ldr	r3, [pc, #280]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d116      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b82:	4b43      	ldr	r3, [pc, #268]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d005      	beq.n	8002b9a <HAL_RCC_OscConfig+0x176>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d001      	beq.n	8002b9a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e1ba      	b.n	8002f10 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b9a:	4b3d      	ldr	r3, [pc, #244]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	4939      	ldr	r1, [pc, #228]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bae:	e03a      	b.n	8002c26 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d020      	beq.n	8002bfa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bb8:	4b36      	ldr	r3, [pc, #216]	; (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002bba:	2201      	movs	r2, #1
 8002bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bbe:	f7fd fe8f 	bl	80008e0 <HAL_GetTick>
 8002bc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc4:	e008      	b.n	8002bd8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bc6:	f7fd fe8b 	bl	80008e0 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e19b      	b.n	8002f10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd8:	4b2d      	ldr	r3, [pc, #180]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d0f0      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be4:	4b2a      	ldr	r3, [pc, #168]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	4927      	ldr	r1, [pc, #156]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	600b      	str	r3, [r1, #0]
 8002bf8:	e015      	b.n	8002c26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bfa:	4b26      	ldr	r3, [pc, #152]	; (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c00:	f7fd fe6e 	bl	80008e0 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c08:	f7fd fe6a 	bl	80008e0 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e17a      	b.n	8002f10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c1a:	4b1d      	ldr	r3, [pc, #116]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1f0      	bne.n	8002c08 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d03a      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d019      	beq.n	8002c6e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c3a:	4b17      	ldr	r3, [pc, #92]	; (8002c98 <HAL_RCC_OscConfig+0x274>)
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c40:	f7fd fe4e 	bl	80008e0 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c48:	f7fd fe4a 	bl	80008e0 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e15a      	b.n	8002f10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c5a:	4b0d      	ldr	r3, [pc, #52]	; (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0f0      	beq.n	8002c48 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c66:	2001      	movs	r0, #1
 8002c68:	f000 faa8 	bl	80031bc <RCC_Delay>
 8002c6c:	e01c      	b.n	8002ca8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c6e:	4b0a      	ldr	r3, [pc, #40]	; (8002c98 <HAL_RCC_OscConfig+0x274>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c74:	f7fd fe34 	bl	80008e0 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c7a:	e00f      	b.n	8002c9c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c7c:	f7fd fe30 	bl	80008e0 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d908      	bls.n	8002c9c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e140      	b.n	8002f10 <HAL_RCC_OscConfig+0x4ec>
 8002c8e:	bf00      	nop
 8002c90:	40021000 	.word	0x40021000
 8002c94:	42420000 	.word	0x42420000
 8002c98:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c9c:	4b9e      	ldr	r3, [pc, #632]	; (8002f18 <HAL_RCC_OscConfig+0x4f4>)
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1e9      	bne.n	8002c7c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f000 80a6 	beq.w	8002e02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cba:	4b97      	ldr	r3, [pc, #604]	; (8002f18 <HAL_RCC_OscConfig+0x4f4>)
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10d      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cc6:	4b94      	ldr	r3, [pc, #592]	; (8002f18 <HAL_RCC_OscConfig+0x4f4>)
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	4a93      	ldr	r2, [pc, #588]	; (8002f18 <HAL_RCC_OscConfig+0x4f4>)
 8002ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd0:	61d3      	str	r3, [r2, #28]
 8002cd2:	4b91      	ldr	r3, [pc, #580]	; (8002f18 <HAL_RCC_OscConfig+0x4f4>)
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cda:	60bb      	str	r3, [r7, #8]
 8002cdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce2:	4b8e      	ldr	r3, [pc, #568]	; (8002f1c <HAL_RCC_OscConfig+0x4f8>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d118      	bne.n	8002d20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cee:	4b8b      	ldr	r3, [pc, #556]	; (8002f1c <HAL_RCC_OscConfig+0x4f8>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a8a      	ldr	r2, [pc, #552]	; (8002f1c <HAL_RCC_OscConfig+0x4f8>)
 8002cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cfa:	f7fd fdf1 	bl	80008e0 <HAL_GetTick>
 8002cfe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d02:	f7fd fded 	bl	80008e0 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b64      	cmp	r3, #100	; 0x64
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e0fd      	b.n	8002f10 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d14:	4b81      	ldr	r3, [pc, #516]	; (8002f1c <HAL_RCC_OscConfig+0x4f8>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0f0      	beq.n	8002d02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d106      	bne.n	8002d36 <HAL_RCC_OscConfig+0x312>
 8002d28:	4b7b      	ldr	r3, [pc, #492]	; (8002f18 <HAL_RCC_OscConfig+0x4f4>)
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	4a7a      	ldr	r2, [pc, #488]	; (8002f18 <HAL_RCC_OscConfig+0x4f4>)
 8002d2e:	f043 0301 	orr.w	r3, r3, #1
 8002d32:	6213      	str	r3, [r2, #32]
 8002d34:	e02d      	b.n	8002d92 <HAL_RCC_OscConfig+0x36e>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10c      	bne.n	8002d58 <HAL_RCC_OscConfig+0x334>
 8002d3e:	4b76      	ldr	r3, [pc, #472]	; (8002f18 <HAL_RCC_OscConfig+0x4f4>)
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	4a75      	ldr	r2, [pc, #468]	; (8002f18 <HAL_RCC_OscConfig+0x4f4>)
 8002d44:	f023 0301 	bic.w	r3, r3, #1
 8002d48:	6213      	str	r3, [r2, #32]
 8002d4a:	4b73      	ldr	r3, [pc, #460]	; (8002f18 <HAL_RCC_OscConfig+0x4f4>)
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	4a72      	ldr	r2, [pc, #456]	; (8002f18 <HAL_RCC_OscConfig+0x4f4>)
 8002d50:	f023 0304 	bic.w	r3, r3, #4
 8002d54:	6213      	str	r3, [r2, #32]
 8002d56:	e01c      	b.n	8002d92 <HAL_RCC_OscConfig+0x36e>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	2b05      	cmp	r3, #5
 8002d5e:	d10c      	bne.n	8002d7a <HAL_RCC_OscConfig+0x356>
 8002d60:	4b6d      	ldr	r3, [pc, #436]	; (8002f18 <HAL_RCC_OscConfig+0x4f4>)
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	4a6c      	ldr	r2, [pc, #432]	; (8002f18 <HAL_RCC_OscConfig+0x4f4>)
 8002d66:	f043 0304 	orr.w	r3, r3, #4
 8002d6a:	6213      	str	r3, [r2, #32]
 8002d6c:	4b6a      	ldr	r3, [pc, #424]	; (8002f18 <HAL_RCC_OscConfig+0x4f4>)
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	4a69      	ldr	r2, [pc, #420]	; (8002f18 <HAL_RCC_OscConfig+0x4f4>)
 8002d72:	f043 0301 	orr.w	r3, r3, #1
 8002d76:	6213      	str	r3, [r2, #32]
 8002d78:	e00b      	b.n	8002d92 <HAL_RCC_OscConfig+0x36e>
 8002d7a:	4b67      	ldr	r3, [pc, #412]	; (8002f18 <HAL_RCC_OscConfig+0x4f4>)
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	4a66      	ldr	r2, [pc, #408]	; (8002f18 <HAL_RCC_OscConfig+0x4f4>)
 8002d80:	f023 0301 	bic.w	r3, r3, #1
 8002d84:	6213      	str	r3, [r2, #32]
 8002d86:	4b64      	ldr	r3, [pc, #400]	; (8002f18 <HAL_RCC_OscConfig+0x4f4>)
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	4a63      	ldr	r2, [pc, #396]	; (8002f18 <HAL_RCC_OscConfig+0x4f4>)
 8002d8c:	f023 0304 	bic.w	r3, r3, #4
 8002d90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d015      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d9a:	f7fd fda1 	bl	80008e0 <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da0:	e00a      	b.n	8002db8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002da2:	f7fd fd9d 	bl	80008e0 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e0ab      	b.n	8002f10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db8:	4b57      	ldr	r3, [pc, #348]	; (8002f18 <HAL_RCC_OscConfig+0x4f4>)
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0ee      	beq.n	8002da2 <HAL_RCC_OscConfig+0x37e>
 8002dc4:	e014      	b.n	8002df0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc6:	f7fd fd8b 	bl	80008e0 <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dcc:	e00a      	b.n	8002de4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dce:	f7fd fd87 	bl	80008e0 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e095      	b.n	8002f10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002de4:	4b4c      	ldr	r3, [pc, #304]	; (8002f18 <HAL_RCC_OscConfig+0x4f4>)
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1ee      	bne.n	8002dce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002df0:	7dfb      	ldrb	r3, [r7, #23]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d105      	bne.n	8002e02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002df6:	4b48      	ldr	r3, [pc, #288]	; (8002f18 <HAL_RCC_OscConfig+0x4f4>)
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	4a47      	ldr	r2, [pc, #284]	; (8002f18 <HAL_RCC_OscConfig+0x4f4>)
 8002dfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 8081 	beq.w	8002f0e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e0c:	4b42      	ldr	r3, [pc, #264]	; (8002f18 <HAL_RCC_OscConfig+0x4f4>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f003 030c 	and.w	r3, r3, #12
 8002e14:	2b08      	cmp	r3, #8
 8002e16:	d061      	beq.n	8002edc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	69db      	ldr	r3, [r3, #28]
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d146      	bne.n	8002eae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e20:	4b3f      	ldr	r3, [pc, #252]	; (8002f20 <HAL_RCC_OscConfig+0x4fc>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e26:	f7fd fd5b 	bl	80008e0 <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e2c:	e008      	b.n	8002e40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e2e:	f7fd fd57 	bl	80008e0 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e067      	b.n	8002f10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e40:	4b35      	ldr	r3, [pc, #212]	; (8002f18 <HAL_RCC_OscConfig+0x4f4>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1f0      	bne.n	8002e2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e54:	d108      	bne.n	8002e68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e56:	4b30      	ldr	r3, [pc, #192]	; (8002f18 <HAL_RCC_OscConfig+0x4f4>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	492d      	ldr	r1, [pc, #180]	; (8002f18 <HAL_RCC_OscConfig+0x4f4>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e68:	4b2b      	ldr	r3, [pc, #172]	; (8002f18 <HAL_RCC_OscConfig+0x4f4>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a19      	ldr	r1, [r3, #32]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e78:	430b      	orrs	r3, r1
 8002e7a:	4927      	ldr	r1, [pc, #156]	; (8002f18 <HAL_RCC_OscConfig+0x4f4>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e80:	4b27      	ldr	r3, [pc, #156]	; (8002f20 <HAL_RCC_OscConfig+0x4fc>)
 8002e82:	2201      	movs	r2, #1
 8002e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e86:	f7fd fd2b 	bl	80008e0 <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e8c:	e008      	b.n	8002ea0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e8e:	f7fd fd27 	bl	80008e0 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e037      	b.n	8002f10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ea0:	4b1d      	ldr	r3, [pc, #116]	; (8002f18 <HAL_RCC_OscConfig+0x4f4>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0f0      	beq.n	8002e8e <HAL_RCC_OscConfig+0x46a>
 8002eac:	e02f      	b.n	8002f0e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eae:	4b1c      	ldr	r3, [pc, #112]	; (8002f20 <HAL_RCC_OscConfig+0x4fc>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb4:	f7fd fd14 	bl	80008e0 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ebc:	f7fd fd10 	bl	80008e0 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e020      	b.n	8002f10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ece:	4b12      	ldr	r3, [pc, #72]	; (8002f18 <HAL_RCC_OscConfig+0x4f4>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1f0      	bne.n	8002ebc <HAL_RCC_OscConfig+0x498>
 8002eda:	e018      	b.n	8002f0e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	69db      	ldr	r3, [r3, #28]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d101      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e013      	b.n	8002f10 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ee8:	4b0b      	ldr	r3, [pc, #44]	; (8002f18 <HAL_RCC_OscConfig+0x4f4>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d106      	bne.n	8002f0a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d001      	beq.n	8002f0e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e000      	b.n	8002f10 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3718      	adds	r7, #24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	40007000 	.word	0x40007000
 8002f20:	42420060 	.word	0x42420060

08002f24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0d0      	b.n	80030da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f38:	4b6a      	ldr	r3, [pc, #424]	; (80030e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d910      	bls.n	8002f68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f46:	4b67      	ldr	r3, [pc, #412]	; (80030e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f023 0207 	bic.w	r2, r3, #7
 8002f4e:	4965      	ldr	r1, [pc, #404]	; (80030e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f56:	4b63      	ldr	r3, [pc, #396]	; (80030e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d001      	beq.n	8002f68 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e0b8      	b.n	80030da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d020      	beq.n	8002fb6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0304 	and.w	r3, r3, #4
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d005      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f80:	4b59      	ldr	r3, [pc, #356]	; (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	4a58      	ldr	r2, [pc, #352]	; (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f86:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f8a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0308 	and.w	r3, r3, #8
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d005      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f98:	4b53      	ldr	r3, [pc, #332]	; (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	4a52      	ldr	r2, [pc, #328]	; (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002fa2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa4:	4b50      	ldr	r3, [pc, #320]	; (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	494d      	ldr	r1, [pc, #308]	; (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d040      	beq.n	8003044 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d107      	bne.n	8002fda <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fca:	4b47      	ldr	r3, [pc, #284]	; (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d115      	bne.n	8003002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e07f      	b.n	80030da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d107      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe2:	4b41      	ldr	r3, [pc, #260]	; (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d109      	bne.n	8003002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e073      	b.n	80030da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff2:	4b3d      	ldr	r3, [pc, #244]	; (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e06b      	b.n	80030da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003002:	4b39      	ldr	r3, [pc, #228]	; (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f023 0203 	bic.w	r2, r3, #3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	4936      	ldr	r1, [pc, #216]	; (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003010:	4313      	orrs	r3, r2
 8003012:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003014:	f7fd fc64 	bl	80008e0 <HAL_GetTick>
 8003018:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301a:	e00a      	b.n	8003032 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800301c:	f7fd fc60 	bl	80008e0 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	f241 3288 	movw	r2, #5000	; 0x1388
 800302a:	4293      	cmp	r3, r2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e053      	b.n	80030da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003032:	4b2d      	ldr	r3, [pc, #180]	; (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f003 020c 	and.w	r2, r3, #12
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	429a      	cmp	r2, r3
 8003042:	d1eb      	bne.n	800301c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003044:	4b27      	ldr	r3, [pc, #156]	; (80030e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	429a      	cmp	r2, r3
 8003050:	d210      	bcs.n	8003074 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003052:	4b24      	ldr	r3, [pc, #144]	; (80030e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f023 0207 	bic.w	r2, r3, #7
 800305a:	4922      	ldr	r1, [pc, #136]	; (80030e4 <HAL_RCC_ClockConfig+0x1c0>)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	4313      	orrs	r3, r2
 8003060:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003062:	4b20      	ldr	r3, [pc, #128]	; (80030e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	429a      	cmp	r2, r3
 800306e:	d001      	beq.n	8003074 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e032      	b.n	80030da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b00      	cmp	r3, #0
 800307e:	d008      	beq.n	8003092 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003080:	4b19      	ldr	r3, [pc, #100]	; (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	4916      	ldr	r1, [pc, #88]	; (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 800308e:	4313      	orrs	r3, r2
 8003090:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b00      	cmp	r3, #0
 800309c:	d009      	beq.n	80030b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800309e:	4b12      	ldr	r3, [pc, #72]	; (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	490e      	ldr	r1, [pc, #56]	; (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030b2:	f000 f821 	bl	80030f8 <HAL_RCC_GetSysClockFreq>
 80030b6:	4601      	mov	r1, r0
 80030b8:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	091b      	lsrs	r3, r3, #4
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	4a0a      	ldr	r2, [pc, #40]	; (80030ec <HAL_RCC_ClockConfig+0x1c8>)
 80030c4:	5cd3      	ldrb	r3, [r2, r3]
 80030c6:	fa21 f303 	lsr.w	r3, r1, r3
 80030ca:	4a09      	ldr	r2, [pc, #36]	; (80030f0 <HAL_RCC_ClockConfig+0x1cc>)
 80030cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030ce:	4b09      	ldr	r3, [pc, #36]	; (80030f4 <HAL_RCC_ClockConfig+0x1d0>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fd fbc2 	bl	800085c <HAL_InitTick>

  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40022000 	.word	0x40022000
 80030e8:	40021000 	.word	0x40021000
 80030ec:	08008a70 	.word	0x08008a70
 80030f0:	20000000 	.word	0x20000000
 80030f4:	20000004 	.word	0x20000004

080030f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030f8:	b490      	push	{r4, r7}
 80030fa:	b08a      	sub	sp, #40	; 0x28
 80030fc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80030fe:	4b2a      	ldr	r3, [pc, #168]	; (80031a8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003100:	1d3c      	adds	r4, r7, #4
 8003102:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003104:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003108:	4b28      	ldr	r3, [pc, #160]	; (80031ac <HAL_RCC_GetSysClockFreq+0xb4>)
 800310a:	881b      	ldrh	r3, [r3, #0]
 800310c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800310e:	2300      	movs	r3, #0
 8003110:	61fb      	str	r3, [r7, #28]
 8003112:	2300      	movs	r3, #0
 8003114:	61bb      	str	r3, [r7, #24]
 8003116:	2300      	movs	r3, #0
 8003118:	627b      	str	r3, [r7, #36]	; 0x24
 800311a:	2300      	movs	r3, #0
 800311c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800311e:	2300      	movs	r3, #0
 8003120:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003122:	4b23      	ldr	r3, [pc, #140]	; (80031b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	f003 030c 	and.w	r3, r3, #12
 800312e:	2b04      	cmp	r3, #4
 8003130:	d002      	beq.n	8003138 <HAL_RCC_GetSysClockFreq+0x40>
 8003132:	2b08      	cmp	r3, #8
 8003134:	d003      	beq.n	800313e <HAL_RCC_GetSysClockFreq+0x46>
 8003136:	e02d      	b.n	8003194 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003138:	4b1e      	ldr	r3, [pc, #120]	; (80031b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800313a:	623b      	str	r3, [r7, #32]
      break;
 800313c:	e02d      	b.n	800319a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	0c9b      	lsrs	r3, r3, #18
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800314a:	4413      	add	r3, r2
 800314c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003150:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d013      	beq.n	8003184 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800315c:	4b14      	ldr	r3, [pc, #80]	; (80031b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	0c5b      	lsrs	r3, r3, #17
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800316a:	4413      	add	r3, r2
 800316c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003170:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	4a0f      	ldr	r2, [pc, #60]	; (80031b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003176:	fb02 f203 	mul.w	r2, r2, r3
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003180:	627b      	str	r3, [r7, #36]	; 0x24
 8003182:	e004      	b.n	800318e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	4a0c      	ldr	r2, [pc, #48]	; (80031b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003188:	fb02 f303 	mul.w	r3, r2, r3
 800318c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	623b      	str	r3, [r7, #32]
      break;
 8003192:	e002      	b.n	800319a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003194:	4b07      	ldr	r3, [pc, #28]	; (80031b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003196:	623b      	str	r3, [r7, #32]
      break;
 8003198:	bf00      	nop
    }
  }
  return sysclockfreq;
 800319a:	6a3b      	ldr	r3, [r7, #32]
}
 800319c:	4618      	mov	r0, r3
 800319e:	3728      	adds	r7, #40	; 0x28
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bc90      	pop	{r4, r7}
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	080089e0 	.word	0x080089e0
 80031ac:	080089f0 	.word	0x080089f0
 80031b0:	40021000 	.word	0x40021000
 80031b4:	007a1200 	.word	0x007a1200
 80031b8:	003d0900 	.word	0x003d0900

080031bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031c4:	4b0a      	ldr	r3, [pc, #40]	; (80031f0 <RCC_Delay+0x34>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a0a      	ldr	r2, [pc, #40]	; (80031f4 <RCC_Delay+0x38>)
 80031ca:	fba2 2303 	umull	r2, r3, r2, r3
 80031ce:	0a5b      	lsrs	r3, r3, #9
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	fb02 f303 	mul.w	r3, r2, r3
 80031d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031d8:	bf00      	nop
  }
  while (Delay --);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	1e5a      	subs	r2, r3, #1
 80031de:	60fa      	str	r2, [r7, #12]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1f9      	bne.n	80031d8 <RCC_Delay+0x1c>
}
 80031e4:	bf00      	nop
 80031e6:	3714      	adds	r7, #20
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bc80      	pop	{r7}
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	20000000 	.word	0x20000000
 80031f4:	10624dd3 	.word	0x10624dd3

080031f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	613b      	str	r3, [r7, #16]
 8003204:	2300      	movs	r3, #0
 8003206:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b00      	cmp	r3, #0
 8003212:	d07d      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003214:	2300      	movs	r3, #0
 8003216:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003218:	4b4f      	ldr	r3, [pc, #316]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d10d      	bne.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003224:	4b4c      	ldr	r3, [pc, #304]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003226:	69db      	ldr	r3, [r3, #28]
 8003228:	4a4b      	ldr	r2, [pc, #300]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800322a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800322e:	61d3      	str	r3, [r2, #28]
 8003230:	4b49      	ldr	r3, [pc, #292]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003232:	69db      	ldr	r3, [r3, #28]
 8003234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003238:	60bb      	str	r3, [r7, #8]
 800323a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800323c:	2301      	movs	r3, #1
 800323e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003240:	4b46      	ldr	r3, [pc, #280]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003248:	2b00      	cmp	r3, #0
 800324a:	d118      	bne.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800324c:	4b43      	ldr	r3, [pc, #268]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a42      	ldr	r2, [pc, #264]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003252:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003256:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003258:	f7fd fb42 	bl	80008e0 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800325e:	e008      	b.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003260:	f7fd fb3e 	bl	80008e0 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b64      	cmp	r3, #100	; 0x64
 800326c:	d901      	bls.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e06d      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003272:	4b3a      	ldr	r3, [pc, #232]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0f0      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800327e:	4b36      	ldr	r3, [pc, #216]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003286:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d02e      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	429a      	cmp	r2, r3
 800329a:	d027      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800329c:	4b2e      	ldr	r3, [pc, #184]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032a4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032a6:	4b2e      	ldr	r3, [pc, #184]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032a8:	2201      	movs	r2, #1
 80032aa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032ac:	4b2c      	ldr	r3, [pc, #176]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032b2:	4a29      	ldr	r2, [pc, #164]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d014      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c2:	f7fd fb0d 	bl	80008e0 <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c8:	e00a      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ca:	f7fd fb09 	bl	80008e0 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d8:	4293      	cmp	r3, r2
 80032da:	d901      	bls.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e036      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e0:	4b1d      	ldr	r3, [pc, #116]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0ee      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032ec:	4b1a      	ldr	r3, [pc, #104]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	4917      	ldr	r1, [pc, #92]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032fe:	7dfb      	ldrb	r3, [r7, #23]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d105      	bne.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003304:	4b14      	ldr	r3, [pc, #80]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003306:	69db      	ldr	r3, [r3, #28]
 8003308:	4a13      	ldr	r2, [pc, #76]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800330a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800330e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d008      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800331c:	4b0e      	ldr	r3, [pc, #56]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	490b      	ldr	r1, [pc, #44]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800332a:	4313      	orrs	r3, r2
 800332c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0310 	and.w	r3, r3, #16
 8003336:	2b00      	cmp	r3, #0
 8003338:	d008      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800333a:	4b07      	ldr	r3, [pc, #28]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	4904      	ldr	r1, [pc, #16]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003348:	4313      	orrs	r3, r2
 800334a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3718      	adds	r7, #24
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	40021000 	.word	0x40021000
 800335c:	40007000 	.word	0x40007000
 8003360:	42420440 	.word	0x42420440

08003364 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e041      	b.n	80033fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d106      	bne.n	8003390 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7fd f98a 	bl	80006a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2202      	movs	r2, #2
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3304      	adds	r3, #4
 80033a0:	4619      	mov	r1, r3
 80033a2:	4610      	mov	r0, r2
 80033a4:	f000 f8e4 	bl	8003570 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b084      	sub	sp, #16
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
 800340a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003412:	2b01      	cmp	r3, #1
 8003414:	d101      	bne.n	800341a <HAL_TIM_ConfigClockSource+0x18>
 8003416:	2302      	movs	r3, #2
 8003418:	e0a6      	b.n	8003568 <HAL_TIM_ConfigClockSource+0x166>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2202      	movs	r2, #2
 8003426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003438:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003440:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2b40      	cmp	r3, #64	; 0x40
 8003450:	d067      	beq.n	8003522 <HAL_TIM_ConfigClockSource+0x120>
 8003452:	2b40      	cmp	r3, #64	; 0x40
 8003454:	d80b      	bhi.n	800346e <HAL_TIM_ConfigClockSource+0x6c>
 8003456:	2b10      	cmp	r3, #16
 8003458:	d073      	beq.n	8003542 <HAL_TIM_ConfigClockSource+0x140>
 800345a:	2b10      	cmp	r3, #16
 800345c:	d802      	bhi.n	8003464 <HAL_TIM_ConfigClockSource+0x62>
 800345e:	2b00      	cmp	r3, #0
 8003460:	d06f      	beq.n	8003542 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003462:	e078      	b.n	8003556 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003464:	2b20      	cmp	r3, #32
 8003466:	d06c      	beq.n	8003542 <HAL_TIM_ConfigClockSource+0x140>
 8003468:	2b30      	cmp	r3, #48	; 0x30
 800346a:	d06a      	beq.n	8003542 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800346c:	e073      	b.n	8003556 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800346e:	2b70      	cmp	r3, #112	; 0x70
 8003470:	d00d      	beq.n	800348e <HAL_TIM_ConfigClockSource+0x8c>
 8003472:	2b70      	cmp	r3, #112	; 0x70
 8003474:	d804      	bhi.n	8003480 <HAL_TIM_ConfigClockSource+0x7e>
 8003476:	2b50      	cmp	r3, #80	; 0x50
 8003478:	d033      	beq.n	80034e2 <HAL_TIM_ConfigClockSource+0xe0>
 800347a:	2b60      	cmp	r3, #96	; 0x60
 800347c:	d041      	beq.n	8003502 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800347e:	e06a      	b.n	8003556 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003480:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003484:	d066      	beq.n	8003554 <HAL_TIM_ConfigClockSource+0x152>
 8003486:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800348a:	d017      	beq.n	80034bc <HAL_TIM_ConfigClockSource+0xba>
      break;
 800348c:	e063      	b.n	8003556 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6818      	ldr	r0, [r3, #0]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	6899      	ldr	r1, [r3, #8]
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	f000 f940 	bl	8003722 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034b0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	609a      	str	r2, [r3, #8]
      break;
 80034ba:	e04c      	b.n	8003556 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6818      	ldr	r0, [r3, #0]
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	6899      	ldr	r1, [r3, #8]
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685a      	ldr	r2, [r3, #4]
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	f000 f929 	bl	8003722 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689a      	ldr	r2, [r3, #8]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034de:	609a      	str	r2, [r3, #8]
      break;
 80034e0:	e039      	b.n	8003556 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6818      	ldr	r0, [r3, #0]
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	6859      	ldr	r1, [r3, #4]
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	461a      	mov	r2, r3
 80034f0:	f000 f8a0 	bl	8003634 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2150      	movs	r1, #80	; 0x50
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 f8f7 	bl	80036ee <TIM_ITRx_SetConfig>
      break;
 8003500:	e029      	b.n	8003556 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6818      	ldr	r0, [r3, #0]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	6859      	ldr	r1, [r3, #4]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	461a      	mov	r2, r3
 8003510:	f000 f8be 	bl	8003690 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2160      	movs	r1, #96	; 0x60
 800351a:	4618      	mov	r0, r3
 800351c:	f000 f8e7 	bl	80036ee <TIM_ITRx_SetConfig>
      break;
 8003520:	e019      	b.n	8003556 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6818      	ldr	r0, [r3, #0]
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	6859      	ldr	r1, [r3, #4]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	461a      	mov	r2, r3
 8003530:	f000 f880 	bl	8003634 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2140      	movs	r1, #64	; 0x40
 800353a:	4618      	mov	r0, r3
 800353c:	f000 f8d7 	bl	80036ee <TIM_ITRx_SetConfig>
      break;
 8003540:	e009      	b.n	8003556 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4619      	mov	r1, r3
 800354c:	4610      	mov	r0, r2
 800354e:	f000 f8ce 	bl	80036ee <TIM_ITRx_SetConfig>
        break;
 8003552:	e000      	b.n	8003556 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003554:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a29      	ldr	r2, [pc, #164]	; (8003628 <TIM_Base_SetConfig+0xb8>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d00b      	beq.n	80035a0 <TIM_Base_SetConfig+0x30>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800358e:	d007      	beq.n	80035a0 <TIM_Base_SetConfig+0x30>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a26      	ldr	r2, [pc, #152]	; (800362c <TIM_Base_SetConfig+0xbc>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d003      	beq.n	80035a0 <TIM_Base_SetConfig+0x30>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a25      	ldr	r2, [pc, #148]	; (8003630 <TIM_Base_SetConfig+0xc0>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d108      	bne.n	80035b2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a1c      	ldr	r2, [pc, #112]	; (8003628 <TIM_Base_SetConfig+0xb8>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d00b      	beq.n	80035d2 <TIM_Base_SetConfig+0x62>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035c0:	d007      	beq.n	80035d2 <TIM_Base_SetConfig+0x62>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a19      	ldr	r2, [pc, #100]	; (800362c <TIM_Base_SetConfig+0xbc>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d003      	beq.n	80035d2 <TIM_Base_SetConfig+0x62>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a18      	ldr	r2, [pc, #96]	; (8003630 <TIM_Base_SetConfig+0xc0>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d108      	bne.n	80035e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a07      	ldr	r2, [pc, #28]	; (8003628 <TIM_Base_SetConfig+0xb8>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d103      	bne.n	8003618 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	691a      	ldr	r2, [r3, #16]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	615a      	str	r2, [r3, #20]
}
 800361e:	bf00      	nop
 8003620:	3714      	adds	r7, #20
 8003622:	46bd      	mov	sp, r7
 8003624:	bc80      	pop	{r7}
 8003626:	4770      	bx	lr
 8003628:	40012c00 	.word	0x40012c00
 800362c:	40000400 	.word	0x40000400
 8003630:	40000800 	.word	0x40000800

08003634 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003634:	b480      	push	{r7}
 8003636:	b087      	sub	sp, #28
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	f023 0201 	bic.w	r2, r3, #1
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800365e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	011b      	lsls	r3, r3, #4
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	4313      	orrs	r3, r2
 8003668:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f023 030a 	bic.w	r3, r3, #10
 8003670:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	4313      	orrs	r3, r2
 8003678:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	621a      	str	r2, [r3, #32]
}
 8003686:	bf00      	nop
 8003688:	371c      	adds	r7, #28
 800368a:	46bd      	mov	sp, r7
 800368c:	bc80      	pop	{r7}
 800368e:	4770      	bx	lr

08003690 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003690:	b480      	push	{r7}
 8003692:	b087      	sub	sp, #28
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	f023 0210 	bic.w	r2, r3, #16
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	031b      	lsls	r3, r3, #12
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	011b      	lsls	r3, r3, #4
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	621a      	str	r2, [r3, #32]
}
 80036e4:	bf00      	nop
 80036e6:	371c      	adds	r7, #28
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bc80      	pop	{r7}
 80036ec:	4770      	bx	lr

080036ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b085      	sub	sp, #20
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
 80036f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003704:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4313      	orrs	r3, r2
 800370c:	f043 0307 	orr.w	r3, r3, #7
 8003710:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	609a      	str	r2, [r3, #8]
}
 8003718:	bf00      	nop
 800371a:	3714      	adds	r7, #20
 800371c:	46bd      	mov	sp, r7
 800371e:	bc80      	pop	{r7}
 8003720:	4770      	bx	lr

08003722 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003722:	b480      	push	{r7}
 8003724:	b087      	sub	sp, #28
 8003726:	af00      	add	r7, sp, #0
 8003728:	60f8      	str	r0, [r7, #12]
 800372a:	60b9      	str	r1, [r7, #8]
 800372c:	607a      	str	r2, [r7, #4]
 800372e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800373c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	021a      	lsls	r2, r3, #8
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	431a      	orrs	r2, r3
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	4313      	orrs	r3, r2
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	4313      	orrs	r3, r2
 800374e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	609a      	str	r2, [r3, #8]
}
 8003756:	bf00      	nop
 8003758:	371c      	adds	r7, #28
 800375a:	46bd      	mov	sp, r7
 800375c:	bc80      	pop	{r7}
 800375e:	4770      	bx	lr

08003760 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003770:	2b01      	cmp	r3, #1
 8003772:	d101      	bne.n	8003778 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003774:	2302      	movs	r3, #2
 8003776:	e046      	b.n	8003806 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2202      	movs	r2, #2
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800379e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a16      	ldr	r2, [pc, #88]	; (8003810 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d00e      	beq.n	80037da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037c4:	d009      	beq.n	80037da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a12      	ldr	r2, [pc, #72]	; (8003814 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d004      	beq.n	80037da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a10      	ldr	r2, [pc, #64]	; (8003818 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d10c      	bne.n	80037f4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68ba      	ldr	r2, [r7, #8]
 80037f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3714      	adds	r7, #20
 800380a:	46bd      	mov	sp, r7
 800380c:	bc80      	pop	{r7}
 800380e:	4770      	bx	lr
 8003810:	40012c00 	.word	0x40012c00
 8003814:	40000400 	.word	0x40000400
 8003818:	40000800 	.word	0x40000800

0800381c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800381c:	b084      	sub	sp, #16
 800381e:	b480      	push	{r7}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
 8003826:	f107 0014 	add.w	r0, r7, #20
 800382a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	bc80      	pop	{r7}
 8003838:	b004      	add	sp, #16
 800383a:	4770      	bx	lr

0800383c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800384c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003850:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	b29a      	uxth	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3714      	adds	r7, #20
 8003862:	46bd      	mov	sp, r7
 8003864:	bc80      	pop	{r7}
 8003866:	4770      	bx	lr

08003868 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003870:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003874:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800387c:	b29a      	uxth	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	b29b      	uxth	r3, r3
 8003882:	43db      	mvns	r3, r3
 8003884:	b29b      	uxth	r3, r3
 8003886:	4013      	ands	r3, r2
 8003888:	b29a      	uxth	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3714      	adds	r7, #20
 8003896:	46bd      	mov	sp, r7
 8003898:	bc80      	pop	{r7}
 800389a:	4770      	bx	lr

0800389c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	460b      	mov	r3, r1
 80038a6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bc80      	pop	{r7}
 80038b2:	4770      	bx	lr

080038b4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80038b4:	b084      	sub	sp, #16
 80038b6:	b480      	push	{r7}
 80038b8:	b083      	sub	sp, #12
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
 80038be:	f107 0014 	add.w	r0, r7, #20
 80038c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bc80      	pop	{r7}
 80038f0:	b004      	add	sp, #16
 80038f2:	4770      	bx	lr

080038f4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b09b      	sub	sp, #108	; 0x6c
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80038fe:	2300      	movs	r3, #0
 8003900:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4413      	add	r3, r2
 800390e:	881b      	ldrh	r3, [r3, #0]
 8003910:	b29b      	uxth	r3, r3
 8003912:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800391a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	78db      	ldrb	r3, [r3, #3]
 8003922:	2b03      	cmp	r3, #3
 8003924:	d81f      	bhi.n	8003966 <USB_ActivateEndpoint+0x72>
 8003926:	a201      	add	r2, pc, #4	; (adr r2, 800392c <USB_ActivateEndpoint+0x38>)
 8003928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800392c:	0800393d 	.word	0x0800393d
 8003930:	08003959 	.word	0x08003959
 8003934:	0800396f 	.word	0x0800396f
 8003938:	0800394b 	.word	0x0800394b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800393c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003940:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003944:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003948:	e012      	b.n	8003970 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800394a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800394e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003952:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003956:	e00b      	b.n	8003970 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003958:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800395c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003960:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003964:	e004      	b.n	8003970 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800396c:	e000      	b.n	8003970 <USB_ActivateEndpoint+0x7c>
      break;
 800396e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	441a      	add	r2, r3
 800397a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800397e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003982:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003986:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800398a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800398e:	b29b      	uxth	r3, r3
 8003990:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4413      	add	r3, r2
 800399c:	881b      	ldrh	r3, [r3, #0]
 800399e:	b29b      	uxth	r3, r3
 80039a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	4313      	orrs	r3, r2
 80039b2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	441a      	add	r2, r3
 80039c0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80039c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	7b1b      	ldrb	r3, [r3, #12]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f040 8149 	bne.w	8003c74 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	785b      	ldrb	r3, [r3, #1]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 8084 	beq.w	8003af4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	617b      	str	r3, [r7, #20]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	461a      	mov	r2, r3
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	4413      	add	r3, r2
 80039fe:	617b      	str	r3, [r7, #20]
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	011a      	lsls	r2, r3, #4
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	4413      	add	r3, r2
 8003a0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a0e:	613b      	str	r3, [r7, #16]
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	88db      	ldrh	r3, [r3, #6]
 8003a14:	085b      	lsrs	r3, r3, #1
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	4413      	add	r3, r2
 8003a2a:	881b      	ldrh	r3, [r3, #0]
 8003a2c:	81fb      	strh	r3, [r7, #14]
 8003a2e:	89fb      	ldrh	r3, [r7, #14]
 8003a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d01b      	beq.n	8003a70 <USB_ActivateEndpoint+0x17c>
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	881b      	ldrh	r3, [r3, #0]
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a4e:	81bb      	strh	r3, [r7, #12]
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	441a      	add	r2, r3
 8003a5a:	89bb      	ldrh	r3, [r7, #12]
 8003a5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	78db      	ldrb	r3, [r3, #3]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d020      	beq.n	8003aba <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4413      	add	r3, r2
 8003a82:	881b      	ldrh	r3, [r3, #0]
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a8e:	813b      	strh	r3, [r7, #8]
 8003a90:	893b      	ldrh	r3, [r7, #8]
 8003a92:	f083 0320 	eor.w	r3, r3, #32
 8003a96:	813b      	strh	r3, [r7, #8]
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	441a      	add	r2, r3
 8003aa2:	893b      	ldrh	r3, [r7, #8]
 8003aa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003aa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003aac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	8013      	strh	r3, [r2, #0]
 8003ab8:	e27f      	b.n	8003fba <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	4413      	add	r3, r2
 8003ac4:	881b      	ldrh	r3, [r3, #0]
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003acc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ad0:	817b      	strh	r3, [r7, #10]
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	441a      	add	r2, r3
 8003adc:	897b      	ldrh	r3, [r7, #10]
 8003ade:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ae2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	8013      	strh	r3, [r2, #0]
 8003af2:	e262      	b.n	8003fba <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	461a      	mov	r2, r3
 8003b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b04:	4413      	add	r3, r2
 8003b06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	011a      	lsls	r2, r3, #4
 8003b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b10:	4413      	add	r3, r2
 8003b12:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003b16:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	88db      	ldrh	r3, [r3, #6]
 8003b1c:	085b      	lsrs	r3, r3, #1
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b26:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	461a      	mov	r2, r3
 8003b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b38:	4413      	add	r3, r2
 8003b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	011a      	lsls	r2, r3, #4
 8003b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b44:	4413      	add	r3, r2
 8003b46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b4a:	623b      	str	r3, [r7, #32]
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d112      	bne.n	8003b7a <USB_ActivateEndpoint+0x286>
 8003b54:	6a3b      	ldr	r3, [r7, #32]
 8003b56:	881b      	ldrh	r3, [r3, #0]
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	6a3b      	ldr	r3, [r7, #32]
 8003b62:	801a      	strh	r2, [r3, #0]
 8003b64:	6a3b      	ldr	r3, [r7, #32]
 8003b66:	881b      	ldrh	r3, [r3, #0]
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	6a3b      	ldr	r3, [r7, #32]
 8003b76:	801a      	strh	r2, [r3, #0]
 8003b78:	e02f      	b.n	8003bda <USB_ActivateEndpoint+0x2e6>
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	2b3e      	cmp	r3, #62	; 0x3e
 8003b80:	d813      	bhi.n	8003baa <USB_ActivateEndpoint+0x2b6>
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	085b      	lsrs	r3, r3, #1
 8003b88:	663b      	str	r3, [r7, #96]	; 0x60
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d002      	beq.n	8003b9c <USB_ActivateEndpoint+0x2a8>
 8003b96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b98:	3301      	adds	r3, #1
 8003b9a:	663b      	str	r3, [r7, #96]	; 0x60
 8003b9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	029b      	lsls	r3, r3, #10
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	6a3b      	ldr	r3, [r7, #32]
 8003ba6:	801a      	strh	r2, [r3, #0]
 8003ba8:	e017      	b.n	8003bda <USB_ActivateEndpoint+0x2e6>
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	095b      	lsrs	r3, r3, #5
 8003bb0:	663b      	str	r3, [r7, #96]	; 0x60
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	f003 031f 	and.w	r3, r3, #31
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d102      	bne.n	8003bc4 <USB_ActivateEndpoint+0x2d0>
 8003bbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	663b      	str	r3, [r7, #96]	; 0x60
 8003bc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	029b      	lsls	r3, r3, #10
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	4413      	add	r3, r2
 8003be4:	881b      	ldrh	r3, [r3, #0]
 8003be6:	83fb      	strh	r3, [r7, #30]
 8003be8:	8bfb      	ldrh	r3, [r7, #30]
 8003bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d01b      	beq.n	8003c2a <USB_ActivateEndpoint+0x336>
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	4413      	add	r3, r2
 8003bfc:	881b      	ldrh	r3, [r3, #0]
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c08:	83bb      	strh	r3, [r7, #28]
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	441a      	add	r2, r3
 8003c14:	8bbb      	ldrh	r3, [r7, #28]
 8003c16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	4413      	add	r3, r2
 8003c34:	881b      	ldrh	r3, [r3, #0]
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c40:	837b      	strh	r3, [r7, #26]
 8003c42:	8b7b      	ldrh	r3, [r7, #26]
 8003c44:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003c48:	837b      	strh	r3, [r7, #26]
 8003c4a:	8b7b      	ldrh	r3, [r7, #26]
 8003c4c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003c50:	837b      	strh	r3, [r7, #26]
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	441a      	add	r2, r3
 8003c5c:	8b7b      	ldrh	r3, [r7, #26]
 8003c5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	8013      	strh	r3, [r2, #0]
 8003c72:	e1a2      	b.n	8003fba <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	4413      	add	r3, r2
 8003c7e:	881b      	ldrh	r3, [r3, #0]
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c8a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	441a      	add	r2, r3
 8003c98:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003c9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ca0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ca4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	65bb      	str	r3, [r7, #88]	; 0x58
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003cc0:	4413      	add	r3, r2
 8003cc2:	65bb      	str	r3, [r7, #88]	; 0x58
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	011a      	lsls	r2, r3, #4
 8003cca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ccc:	4413      	add	r3, r2
 8003cce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cd2:	657b      	str	r3, [r7, #84]	; 0x54
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	891b      	ldrh	r3, [r3, #8]
 8003cd8:	085b      	lsrs	r3, r3, #1
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ce2:	801a      	strh	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	653b      	str	r3, [r7, #80]	; 0x50
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cf4:	4413      	add	r3, r2
 8003cf6:	653b      	str	r3, [r7, #80]	; 0x50
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	011a      	lsls	r2, r3, #4
 8003cfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d00:	4413      	add	r3, r2
 8003d02:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003d06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	895b      	ldrh	r3, [r3, #10]
 8003d0c:	085b      	lsrs	r3, r3, #1
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d16:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	785b      	ldrb	r3, [r3, #1]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f040 8091 	bne.w	8003e44 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	4413      	add	r3, r2
 8003d2c:	881b      	ldrh	r3, [r3, #0]
 8003d2e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003d30:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d01b      	beq.n	8003d72 <USB_ActivateEndpoint+0x47e>
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	4413      	add	r3, r2
 8003d44:	881b      	ldrh	r3, [r3, #0]
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d50:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	441a      	add	r2, r3
 8003d5c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003d5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	4413      	add	r3, r2
 8003d7c:	881b      	ldrh	r3, [r3, #0]
 8003d7e:	873b      	strh	r3, [r7, #56]	; 0x38
 8003d80:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d01b      	beq.n	8003dc2 <USB_ActivateEndpoint+0x4ce>
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4413      	add	r3, r2
 8003d94:	881b      	ldrh	r3, [r3, #0]
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003da0:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	441a      	add	r2, r3
 8003dac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003dae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003db2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003db6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	4413      	add	r3, r2
 8003dcc:	881b      	ldrh	r3, [r3, #0]
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dd8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003dda:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003ddc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003de0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003de2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003de4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003de8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	441a      	add	r2, r3
 8003df4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003df6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4413      	add	r3, r2
 8003e14:	881b      	ldrh	r3, [r3, #0]
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e20:	867b      	strh	r3, [r7, #50]	; 0x32
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	441a      	add	r2, r3
 8003e2c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003e2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	8013      	strh	r3, [r2, #0]
 8003e42:	e0ba      	b.n	8003fba <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4413      	add	r3, r2
 8003e4e:	881b      	ldrh	r3, [r3, #0]
 8003e50:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003e54:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003e58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d01d      	beq.n	8003e9c <USB_ActivateEndpoint+0x5a8>
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	4413      	add	r3, r2
 8003e6a:	881b      	ldrh	r3, [r3, #0]
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e76:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	441a      	add	r2, r3
 8003e84:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003e88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	4413      	add	r3, r2
 8003ea6:	881b      	ldrh	r3, [r3, #0]
 8003ea8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003eac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d01d      	beq.n	8003ef4 <USB_ActivateEndpoint+0x600>
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	881b      	ldrh	r3, [r3, #0]
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ece:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	441a      	add	r2, r3
 8003edc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003ee0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ee4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ee8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	78db      	ldrb	r3, [r3, #3]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d024      	beq.n	8003f46 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	4413      	add	r3, r2
 8003f06:	881b      	ldrh	r3, [r3, #0]
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f12:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003f16:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003f1a:	f083 0320 	eor.w	r3, r3, #32
 8003f1e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	441a      	add	r2, r3
 8003f2c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003f30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	8013      	strh	r3, [r2, #0]
 8003f44:	e01d      	b.n	8003f82 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	4413      	add	r3, r2
 8003f50:	881b      	ldrh	r3, [r3, #0]
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f5c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	441a      	add	r2, r3
 8003f6a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003f6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4413      	add	r3, r2
 8003f8c:	881b      	ldrh	r3, [r3, #0]
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f98:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	441a      	add	r2, r3
 8003fa4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003fa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003faa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003fba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	376c      	adds	r7, #108	; 0x6c
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bc80      	pop	{r7}
 8003fc6:	4770      	bx	lr

08003fc8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b08d      	sub	sp, #52	; 0x34
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	7b1b      	ldrb	r3, [r3, #12]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f040 808e 	bne.w	80040f8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	785b      	ldrb	r3, [r3, #1]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d044      	beq.n	800406e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4413      	add	r3, r2
 8003fee:	881b      	ldrh	r3, [r3, #0]
 8003ff0:	81bb      	strh	r3, [r7, #12]
 8003ff2:	89bb      	ldrh	r3, [r7, #12]
 8003ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d01b      	beq.n	8004034 <USB_DeactivateEndpoint+0x6c>
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	4413      	add	r3, r2
 8004006:	881b      	ldrh	r3, [r3, #0]
 8004008:	b29b      	uxth	r3, r3
 800400a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800400e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004012:	817b      	strh	r3, [r7, #10]
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	441a      	add	r2, r3
 800401e:	897b      	ldrh	r3, [r7, #10]
 8004020:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004024:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004028:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800402c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004030:	b29b      	uxth	r3, r3
 8004032:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	4413      	add	r3, r2
 800403e:	881b      	ldrh	r3, [r3, #0]
 8004040:	b29b      	uxth	r3, r3
 8004042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004046:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800404a:	813b      	strh	r3, [r7, #8]
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	441a      	add	r2, r3
 8004056:	893b      	ldrh	r3, [r7, #8]
 8004058:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800405c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004060:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004068:	b29b      	uxth	r3, r3
 800406a:	8013      	strh	r3, [r2, #0]
 800406c:	e192      	b.n	8004394 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	4413      	add	r3, r2
 8004078:	881b      	ldrh	r3, [r3, #0]
 800407a:	827b      	strh	r3, [r7, #18]
 800407c:	8a7b      	ldrh	r3, [r7, #18]
 800407e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d01b      	beq.n	80040be <USB_DeactivateEndpoint+0xf6>
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	4413      	add	r3, r2
 8004090:	881b      	ldrh	r3, [r3, #0]
 8004092:	b29b      	uxth	r3, r3
 8004094:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004098:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800409c:	823b      	strh	r3, [r7, #16]
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	441a      	add	r2, r3
 80040a8:	8a3b      	ldrh	r3, [r7, #16]
 80040aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	4413      	add	r3, r2
 80040c8:	881b      	ldrh	r3, [r3, #0]
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040d4:	81fb      	strh	r3, [r7, #14]
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	441a      	add	r2, r3
 80040e0:	89fb      	ldrh	r3, [r7, #14]
 80040e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	8013      	strh	r3, [r2, #0]
 80040f6:	e14d      	b.n	8004394 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	785b      	ldrb	r3, [r3, #1]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f040 80a5 	bne.w	800424c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	4413      	add	r3, r2
 800410c:	881b      	ldrh	r3, [r3, #0]
 800410e:	843b      	strh	r3, [r7, #32]
 8004110:	8c3b      	ldrh	r3, [r7, #32]
 8004112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d01b      	beq.n	8004152 <USB_DeactivateEndpoint+0x18a>
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	4413      	add	r3, r2
 8004124:	881b      	ldrh	r3, [r3, #0]
 8004126:	b29b      	uxth	r3, r3
 8004128:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800412c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004130:	83fb      	strh	r3, [r7, #30]
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	441a      	add	r2, r3
 800413c:	8bfb      	ldrh	r3, [r7, #30]
 800413e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004142:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004146:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800414a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800414e:	b29b      	uxth	r3, r3
 8004150:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4413      	add	r3, r2
 800415c:	881b      	ldrh	r3, [r3, #0]
 800415e:	83bb      	strh	r3, [r7, #28]
 8004160:	8bbb      	ldrh	r3, [r7, #28]
 8004162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004166:	2b00      	cmp	r3, #0
 8004168:	d01b      	beq.n	80041a2 <USB_DeactivateEndpoint+0x1da>
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4413      	add	r3, r2
 8004174:	881b      	ldrh	r3, [r3, #0]
 8004176:	b29b      	uxth	r3, r3
 8004178:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800417c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004180:	837b      	strh	r3, [r7, #26]
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	441a      	add	r2, r3
 800418c:	8b7b      	ldrh	r3, [r7, #26]
 800418e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004192:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004196:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800419a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800419e:	b29b      	uxth	r3, r3
 80041a0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	4413      	add	r3, r2
 80041ac:	881b      	ldrh	r3, [r3, #0]
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041b8:	833b      	strh	r3, [r7, #24]
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	441a      	add	r2, r3
 80041c4:	8b3b      	ldrh	r3, [r7, #24]
 80041c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4413      	add	r3, r2
 80041e4:	881b      	ldrh	r3, [r3, #0]
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f0:	82fb      	strh	r3, [r7, #22]
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	441a      	add	r2, r3
 80041fc:	8afb      	ldrh	r3, [r7, #22]
 80041fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004202:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800420a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800420e:	b29b      	uxth	r3, r3
 8004210:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4413      	add	r3, r2
 800421c:	881b      	ldrh	r3, [r3, #0]
 800421e:	b29b      	uxth	r3, r3
 8004220:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004224:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004228:	82bb      	strh	r3, [r7, #20]
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	441a      	add	r2, r3
 8004234:	8abb      	ldrh	r3, [r7, #20]
 8004236:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800423a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800423e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004246:	b29b      	uxth	r3, r3
 8004248:	8013      	strh	r3, [r2, #0]
 800424a:	e0a3      	b.n	8004394 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4413      	add	r3, r2
 8004256:	881b      	ldrh	r3, [r3, #0]
 8004258:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800425a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800425c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d01b      	beq.n	800429c <USB_DeactivateEndpoint+0x2d4>
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4413      	add	r3, r2
 800426e:	881b      	ldrh	r3, [r3, #0]
 8004270:	b29b      	uxth	r3, r3
 8004272:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800427a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	441a      	add	r2, r3
 8004286:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004288:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800428c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004290:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004298:	b29b      	uxth	r3, r3
 800429a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	4413      	add	r3, r2
 80042a6:	881b      	ldrh	r3, [r3, #0]
 80042a8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80042aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80042ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d01b      	beq.n	80042ec <USB_DeactivateEndpoint+0x324>
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	4413      	add	r3, r2
 80042be:	881b      	ldrh	r3, [r3, #0]
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ca:	853b      	strh	r3, [r7, #40]	; 0x28
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	441a      	add	r2, r3
 80042d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80042d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4413      	add	r3, r2
 80042f6:	881b      	ldrh	r3, [r3, #0]
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004302:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	441a      	add	r2, r3
 800430e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004310:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004314:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004318:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800431c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004320:	b29b      	uxth	r3, r3
 8004322:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4413      	add	r3, r2
 800432e:	881b      	ldrh	r3, [r3, #0]
 8004330:	b29b      	uxth	r3, r3
 8004332:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004336:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800433a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	441a      	add	r2, r3
 8004346:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004348:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800434c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004350:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004358:	b29b      	uxth	r3, r3
 800435a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4413      	add	r3, r2
 8004366:	881b      	ldrh	r3, [r3, #0]
 8004368:	b29b      	uxth	r3, r3
 800436a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800436e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004372:	847b      	strh	r3, [r7, #34]	; 0x22
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	441a      	add	r2, r3
 800437e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004380:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004384:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004388:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800438c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004390:	b29b      	uxth	r3, r3
 8004392:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3734      	adds	r7, #52	; 0x34
 800439a:	46bd      	mov	sp, r7
 800439c:	bc80      	pop	{r7}
 800439e:	4770      	bx	lr

080043a0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b0c4      	sub	sp, #272	; 0x110
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	1d3b      	adds	r3, r7, #4
 80043a8:	6018      	str	r0, [r3, #0]
 80043aa:	463b      	mov	r3, r7
 80043ac:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80043ae:	463b      	mov	r3, r7
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	785b      	ldrb	r3, [r3, #1]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	f040 8557 	bne.w	8004e68 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80043ba:	463b      	mov	r3, r7
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	699a      	ldr	r2, [r3, #24]
 80043c0:	463b      	mov	r3, r7
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d905      	bls.n	80043d6 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80043ca:	463b      	mov	r3, r7
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80043d4:	e004      	b.n	80043e0 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80043d6:	463b      	mov	r3, r7
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80043e0:	463b      	mov	r3, r7
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	7b1b      	ldrb	r3, [r3, #12]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d12c      	bne.n	8004444 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80043ea:	463b      	mov	r3, r7
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	6959      	ldr	r1, [r3, #20]
 80043f0:	463b      	mov	r3, r7
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	88da      	ldrh	r2, [r3, #6]
 80043f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	1d38      	adds	r0, r7, #4
 80043fe:	6800      	ldr	r0, [r0, #0]
 8004400:	f001 fa2c 	bl	800585c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004404:	1d3b      	adds	r3, r7, #4
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	617b      	str	r3, [r7, #20]
 800440a:	1d3b      	adds	r3, r7, #4
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004412:	b29b      	uxth	r3, r3
 8004414:	461a      	mov	r2, r3
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	4413      	add	r3, r2
 800441a:	617b      	str	r3, [r7, #20]
 800441c:	463b      	mov	r3, r7
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	011a      	lsls	r2, r3, #4
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	4413      	add	r3, r2
 8004428:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800442c:	f107 0310 	add.w	r3, r7, #16
 8004430:	601a      	str	r2, [r3, #0]
 8004432:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004436:	b29a      	uxth	r2, r3
 8004438:	f107 0310 	add.w	r3, r7, #16
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	801a      	strh	r2, [r3, #0]
 8004440:	f000 bcdd 	b.w	8004dfe <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004444:	463b      	mov	r3, r7
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	78db      	ldrb	r3, [r3, #3]
 800444a:	2b02      	cmp	r3, #2
 800444c:	f040 8347 	bne.w	8004ade <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004450:	463b      	mov	r3, r7
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6a1a      	ldr	r2, [r3, #32]
 8004456:	463b      	mov	r3, r7
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	429a      	cmp	r2, r3
 800445e:	f240 82eb 	bls.w	8004a38 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004462:	1d3b      	adds	r3, r7, #4
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	463b      	mov	r3, r7
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	4413      	add	r3, r2
 8004470:	881b      	ldrh	r3, [r3, #0]
 8004472:	b29b      	uxth	r3, r3
 8004474:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800447c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8004480:	1d3b      	adds	r3, r7, #4
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	463b      	mov	r3, r7
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	441a      	add	r2, r3
 800448e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004492:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004496:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800449a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800449e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80044a6:	463b      	mov	r3, r7
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	6a1a      	ldr	r2, [r3, #32]
 80044ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044b0:	1ad2      	subs	r2, r2, r3
 80044b2:	463b      	mov	r3, r7
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80044b8:	1d3b      	adds	r3, r7, #4
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	463b      	mov	r3, r7
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	4413      	add	r3, r2
 80044c6:	881b      	ldrh	r3, [r3, #0]
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f000 8159 	beq.w	8004786 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80044d4:	1d3b      	adds	r3, r7, #4
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	637b      	str	r3, [r7, #52]	; 0x34
 80044da:	463b      	mov	r3, r7
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	785b      	ldrb	r3, [r3, #1]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d164      	bne.n	80045ae <USB_EPStartXfer+0x20e>
 80044e4:	1d3b      	adds	r3, r7, #4
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044ea:	1d3b      	adds	r3, r7, #4
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	461a      	mov	r2, r3
 80044f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f8:	4413      	add	r3, r2
 80044fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044fc:	463b      	mov	r3, r7
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	011a      	lsls	r2, r3, #4
 8004504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004506:	4413      	add	r3, r2
 8004508:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800450c:	62bb      	str	r3, [r7, #40]	; 0x28
 800450e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004512:	2b00      	cmp	r3, #0
 8004514:	d112      	bne.n	800453c <USB_EPStartXfer+0x19c>
 8004516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004518:	881b      	ldrh	r3, [r3, #0]
 800451a:	b29b      	uxth	r3, r3
 800451c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004520:	b29a      	uxth	r2, r3
 8004522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004524:	801a      	strh	r2, [r3, #0]
 8004526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004528:	881b      	ldrh	r3, [r3, #0]
 800452a:	b29b      	uxth	r3, r3
 800452c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004530:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004534:	b29a      	uxth	r2, r3
 8004536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004538:	801a      	strh	r2, [r3, #0]
 800453a:	e054      	b.n	80045e6 <USB_EPStartXfer+0x246>
 800453c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004540:	2b3e      	cmp	r3, #62	; 0x3e
 8004542:	d817      	bhi.n	8004574 <USB_EPStartXfer+0x1d4>
 8004544:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004548:	085b      	lsrs	r3, r3, #1
 800454a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800454e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b00      	cmp	r3, #0
 8004558:	d004      	beq.n	8004564 <USB_EPStartXfer+0x1c4>
 800455a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800455e:	3301      	adds	r3, #1
 8004560:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004564:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004568:	b29b      	uxth	r3, r3
 800456a:	029b      	lsls	r3, r3, #10
 800456c:	b29a      	uxth	r2, r3
 800456e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004570:	801a      	strh	r2, [r3, #0]
 8004572:	e038      	b.n	80045e6 <USB_EPStartXfer+0x246>
 8004574:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004578:	095b      	lsrs	r3, r3, #5
 800457a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800457e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004582:	f003 031f 	and.w	r3, r3, #31
 8004586:	2b00      	cmp	r3, #0
 8004588:	d104      	bne.n	8004594 <USB_EPStartXfer+0x1f4>
 800458a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800458e:	3b01      	subs	r3, #1
 8004590:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004594:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004598:	b29b      	uxth	r3, r3
 800459a:	029b      	lsls	r3, r3, #10
 800459c:	b29b      	uxth	r3, r3
 800459e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045aa:	801a      	strh	r2, [r3, #0]
 80045ac:	e01b      	b.n	80045e6 <USB_EPStartXfer+0x246>
 80045ae:	463b      	mov	r3, r7
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	785b      	ldrb	r3, [r3, #1]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d116      	bne.n	80045e6 <USB_EPStartXfer+0x246>
 80045b8:	1d3b      	adds	r3, r7, #4
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	461a      	mov	r2, r3
 80045c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045c6:	4413      	add	r3, r2
 80045c8:	637b      	str	r3, [r7, #52]	; 0x34
 80045ca:	463b      	mov	r3, r7
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	011a      	lsls	r2, r3, #4
 80045d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045d4:	4413      	add	r3, r2
 80045d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045da:	633b      	str	r3, [r7, #48]	; 0x30
 80045dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80045e6:	463b      	mov	r3, r7
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	895b      	ldrh	r3, [r3, #10]
 80045ec:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80045f0:	463b      	mov	r3, r7
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6959      	ldr	r1, [r3, #20]
 80045f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004600:	1d38      	adds	r0, r7, #4
 8004602:	6800      	ldr	r0, [r0, #0]
 8004604:	f001 f92a 	bl	800585c <USB_WritePMA>
            ep->xfer_buff += len;
 8004608:	463b      	mov	r3, r7
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	695a      	ldr	r2, [r3, #20]
 800460e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004612:	441a      	add	r2, r3
 8004614:	463b      	mov	r3, r7
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800461a:	463b      	mov	r3, r7
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6a1a      	ldr	r2, [r3, #32]
 8004620:	463b      	mov	r3, r7
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	429a      	cmp	r2, r3
 8004628:	d909      	bls.n	800463e <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 800462a:	463b      	mov	r3, r7
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6a1a      	ldr	r2, [r3, #32]
 8004630:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004634:	1ad2      	subs	r2, r2, r3
 8004636:	463b      	mov	r3, r7
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	621a      	str	r2, [r3, #32]
 800463c:	e008      	b.n	8004650 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800463e:	463b      	mov	r3, r7
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004648:	463b      	mov	r3, r7
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2200      	movs	r2, #0
 800464e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004650:	463b      	mov	r3, r7
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	785b      	ldrb	r3, [r3, #1]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d164      	bne.n	8004724 <USB_EPStartXfer+0x384>
 800465a:	1d3b      	adds	r3, r7, #4
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	61fb      	str	r3, [r7, #28]
 8004660:	1d3b      	adds	r3, r7, #4
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004668:	b29b      	uxth	r3, r3
 800466a:	461a      	mov	r2, r3
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	4413      	add	r3, r2
 8004670:	61fb      	str	r3, [r7, #28]
 8004672:	463b      	mov	r3, r7
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	011a      	lsls	r2, r3, #4
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	4413      	add	r3, r2
 800467e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004682:	61bb      	str	r3, [r7, #24]
 8004684:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004688:	2b00      	cmp	r3, #0
 800468a:	d112      	bne.n	80046b2 <USB_EPStartXfer+0x312>
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	881b      	ldrh	r3, [r3, #0]
 8004690:	b29b      	uxth	r3, r3
 8004692:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004696:	b29a      	uxth	r2, r3
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	801a      	strh	r2, [r3, #0]
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	881b      	ldrh	r3, [r3, #0]
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	801a      	strh	r2, [r3, #0]
 80046b0:	e057      	b.n	8004762 <USB_EPStartXfer+0x3c2>
 80046b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046b6:	2b3e      	cmp	r3, #62	; 0x3e
 80046b8:	d817      	bhi.n	80046ea <USB_EPStartXfer+0x34a>
 80046ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046be:	085b      	lsrs	r3, r3, #1
 80046c0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80046c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046c8:	f003 0301 	and.w	r3, r3, #1
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d004      	beq.n	80046da <USB_EPStartXfer+0x33a>
 80046d0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80046d4:	3301      	adds	r3, #1
 80046d6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80046da:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80046de:	b29b      	uxth	r3, r3
 80046e0:	029b      	lsls	r3, r3, #10
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	801a      	strh	r2, [r3, #0]
 80046e8:	e03b      	b.n	8004762 <USB_EPStartXfer+0x3c2>
 80046ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046ee:	095b      	lsrs	r3, r3, #5
 80046f0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80046f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046f8:	f003 031f 	and.w	r3, r3, #31
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d104      	bne.n	800470a <USB_EPStartXfer+0x36a>
 8004700:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004704:	3b01      	subs	r3, #1
 8004706:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800470a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800470e:	b29b      	uxth	r3, r3
 8004710:	029b      	lsls	r3, r3, #10
 8004712:	b29b      	uxth	r3, r3
 8004714:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004718:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800471c:	b29a      	uxth	r2, r3
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	801a      	strh	r2, [r3, #0]
 8004722:	e01e      	b.n	8004762 <USB_EPStartXfer+0x3c2>
 8004724:	463b      	mov	r3, r7
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	785b      	ldrb	r3, [r3, #1]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d119      	bne.n	8004762 <USB_EPStartXfer+0x3c2>
 800472e:	1d3b      	adds	r3, r7, #4
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	627b      	str	r3, [r7, #36]	; 0x24
 8004734:	1d3b      	adds	r3, r7, #4
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800473c:	b29b      	uxth	r3, r3
 800473e:	461a      	mov	r2, r3
 8004740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004742:	4413      	add	r3, r2
 8004744:	627b      	str	r3, [r7, #36]	; 0x24
 8004746:	463b      	mov	r3, r7
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	011a      	lsls	r2, r3, #4
 800474e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004750:	4413      	add	r3, r2
 8004752:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004756:	623b      	str	r3, [r7, #32]
 8004758:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800475c:	b29a      	uxth	r2, r3
 800475e:	6a3b      	ldr	r3, [r7, #32]
 8004760:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004762:	463b      	mov	r3, r7
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	891b      	ldrh	r3, [r3, #8]
 8004768:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800476c:	463b      	mov	r3, r7
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	6959      	ldr	r1, [r3, #20]
 8004772:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004776:	b29b      	uxth	r3, r3
 8004778:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800477c:	1d38      	adds	r0, r7, #4
 800477e:	6800      	ldr	r0, [r0, #0]
 8004780:	f001 f86c 	bl	800585c <USB_WritePMA>
 8004784:	e33b      	b.n	8004dfe <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004786:	463b      	mov	r3, r7
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	785b      	ldrb	r3, [r3, #1]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d164      	bne.n	800485a <USB_EPStartXfer+0x4ba>
 8004790:	1d3b      	adds	r3, r7, #4
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004796:	1d3b      	adds	r3, r7, #4
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800479e:	b29b      	uxth	r3, r3
 80047a0:	461a      	mov	r2, r3
 80047a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047a4:	4413      	add	r3, r2
 80047a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047a8:	463b      	mov	r3, r7
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	011a      	lsls	r2, r3, #4
 80047b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047b2:	4413      	add	r3, r2
 80047b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80047b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80047ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d112      	bne.n	80047e8 <USB_EPStartXfer+0x448>
 80047c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047c4:	881b      	ldrh	r3, [r3, #0]
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047cc:	b29a      	uxth	r2, r3
 80047ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047d0:	801a      	strh	r2, [r3, #0]
 80047d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047d4:	881b      	ldrh	r3, [r3, #0]
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047e4:	801a      	strh	r2, [r3, #0]
 80047e6:	e057      	b.n	8004898 <USB_EPStartXfer+0x4f8>
 80047e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047ec:	2b3e      	cmp	r3, #62	; 0x3e
 80047ee:	d817      	bhi.n	8004820 <USB_EPStartXfer+0x480>
 80047f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047f4:	085b      	lsrs	r3, r3, #1
 80047f6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80047fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	d004      	beq.n	8004810 <USB_EPStartXfer+0x470>
 8004806:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800480a:	3301      	adds	r3, #1
 800480c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004810:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004814:	b29b      	uxth	r3, r3
 8004816:	029b      	lsls	r3, r3, #10
 8004818:	b29a      	uxth	r2, r3
 800481a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800481c:	801a      	strh	r2, [r3, #0]
 800481e:	e03b      	b.n	8004898 <USB_EPStartXfer+0x4f8>
 8004820:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004824:	095b      	lsrs	r3, r3, #5
 8004826:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800482a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800482e:	f003 031f 	and.w	r3, r3, #31
 8004832:	2b00      	cmp	r3, #0
 8004834:	d104      	bne.n	8004840 <USB_EPStartXfer+0x4a0>
 8004836:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800483a:	3b01      	subs	r3, #1
 800483c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004840:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004844:	b29b      	uxth	r3, r3
 8004846:	029b      	lsls	r3, r3, #10
 8004848:	b29b      	uxth	r3, r3
 800484a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800484e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004852:	b29a      	uxth	r2, r3
 8004854:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004856:	801a      	strh	r2, [r3, #0]
 8004858:	e01e      	b.n	8004898 <USB_EPStartXfer+0x4f8>
 800485a:	463b      	mov	r3, r7
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	785b      	ldrb	r3, [r3, #1]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d119      	bne.n	8004898 <USB_EPStartXfer+0x4f8>
 8004864:	1d3b      	adds	r3, r7, #4
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	657b      	str	r3, [r7, #84]	; 0x54
 800486a:	1d3b      	adds	r3, r7, #4
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004872:	b29b      	uxth	r3, r3
 8004874:	461a      	mov	r2, r3
 8004876:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004878:	4413      	add	r3, r2
 800487a:	657b      	str	r3, [r7, #84]	; 0x54
 800487c:	463b      	mov	r3, r7
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	011a      	lsls	r2, r3, #4
 8004884:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004886:	4413      	add	r3, r2
 8004888:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800488c:	653b      	str	r3, [r7, #80]	; 0x50
 800488e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004892:	b29a      	uxth	r2, r3
 8004894:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004896:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004898:	463b      	mov	r3, r7
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	891b      	ldrh	r3, [r3, #8]
 800489e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80048a2:	463b      	mov	r3, r7
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	6959      	ldr	r1, [r3, #20]
 80048a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80048b2:	1d38      	adds	r0, r7, #4
 80048b4:	6800      	ldr	r0, [r0, #0]
 80048b6:	f000 ffd1 	bl	800585c <USB_WritePMA>
            ep->xfer_buff += len;
 80048ba:	463b      	mov	r3, r7
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	695a      	ldr	r2, [r3, #20]
 80048c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048c4:	441a      	add	r2, r3
 80048c6:	463b      	mov	r3, r7
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80048cc:	463b      	mov	r3, r7
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6a1a      	ldr	r2, [r3, #32]
 80048d2:	463b      	mov	r3, r7
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d909      	bls.n	80048f0 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 80048dc:	463b      	mov	r3, r7
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6a1a      	ldr	r2, [r3, #32]
 80048e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048e6:	1ad2      	subs	r2, r2, r3
 80048e8:	463b      	mov	r3, r7
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	621a      	str	r2, [r3, #32]
 80048ee:	e008      	b.n	8004902 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 80048f0:	463b      	mov	r3, r7
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80048fa:	463b      	mov	r3, r7
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2200      	movs	r2, #0
 8004900:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004902:	1d3b      	adds	r3, r7, #4
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	647b      	str	r3, [r7, #68]	; 0x44
 8004908:	463b      	mov	r3, r7
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	785b      	ldrb	r3, [r3, #1]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d164      	bne.n	80049dc <USB_EPStartXfer+0x63c>
 8004912:	1d3b      	adds	r3, r7, #4
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004918:	1d3b      	adds	r3, r7, #4
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004920:	b29b      	uxth	r3, r3
 8004922:	461a      	mov	r2, r3
 8004924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004926:	4413      	add	r3, r2
 8004928:	63fb      	str	r3, [r7, #60]	; 0x3c
 800492a:	463b      	mov	r3, r7
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	011a      	lsls	r2, r3, #4
 8004932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004934:	4413      	add	r3, r2
 8004936:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800493a:	63bb      	str	r3, [r7, #56]	; 0x38
 800493c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004940:	2b00      	cmp	r3, #0
 8004942:	d112      	bne.n	800496a <USB_EPStartXfer+0x5ca>
 8004944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004946:	881b      	ldrh	r3, [r3, #0]
 8004948:	b29b      	uxth	r3, r3
 800494a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800494e:	b29a      	uxth	r2, r3
 8004950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004952:	801a      	strh	r2, [r3, #0]
 8004954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004956:	881b      	ldrh	r3, [r3, #0]
 8004958:	b29b      	uxth	r3, r3
 800495a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800495e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004962:	b29a      	uxth	r2, r3
 8004964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004966:	801a      	strh	r2, [r3, #0]
 8004968:	e054      	b.n	8004a14 <USB_EPStartXfer+0x674>
 800496a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800496e:	2b3e      	cmp	r3, #62	; 0x3e
 8004970:	d817      	bhi.n	80049a2 <USB_EPStartXfer+0x602>
 8004972:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004976:	085b      	lsrs	r3, r3, #1
 8004978:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800497c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	2b00      	cmp	r3, #0
 8004986:	d004      	beq.n	8004992 <USB_EPStartXfer+0x5f2>
 8004988:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800498c:	3301      	adds	r3, #1
 800498e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004992:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004996:	b29b      	uxth	r3, r3
 8004998:	029b      	lsls	r3, r3, #10
 800499a:	b29a      	uxth	r2, r3
 800499c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800499e:	801a      	strh	r2, [r3, #0]
 80049a0:	e038      	b.n	8004a14 <USB_EPStartXfer+0x674>
 80049a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049a6:	095b      	lsrs	r3, r3, #5
 80049a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80049ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049b0:	f003 031f 	and.w	r3, r3, #31
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d104      	bne.n	80049c2 <USB_EPStartXfer+0x622>
 80049b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80049bc:	3b01      	subs	r3, #1
 80049be:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80049c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	029b      	lsls	r3, r3, #10
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d8:	801a      	strh	r2, [r3, #0]
 80049da:	e01b      	b.n	8004a14 <USB_EPStartXfer+0x674>
 80049dc:	463b      	mov	r3, r7
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	785b      	ldrb	r3, [r3, #1]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d116      	bne.n	8004a14 <USB_EPStartXfer+0x674>
 80049e6:	1d3b      	adds	r3, r7, #4
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	461a      	mov	r2, r3
 80049f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049f4:	4413      	add	r3, r2
 80049f6:	647b      	str	r3, [r7, #68]	; 0x44
 80049f8:	463b      	mov	r3, r7
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	011a      	lsls	r2, r3, #4
 8004a00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a02:	4413      	add	r3, r2
 8004a04:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a08:	643b      	str	r3, [r7, #64]	; 0x40
 8004a0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a0e:	b29a      	uxth	r2, r3
 8004a10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a12:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004a14:	463b      	mov	r3, r7
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	895b      	ldrh	r3, [r3, #10]
 8004a1a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a1e:	463b      	mov	r3, r7
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	6959      	ldr	r1, [r3, #20]
 8004a24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004a2e:	1d38      	adds	r0, r7, #4
 8004a30:	6800      	ldr	r0, [r0, #0]
 8004a32:	f000 ff13 	bl	800585c <USB_WritePMA>
 8004a36:	e1e2      	b.n	8004dfe <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004a38:	463b      	mov	r3, r7
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004a42:	1d3b      	adds	r3, r7, #4
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	463b      	mov	r3, r7
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4413      	add	r3, r2
 8004a50:	881b      	ldrh	r3, [r3, #0]
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a5c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004a60:	1d3b      	adds	r3, r7, #4
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	463b      	mov	r3, r7
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	441a      	add	r2, r3
 8004a6e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004a72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004a86:	1d3b      	adds	r3, r7, #4
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	663b      	str	r3, [r7, #96]	; 0x60
 8004a8c:	1d3b      	adds	r3, r7, #4
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	461a      	mov	r2, r3
 8004a98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a9a:	4413      	add	r3, r2
 8004a9c:	663b      	str	r3, [r7, #96]	; 0x60
 8004a9e:	463b      	mov	r3, r7
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	011a      	lsls	r2, r3, #4
 8004aa6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004aa8:	4413      	add	r3, r2
 8004aaa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004aae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ab0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ab4:	b29a      	uxth	r2, r3
 8004ab6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ab8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004aba:	463b      	mov	r3, r7
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	891b      	ldrh	r3, [r3, #8]
 8004ac0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ac4:	463b      	mov	r3, r7
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	6959      	ldr	r1, [r3, #20]
 8004aca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004ad4:	1d38      	adds	r0, r7, #4
 8004ad6:	6800      	ldr	r0, [r0, #0]
 8004ad8:	f000 fec0 	bl	800585c <USB_WritePMA>
 8004adc:	e18f      	b.n	8004dfe <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004ade:	1d3b      	adds	r3, r7, #4
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	463b      	mov	r3, r7
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4413      	add	r3, r2
 8004aec:	881b      	ldrh	r3, [r3, #0]
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f000 808f 	beq.w	8004c18 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004afa:	1d3b      	adds	r3, r7, #4
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b00:	463b      	mov	r3, r7
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	785b      	ldrb	r3, [r3, #1]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d164      	bne.n	8004bd4 <USB_EPStartXfer+0x834>
 8004b0a:	1d3b      	adds	r3, r7, #4
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	673b      	str	r3, [r7, #112]	; 0x70
 8004b10:	1d3b      	adds	r3, r7, #4
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b1e:	4413      	add	r3, r2
 8004b20:	673b      	str	r3, [r7, #112]	; 0x70
 8004b22:	463b      	mov	r3, r7
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	011a      	lsls	r2, r3, #4
 8004b2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b2c:	4413      	add	r3, r2
 8004b2e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d112      	bne.n	8004b62 <USB_EPStartXfer+0x7c2>
 8004b3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b3e:	881b      	ldrh	r3, [r3, #0]
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b46:	b29a      	uxth	r2, r3
 8004b48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b4a:	801a      	strh	r2, [r3, #0]
 8004b4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b4e:	881b      	ldrh	r3, [r3, #0]
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b5a:	b29a      	uxth	r2, r3
 8004b5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b5e:	801a      	strh	r2, [r3, #0]
 8004b60:	e054      	b.n	8004c0c <USB_EPStartXfer+0x86c>
 8004b62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b66:	2b3e      	cmp	r3, #62	; 0x3e
 8004b68:	d817      	bhi.n	8004b9a <USB_EPStartXfer+0x7fa>
 8004b6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b6e:	085b      	lsrs	r3, r3, #1
 8004b70:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004b74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b78:	f003 0301 	and.w	r3, r3, #1
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d004      	beq.n	8004b8a <USB_EPStartXfer+0x7ea>
 8004b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b84:	3301      	adds	r3, #1
 8004b86:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	029b      	lsls	r3, r3, #10
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b96:	801a      	strh	r2, [r3, #0]
 8004b98:	e038      	b.n	8004c0c <USB_EPStartXfer+0x86c>
 8004b9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b9e:	095b      	lsrs	r3, r3, #5
 8004ba0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004ba4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ba8:	f003 031f 	and.w	r3, r3, #31
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d104      	bne.n	8004bba <USB_EPStartXfer+0x81a>
 8004bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	029b      	lsls	r3, r3, #10
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bd0:	801a      	strh	r2, [r3, #0]
 8004bd2:	e01b      	b.n	8004c0c <USB_EPStartXfer+0x86c>
 8004bd4:	463b      	mov	r3, r7
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	785b      	ldrb	r3, [r3, #1]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d116      	bne.n	8004c0c <USB_EPStartXfer+0x86c>
 8004bde:	1d3b      	adds	r3, r7, #4
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	461a      	mov	r2, r3
 8004bea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bec:	4413      	add	r3, r2
 8004bee:	67bb      	str	r3, [r7, #120]	; 0x78
 8004bf0:	463b      	mov	r3, r7
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	011a      	lsls	r2, r3, #4
 8004bf8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c00:	677b      	str	r3, [r7, #116]	; 0x74
 8004c02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c0a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004c0c:	463b      	mov	r3, r7
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	895b      	ldrh	r3, [r3, #10]
 8004c12:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8004c16:	e097      	b.n	8004d48 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004c18:	463b      	mov	r3, r7
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	785b      	ldrb	r3, [r3, #1]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d168      	bne.n	8004cf4 <USB_EPStartXfer+0x954>
 8004c22:	1d3b      	adds	r3, r7, #4
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c2a:	1d3b      	adds	r3, r7, #4
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	461a      	mov	r2, r3
 8004c36:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c3a:	4413      	add	r3, r2
 8004c3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c40:	463b      	mov	r3, r7
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	011a      	lsls	r2, r3, #4
 8004c48:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c52:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004c54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d112      	bne.n	8004c82 <USB_EPStartXfer+0x8e2>
 8004c5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c5e:	881b      	ldrh	r3, [r3, #0]
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c6a:	801a      	strh	r2, [r3, #0]
 8004c6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c6e:	881b      	ldrh	r3, [r3, #0]
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c7e:	801a      	strh	r2, [r3, #0]
 8004c80:	e05d      	b.n	8004d3e <USB_EPStartXfer+0x99e>
 8004c82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c86:	2b3e      	cmp	r3, #62	; 0x3e
 8004c88:	d817      	bhi.n	8004cba <USB_EPStartXfer+0x91a>
 8004c8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c8e:	085b      	lsrs	r3, r3, #1
 8004c90:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004c94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c98:	f003 0301 	and.w	r3, r3, #1
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d004      	beq.n	8004caa <USB_EPStartXfer+0x90a>
 8004ca0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004caa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	029b      	lsls	r3, r3, #10
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004cb6:	801a      	strh	r2, [r3, #0]
 8004cb8:	e041      	b.n	8004d3e <USB_EPStartXfer+0x99e>
 8004cba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cbe:	095b      	lsrs	r3, r3, #5
 8004cc0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004cc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cc8:	f003 031f 	and.w	r3, r3, #31
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d104      	bne.n	8004cda <USB_EPStartXfer+0x93a>
 8004cd0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004cda:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	029b      	lsls	r3, r3, #10
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ce8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004cf0:	801a      	strh	r2, [r3, #0]
 8004cf2:	e024      	b.n	8004d3e <USB_EPStartXfer+0x99e>
 8004cf4:	463b      	mov	r3, r7
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	785b      	ldrb	r3, [r3, #1]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d11f      	bne.n	8004d3e <USB_EPStartXfer+0x99e>
 8004cfe:	1d3b      	adds	r3, r7, #4
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d06:	1d3b      	adds	r3, r7, #4
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	461a      	mov	r2, r3
 8004d12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d16:	4413      	add	r3, r2
 8004d18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d1c:	463b      	mov	r3, r7
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	011a      	lsls	r2, r3, #4
 8004d24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d28:	4413      	add	r3, r2
 8004d2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d3c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004d3e:	463b      	mov	r3, r7
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	891b      	ldrh	r3, [r3, #8]
 8004d44:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d48:	463b      	mov	r3, r7
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6959      	ldr	r1, [r3, #20]
 8004d4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004d58:	1d38      	adds	r0, r7, #4
 8004d5a:	6800      	ldr	r0, [r0, #0]
 8004d5c:	f000 fd7e 	bl	800585c <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004d60:	463b      	mov	r3, r7
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	785b      	ldrb	r3, [r3, #1]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d122      	bne.n	8004db0 <USB_EPStartXfer+0xa10>
 8004d6a:	1d3b      	adds	r3, r7, #4
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	463b      	mov	r3, r7
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4413      	add	r3, r2
 8004d78:	881b      	ldrh	r3, [r3, #0]
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d84:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8004d88:	1d3b      	adds	r3, r7, #4
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	463b      	mov	r3, r7
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	441a      	add	r2, r3
 8004d96:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8004d9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004da2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004da6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	8013      	strh	r3, [r2, #0]
 8004dae:	e026      	b.n	8004dfe <USB_EPStartXfer+0xa5e>
 8004db0:	463b      	mov	r3, r7
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	785b      	ldrb	r3, [r3, #1]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d121      	bne.n	8004dfe <USB_EPStartXfer+0xa5e>
 8004dba:	1d3b      	adds	r3, r7, #4
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	463b      	mov	r3, r7
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	4413      	add	r3, r2
 8004dc8:	881b      	ldrh	r3, [r3, #0]
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dd4:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8004dd8:	1d3b      	adds	r3, r7, #4
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	463b      	mov	r3, r7
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	441a      	add	r2, r3
 8004de6:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8004dea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004df2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004df6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004dfe:	1d3b      	adds	r3, r7, #4
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	463b      	mov	r3, r7
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	4413      	add	r3, r2
 8004e0c:	881b      	ldrh	r3, [r3, #0]
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	f107 020e 	add.w	r2, r7, #14
 8004e14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e1c:	8013      	strh	r3, [r2, #0]
 8004e1e:	f107 030e 	add.w	r3, r7, #14
 8004e22:	f107 020e 	add.w	r2, r7, #14
 8004e26:	8812      	ldrh	r2, [r2, #0]
 8004e28:	f082 0210 	eor.w	r2, r2, #16
 8004e2c:	801a      	strh	r2, [r3, #0]
 8004e2e:	f107 030e 	add.w	r3, r7, #14
 8004e32:	f107 020e 	add.w	r2, r7, #14
 8004e36:	8812      	ldrh	r2, [r2, #0]
 8004e38:	f082 0220 	eor.w	r2, r2, #32
 8004e3c:	801a      	strh	r2, [r3, #0]
 8004e3e:	1d3b      	adds	r3, r7, #4
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	463b      	mov	r3, r7
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	441a      	add	r2, r3
 8004e4c:	f107 030e 	add.w	r3, r7, #14
 8004e50:	881b      	ldrh	r3, [r3, #0]
 8004e52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	8013      	strh	r3, [r2, #0]
 8004e66:	e3b5      	b.n	80055d4 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004e68:	463b      	mov	r3, r7
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	7b1b      	ldrb	r3, [r3, #12]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	f040 8090 	bne.w	8004f94 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004e74:	463b      	mov	r3, r7
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	699a      	ldr	r2, [r3, #24]
 8004e7a:	463b      	mov	r3, r7
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d90e      	bls.n	8004ea2 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8004e84:	463b      	mov	r3, r7
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8004e8e:	463b      	mov	r3, r7
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	699a      	ldr	r2, [r3, #24]
 8004e94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e98:	1ad2      	subs	r2, r2, r3
 8004e9a:	463b      	mov	r3, r7
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	619a      	str	r2, [r3, #24]
 8004ea0:	e008      	b.n	8004eb4 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8004ea2:	463b      	mov	r3, r7
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8004eac:	463b      	mov	r3, r7
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004eb4:	1d3b      	adds	r3, r7, #4
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004ebc:	1d3b      	adds	r3, r7, #4
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004ecc:	4413      	add	r3, r2
 8004ece:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004ed2:	463b      	mov	r3, r7
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	011a      	lsls	r2, r3, #4
 8004eda:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004ede:	4413      	add	r3, r2
 8004ee0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ee4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ee8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d116      	bne.n	8004f1e <USB_EPStartXfer+0xb7e>
 8004ef0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ef4:	881b      	ldrh	r3, [r3, #0]
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004efc:	b29a      	uxth	r2, r3
 8004efe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f02:	801a      	strh	r2, [r3, #0]
 8004f04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f08:	881b      	ldrh	r3, [r3, #0]
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f14:	b29a      	uxth	r2, r3
 8004f16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f1a:	801a      	strh	r2, [r3, #0]
 8004f1c:	e32c      	b.n	8005578 <USB_EPStartXfer+0x11d8>
 8004f1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f22:	2b3e      	cmp	r3, #62	; 0x3e
 8004f24:	d818      	bhi.n	8004f58 <USB_EPStartXfer+0xbb8>
 8004f26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f2a:	085b      	lsrs	r3, r3, #1
 8004f2c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004f30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d004      	beq.n	8004f46 <USB_EPStartXfer+0xba6>
 8004f3c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004f40:	3301      	adds	r3, #1
 8004f42:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004f46:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	029b      	lsls	r3, r3, #10
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f54:	801a      	strh	r2, [r3, #0]
 8004f56:	e30f      	b.n	8005578 <USB_EPStartXfer+0x11d8>
 8004f58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f5c:	095b      	lsrs	r3, r3, #5
 8004f5e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004f62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f66:	f003 031f 	and.w	r3, r3, #31
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d104      	bne.n	8004f78 <USB_EPStartXfer+0xbd8>
 8004f6e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004f72:	3b01      	subs	r3, #1
 8004f74:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004f78:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	029b      	lsls	r3, r3, #10
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f90:	801a      	strh	r2, [r3, #0]
 8004f92:	e2f1      	b.n	8005578 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004f94:	463b      	mov	r3, r7
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	78db      	ldrb	r3, [r3, #3]
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	f040 818f 	bne.w	80052be <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004fa0:	463b      	mov	r3, r7
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	785b      	ldrb	r3, [r3, #1]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d175      	bne.n	8005096 <USB_EPStartXfer+0xcf6>
 8004faa:	1d3b      	adds	r3, r7, #4
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004fb2:	1d3b      	adds	r3, r7, #4
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004fc8:	463b      	mov	r3, r7
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	011a      	lsls	r2, r3, #4
 8004fd0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004fd4:	4413      	add	r3, r2
 8004fd6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004fde:	463b      	mov	r3, r7
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d116      	bne.n	8005016 <USB_EPStartXfer+0xc76>
 8004fe8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004fec:	881b      	ldrh	r3, [r3, #0]
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ff4:	b29a      	uxth	r2, r3
 8004ff6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ffa:	801a      	strh	r2, [r3, #0]
 8004ffc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005000:	881b      	ldrh	r3, [r3, #0]
 8005002:	b29b      	uxth	r3, r3
 8005004:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005008:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800500c:	b29a      	uxth	r2, r3
 800500e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005012:	801a      	strh	r2, [r3, #0]
 8005014:	e065      	b.n	80050e2 <USB_EPStartXfer+0xd42>
 8005016:	463b      	mov	r3, r7
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	2b3e      	cmp	r3, #62	; 0x3e
 800501e:	d81a      	bhi.n	8005056 <USB_EPStartXfer+0xcb6>
 8005020:	463b      	mov	r3, r7
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	085b      	lsrs	r3, r3, #1
 8005028:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800502c:	463b      	mov	r3, r7
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b00      	cmp	r3, #0
 8005038:	d004      	beq.n	8005044 <USB_EPStartXfer+0xca4>
 800503a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800503e:	3301      	adds	r3, #1
 8005040:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005044:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005048:	b29b      	uxth	r3, r3
 800504a:	029b      	lsls	r3, r3, #10
 800504c:	b29a      	uxth	r2, r3
 800504e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005052:	801a      	strh	r2, [r3, #0]
 8005054:	e045      	b.n	80050e2 <USB_EPStartXfer+0xd42>
 8005056:	463b      	mov	r3, r7
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	095b      	lsrs	r3, r3, #5
 800505e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005062:	463b      	mov	r3, r7
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	f003 031f 	and.w	r3, r3, #31
 800506c:	2b00      	cmp	r3, #0
 800506e:	d104      	bne.n	800507a <USB_EPStartXfer+0xcda>
 8005070:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005074:	3b01      	subs	r3, #1
 8005076:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800507a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800507e:	b29b      	uxth	r3, r3
 8005080:	029b      	lsls	r3, r3, #10
 8005082:	b29b      	uxth	r3, r3
 8005084:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005088:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800508c:	b29a      	uxth	r2, r3
 800508e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005092:	801a      	strh	r2, [r3, #0]
 8005094:	e025      	b.n	80050e2 <USB_EPStartXfer+0xd42>
 8005096:	463b      	mov	r3, r7
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	785b      	ldrb	r3, [r3, #1]
 800509c:	2b01      	cmp	r3, #1
 800509e:	d120      	bne.n	80050e2 <USB_EPStartXfer+0xd42>
 80050a0:	1d3b      	adds	r3, r7, #4
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050a8:	1d3b      	adds	r3, r7, #4
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	461a      	mov	r2, r3
 80050b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80050b8:	4413      	add	r3, r2
 80050ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050be:	463b      	mov	r3, r7
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	011a      	lsls	r2, r3, #4
 80050c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80050ca:	4413      	add	r3, r2
 80050cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80050d4:	463b      	mov	r3, r7
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	b29a      	uxth	r2, r3
 80050dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80050e0:	801a      	strh	r2, [r3, #0]
 80050e2:	1d3b      	adds	r3, r7, #4
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80050ea:	463b      	mov	r3, r7
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	785b      	ldrb	r3, [r3, #1]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d175      	bne.n	80051e0 <USB_EPStartXfer+0xe40>
 80050f4:	1d3b      	adds	r3, r7, #4
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80050fc:	1d3b      	adds	r3, r7, #4
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005104:	b29b      	uxth	r3, r3
 8005106:	461a      	mov	r2, r3
 8005108:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800510c:	4413      	add	r3, r2
 800510e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005112:	463b      	mov	r3, r7
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	011a      	lsls	r2, r3, #4
 800511a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800511e:	4413      	add	r3, r2
 8005120:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005124:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005128:	463b      	mov	r3, r7
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d116      	bne.n	8005160 <USB_EPStartXfer+0xdc0>
 8005132:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005136:	881b      	ldrh	r3, [r3, #0]
 8005138:	b29b      	uxth	r3, r3
 800513a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800513e:	b29a      	uxth	r2, r3
 8005140:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005144:	801a      	strh	r2, [r3, #0]
 8005146:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800514a:	881b      	ldrh	r3, [r3, #0]
 800514c:	b29b      	uxth	r3, r3
 800514e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005152:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005156:	b29a      	uxth	r2, r3
 8005158:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800515c:	801a      	strh	r2, [r3, #0]
 800515e:	e061      	b.n	8005224 <USB_EPStartXfer+0xe84>
 8005160:	463b      	mov	r3, r7
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	2b3e      	cmp	r3, #62	; 0x3e
 8005168:	d81a      	bhi.n	80051a0 <USB_EPStartXfer+0xe00>
 800516a:	463b      	mov	r3, r7
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	085b      	lsrs	r3, r3, #1
 8005172:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005176:	463b      	mov	r3, r7
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	f003 0301 	and.w	r3, r3, #1
 8005180:	2b00      	cmp	r3, #0
 8005182:	d004      	beq.n	800518e <USB_EPStartXfer+0xdee>
 8005184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005188:	3301      	adds	r3, #1
 800518a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800518e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005192:	b29b      	uxth	r3, r3
 8005194:	029b      	lsls	r3, r3, #10
 8005196:	b29a      	uxth	r2, r3
 8005198:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800519c:	801a      	strh	r2, [r3, #0]
 800519e:	e041      	b.n	8005224 <USB_EPStartXfer+0xe84>
 80051a0:	463b      	mov	r3, r7
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	095b      	lsrs	r3, r3, #5
 80051a8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80051ac:	463b      	mov	r3, r7
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	f003 031f 	and.w	r3, r3, #31
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d104      	bne.n	80051c4 <USB_EPStartXfer+0xe24>
 80051ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051be:	3b01      	subs	r3, #1
 80051c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80051c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	029b      	lsls	r3, r3, #10
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80051dc:	801a      	strh	r2, [r3, #0]
 80051de:	e021      	b.n	8005224 <USB_EPStartXfer+0xe84>
 80051e0:	463b      	mov	r3, r7
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	785b      	ldrb	r3, [r3, #1]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d11c      	bne.n	8005224 <USB_EPStartXfer+0xe84>
 80051ea:	1d3b      	adds	r3, r7, #4
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	461a      	mov	r2, r3
 80051f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80051fa:	4413      	add	r3, r2
 80051fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005200:	463b      	mov	r3, r7
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	011a      	lsls	r2, r3, #4
 8005208:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800520c:	4413      	add	r3, r2
 800520e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005212:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005216:	463b      	mov	r3, r7
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	b29a      	uxth	r2, r3
 800521e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005222:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005224:	463b      	mov	r3, r7
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	69db      	ldr	r3, [r3, #28]
 800522a:	2b00      	cmp	r3, #0
 800522c:	f000 81a4 	beq.w	8005578 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005230:	1d3b      	adds	r3, r7, #4
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	463b      	mov	r3, r7
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	4413      	add	r3, r2
 800523e:	881b      	ldrh	r3, [r3, #0]
 8005240:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005244:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005248:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d005      	beq.n	800525c <USB_EPStartXfer+0xebc>
 8005250:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005258:	2b00      	cmp	r3, #0
 800525a:	d10d      	bne.n	8005278 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800525c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005260:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005264:	2b00      	cmp	r3, #0
 8005266:	f040 8187 	bne.w	8005578 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800526a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800526e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005272:	2b00      	cmp	r3, #0
 8005274:	f040 8180 	bne.w	8005578 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005278:	1d3b      	adds	r3, r7, #4
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	463b      	mov	r3, r7
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	4413      	add	r3, r2
 8005286:	881b      	ldrh	r3, [r3, #0]
 8005288:	b29b      	uxth	r3, r3
 800528a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800528e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005292:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8005296:	1d3b      	adds	r3, r7, #4
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	463b      	mov	r3, r7
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	441a      	add	r2, r3
 80052a4:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80052a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	8013      	strh	r3, [r2, #0]
 80052bc:	e15c      	b.n	8005578 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80052be:	463b      	mov	r3, r7
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	78db      	ldrb	r3, [r3, #3]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	f040 8155 	bne.w	8005574 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80052ca:	463b      	mov	r3, r7
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	699a      	ldr	r2, [r3, #24]
 80052d0:	463b      	mov	r3, r7
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d90e      	bls.n	80052f8 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 80052da:	463b      	mov	r3, r7
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 80052e4:	463b      	mov	r3, r7
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	699a      	ldr	r2, [r3, #24]
 80052ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052ee:	1ad2      	subs	r2, r2, r3
 80052f0:	463b      	mov	r3, r7
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	619a      	str	r2, [r3, #24]
 80052f6:	e008      	b.n	800530a <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 80052f8:	463b      	mov	r3, r7
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	699b      	ldr	r3, [r3, #24]
 80052fe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8005302:	463b      	mov	r3, r7
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2200      	movs	r2, #0
 8005308:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800530a:	463b      	mov	r3, r7
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	785b      	ldrb	r3, [r3, #1]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d16f      	bne.n	80053f4 <USB_EPStartXfer+0x1054>
 8005314:	1d3b      	adds	r3, r7, #4
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800531c:	1d3b      	adds	r3, r7, #4
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005324:	b29b      	uxth	r3, r3
 8005326:	461a      	mov	r2, r3
 8005328:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800532c:	4413      	add	r3, r2
 800532e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005332:	463b      	mov	r3, r7
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	011a      	lsls	r2, r3, #4
 800533a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800533e:	4413      	add	r3, r2
 8005340:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005344:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005348:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800534c:	2b00      	cmp	r3, #0
 800534e:	d116      	bne.n	800537e <USB_EPStartXfer+0xfde>
 8005350:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005354:	881b      	ldrh	r3, [r3, #0]
 8005356:	b29b      	uxth	r3, r3
 8005358:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800535c:	b29a      	uxth	r2, r3
 800535e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005362:	801a      	strh	r2, [r3, #0]
 8005364:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005368:	881b      	ldrh	r3, [r3, #0]
 800536a:	b29b      	uxth	r3, r3
 800536c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005370:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005374:	b29a      	uxth	r2, r3
 8005376:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800537a:	801a      	strh	r2, [r3, #0]
 800537c:	e05f      	b.n	800543e <USB_EPStartXfer+0x109e>
 800537e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005382:	2b3e      	cmp	r3, #62	; 0x3e
 8005384:	d818      	bhi.n	80053b8 <USB_EPStartXfer+0x1018>
 8005386:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800538a:	085b      	lsrs	r3, r3, #1
 800538c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005390:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005394:	f003 0301 	and.w	r3, r3, #1
 8005398:	2b00      	cmp	r3, #0
 800539a:	d004      	beq.n	80053a6 <USB_EPStartXfer+0x1006>
 800539c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053a0:	3301      	adds	r3, #1
 80053a2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80053a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	029b      	lsls	r3, r3, #10
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80053b4:	801a      	strh	r2, [r3, #0]
 80053b6:	e042      	b.n	800543e <USB_EPStartXfer+0x109e>
 80053b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053bc:	095b      	lsrs	r3, r3, #5
 80053be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80053c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053c6:	f003 031f 	and.w	r3, r3, #31
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d104      	bne.n	80053d8 <USB_EPStartXfer+0x1038>
 80053ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053d2:	3b01      	subs	r3, #1
 80053d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80053d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053dc:	b29b      	uxth	r3, r3
 80053de:	029b      	lsls	r3, r3, #10
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80053f0:	801a      	strh	r2, [r3, #0]
 80053f2:	e024      	b.n	800543e <USB_EPStartXfer+0x109e>
 80053f4:	463b      	mov	r3, r7
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	785b      	ldrb	r3, [r3, #1]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d11f      	bne.n	800543e <USB_EPStartXfer+0x109e>
 80053fe:	1d3b      	adds	r3, r7, #4
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005406:	1d3b      	adds	r3, r7, #4
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800540e:	b29b      	uxth	r3, r3
 8005410:	461a      	mov	r2, r3
 8005412:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005416:	4413      	add	r3, r2
 8005418:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800541c:	463b      	mov	r3, r7
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	011a      	lsls	r2, r3, #4
 8005424:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005428:	4413      	add	r3, r2
 800542a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800542e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005432:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005436:	b29a      	uxth	r2, r3
 8005438:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800543c:	801a      	strh	r2, [r3, #0]
 800543e:	1d3b      	adds	r3, r7, #4
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005446:	463b      	mov	r3, r7
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	785b      	ldrb	r3, [r3, #1]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d16f      	bne.n	8005530 <USB_EPStartXfer+0x1190>
 8005450:	1d3b      	adds	r3, r7, #4
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005458:	1d3b      	adds	r3, r7, #4
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005460:	b29b      	uxth	r3, r3
 8005462:	461a      	mov	r2, r3
 8005464:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005468:	4413      	add	r3, r2
 800546a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800546e:	463b      	mov	r3, r7
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	011a      	lsls	r2, r3, #4
 8005476:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800547a:	4413      	add	r3, r2
 800547c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005480:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005484:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005488:	2b00      	cmp	r3, #0
 800548a:	d116      	bne.n	80054ba <USB_EPStartXfer+0x111a>
 800548c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005490:	881b      	ldrh	r3, [r3, #0]
 8005492:	b29b      	uxth	r3, r3
 8005494:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005498:	b29a      	uxth	r2, r3
 800549a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800549e:	801a      	strh	r2, [r3, #0]
 80054a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80054a4:	881b      	ldrh	r3, [r3, #0]
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054b0:	b29a      	uxth	r2, r3
 80054b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80054b6:	801a      	strh	r2, [r3, #0]
 80054b8:	e05e      	b.n	8005578 <USB_EPStartXfer+0x11d8>
 80054ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054be:	2b3e      	cmp	r3, #62	; 0x3e
 80054c0:	d818      	bhi.n	80054f4 <USB_EPStartXfer+0x1154>
 80054c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054c6:	085b      	lsrs	r3, r3, #1
 80054c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80054cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054d0:	f003 0301 	and.w	r3, r3, #1
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d004      	beq.n	80054e2 <USB_EPStartXfer+0x1142>
 80054d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054dc:	3301      	adds	r3, #1
 80054de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80054e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	029b      	lsls	r3, r3, #10
 80054ea:	b29a      	uxth	r2, r3
 80054ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80054f0:	801a      	strh	r2, [r3, #0]
 80054f2:	e041      	b.n	8005578 <USB_EPStartXfer+0x11d8>
 80054f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054f8:	095b      	lsrs	r3, r3, #5
 80054fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80054fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005502:	f003 031f 	and.w	r3, r3, #31
 8005506:	2b00      	cmp	r3, #0
 8005508:	d104      	bne.n	8005514 <USB_EPStartXfer+0x1174>
 800550a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800550e:	3b01      	subs	r3, #1
 8005510:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005514:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005518:	b29b      	uxth	r3, r3
 800551a:	029b      	lsls	r3, r3, #10
 800551c:	b29b      	uxth	r3, r3
 800551e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005522:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005526:	b29a      	uxth	r2, r3
 8005528:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800552c:	801a      	strh	r2, [r3, #0]
 800552e:	e023      	b.n	8005578 <USB_EPStartXfer+0x11d8>
 8005530:	463b      	mov	r3, r7
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	785b      	ldrb	r3, [r3, #1]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d11e      	bne.n	8005578 <USB_EPStartXfer+0x11d8>
 800553a:	1d3b      	adds	r3, r7, #4
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005542:	b29b      	uxth	r3, r3
 8005544:	461a      	mov	r2, r3
 8005546:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800554a:	4413      	add	r3, r2
 800554c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005550:	463b      	mov	r3, r7
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	011a      	lsls	r2, r3, #4
 8005558:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800555c:	4413      	add	r3, r2
 800555e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005562:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005566:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800556a:	b29a      	uxth	r2, r3
 800556c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005570:	801a      	strh	r2, [r3, #0]
 8005572:	e001      	b.n	8005578 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e02e      	b.n	80055d6 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005578:	1d3b      	adds	r3, r7, #4
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	463b      	mov	r3, r7
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	4413      	add	r3, r2
 8005586:	881b      	ldrh	r3, [r3, #0]
 8005588:	b29b      	uxth	r3, r3
 800558a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800558e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005592:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005596:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800559a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800559e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80055a2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80055a6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80055aa:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80055ae:	1d3b      	adds	r3, r7, #4
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	463b      	mov	r3, r7
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	441a      	add	r2, r3
 80055bc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80055c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	785b      	ldrb	r3, [r3, #1]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d020      	beq.n	8005634 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	4413      	add	r3, r2
 80055fc:	881b      	ldrh	r3, [r3, #0]
 80055fe:	b29b      	uxth	r3, r3
 8005600:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005604:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005608:	81bb      	strh	r3, [r7, #12]
 800560a:	89bb      	ldrh	r3, [r7, #12]
 800560c:	f083 0310 	eor.w	r3, r3, #16
 8005610:	81bb      	strh	r3, [r7, #12]
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	441a      	add	r2, r3
 800561c:	89bb      	ldrh	r3, [r7, #12]
 800561e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005622:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005626:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800562a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800562e:	b29b      	uxth	r3, r3
 8005630:	8013      	strh	r3, [r2, #0]
 8005632:	e01f      	b.n	8005674 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	4413      	add	r3, r2
 800563e:	881b      	ldrh	r3, [r3, #0]
 8005640:	b29b      	uxth	r3, r3
 8005642:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800564a:	81fb      	strh	r3, [r7, #14]
 800564c:	89fb      	ldrh	r3, [r7, #14]
 800564e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005652:	81fb      	strh	r3, [r7, #14]
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	441a      	add	r2, r3
 800565e:	89fb      	ldrh	r3, [r7, #14]
 8005660:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005664:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005668:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800566c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005670:	b29b      	uxth	r3, r3
 8005672:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3714      	adds	r7, #20
 800567a:	46bd      	mov	sp, r7
 800567c:	bc80      	pop	{r7}
 800567e:	4770      	bx	lr

08005680 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005680:	b480      	push	{r7}
 8005682:	b087      	sub	sp, #28
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	7b1b      	ldrb	r3, [r3, #12]
 800568e:	2b00      	cmp	r3, #0
 8005690:	f040 809d 	bne.w	80057ce <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	785b      	ldrb	r3, [r3, #1]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d04c      	beq.n	8005736 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	4413      	add	r3, r2
 80056a6:	881b      	ldrh	r3, [r3, #0]
 80056a8:	823b      	strh	r3, [r7, #16]
 80056aa:	8a3b      	ldrh	r3, [r7, #16]
 80056ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d01b      	beq.n	80056ec <USB_EPClearStall+0x6c>
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	4413      	add	r3, r2
 80056be:	881b      	ldrh	r3, [r3, #0]
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ca:	81fb      	strh	r3, [r7, #14]
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	441a      	add	r2, r3
 80056d6:	89fb      	ldrh	r3, [r7, #14]
 80056d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	78db      	ldrb	r3, [r3, #3]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d06c      	beq.n	80057ce <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4413      	add	r3, r2
 80056fe:	881b      	ldrh	r3, [r3, #0]
 8005700:	b29b      	uxth	r3, r3
 8005702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005706:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800570a:	81bb      	strh	r3, [r7, #12]
 800570c:	89bb      	ldrh	r3, [r7, #12]
 800570e:	f083 0320 	eor.w	r3, r3, #32
 8005712:	81bb      	strh	r3, [r7, #12]
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	441a      	add	r2, r3
 800571e:	89bb      	ldrh	r3, [r7, #12]
 8005720:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005724:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005728:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800572c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005730:	b29b      	uxth	r3, r3
 8005732:	8013      	strh	r3, [r2, #0]
 8005734:	e04b      	b.n	80057ce <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4413      	add	r3, r2
 8005740:	881b      	ldrh	r3, [r3, #0]
 8005742:	82fb      	strh	r3, [r7, #22]
 8005744:	8afb      	ldrh	r3, [r7, #22]
 8005746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d01b      	beq.n	8005786 <USB_EPClearStall+0x106>
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	4413      	add	r3, r2
 8005758:	881b      	ldrh	r3, [r3, #0]
 800575a:	b29b      	uxth	r3, r3
 800575c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005760:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005764:	82bb      	strh	r3, [r7, #20]
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	441a      	add	r2, r3
 8005770:	8abb      	ldrh	r3, [r7, #20]
 8005772:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005776:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800577a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800577e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005782:	b29b      	uxth	r3, r3
 8005784:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	4413      	add	r3, r2
 8005790:	881b      	ldrh	r3, [r3, #0]
 8005792:	b29b      	uxth	r3, r3
 8005794:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800579c:	827b      	strh	r3, [r7, #18]
 800579e:	8a7b      	ldrh	r3, [r7, #18]
 80057a0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80057a4:	827b      	strh	r3, [r7, #18]
 80057a6:	8a7b      	ldrh	r3, [r7, #18]
 80057a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80057ac:	827b      	strh	r3, [r7, #18]
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	441a      	add	r2, r3
 80057b8:	8a7b      	ldrh	r3, [r7, #18]
 80057ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	371c      	adds	r7, #28
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bc80      	pop	{r7}
 80057d8:	4770      	bx	lr

080057da <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80057da:	b480      	push	{r7}
 80057dc:	b083      	sub	sp, #12
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
 80057e2:	460b      	mov	r3, r1
 80057e4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80057e6:	78fb      	ldrb	r3, [r7, #3]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d103      	bne.n	80057f4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2280      	movs	r2, #128	; 0x80
 80057f0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	370c      	adds	r7, #12
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bc80      	pop	{r7}
 80057fe:	4770      	bx	lr

08005800 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	bc80      	pop	{r7}
 8005812:	4770      	bx	lr

08005814 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	370c      	adds	r7, #12
 8005822:	46bd      	mov	sp, r7
 8005824:	bc80      	pop	{r7}
 8005826:	4770      	bx	lr

08005828 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005836:	b29b      	uxth	r3, r3
 8005838:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800583a:	68fb      	ldr	r3, [r7, #12]
}
 800583c:	4618      	mov	r0, r3
 800583e:	3714      	adds	r7, #20
 8005840:	46bd      	mov	sp, r7
 8005842:	bc80      	pop	{r7}
 8005844:	4770      	bx	lr

08005846 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005846:	b480      	push	{r7}
 8005848:	b083      	sub	sp, #12
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
 800584e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	370c      	adds	r7, #12
 8005856:	46bd      	mov	sp, r7
 8005858:	bc80      	pop	{r7}
 800585a:	4770      	bx	lr

0800585c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800585c:	b480      	push	{r7}
 800585e:	b08d      	sub	sp, #52	; 0x34
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	4611      	mov	r1, r2
 8005868:	461a      	mov	r2, r3
 800586a:	460b      	mov	r3, r1
 800586c:	80fb      	strh	r3, [r7, #6]
 800586e:	4613      	mov	r3, r2
 8005870:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005872:	88bb      	ldrh	r3, [r7, #4]
 8005874:	3301      	adds	r3, #1
 8005876:	085b      	lsrs	r3, r3, #1
 8005878:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005882:	88fb      	ldrh	r3, [r7, #6]
 8005884:	005a      	lsls	r2, r3, #1
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	4413      	add	r3, r2
 800588a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800588e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005890:	6a3b      	ldr	r3, [r7, #32]
 8005892:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005894:	e01e      	b.n	80058d4 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800589c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589e:	3301      	adds	r3, #1
 80058a0:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80058a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	021b      	lsls	r3, r3, #8
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	461a      	mov	r2, r3
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	b29a      	uxth	r2, r3
 80058b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ba:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80058bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058be:	3302      	adds	r3, #2
 80058c0:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80058c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c4:	3302      	adds	r3, #2
 80058c6:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80058c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ca:	3301      	adds	r3, #1
 80058cc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80058ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d0:	3b01      	subs	r3, #1
 80058d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d1dd      	bne.n	8005896 <USB_WritePMA+0x3a>
  }
}
 80058da:	bf00      	nop
 80058dc:	3734      	adds	r7, #52	; 0x34
 80058de:	46bd      	mov	sp, r7
 80058e0:	bc80      	pop	{r7}
 80058e2:	4770      	bx	lr

080058e4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b08b      	sub	sp, #44	; 0x2c
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	4611      	mov	r1, r2
 80058f0:	461a      	mov	r2, r3
 80058f2:	460b      	mov	r3, r1
 80058f4:	80fb      	strh	r3, [r7, #6]
 80058f6:	4613      	mov	r3, r2
 80058f8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80058fa:	88bb      	ldrh	r3, [r7, #4]
 80058fc:	085b      	lsrs	r3, r3, #1
 80058fe:	b29b      	uxth	r3, r3
 8005900:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800590a:	88fb      	ldrh	r3, [r7, #6]
 800590c:	005a      	lsls	r2, r3, #1
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	4413      	add	r3, r2
 8005912:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005916:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	627b      	str	r3, [r7, #36]	; 0x24
 800591c:	e01b      	b.n	8005956 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800591e:	6a3b      	ldr	r3, [r7, #32]
 8005920:	881b      	ldrh	r3, [r3, #0]
 8005922:	b29b      	uxth	r3, r3
 8005924:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005926:	6a3b      	ldr	r3, [r7, #32]
 8005928:	3302      	adds	r3, #2
 800592a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	b2da      	uxtb	r2, r3
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	3301      	adds	r3, #1
 8005938:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	0a1b      	lsrs	r3, r3, #8
 800593e:	b2da      	uxtb	r2, r3
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	3301      	adds	r3, #1
 8005948:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800594a:	6a3b      	ldr	r3, [r7, #32]
 800594c:	3302      	adds	r3, #2
 800594e:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8005950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005952:	3b01      	subs	r3, #1
 8005954:	627b      	str	r3, [r7, #36]	; 0x24
 8005956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1e0      	bne.n	800591e <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800595c:	88bb      	ldrh	r3, [r7, #4]
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	b29b      	uxth	r3, r3
 8005964:	2b00      	cmp	r3, #0
 8005966:	d007      	beq.n	8005978 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8005968:	6a3b      	ldr	r3, [r7, #32]
 800596a:	881b      	ldrh	r3, [r3, #0]
 800596c:	b29b      	uxth	r3, r3
 800596e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	b2da      	uxtb	r2, r3
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	701a      	strb	r2, [r3, #0]
  }
}
 8005978:	bf00      	nop
 800597a:	372c      	adds	r7, #44	; 0x2c
 800597c:	46bd      	mov	sp, r7
 800597e:	bc80      	pop	{r7}
 8005980:	4770      	bx	lr

08005982 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005982:	b580      	push	{r7, lr}
 8005984:	b084      	sub	sp, #16
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
 800598a:	460b      	mov	r3, r1
 800598c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800598e:	2300      	movs	r3, #0
 8005990:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	7c1b      	ldrb	r3, [r3, #16]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d115      	bne.n	80059c6 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800599a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800599e:	2202      	movs	r2, #2
 80059a0:	2181      	movs	r1, #129	; 0x81
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f001 fefb 	bl	800779e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80059ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059b2:	2202      	movs	r2, #2
 80059b4:	2101      	movs	r1, #1
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f001 fef1 	bl	800779e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80059c4:	e012      	b.n	80059ec <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80059c6:	2340      	movs	r3, #64	; 0x40
 80059c8:	2202      	movs	r2, #2
 80059ca:	2181      	movs	r1, #129	; 0x81
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f001 fee6 	bl	800779e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2201      	movs	r2, #1
 80059d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80059d8:	2340      	movs	r3, #64	; 0x40
 80059da:	2202      	movs	r2, #2
 80059dc:	2101      	movs	r1, #1
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f001 fedd 	bl	800779e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80059ec:	2308      	movs	r3, #8
 80059ee:	2203      	movs	r2, #3
 80059f0:	2182      	movs	r1, #130	; 0x82
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f001 fed3 	bl	800779e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80059fe:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005a02:	f001 fff3 	bl	80079ec <USBD_static_malloc>
 8005a06:	4602      	mov	r2, r0
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d102      	bne.n	8005a1e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	73fb      	strb	r3, [r7, #15]
 8005a1c:	e026      	b.n	8005a6c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a24:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	7c1b      	ldrb	r3, [r3, #16]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d109      	bne.n	8005a5c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a52:	2101      	movs	r1, #1
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f001 ff93 	bl	8007980 <USBD_LL_PrepareReceive>
 8005a5a:	e007      	b.n	8005a6c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a62:	2340      	movs	r3, #64	; 0x40
 8005a64:	2101      	movs	r1, #1
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f001 ff8a 	bl	8007980 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b084      	sub	sp, #16
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
 8005a7e:	460b      	mov	r3, r1
 8005a80:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005a82:	2300      	movs	r3, #0
 8005a84:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005a86:	2181      	movs	r1, #129	; 0x81
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f001 feae 	bl	80077ea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005a94:	2101      	movs	r1, #1
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f001 fea7 	bl	80077ea <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005aa4:	2182      	movs	r1, #130	; 0x82
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f001 fe9f 	bl	80077ea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d00e      	beq.n	8005ada <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005acc:	4618      	mov	r0, r3
 8005ace:	f001 ff99 	bl	8007a04 <USBD_static_free>
    pdev->pClassData = NULL;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3710      	adds	r7, #16
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b086      	sub	sp, #24
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005af4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005af6:	2300      	movs	r3, #0
 8005af8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005afa:	2300      	movs	r3, #0
 8005afc:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005afe:	2300      	movs	r3, #0
 8005b00:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d039      	beq.n	8005b82 <USBD_CDC_Setup+0x9e>
 8005b0e:	2b20      	cmp	r3, #32
 8005b10:	d17c      	bne.n	8005c0c <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	88db      	ldrh	r3, [r3, #6]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d029      	beq.n	8005b6e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	b25b      	sxtb	r3, r3
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	da11      	bge.n	8005b48 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	683a      	ldr	r2, [r7, #0]
 8005b2e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005b30:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b32:	683a      	ldr	r2, [r7, #0]
 8005b34:	88d2      	ldrh	r2, [r2, #6]
 8005b36:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005b38:	6939      	ldr	r1, [r7, #16]
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	88db      	ldrh	r3, [r3, #6]
 8005b3e:	461a      	mov	r2, r3
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f001 fa13 	bl	8006f6c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005b46:	e068      	b.n	8005c1a <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	785a      	ldrb	r2, [r3, #1]
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	88db      	ldrh	r3, [r3, #6]
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005b5e:	6939      	ldr	r1, [r7, #16]
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	88db      	ldrh	r3, [r3, #6]
 8005b64:	461a      	mov	r2, r3
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f001 fa2e 	bl	8006fc8 <USBD_CtlPrepareRx>
      break;
 8005b6c:	e055      	b.n	8005c1a <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	683a      	ldr	r2, [r7, #0]
 8005b78:	7850      	ldrb	r0, [r2, #1]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	6839      	ldr	r1, [r7, #0]
 8005b7e:	4798      	blx	r3
      break;
 8005b80:	e04b      	b.n	8005c1a <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	785b      	ldrb	r3, [r3, #1]
 8005b86:	2b0a      	cmp	r3, #10
 8005b88:	d017      	beq.n	8005bba <USBD_CDC_Setup+0xd6>
 8005b8a:	2b0b      	cmp	r3, #11
 8005b8c:	d029      	beq.n	8005be2 <USBD_CDC_Setup+0xfe>
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d133      	bne.n	8005bfa <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b98:	2b03      	cmp	r3, #3
 8005b9a:	d107      	bne.n	8005bac <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005b9c:	f107 030c 	add.w	r3, r7, #12
 8005ba0:	2202      	movs	r2, #2
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f001 f9e1 	bl	8006f6c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005baa:	e02e      	b.n	8005c0a <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005bac:	6839      	ldr	r1, [r7, #0]
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f001 f972 	bl	8006e98 <USBD_CtlError>
            ret = USBD_FAIL;
 8005bb4:	2302      	movs	r3, #2
 8005bb6:	75fb      	strb	r3, [r7, #23]
          break;
 8005bb8:	e027      	b.n	8005c0a <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bc0:	2b03      	cmp	r3, #3
 8005bc2:	d107      	bne.n	8005bd4 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005bc4:	f107 030f 	add.w	r3, r7, #15
 8005bc8:	2201      	movs	r2, #1
 8005bca:	4619      	mov	r1, r3
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f001 f9cd 	bl	8006f6c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005bd2:	e01a      	b.n	8005c0a <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005bd4:	6839      	ldr	r1, [r7, #0]
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f001 f95e 	bl	8006e98 <USBD_CtlError>
            ret = USBD_FAIL;
 8005bdc:	2302      	movs	r3, #2
 8005bde:	75fb      	strb	r3, [r7, #23]
          break;
 8005be0:	e013      	b.n	8005c0a <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005be8:	2b03      	cmp	r3, #3
 8005bea:	d00d      	beq.n	8005c08 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8005bec:	6839      	ldr	r1, [r7, #0]
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f001 f952 	bl	8006e98 <USBD_CtlError>
            ret = USBD_FAIL;
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005bf8:	e006      	b.n	8005c08 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8005bfa:	6839      	ldr	r1, [r7, #0]
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f001 f94b 	bl	8006e98 <USBD_CtlError>
          ret = USBD_FAIL;
 8005c02:	2302      	movs	r3, #2
 8005c04:	75fb      	strb	r3, [r7, #23]
          break;
 8005c06:	e000      	b.n	8005c0a <USBD_CDC_Setup+0x126>
          break;
 8005c08:	bf00      	nop
      }
      break;
 8005c0a:	e006      	b.n	8005c1a <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8005c0c:	6839      	ldr	r1, [r7, #0]
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f001 f942 	bl	8006e98 <USBD_CtlError>
      ret = USBD_FAIL;
 8005c14:	2302      	movs	r3, #2
 8005c16:	75fb      	strb	r3, [r7, #23]
      break;
 8005c18:	bf00      	nop
  }

  return ret;
 8005c1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3718      	adds	r7, #24
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c36:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c3e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d03a      	beq.n	8005cc0 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005c4a:	78fa      	ldrb	r2, [r7, #3]
 8005c4c:	6879      	ldr	r1, [r7, #4]
 8005c4e:	4613      	mov	r3, r2
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	4413      	add	r3, r2
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	440b      	add	r3, r1
 8005c58:	331c      	adds	r3, #28
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d029      	beq.n	8005cb4 <USBD_CDC_DataIn+0x90>
 8005c60:	78fa      	ldrb	r2, [r7, #3]
 8005c62:	6879      	ldr	r1, [r7, #4]
 8005c64:	4613      	mov	r3, r2
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	4413      	add	r3, r2
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	440b      	add	r3, r1
 8005c6e:	331c      	adds	r3, #28
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	78f9      	ldrb	r1, [r7, #3]
 8005c74:	68b8      	ldr	r0, [r7, #8]
 8005c76:	460b      	mov	r3, r1
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	440b      	add	r3, r1
 8005c7c:	00db      	lsls	r3, r3, #3
 8005c7e:	4403      	add	r3, r0
 8005c80:	3338      	adds	r3, #56	; 0x38
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	fbb2 f1f3 	udiv	r1, r2, r3
 8005c88:	fb03 f301 	mul.w	r3, r3, r1
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d110      	bne.n	8005cb4 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005c92:	78fa      	ldrb	r2, [r7, #3]
 8005c94:	6879      	ldr	r1, [r7, #4]
 8005c96:	4613      	mov	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	4413      	add	r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	440b      	add	r3, r1
 8005ca0:	331c      	adds	r3, #28
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005ca6:	78f9      	ldrb	r1, [r7, #3]
 8005ca8:	2300      	movs	r3, #0
 8005caa:	2200      	movs	r2, #0
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f001 fe44 	bl	800793a <USBD_LL_Transmit>
 8005cb2:	e003      	b.n	8005cbc <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	e000      	b.n	8005cc2 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005cc0:	2302      	movs	r3, #2
  }
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b084      	sub	sp, #16
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cdc:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005cde:	78fb      	ldrb	r3, [r7, #3]
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f001 fe6f 	bl	80079c6 <USBD_LL_GetRxDataSize>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00d      	beq.n	8005d16 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005d0e:	4611      	mov	r1, r2
 8005d10:	4798      	blx	r3

    return USBD_OK;
 8005d12:	2300      	movs	r3, #0
 8005d14:	e000      	b.n	8005d18 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005d16:	2302      	movs	r3, #2
  }
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3710      	adds	r7, #16
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d2e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d015      	beq.n	8005d66 <USBD_CDC_EP0_RxReady+0x46>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005d40:	2bff      	cmp	r3, #255	; 0xff
 8005d42:	d010      	beq.n	8005d66 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005d52:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005d5a:	b292      	uxth	r2, r2
 8005d5c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	22ff      	movs	r2, #255	; 0xff
 8005d62:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3710      	adds	r7, #16
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2243      	movs	r2, #67	; 0x43
 8005d7c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005d7e:	4b03      	ldr	r3, [pc, #12]	; (8005d8c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bc80      	pop	{r7}
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	20000094 	.word	0x20000094

08005d90 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2243      	movs	r2, #67	; 0x43
 8005d9c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005d9e:	4b03      	ldr	r3, [pc, #12]	; (8005dac <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bc80      	pop	{r7}
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	20000050 	.word	0x20000050

08005db0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2243      	movs	r2, #67	; 0x43
 8005dbc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005dbe:	4b03      	ldr	r3, [pc, #12]	; (8005dcc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bc80      	pop	{r7}
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	200000d8 	.word	0x200000d8

08005dd0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	220a      	movs	r2, #10
 8005ddc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005dde:	4b03      	ldr	r3, [pc, #12]	; (8005dec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bc80      	pop	{r7}
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	2000000c 	.word	0x2000000c

08005df0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005dfa:	2302      	movs	r3, #2
 8005dfc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d005      	beq.n	8005e10 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	683a      	ldr	r2, [r7, #0]
 8005e08:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3714      	adds	r7, #20
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bc80      	pop	{r7}
 8005e1a:	4770      	bx	lr

08005e1c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b087      	sub	sp, #28
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	4613      	mov	r3, r2
 8005e28:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e30:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	68ba      	ldr	r2, [r7, #8]
 8005e36:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005e3a:	88fa      	ldrh	r2, [r7, #6]
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	371c      	adds	r7, #28
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bc80      	pop	{r7}
 8005e4c:	4770      	bx	lr

08005e4e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005e4e:	b480      	push	{r7}
 8005e50:	b085      	sub	sp, #20
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
 8005e56:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e5e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	683a      	ldr	r2, [r7, #0]
 8005e64:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3714      	adds	r7, #20
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bc80      	pop	{r7}
 8005e72:	4770      	bx	lr

08005e74 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e82:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d01c      	beq.n	8005ec8 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d115      	bne.n	8005ec4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	2181      	movs	r1, #129	; 0x81
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f001 fd3d 	bl	800793a <USBD_LL_Transmit>

      return USBD_OK;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	e002      	b.n	8005eca <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e000      	b.n	8005eca <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005ec8:	2302      	movs	r3, #2
  }
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3710      	adds	r7, #16
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}

08005ed2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	b084      	sub	sp, #16
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ee0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d017      	beq.n	8005f1c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	7c1b      	ldrb	r3, [r3, #16]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d109      	bne.n	8005f08 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005efa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005efe:	2101      	movs	r1, #1
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f001 fd3d 	bl	8007980 <USBD_LL_PrepareReceive>
 8005f06:	e007      	b.n	8005f18 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f0e:	2340      	movs	r3, #64	; 0x40
 8005f10:	2101      	movs	r1, #1
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f001 fd34 	bl	8007980 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	e000      	b.n	8005f1e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005f1c:	2302      	movs	r3, #2
  }
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3710      	adds	r7, #16
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
	...

08005f28 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	4613      	mov	r3, r2
 8005f34:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d10a      	bne.n	8005f52 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8005f3c:	4814      	ldr	r0, [pc, #80]	; (8005f90 <USBD_Init+0x68>)
 8005f3e:	f001 fdcd 	bl	8007adc <iprintf>
 8005f42:	4814      	ldr	r0, [pc, #80]	; (8005f94 <USBD_Init+0x6c>)
 8005f44:	f001 fdca 	bl	8007adc <iprintf>
 8005f48:	200a      	movs	r0, #10
 8005f4a:	f001 fddf 	bl	8007b0c <putchar>
#endif
    return USBD_FAIL;
 8005f4e:	2302      	movs	r3, #2
 8005f50:	e01a      	b.n	8005f88 <USBD_Init+0x60>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d003      	beq.n	8005f64 <USBD_Init+0x3c>
  {
    pdev->pClass = NULL;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d003      	beq.n	8005f72 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	79fa      	ldrb	r2, [r7, #7]
 8005f7e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f001 fb97 	bl	80076b4 <USBD_LL_Init>

  return USBD_OK;
 8005f86:	2300      	movs	r3, #0
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3710      	adds	r7, #16
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	080089f4 	.word	0x080089f4
 8005f94:	080089fc 	.word	0x080089fc

08005f98 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d006      	beq.n	8005fba <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	683a      	ldr	r2, [r7, #0]
 8005fb0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	73fb      	strb	r3, [r7, #15]
 8005fb8:	e00a      	b.n	8005fd0 <USBD_RegisterClass+0x38>
  }
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 8005fba:	4808      	ldr	r0, [pc, #32]	; (8005fdc <USBD_RegisterClass+0x44>)
 8005fbc:	f001 fd8e 	bl	8007adc <iprintf>
 8005fc0:	4807      	ldr	r0, [pc, #28]	; (8005fe0 <USBD_RegisterClass+0x48>)
 8005fc2:	f001 fd8b 	bl	8007adc <iprintf>
 8005fc6:	200a      	movs	r0, #10
 8005fc8:	f001 fda0 	bl	8007b0c <putchar>
#endif
    status = USBD_FAIL;
 8005fcc:	2302      	movs	r3, #2
 8005fce:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3710      	adds	r7, #16
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	080089f4 	.word	0x080089f4
 8005fe0:	08008a14 	.word	0x08008a14

08005fe4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f001 fbbb 	bl	8007768 <USBD_LL_Start>

  return USBD_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3708      	adds	r7, #8
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	370c      	adds	r7, #12
 800600a:	46bd      	mov	sp, r7
 800600c:	bc80      	pop	{r7}
 800600e:	4770      	bx	lr

08006010 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	460b      	mov	r3, r1
 800601a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800601c:	2302      	movs	r3, #2
 800601e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00c      	beq.n	8006044 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	78fa      	ldrb	r2, [r7, #3]
 8006034:	4611      	mov	r1, r2
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	4798      	blx	r3
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d101      	bne.n	8006044 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006040:	2300      	movs	r3, #0
 8006042:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006044:	7bfb      	ldrb	r3, [r7, #15]
}
 8006046:	4618      	mov	r0, r3
 8006048:	3710      	adds	r7, #16
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800604e:	b580      	push	{r7, lr}
 8006050:	b082      	sub	sp, #8
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
 8006056:	460b      	mov	r3, r1
 8006058:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	78fa      	ldrb	r2, [r7, #3]
 8006064:	4611      	mov	r1, r2
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	4798      	blx	r3

  return USBD_OK;
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	3708      	adds	r7, #8
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006084:	6839      	ldr	r1, [r7, #0]
 8006086:	4618      	mov	r0, r3
 8006088:	f000 feca 	bl	8006e20 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800609a:	461a      	mov	r2, r3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80060a8:	f003 031f 	and.w	r3, r3, #31
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d00c      	beq.n	80060ca <USBD_LL_SetupStage+0x56>
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d302      	bcc.n	80060ba <USBD_LL_SetupStage+0x46>
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	d010      	beq.n	80060da <USBD_LL_SetupStage+0x66>
 80060b8:	e017      	b.n	80060ea <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80060c0:	4619      	mov	r1, r3
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 f9ca 	bl	800645c <USBD_StdDevReq>
      break;
 80060c8:	e01a      	b.n	8006100 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80060d0:	4619      	mov	r1, r3
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 fa2c 	bl	8006530 <USBD_StdItfReq>
      break;
 80060d8:	e012      	b.n	8006100 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80060e0:	4619      	mov	r1, r3
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 fa6a 	bl	80065bc <USBD_StdEPReq>
      break;
 80060e8:	e00a      	b.n	8006100 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80060f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	4619      	mov	r1, r3
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f001 fb95 	bl	8007828 <USBD_LL_StallEP>
      break;
 80060fe:	bf00      	nop
  }

  return USBD_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3708      	adds	r7, #8
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800610a:	b580      	push	{r7, lr}
 800610c:	b086      	sub	sp, #24
 800610e:	af00      	add	r7, sp, #0
 8006110:	60f8      	str	r0, [r7, #12]
 8006112:	460b      	mov	r3, r1
 8006114:	607a      	str	r2, [r7, #4]
 8006116:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006118:	7afb      	ldrb	r3, [r7, #11]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d14b      	bne.n	80061b6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006124:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800612c:	2b03      	cmp	r3, #3
 800612e:	d134      	bne.n	800619a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	68da      	ldr	r2, [r3, #12]
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	429a      	cmp	r2, r3
 800613a:	d919      	bls.n	8006170 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	68da      	ldr	r2, [r3, #12]
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	1ad2      	subs	r2, r2, r3
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	68da      	ldr	r2, [r3, #12]
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006152:	429a      	cmp	r2, r3
 8006154:	d203      	bcs.n	800615e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800615a:	b29b      	uxth	r3, r3
 800615c:	e002      	b.n	8006164 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006162:	b29b      	uxth	r3, r3
 8006164:	461a      	mov	r2, r3
 8006166:	6879      	ldr	r1, [r7, #4]
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f000 ff4b 	bl	8007004 <USBD_CtlContinueRx>
 800616e:	e038      	b.n	80061e2 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00a      	beq.n	8006192 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006182:	2b03      	cmp	r3, #3
 8006184:	d105      	bne.n	8006192 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f000 ff48 	bl	8007028 <USBD_CtlSendStatus>
 8006198:	e023      	b.n	80061e2 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80061a0:	2b05      	cmp	r3, #5
 80061a2:	d11e      	bne.n	80061e2 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80061ac:	2100      	movs	r1, #0
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	f001 fb3a 	bl	8007828 <USBD_LL_StallEP>
 80061b4:	e015      	b.n	80061e2 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d00d      	beq.n	80061de <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80061c8:	2b03      	cmp	r3, #3
 80061ca:	d108      	bne.n	80061de <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061d2:	699b      	ldr	r3, [r3, #24]
 80061d4:	7afa      	ldrb	r2, [r7, #11]
 80061d6:	4611      	mov	r1, r2
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	4798      	blx	r3
 80061dc:	e001      	b.n	80061e2 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80061de:	2302      	movs	r3, #2
 80061e0:	e000      	b.n	80061e4 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80061e2:	2300      	movs	r3, #0
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3718      	adds	r7, #24
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b086      	sub	sp, #24
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	460b      	mov	r3, r1
 80061f6:	607a      	str	r2, [r7, #4]
 80061f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80061fa:	7afb      	ldrb	r3, [r7, #11]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d17f      	bne.n	8006300 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	3314      	adds	r3, #20
 8006204:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800620c:	2b02      	cmp	r3, #2
 800620e:	d15c      	bne.n	80062ca <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	68da      	ldr	r2, [r3, #12]
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	429a      	cmp	r2, r3
 800621a:	d915      	bls.n	8006248 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	68da      	ldr	r2, [r3, #12]
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	1ad2      	subs	r2, r2, r3
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	b29b      	uxth	r3, r3
 8006230:	461a      	mov	r2, r3
 8006232:	6879      	ldr	r1, [r7, #4]
 8006234:	68f8      	ldr	r0, [r7, #12]
 8006236:	f000 feb5 	bl	8006fa4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800623a:	2300      	movs	r3, #0
 800623c:	2200      	movs	r2, #0
 800623e:	2100      	movs	r1, #0
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f001 fb9d 	bl	8007980 <USBD_LL_PrepareReceive>
 8006246:	e04e      	b.n	80062e6 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	6912      	ldr	r2, [r2, #16]
 8006250:	fbb3 f1f2 	udiv	r1, r3, r2
 8006254:	fb02 f201 	mul.w	r2, r2, r1
 8006258:	1a9b      	subs	r3, r3, r2
 800625a:	2b00      	cmp	r3, #0
 800625c:	d11c      	bne.n	8006298 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	689a      	ldr	r2, [r3, #8]
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006266:	429a      	cmp	r2, r3
 8006268:	d316      	bcc.n	8006298 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	689a      	ldr	r2, [r3, #8]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006274:	429a      	cmp	r2, r3
 8006276:	d20f      	bcs.n	8006298 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006278:	2200      	movs	r2, #0
 800627a:	2100      	movs	r1, #0
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f000 fe91 	bl	8006fa4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2200      	movs	r2, #0
 8006286:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800628a:	2300      	movs	r3, #0
 800628c:	2200      	movs	r2, #0
 800628e:	2100      	movs	r1, #0
 8006290:	68f8      	ldr	r0, [r7, #12]
 8006292:	f001 fb75 	bl	8007980 <USBD_LL_PrepareReceive>
 8006296:	e026      	b.n	80062e6 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00a      	beq.n	80062ba <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80062aa:	2b03      	cmp	r3, #3
 80062ac:	d105      	bne.n	80062ba <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80062ba:	2180      	movs	r1, #128	; 0x80
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f001 fab3 	bl	8007828 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80062c2:	68f8      	ldr	r0, [r7, #12]
 80062c4:	f000 fec3 	bl	800704e <USBD_CtlReceiveStatus>
 80062c8:	e00d      	b.n	80062e6 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80062d0:	2b04      	cmp	r3, #4
 80062d2:	d004      	beq.n	80062de <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d103      	bne.n	80062e6 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80062de:	2180      	movs	r1, #128	; 0x80
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	f001 faa1 	bl	8007828 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d11d      	bne.n	800632c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80062f0:	68f8      	ldr	r0, [r7, #12]
 80062f2:	f7ff fe83 	bl	8005ffc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80062fe:	e015      	b.n	800632c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006306:	695b      	ldr	r3, [r3, #20]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00d      	beq.n	8006328 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006312:	2b03      	cmp	r3, #3
 8006314:	d108      	bne.n	8006328 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	7afa      	ldrb	r2, [r7, #11]
 8006320:	4611      	mov	r1, r2
 8006322:	68f8      	ldr	r0, [r7, #12]
 8006324:	4798      	blx	r3
 8006326:	e001      	b.n	800632c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006328:	2302      	movs	r3, #2
 800632a:	e000      	b.n	800632e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3718      	adds	r7, #24
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006336:	b580      	push	{r7, lr}
 8006338:	b082      	sub	sp, #8
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800633e:	2340      	movs	r3, #64	; 0x40
 8006340:	2200      	movs	r2, #0
 8006342:	2100      	movs	r1, #0
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f001 fa2a 	bl	800779e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2201      	movs	r2, #1
 800634e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2240      	movs	r2, #64	; 0x40
 8006356:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800635a:	2340      	movs	r3, #64	; 0x40
 800635c:	2200      	movs	r2, #0
 800635e:	2180      	movs	r1, #128	; 0x80
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f001 fa1c 	bl	800779e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2201      	movs	r2, #1
 800636a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2240      	movs	r2, #64	; 0x40
 8006370:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2201      	movs	r2, #1
 8006376:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006396:	2b00      	cmp	r3, #0
 8006398:	d009      	beq.n	80063ae <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	6852      	ldr	r2, [r2, #4]
 80063a6:	b2d2      	uxtb	r2, r2
 80063a8:	4611      	mov	r1, r2
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	4798      	blx	r3
  }

  return USBD_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3708      	adds	r7, #8
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	460b      	mov	r3, r1
 80063c2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	78fa      	ldrb	r2, [r7, #3]
 80063c8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bc80      	pop	{r7}
 80063d4:	4770      	bx	lr

080063d6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80063d6:	b480      	push	{r7}
 80063d8:	b083      	sub	sp, #12
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2204      	movs	r2, #4
 80063ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bc80      	pop	{r7}
 80063fc:	4770      	bx	lr

080063fe <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80063fe:	b480      	push	{r7}
 8006400:	b083      	sub	sp, #12
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800640c:	2b04      	cmp	r3, #4
 800640e:	d105      	bne.n	800641c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	370c      	adds	r7, #12
 8006422:	46bd      	mov	sp, r7
 8006424:	bc80      	pop	{r7}
 8006426:	4770      	bx	lr

08006428 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006436:	2b03      	cmp	r3, #3
 8006438:	d10b      	bne.n	8006452 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006440:	69db      	ldr	r3, [r3, #28]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d005      	beq.n	8006452 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800644c:	69db      	ldr	r3, [r3, #28]
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3708      	adds	r7, #8
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006466:	2300      	movs	r3, #0
 8006468:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006472:	2b20      	cmp	r3, #32
 8006474:	d004      	beq.n	8006480 <USBD_StdDevReq+0x24>
 8006476:	2b40      	cmp	r3, #64	; 0x40
 8006478:	d002      	beq.n	8006480 <USBD_StdDevReq+0x24>
 800647a:	2b00      	cmp	r3, #0
 800647c:	d008      	beq.n	8006490 <USBD_StdDevReq+0x34>
 800647e:	e04c      	b.n	800651a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	6839      	ldr	r1, [r7, #0]
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	4798      	blx	r3
      break;
 800648e:	e049      	b.n	8006524 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	785b      	ldrb	r3, [r3, #1]
 8006494:	2b09      	cmp	r3, #9
 8006496:	d83a      	bhi.n	800650e <USBD_StdDevReq+0xb2>
 8006498:	a201      	add	r2, pc, #4	; (adr r2, 80064a0 <USBD_StdDevReq+0x44>)
 800649a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800649e:	bf00      	nop
 80064a0:	080064f1 	.word	0x080064f1
 80064a4:	08006505 	.word	0x08006505
 80064a8:	0800650f 	.word	0x0800650f
 80064ac:	080064fb 	.word	0x080064fb
 80064b0:	0800650f 	.word	0x0800650f
 80064b4:	080064d3 	.word	0x080064d3
 80064b8:	080064c9 	.word	0x080064c9
 80064bc:	0800650f 	.word	0x0800650f
 80064c0:	080064e7 	.word	0x080064e7
 80064c4:	080064dd 	.word	0x080064dd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80064c8:	6839      	ldr	r1, [r7, #0]
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 f9d4 	bl	8006878 <USBD_GetDescriptor>
          break;
 80064d0:	e022      	b.n	8006518 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80064d2:	6839      	ldr	r1, [r7, #0]
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 fb37 	bl	8006b48 <USBD_SetAddress>
          break;
 80064da:	e01d      	b.n	8006518 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80064dc:	6839      	ldr	r1, [r7, #0]
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 fb74 	bl	8006bcc <USBD_SetConfig>
          break;
 80064e4:	e018      	b.n	8006518 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80064e6:	6839      	ldr	r1, [r7, #0]
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 fbfd 	bl	8006ce8 <USBD_GetConfig>
          break;
 80064ee:	e013      	b.n	8006518 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80064f0:	6839      	ldr	r1, [r7, #0]
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 fc2c 	bl	8006d50 <USBD_GetStatus>
          break;
 80064f8:	e00e      	b.n	8006518 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80064fa:	6839      	ldr	r1, [r7, #0]
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 fc5a 	bl	8006db6 <USBD_SetFeature>
          break;
 8006502:	e009      	b.n	8006518 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006504:	6839      	ldr	r1, [r7, #0]
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 fc69 	bl	8006dde <USBD_ClrFeature>
          break;
 800650c:	e004      	b.n	8006518 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800650e:	6839      	ldr	r1, [r7, #0]
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 fcc1 	bl	8006e98 <USBD_CtlError>
          break;
 8006516:	bf00      	nop
      }
      break;
 8006518:	e004      	b.n	8006524 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800651a:	6839      	ldr	r1, [r7, #0]
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 fcbb 	bl	8006e98 <USBD_CtlError>
      break;
 8006522:	bf00      	nop
  }

  return ret;
 8006524:	7bfb      	ldrb	r3, [r7, #15]
}
 8006526:	4618      	mov	r0, r3
 8006528:	3710      	adds	r7, #16
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop

08006530 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800653a:	2300      	movs	r3, #0
 800653c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006546:	2b20      	cmp	r3, #32
 8006548:	d003      	beq.n	8006552 <USBD_StdItfReq+0x22>
 800654a:	2b40      	cmp	r3, #64	; 0x40
 800654c:	d001      	beq.n	8006552 <USBD_StdItfReq+0x22>
 800654e:	2b00      	cmp	r3, #0
 8006550:	d12a      	bne.n	80065a8 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006558:	3b01      	subs	r3, #1
 800655a:	2b02      	cmp	r3, #2
 800655c:	d81d      	bhi.n	800659a <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	889b      	ldrh	r3, [r3, #4]
 8006562:	b2db      	uxtb	r3, r3
 8006564:	2b01      	cmp	r3, #1
 8006566:	d813      	bhi.n	8006590 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	6839      	ldr	r1, [r7, #0]
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	4798      	blx	r3
 8006576:	4603      	mov	r3, r0
 8006578:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	88db      	ldrh	r3, [r3, #6]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d110      	bne.n	80065a4 <USBD_StdItfReq+0x74>
 8006582:	7bfb      	ldrb	r3, [r7, #15]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d10d      	bne.n	80065a4 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 fd4d 	bl	8007028 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800658e:	e009      	b.n	80065a4 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006590:	6839      	ldr	r1, [r7, #0]
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 fc80 	bl	8006e98 <USBD_CtlError>
          break;
 8006598:	e004      	b.n	80065a4 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800659a:	6839      	ldr	r1, [r7, #0]
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 fc7b 	bl	8006e98 <USBD_CtlError>
          break;
 80065a2:	e000      	b.n	80065a6 <USBD_StdItfReq+0x76>
          break;
 80065a4:	bf00      	nop
      }
      break;
 80065a6:	e004      	b.n	80065b2 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80065a8:	6839      	ldr	r1, [r7, #0]
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 fc74 	bl	8006e98 <USBD_CtlError>
      break;
 80065b0:	bf00      	nop
  }

  return USBD_OK;
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80065c6:	2300      	movs	r3, #0
 80065c8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	889b      	ldrh	r3, [r3, #4]
 80065ce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065d8:	2b20      	cmp	r3, #32
 80065da:	d004      	beq.n	80065e6 <USBD_StdEPReq+0x2a>
 80065dc:	2b40      	cmp	r3, #64	; 0x40
 80065de:	d002      	beq.n	80065e6 <USBD_StdEPReq+0x2a>
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d008      	beq.n	80065f6 <USBD_StdEPReq+0x3a>
 80065e4:	e13d      	b.n	8006862 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	6839      	ldr	r1, [r7, #0]
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	4798      	blx	r3
      break;
 80065f4:	e13a      	b.n	800686c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065fe:	2b20      	cmp	r3, #32
 8006600:	d10a      	bne.n	8006618 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	6839      	ldr	r1, [r7, #0]
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	4798      	blx	r3
 8006610:	4603      	mov	r3, r0
 8006612:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006614:	7bfb      	ldrb	r3, [r7, #15]
 8006616:	e12a      	b.n	800686e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	785b      	ldrb	r3, [r3, #1]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d03e      	beq.n	800669e <USBD_StdEPReq+0xe2>
 8006620:	2b03      	cmp	r3, #3
 8006622:	d002      	beq.n	800662a <USBD_StdEPReq+0x6e>
 8006624:	2b00      	cmp	r3, #0
 8006626:	d070      	beq.n	800670a <USBD_StdEPReq+0x14e>
 8006628:	e115      	b.n	8006856 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006630:	2b02      	cmp	r3, #2
 8006632:	d002      	beq.n	800663a <USBD_StdEPReq+0x7e>
 8006634:	2b03      	cmp	r3, #3
 8006636:	d015      	beq.n	8006664 <USBD_StdEPReq+0xa8>
 8006638:	e02b      	b.n	8006692 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800663a:	7bbb      	ldrb	r3, [r7, #14]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00c      	beq.n	800665a <USBD_StdEPReq+0x9e>
 8006640:	7bbb      	ldrb	r3, [r7, #14]
 8006642:	2b80      	cmp	r3, #128	; 0x80
 8006644:	d009      	beq.n	800665a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006646:	7bbb      	ldrb	r3, [r7, #14]
 8006648:	4619      	mov	r1, r3
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f001 f8ec 	bl	8007828 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006650:	2180      	movs	r1, #128	; 0x80
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f001 f8e8 	bl	8007828 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006658:	e020      	b.n	800669c <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800665a:	6839      	ldr	r1, [r7, #0]
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 fc1b 	bl	8006e98 <USBD_CtlError>
              break;
 8006662:	e01b      	b.n	800669c <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	885b      	ldrh	r3, [r3, #2]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d10e      	bne.n	800668a <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800666c:	7bbb      	ldrb	r3, [r7, #14]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00b      	beq.n	800668a <USBD_StdEPReq+0xce>
 8006672:	7bbb      	ldrb	r3, [r7, #14]
 8006674:	2b80      	cmp	r3, #128	; 0x80
 8006676:	d008      	beq.n	800668a <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	88db      	ldrh	r3, [r3, #6]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d104      	bne.n	800668a <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006680:	7bbb      	ldrb	r3, [r7, #14]
 8006682:	4619      	mov	r1, r3
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f001 f8cf 	bl	8007828 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 fccc 	bl	8007028 <USBD_CtlSendStatus>

              break;
 8006690:	e004      	b.n	800669c <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8006692:	6839      	ldr	r1, [r7, #0]
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 fbff 	bl	8006e98 <USBD_CtlError>
              break;
 800669a:	bf00      	nop
          }
          break;
 800669c:	e0e0      	b.n	8006860 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d002      	beq.n	80066ae <USBD_StdEPReq+0xf2>
 80066a8:	2b03      	cmp	r3, #3
 80066aa:	d015      	beq.n	80066d8 <USBD_StdEPReq+0x11c>
 80066ac:	e026      	b.n	80066fc <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066ae:	7bbb      	ldrb	r3, [r7, #14]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00c      	beq.n	80066ce <USBD_StdEPReq+0x112>
 80066b4:	7bbb      	ldrb	r3, [r7, #14]
 80066b6:	2b80      	cmp	r3, #128	; 0x80
 80066b8:	d009      	beq.n	80066ce <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80066ba:	7bbb      	ldrb	r3, [r7, #14]
 80066bc:	4619      	mov	r1, r3
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f001 f8b2 	bl	8007828 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80066c4:	2180      	movs	r1, #128	; 0x80
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f001 f8ae 	bl	8007828 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80066cc:	e01c      	b.n	8006708 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80066ce:	6839      	ldr	r1, [r7, #0]
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 fbe1 	bl	8006e98 <USBD_CtlError>
              break;
 80066d6:	e017      	b.n	8006708 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	885b      	ldrh	r3, [r3, #2]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d112      	bne.n	8006706 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80066e0:	7bbb      	ldrb	r3, [r7, #14]
 80066e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d004      	beq.n	80066f4 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80066ea:	7bbb      	ldrb	r3, [r7, #14]
 80066ec:	4619      	mov	r1, r3
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f001 f8b9 	bl	8007866 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 fc97 	bl	8007028 <USBD_CtlSendStatus>
              }
              break;
 80066fa:	e004      	b.n	8006706 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80066fc:	6839      	ldr	r1, [r7, #0]
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 fbca 	bl	8006e98 <USBD_CtlError>
              break;
 8006704:	e000      	b.n	8006708 <USBD_StdEPReq+0x14c>
              break;
 8006706:	bf00      	nop
          }
          break;
 8006708:	e0aa      	b.n	8006860 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006710:	2b02      	cmp	r3, #2
 8006712:	d002      	beq.n	800671a <USBD_StdEPReq+0x15e>
 8006714:	2b03      	cmp	r3, #3
 8006716:	d032      	beq.n	800677e <USBD_StdEPReq+0x1c2>
 8006718:	e097      	b.n	800684a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800671a:	7bbb      	ldrb	r3, [r7, #14]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d007      	beq.n	8006730 <USBD_StdEPReq+0x174>
 8006720:	7bbb      	ldrb	r3, [r7, #14]
 8006722:	2b80      	cmp	r3, #128	; 0x80
 8006724:	d004      	beq.n	8006730 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8006726:	6839      	ldr	r1, [r7, #0]
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 fbb5 	bl	8006e98 <USBD_CtlError>
                break;
 800672e:	e091      	b.n	8006854 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006730:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006734:	2b00      	cmp	r3, #0
 8006736:	da0b      	bge.n	8006750 <USBD_StdEPReq+0x194>
 8006738:	7bbb      	ldrb	r3, [r7, #14]
 800673a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800673e:	4613      	mov	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4413      	add	r3, r2
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	3310      	adds	r3, #16
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	4413      	add	r3, r2
 800674c:	3304      	adds	r3, #4
 800674e:	e00b      	b.n	8006768 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006750:	7bbb      	ldrb	r3, [r7, #14]
 8006752:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006756:	4613      	mov	r3, r2
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	4413      	add	r3, r2
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	4413      	add	r3, r2
 8006766:	3304      	adds	r3, #4
 8006768:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	2200      	movs	r2, #0
 800676e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	2202      	movs	r2, #2
 8006774:	4619      	mov	r1, r3
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 fbf8 	bl	8006f6c <USBD_CtlSendData>
              break;
 800677c:	e06a      	b.n	8006854 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800677e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006782:	2b00      	cmp	r3, #0
 8006784:	da11      	bge.n	80067aa <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006786:	7bbb      	ldrb	r3, [r7, #14]
 8006788:	f003 020f 	and.w	r2, r3, #15
 800678c:	6879      	ldr	r1, [r7, #4]
 800678e:	4613      	mov	r3, r2
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	4413      	add	r3, r2
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	440b      	add	r3, r1
 8006798:	3318      	adds	r3, #24
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d117      	bne.n	80067d0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80067a0:	6839      	ldr	r1, [r7, #0]
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 fb78 	bl	8006e98 <USBD_CtlError>
                  break;
 80067a8:	e054      	b.n	8006854 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80067aa:	7bbb      	ldrb	r3, [r7, #14]
 80067ac:	f003 020f 	and.w	r2, r3, #15
 80067b0:	6879      	ldr	r1, [r7, #4]
 80067b2:	4613      	mov	r3, r2
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	4413      	add	r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	440b      	add	r3, r1
 80067bc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d104      	bne.n	80067d0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80067c6:	6839      	ldr	r1, [r7, #0]
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 fb65 	bl	8006e98 <USBD_CtlError>
                  break;
 80067ce:	e041      	b.n	8006854 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	da0b      	bge.n	80067f0 <USBD_StdEPReq+0x234>
 80067d8:	7bbb      	ldrb	r3, [r7, #14]
 80067da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067de:	4613      	mov	r3, r2
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	4413      	add	r3, r2
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	3310      	adds	r3, #16
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	4413      	add	r3, r2
 80067ec:	3304      	adds	r3, #4
 80067ee:	e00b      	b.n	8006808 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80067f0:	7bbb      	ldrb	r3, [r7, #14]
 80067f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067f6:	4613      	mov	r3, r2
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	4413      	add	r3, r2
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	4413      	add	r3, r2
 8006806:	3304      	adds	r3, #4
 8006808:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800680a:	7bbb      	ldrb	r3, [r7, #14]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d002      	beq.n	8006816 <USBD_StdEPReq+0x25a>
 8006810:	7bbb      	ldrb	r3, [r7, #14]
 8006812:	2b80      	cmp	r3, #128	; 0x80
 8006814:	d103      	bne.n	800681e <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	2200      	movs	r2, #0
 800681a:	601a      	str	r2, [r3, #0]
 800681c:	e00e      	b.n	800683c <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800681e:	7bbb      	ldrb	r3, [r7, #14]
 8006820:	4619      	mov	r1, r3
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f001 f83e 	bl	80078a4 <USBD_LL_IsStallEP>
 8006828:	4603      	mov	r3, r0
 800682a:	2b00      	cmp	r3, #0
 800682c:	d003      	beq.n	8006836 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	2201      	movs	r2, #1
 8006832:	601a      	str	r2, [r3, #0]
 8006834:	e002      	b.n	800683c <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	2200      	movs	r2, #0
 800683a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	2202      	movs	r2, #2
 8006840:	4619      	mov	r1, r3
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 fb92 	bl	8006f6c <USBD_CtlSendData>
              break;
 8006848:	e004      	b.n	8006854 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800684a:	6839      	ldr	r1, [r7, #0]
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 fb23 	bl	8006e98 <USBD_CtlError>
              break;
 8006852:	bf00      	nop
          }
          break;
 8006854:	e004      	b.n	8006860 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8006856:	6839      	ldr	r1, [r7, #0]
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 fb1d 	bl	8006e98 <USBD_CtlError>
          break;
 800685e:	bf00      	nop
      }
      break;
 8006860:	e004      	b.n	800686c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8006862:	6839      	ldr	r1, [r7, #0]
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 fb17 	bl	8006e98 <USBD_CtlError>
      break;
 800686a:	bf00      	nop
  }

  return ret;
 800686c:	7bfb      	ldrb	r3, [r7, #15]
}
 800686e:	4618      	mov	r0, r3
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
	...

08006878 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006882:	2300      	movs	r3, #0
 8006884:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006886:	2300      	movs	r3, #0
 8006888:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800688a:	2300      	movs	r3, #0
 800688c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	885b      	ldrh	r3, [r3, #2]
 8006892:	0a1b      	lsrs	r3, r3, #8
 8006894:	b29b      	uxth	r3, r3
 8006896:	3b01      	subs	r3, #1
 8006898:	2b06      	cmp	r3, #6
 800689a:	f200 8128 	bhi.w	8006aee <USBD_GetDescriptor+0x276>
 800689e:	a201      	add	r2, pc, #4	; (adr r2, 80068a4 <USBD_GetDescriptor+0x2c>)
 80068a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a4:	080068c1 	.word	0x080068c1
 80068a8:	080068d9 	.word	0x080068d9
 80068ac:	08006919 	.word	0x08006919
 80068b0:	08006aef 	.word	0x08006aef
 80068b4:	08006aef 	.word	0x08006aef
 80068b8:	08006a8f 	.word	0x08006a8f
 80068bc:	08006abb 	.word	0x08006abb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	7c12      	ldrb	r2, [r2, #16]
 80068cc:	f107 0108 	add.w	r1, r7, #8
 80068d0:	4610      	mov	r0, r2
 80068d2:	4798      	blx	r3
 80068d4:	60f8      	str	r0, [r7, #12]
      break;
 80068d6:	e112      	b.n	8006afe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	7c1b      	ldrb	r3, [r3, #16]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d10d      	bne.n	80068fc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e8:	f107 0208 	add.w	r2, r7, #8
 80068ec:	4610      	mov	r0, r2
 80068ee:	4798      	blx	r3
 80068f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	3301      	adds	r3, #1
 80068f6:	2202      	movs	r2, #2
 80068f8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80068fa:	e100      	b.n	8006afe <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006904:	f107 0208 	add.w	r2, r7, #8
 8006908:	4610      	mov	r0, r2
 800690a:	4798      	blx	r3
 800690c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	3301      	adds	r3, #1
 8006912:	2202      	movs	r2, #2
 8006914:	701a      	strb	r2, [r3, #0]
      break;
 8006916:	e0f2      	b.n	8006afe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	885b      	ldrh	r3, [r3, #2]
 800691c:	b2db      	uxtb	r3, r3
 800691e:	2b05      	cmp	r3, #5
 8006920:	f200 80ac 	bhi.w	8006a7c <USBD_GetDescriptor+0x204>
 8006924:	a201      	add	r2, pc, #4	; (adr r2, 800692c <USBD_GetDescriptor+0xb4>)
 8006926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800692a:	bf00      	nop
 800692c:	08006945 	.word	0x08006945
 8006930:	08006979 	.word	0x08006979
 8006934:	080069ad 	.word	0x080069ad
 8006938:	080069e1 	.word	0x080069e1
 800693c:	08006a15 	.word	0x08006a15
 8006940:	08006a49 	.word	0x08006a49
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d00b      	beq.n	8006968 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	7c12      	ldrb	r2, [r2, #16]
 800695c:	f107 0108 	add.w	r1, r7, #8
 8006960:	4610      	mov	r0, r2
 8006962:	4798      	blx	r3
 8006964:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006966:	e091      	b.n	8006a8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006968:	6839      	ldr	r1, [r7, #0]
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 fa94 	bl	8006e98 <USBD_CtlError>
            err++;
 8006970:	7afb      	ldrb	r3, [r7, #11]
 8006972:	3301      	adds	r3, #1
 8006974:	72fb      	strb	r3, [r7, #11]
          break;
 8006976:	e089      	b.n	8006a8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00b      	beq.n	800699c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	7c12      	ldrb	r2, [r2, #16]
 8006990:	f107 0108 	add.w	r1, r7, #8
 8006994:	4610      	mov	r0, r2
 8006996:	4798      	blx	r3
 8006998:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800699a:	e077      	b.n	8006a8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800699c:	6839      	ldr	r1, [r7, #0]
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 fa7a 	bl	8006e98 <USBD_CtlError>
            err++;
 80069a4:	7afb      	ldrb	r3, [r7, #11]
 80069a6:	3301      	adds	r3, #1
 80069a8:	72fb      	strb	r3, [r7, #11]
          break;
 80069aa:	e06f      	b.n	8006a8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00b      	beq.n	80069d0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	7c12      	ldrb	r2, [r2, #16]
 80069c4:	f107 0108 	add.w	r1, r7, #8
 80069c8:	4610      	mov	r0, r2
 80069ca:	4798      	blx	r3
 80069cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069ce:	e05d      	b.n	8006a8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069d0:	6839      	ldr	r1, [r7, #0]
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 fa60 	bl	8006e98 <USBD_CtlError>
            err++;
 80069d8:	7afb      	ldrb	r3, [r7, #11]
 80069da:	3301      	adds	r3, #1
 80069dc:	72fb      	strb	r3, [r7, #11]
          break;
 80069de:	e055      	b.n	8006a8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d00b      	beq.n	8006a04 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80069f2:	691b      	ldr	r3, [r3, #16]
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	7c12      	ldrb	r2, [r2, #16]
 80069f8:	f107 0108 	add.w	r1, r7, #8
 80069fc:	4610      	mov	r0, r2
 80069fe:	4798      	blx	r3
 8006a00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a02:	e043      	b.n	8006a8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a04:	6839      	ldr	r1, [r7, #0]
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 fa46 	bl	8006e98 <USBD_CtlError>
            err++;
 8006a0c:	7afb      	ldrb	r3, [r7, #11]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	72fb      	strb	r3, [r7, #11]
          break;
 8006a12:	e03b      	b.n	8006a8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a1a:	695b      	ldr	r3, [r3, #20]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d00b      	beq.n	8006a38 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a26:	695b      	ldr	r3, [r3, #20]
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	7c12      	ldrb	r2, [r2, #16]
 8006a2c:	f107 0108 	add.w	r1, r7, #8
 8006a30:	4610      	mov	r0, r2
 8006a32:	4798      	blx	r3
 8006a34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a36:	e029      	b.n	8006a8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a38:	6839      	ldr	r1, [r7, #0]
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 fa2c 	bl	8006e98 <USBD_CtlError>
            err++;
 8006a40:	7afb      	ldrb	r3, [r7, #11]
 8006a42:	3301      	adds	r3, #1
 8006a44:	72fb      	strb	r3, [r7, #11]
          break;
 8006a46:	e021      	b.n	8006a8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a4e:	699b      	ldr	r3, [r3, #24]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00b      	beq.n	8006a6c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a5a:	699b      	ldr	r3, [r3, #24]
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	7c12      	ldrb	r2, [r2, #16]
 8006a60:	f107 0108 	add.w	r1, r7, #8
 8006a64:	4610      	mov	r0, r2
 8006a66:	4798      	blx	r3
 8006a68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a6a:	e00f      	b.n	8006a8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a6c:	6839      	ldr	r1, [r7, #0]
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 fa12 	bl	8006e98 <USBD_CtlError>
            err++;
 8006a74:	7afb      	ldrb	r3, [r7, #11]
 8006a76:	3301      	adds	r3, #1
 8006a78:	72fb      	strb	r3, [r7, #11]
          break;
 8006a7a:	e007      	b.n	8006a8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006a7c:	6839      	ldr	r1, [r7, #0]
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 fa0a 	bl	8006e98 <USBD_CtlError>
          err++;
 8006a84:	7afb      	ldrb	r3, [r7, #11]
 8006a86:	3301      	adds	r3, #1
 8006a88:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006a8a:	e038      	b.n	8006afe <USBD_GetDescriptor+0x286>
 8006a8c:	e037      	b.n	8006afe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	7c1b      	ldrb	r3, [r3, #16]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d109      	bne.n	8006aaa <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a9e:	f107 0208 	add.w	r2, r7, #8
 8006aa2:	4610      	mov	r0, r2
 8006aa4:	4798      	blx	r3
 8006aa6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006aa8:	e029      	b.n	8006afe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006aaa:	6839      	ldr	r1, [r7, #0]
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 f9f3 	bl	8006e98 <USBD_CtlError>
        err++;
 8006ab2:	7afb      	ldrb	r3, [r7, #11]
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	72fb      	strb	r3, [r7, #11]
      break;
 8006ab8:	e021      	b.n	8006afe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	7c1b      	ldrb	r3, [r3, #16]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d10d      	bne.n	8006ade <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aca:	f107 0208 	add.w	r2, r7, #8
 8006ace:	4610      	mov	r0, r2
 8006ad0:	4798      	blx	r3
 8006ad2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	2207      	movs	r2, #7
 8006ada:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006adc:	e00f      	b.n	8006afe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006ade:	6839      	ldr	r1, [r7, #0]
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 f9d9 	bl	8006e98 <USBD_CtlError>
        err++;
 8006ae6:	7afb      	ldrb	r3, [r7, #11]
 8006ae8:	3301      	adds	r3, #1
 8006aea:	72fb      	strb	r3, [r7, #11]
      break;
 8006aec:	e007      	b.n	8006afe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006aee:	6839      	ldr	r1, [r7, #0]
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 f9d1 	bl	8006e98 <USBD_CtlError>
      err++;
 8006af6:	7afb      	ldrb	r3, [r7, #11]
 8006af8:	3301      	adds	r3, #1
 8006afa:	72fb      	strb	r3, [r7, #11]
      break;
 8006afc:	bf00      	nop
  }

  if (err != 0U)
 8006afe:	7afb      	ldrb	r3, [r7, #11]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d11c      	bne.n	8006b3e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006b04:	893b      	ldrh	r3, [r7, #8]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d011      	beq.n	8006b2e <USBD_GetDescriptor+0x2b6>
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	88db      	ldrh	r3, [r3, #6]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d00d      	beq.n	8006b2e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	88da      	ldrh	r2, [r3, #6]
 8006b16:	893b      	ldrh	r3, [r7, #8]
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	bf28      	it	cs
 8006b1c:	4613      	movcs	r3, r2
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006b22:	893b      	ldrh	r3, [r7, #8]
 8006b24:	461a      	mov	r2, r3
 8006b26:	68f9      	ldr	r1, [r7, #12]
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 fa1f 	bl	8006f6c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	88db      	ldrh	r3, [r3, #6]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d104      	bne.n	8006b40 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 fa76 	bl	8007028 <USBD_CtlSendStatus>
 8006b3c:	e000      	b.n	8006b40 <USBD_GetDescriptor+0x2c8>
    return;
 8006b3e:	bf00      	nop
    }
  }
}
 8006b40:	3710      	adds	r7, #16
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop

08006b48 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	889b      	ldrh	r3, [r3, #4]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d130      	bne.n	8006bbc <USBD_SetAddress+0x74>
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	88db      	ldrh	r3, [r3, #6]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d12c      	bne.n	8006bbc <USBD_SetAddress+0x74>
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	885b      	ldrh	r3, [r3, #2]
 8006b66:	2b7f      	cmp	r3, #127	; 0x7f
 8006b68:	d828      	bhi.n	8006bbc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	885b      	ldrh	r3, [r3, #2]
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b74:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b7c:	2b03      	cmp	r3, #3
 8006b7e:	d104      	bne.n	8006b8a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006b80:	6839      	ldr	r1, [r7, #0]
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 f988 	bl	8006e98 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b88:	e01c      	b.n	8006bc4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	7bfa      	ldrb	r2, [r7, #15]
 8006b8e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006b92:	7bfb      	ldrb	r3, [r7, #15]
 8006b94:	4619      	mov	r1, r3
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 feb0 	bl	80078fc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 fa43 	bl	8007028 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006ba2:	7bfb      	ldrb	r3, [r7, #15]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d004      	beq.n	8006bb2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2202      	movs	r2, #2
 8006bac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bb0:	e008      	b.n	8006bc4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bba:	e003      	b.n	8006bc4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006bbc:	6839      	ldr	r1, [r7, #0]
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 f96a 	bl	8006e98 <USBD_CtlError>
  }
}
 8006bc4:	bf00      	nop
 8006bc6:	3710      	adds	r7, #16
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	885b      	ldrh	r3, [r3, #2]
 8006bda:	b2da      	uxtb	r2, r3
 8006bdc:	4b41      	ldr	r3, [pc, #260]	; (8006ce4 <USBD_SetConfig+0x118>)
 8006bde:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006be0:	4b40      	ldr	r3, [pc, #256]	; (8006ce4 <USBD_SetConfig+0x118>)
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d904      	bls.n	8006bf2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006be8:	6839      	ldr	r1, [r7, #0]
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 f954 	bl	8006e98 <USBD_CtlError>
 8006bf0:	e075      	b.n	8006cde <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d002      	beq.n	8006c02 <USBD_SetConfig+0x36>
 8006bfc:	2b03      	cmp	r3, #3
 8006bfe:	d023      	beq.n	8006c48 <USBD_SetConfig+0x7c>
 8006c00:	e062      	b.n	8006cc8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006c02:	4b38      	ldr	r3, [pc, #224]	; (8006ce4 <USBD_SetConfig+0x118>)
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d01a      	beq.n	8006c40 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006c0a:	4b36      	ldr	r3, [pc, #216]	; (8006ce4 <USBD_SetConfig+0x118>)
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	461a      	mov	r2, r3
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2203      	movs	r2, #3
 8006c18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006c1c:	4b31      	ldr	r3, [pc, #196]	; (8006ce4 <USBD_SetConfig+0x118>)
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	4619      	mov	r1, r3
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f7ff f9f4 	bl	8006010 <USBD_SetClassConfig>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d104      	bne.n	8006c38 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006c2e:	6839      	ldr	r1, [r7, #0]
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 f931 	bl	8006e98 <USBD_CtlError>
            return;
 8006c36:	e052      	b.n	8006cde <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 f9f5 	bl	8007028 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006c3e:	e04e      	b.n	8006cde <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 f9f1 	bl	8007028 <USBD_CtlSendStatus>
        break;
 8006c46:	e04a      	b.n	8006cde <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006c48:	4b26      	ldr	r3, [pc, #152]	; (8006ce4 <USBD_SetConfig+0x118>)
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d112      	bne.n	8006c76 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2202      	movs	r2, #2
 8006c54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006c58:	4b22      	ldr	r3, [pc, #136]	; (8006ce4 <USBD_SetConfig+0x118>)
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006c62:	4b20      	ldr	r3, [pc, #128]	; (8006ce4 <USBD_SetConfig+0x118>)
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	4619      	mov	r1, r3
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f7ff f9f0 	bl	800604e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 f9da 	bl	8007028 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006c74:	e033      	b.n	8006cde <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006c76:	4b1b      	ldr	r3, [pc, #108]	; (8006ce4 <USBD_SetConfig+0x118>)
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d01d      	beq.n	8006cc0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f7ff f9de 	bl	800604e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006c92:	4b14      	ldr	r3, [pc, #80]	; (8006ce4 <USBD_SetConfig+0x118>)
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	461a      	mov	r2, r3
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006c9c:	4b11      	ldr	r3, [pc, #68]	; (8006ce4 <USBD_SetConfig+0x118>)
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f7ff f9b4 	bl	8006010 <USBD_SetClassConfig>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d104      	bne.n	8006cb8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006cae:	6839      	ldr	r1, [r7, #0]
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 f8f1 	bl	8006e98 <USBD_CtlError>
            return;
 8006cb6:	e012      	b.n	8006cde <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 f9b5 	bl	8007028 <USBD_CtlSendStatus>
        break;
 8006cbe:	e00e      	b.n	8006cde <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 f9b1 	bl	8007028 <USBD_CtlSendStatus>
        break;
 8006cc6:	e00a      	b.n	8006cde <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006cc8:	6839      	ldr	r1, [r7, #0]
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 f8e4 	bl	8006e98 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006cd0:	4b04      	ldr	r3, [pc, #16]	; (8006ce4 <USBD_SetConfig+0x118>)
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f7ff f9b9 	bl	800604e <USBD_ClrClassConfig>
        break;
 8006cdc:	bf00      	nop
    }
  }
}
 8006cde:	3708      	adds	r7, #8
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	200001fc 	.word	0x200001fc

08006ce8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	88db      	ldrh	r3, [r3, #6]
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d004      	beq.n	8006d04 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006cfa:	6839      	ldr	r1, [r7, #0]
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 f8cb 	bl	8006e98 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006d02:	e021      	b.n	8006d48 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	db17      	blt.n	8006d3e <USBD_GetConfig+0x56>
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	dd02      	ble.n	8006d18 <USBD_GetConfig+0x30>
 8006d12:	2b03      	cmp	r3, #3
 8006d14:	d00b      	beq.n	8006d2e <USBD_GetConfig+0x46>
 8006d16:	e012      	b.n	8006d3e <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	3308      	adds	r3, #8
 8006d22:	2201      	movs	r2, #1
 8006d24:	4619      	mov	r1, r3
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 f920 	bl	8006f6c <USBD_CtlSendData>
        break;
 8006d2c:	e00c      	b.n	8006d48 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	3304      	adds	r3, #4
 8006d32:	2201      	movs	r2, #1
 8006d34:	4619      	mov	r1, r3
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 f918 	bl	8006f6c <USBD_CtlSendData>
        break;
 8006d3c:	e004      	b.n	8006d48 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8006d3e:	6839      	ldr	r1, [r7, #0]
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 f8a9 	bl	8006e98 <USBD_CtlError>
        break;
 8006d46:	bf00      	nop
}
 8006d48:	bf00      	nop
 8006d4a:	3708      	adds	r7, #8
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d60:	3b01      	subs	r3, #1
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	d81e      	bhi.n	8006da4 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	88db      	ldrh	r3, [r3, #6]
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	d004      	beq.n	8006d78 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006d6e:	6839      	ldr	r1, [r7, #0]
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 f891 	bl	8006e98 <USBD_CtlError>
        break;
 8006d76:	e01a      	b.n	8006dae <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	60da      	str	r2, [r3, #12]
#endif

      if (pdev->dev_remote_wakeup)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d005      	beq.n	8006d94 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	f043 0202 	orr.w	r2, r3, #2
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	330c      	adds	r3, #12
 8006d98:	2202      	movs	r2, #2
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 f8e5 	bl	8006f6c <USBD_CtlSendData>
      break;
 8006da2:	e004      	b.n	8006dae <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006da4:	6839      	ldr	r1, [r7, #0]
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 f876 	bl	8006e98 <USBD_CtlError>
      break;
 8006dac:	bf00      	nop
  }
}
 8006dae:	bf00      	nop
 8006db0:	3708      	adds	r7, #8
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b082      	sub	sp, #8
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
 8006dbe:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	885b      	ldrh	r3, [r3, #2]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d106      	bne.n	8006dd6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 f929 	bl	8007028 <USBD_CtlSendStatus>
  }
}
 8006dd6:	bf00      	nop
 8006dd8:	3708      	adds	r7, #8
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b082      	sub	sp, #8
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
 8006de6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dee:	3b01      	subs	r3, #1
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	d80b      	bhi.n	8006e0c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	885b      	ldrh	r3, [r3, #2]
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d10c      	bne.n	8006e16 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 f90f 	bl	8007028 <USBD_CtlSendStatus>
      }
      break;
 8006e0a:	e004      	b.n	8006e16 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006e0c:	6839      	ldr	r1, [r7, #0]
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 f842 	bl	8006e98 <USBD_CtlError>
      break;
 8006e14:	e000      	b.n	8006e18 <USBD_ClrFeature+0x3a>
      break;
 8006e16:	bf00      	nop
  }
}
 8006e18:	bf00      	nop
 8006e1a:	3708      	adds	r7, #8
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	781a      	ldrb	r2, [r3, #0]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	785a      	ldrb	r2, [r3, #1]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	3302      	adds	r3, #2
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	b29a      	uxth	r2, r3
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	3303      	adds	r3, #3
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	021b      	lsls	r3, r3, #8
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	4413      	add	r3, r2
 8006e50:	b29a      	uxth	r2, r3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	3304      	adds	r3, #4
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	b29a      	uxth	r2, r3
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	3305      	adds	r3, #5
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	021b      	lsls	r3, r3, #8
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	4413      	add	r3, r2
 8006e6c:	b29a      	uxth	r2, r3
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	3306      	adds	r3, #6
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	3307      	adds	r3, #7
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	021b      	lsls	r3, r3, #8
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	4413      	add	r3, r2
 8006e88:	b29a      	uxth	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	80da      	strh	r2, [r3, #6]

}
 8006e8e:	bf00      	nop
 8006e90:	370c      	adds	r7, #12
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bc80      	pop	{r7}
 8006e96:	4770      	bx	lr

08006e98 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006ea2:	2180      	movs	r1, #128	; 0x80
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 fcbf 	bl	8007828 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006eaa:	2100      	movs	r1, #0
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 fcbb 	bl	8007828 <USBD_LL_StallEP>
}
 8006eb2:	bf00      	nop
 8006eb4:	3708      	adds	r7, #8
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b086      	sub	sp, #24
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	60f8      	str	r0, [r7, #12]
 8006ec2:	60b9      	str	r1, [r7, #8]
 8006ec4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d032      	beq.n	8006f36 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006ed0:	68f8      	ldr	r0, [r7, #12]
 8006ed2:	f000 f834 	bl	8006f3e <USBD_GetLen>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	3301      	adds	r3, #1
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	005b      	lsls	r3, r3, #1
 8006ede:	b29a      	uxth	r2, r3
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006ee4:	7dfb      	ldrb	r3, [r7, #23]
 8006ee6:	1c5a      	adds	r2, r3, #1
 8006ee8:	75fa      	strb	r2, [r7, #23]
 8006eea:	461a      	mov	r2, r3
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	4413      	add	r3, r2
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	7812      	ldrb	r2, [r2, #0]
 8006ef4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006ef6:	7dfb      	ldrb	r3, [r7, #23]
 8006ef8:	1c5a      	adds	r2, r3, #1
 8006efa:	75fa      	strb	r2, [r7, #23]
 8006efc:	461a      	mov	r2, r3
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	4413      	add	r3, r2
 8006f02:	2203      	movs	r2, #3
 8006f04:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006f06:	e012      	b.n	8006f2e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	1c5a      	adds	r2, r3, #1
 8006f0c:	60fa      	str	r2, [r7, #12]
 8006f0e:	7dfa      	ldrb	r2, [r7, #23]
 8006f10:	1c51      	adds	r1, r2, #1
 8006f12:	75f9      	strb	r1, [r7, #23]
 8006f14:	4611      	mov	r1, r2
 8006f16:	68ba      	ldr	r2, [r7, #8]
 8006f18:	440a      	add	r2, r1
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006f1e:	7dfb      	ldrb	r3, [r7, #23]
 8006f20:	1c5a      	adds	r2, r3, #1
 8006f22:	75fa      	strb	r2, [r7, #23]
 8006f24:	461a      	mov	r2, r3
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	4413      	add	r3, r2
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d1e8      	bne.n	8006f08 <USBD_GetString+0x4e>
    }
  }
}
 8006f36:	bf00      	nop
 8006f38:	3718      	adds	r7, #24
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006f3e:	b480      	push	{r7}
 8006f40:	b085      	sub	sp, #20
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006f46:	2300      	movs	r3, #0
 8006f48:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006f4a:	e005      	b.n	8006f58 <USBD_GetLen+0x1a>
  {
    len++;
 8006f4c:	7bfb      	ldrb	r3, [r7, #15]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	3301      	adds	r3, #1
 8006f56:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d1f5      	bne.n	8006f4c <USBD_GetLen+0xe>
  }

  return len;
 8006f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3714      	adds	r7, #20
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bc80      	pop	{r7}
 8006f6a:	4770      	bx	lr

08006f6c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	4613      	mov	r3, r2
 8006f78:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2202      	movs	r2, #2
 8006f7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006f82:	88fa      	ldrh	r2, [r7, #6]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006f88:	88fa      	ldrh	r2, [r7, #6]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f8e:	88fb      	ldrh	r3, [r7, #6]
 8006f90:	68ba      	ldr	r2, [r7, #8]
 8006f92:	2100      	movs	r1, #0
 8006f94:	68f8      	ldr	r0, [r7, #12]
 8006f96:	f000 fcd0 	bl	800793a <USBD_LL_Transmit>

  return USBD_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3710      	adds	r7, #16
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	4613      	mov	r3, r2
 8006fb0:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006fb2:	88fb      	ldrh	r3, [r7, #6]
 8006fb4:	68ba      	ldr	r2, [r7, #8]
 8006fb6:	2100      	movs	r1, #0
 8006fb8:	68f8      	ldr	r0, [r7, #12]
 8006fba:	f000 fcbe 	bl	800793a <USBD_LL_Transmit>

  return USBD_OK;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3710      	adds	r7, #16
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2203      	movs	r2, #3
 8006fda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006fde:	88fa      	ldrh	r2, [r7, #6]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006fe6:	88fa      	ldrh	r2, [r7, #6]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006fee:	88fb      	ldrh	r3, [r7, #6]
 8006ff0:	68ba      	ldr	r2, [r7, #8]
 8006ff2:	2100      	movs	r1, #0
 8006ff4:	68f8      	ldr	r0, [r7, #12]
 8006ff6:	f000 fcc3 	bl	8007980 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ffa:	2300      	movs	r3, #0
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3710      	adds	r7, #16
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	4613      	mov	r3, r2
 8007010:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007012:	88fb      	ldrh	r3, [r7, #6]
 8007014:	68ba      	ldr	r2, [r7, #8]
 8007016:	2100      	movs	r1, #0
 8007018:	68f8      	ldr	r0, [r7, #12]
 800701a:	f000 fcb1 	bl	8007980 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800701e:	2300      	movs	r3, #0
}
 8007020:	4618      	mov	r0, r3
 8007022:	3710      	adds	r7, #16
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2204      	movs	r2, #4
 8007034:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007038:	2300      	movs	r3, #0
 800703a:	2200      	movs	r2, #0
 800703c:	2100      	movs	r1, #0
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 fc7b 	bl	800793a <USBD_LL_Transmit>

  return USBD_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3708      	adds	r7, #8
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}

0800704e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800704e:	b580      	push	{r7, lr}
 8007050:	b082      	sub	sp, #8
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2205      	movs	r2, #5
 800705a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800705e:	2300      	movs	r3, #0
 8007060:	2200      	movs	r2, #0
 8007062:	2100      	movs	r1, #0
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 fc8b 	bl	8007980 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3708      	adds	r7, #8
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007078:	2200      	movs	r2, #0
 800707a:	4912      	ldr	r1, [pc, #72]	; (80070c4 <MX_USB_DEVICE_Init+0x50>)
 800707c:	4812      	ldr	r0, [pc, #72]	; (80070c8 <MX_USB_DEVICE_Init+0x54>)
 800707e:	f7fe ff53 	bl	8005f28 <USBD_Init>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d001      	beq.n	800708c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007088:	f7f9 fad6 	bl	8000638 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800708c:	490f      	ldr	r1, [pc, #60]	; (80070cc <MX_USB_DEVICE_Init+0x58>)
 800708e:	480e      	ldr	r0, [pc, #56]	; (80070c8 <MX_USB_DEVICE_Init+0x54>)
 8007090:	f7fe ff82 	bl	8005f98 <USBD_RegisterClass>
 8007094:	4603      	mov	r3, r0
 8007096:	2b00      	cmp	r3, #0
 8007098:	d001      	beq.n	800709e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800709a:	f7f9 facd 	bl	8000638 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800709e:	490c      	ldr	r1, [pc, #48]	; (80070d0 <MX_USB_DEVICE_Init+0x5c>)
 80070a0:	4809      	ldr	r0, [pc, #36]	; (80070c8 <MX_USB_DEVICE_Init+0x54>)
 80070a2:	f7fe fea5 	bl	8005df0 <USBD_CDC_RegisterInterface>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d001      	beq.n	80070b0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80070ac:	f7f9 fac4 	bl	8000638 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80070b0:	4805      	ldr	r0, [pc, #20]	; (80070c8 <MX_USB_DEVICE_Init+0x54>)
 80070b2:	f7fe ff97 	bl	8005fe4 <USBD_Start>
 80070b6:	4603      	mov	r3, r0
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d001      	beq.n	80070c0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80070bc:	f7f9 fabc 	bl	8000638 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80070c0:	bf00      	nop
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	2000012c 	.word	0x2000012c
 80070c8:	2000078c 	.word	0x2000078c
 80070cc:	20000018 	.word	0x20000018
 80070d0:	2000011c 	.word	0x2000011c

080070d4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80070d8:	2200      	movs	r2, #0
 80070da:	4905      	ldr	r1, [pc, #20]	; (80070f0 <CDC_Init_FS+0x1c>)
 80070dc:	4805      	ldr	r0, [pc, #20]	; (80070f4 <CDC_Init_FS+0x20>)
 80070de:	f7fe fe9d 	bl	8005e1c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80070e2:	4905      	ldr	r1, [pc, #20]	; (80070f8 <CDC_Init_FS+0x24>)
 80070e4:	4803      	ldr	r0, [pc, #12]	; (80070f4 <CDC_Init_FS+0x20>)
 80070e6:	f7fe feb2 	bl	8005e4e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80070ea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	20000e38 	.word	0x20000e38
 80070f4:	2000078c 	.word	0x2000078c
 80070f8:	20000a50 	.word	0x20000a50

080070fc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80070fc:	b480      	push	{r7}
 80070fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007100:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007102:	4618      	mov	r0, r3
 8007104:	46bd      	mov	sp, r7
 8007106:	bc80      	pop	{r7}
 8007108:	4770      	bx	lr
	...

0800710c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	4603      	mov	r3, r0
 8007114:	6039      	str	r1, [r7, #0]
 8007116:	71fb      	strb	r3, [r7, #7]
 8007118:	4613      	mov	r3, r2
 800711a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800711c:	79fb      	ldrb	r3, [r7, #7]
 800711e:	2b23      	cmp	r3, #35	; 0x23
 8007120:	d84a      	bhi.n	80071b8 <CDC_Control_FS+0xac>
 8007122:	a201      	add	r2, pc, #4	; (adr r2, 8007128 <CDC_Control_FS+0x1c>)
 8007124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007128:	080071b9 	.word	0x080071b9
 800712c:	080071b9 	.word	0x080071b9
 8007130:	080071b9 	.word	0x080071b9
 8007134:	080071b9 	.word	0x080071b9
 8007138:	080071b9 	.word	0x080071b9
 800713c:	080071b9 	.word	0x080071b9
 8007140:	080071b9 	.word	0x080071b9
 8007144:	080071b9 	.word	0x080071b9
 8007148:	080071b9 	.word	0x080071b9
 800714c:	080071b9 	.word	0x080071b9
 8007150:	080071b9 	.word	0x080071b9
 8007154:	080071b9 	.word	0x080071b9
 8007158:	080071b9 	.word	0x080071b9
 800715c:	080071b9 	.word	0x080071b9
 8007160:	080071b9 	.word	0x080071b9
 8007164:	080071b9 	.word	0x080071b9
 8007168:	080071b9 	.word	0x080071b9
 800716c:	080071b9 	.word	0x080071b9
 8007170:	080071b9 	.word	0x080071b9
 8007174:	080071b9 	.word	0x080071b9
 8007178:	080071b9 	.word	0x080071b9
 800717c:	080071b9 	.word	0x080071b9
 8007180:	080071b9 	.word	0x080071b9
 8007184:	080071b9 	.word	0x080071b9
 8007188:	080071b9 	.word	0x080071b9
 800718c:	080071b9 	.word	0x080071b9
 8007190:	080071b9 	.word	0x080071b9
 8007194:	080071b9 	.word	0x080071b9
 8007198:	080071b9 	.word	0x080071b9
 800719c:	080071b9 	.word	0x080071b9
 80071a0:	080071b9 	.word	0x080071b9
 80071a4:	080071b9 	.word	0x080071b9
 80071a8:	080071b9 	.word	0x080071b9
 80071ac:	080071b9 	.word	0x080071b9
 80071b0:	080071b9 	.word	0x080071b9
 80071b4:	080071b9 	.word	0x080071b9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80071b8:	bf00      	nop
  }

  return (USBD_OK);
 80071ba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80071bc:	4618      	mov	r0, r3
 80071be:	370c      	adds	r7, #12
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bc80      	pop	{r7}
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop

080071c8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b086      	sub	sp, #24
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80071d2:	6879      	ldr	r1, [r7, #4]
 80071d4:	4837      	ldr	r0, [pc, #220]	; (80072b4 <CDC_Receive_FS+0xec>)
 80071d6:	f7fe fe3a 	bl	8005e4e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80071da:	4836      	ldr	r0, [pc, #216]	; (80072b4 <CDC_Receive_FS+0xec>)
 80071dc:	f7fe fe79 	bl	8005ed2 <USBD_CDC_ReceivePacket>
//  NewDataFromUsb = *Len;
  if(*Len == 61) // There is data received
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	2b3d      	cmp	r3, #61	; 0x3d
 80071e6:	d129      	bne.n	800723c <CDC_Receive_FS+0x74>
  {
//	  __HAL_RCC_TIM1_CLK_DISABLE();//stop clocking interrupt timer
	  // 8 bits buffer to 16 bits buffer transfer
	 for (int i = 0, j = 0; i < 30; ++i, j+= 2)
 80071e8:	2300      	movs	r3, #0
 80071ea:	617b      	str	r3, [r7, #20]
 80071ec:	2300      	movs	r3, #0
 80071ee:	613b      	str	r3, [r7, #16]
 80071f0:	e021      	b.n	8007236 <CDC_Receive_FS+0x6e>
	 {
		 aOutputWave[i+(UserRxBufferFS[60]*30)] =
				 (UserRxBufferFS[j] << 8) | UserRxBufferFS[j + 1];
 80071f2:	4a31      	ldr	r2, [pc, #196]	; (80072b8 <CDC_Receive_FS+0xf0>)
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	4413      	add	r3, r2
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	021b      	lsls	r3, r3, #8
 80071fc:	b21a      	sxth	r2, r3
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	3301      	adds	r3, #1
 8007202:	492d      	ldr	r1, [pc, #180]	; (80072b8 <CDC_Receive_FS+0xf0>)
 8007204:	5ccb      	ldrb	r3, [r1, r3]
 8007206:	b21b      	sxth	r3, r3
 8007208:	4313      	orrs	r3, r2
 800720a:	b219      	sxth	r1, r3
		 aOutputWave[i+(UserRxBufferFS[60]*30)] =
 800720c:	4b2a      	ldr	r3, [pc, #168]	; (80072b8 <CDC_Receive_FS+0xf0>)
 800720e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007212:	461a      	mov	r2, r3
 8007214:	4613      	mov	r3, r2
 8007216:	011b      	lsls	r3, r3, #4
 8007218:	1a9b      	subs	r3, r3, r2
 800721a:	005b      	lsls	r3, r3, #1
 800721c:	461a      	mov	r2, r3
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	4413      	add	r3, r2
				 (UserRxBufferFS[j] << 8) | UserRxBufferFS[j + 1];
 8007222:	b289      	uxth	r1, r1
		 aOutputWave[i+(UserRxBufferFS[60]*30)] =
 8007224:	4a25      	ldr	r2, [pc, #148]	; (80072bc <CDC_Receive_FS+0xf4>)
 8007226:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	 for (int i = 0, j = 0; i < 30; ++i, j+= 2)
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	3301      	adds	r3, #1
 800722e:	617b      	str	r3, [r7, #20]
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	3302      	adds	r3, #2
 8007234:	613b      	str	r3, [r7, #16]
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	2b1d      	cmp	r3, #29
 800723a:	ddda      	ble.n	80071f2 <CDC_Receive_FS+0x2a>
	 }
//	  CDC_Transmit_FS(buffer, sizeof(buffer));
//	  NewDataFromUsb = 0;
//	  __HAL_RCC_TIM1_CLK_ENABLE();//start clocking interrupt timer
  }
  if(*Len == 1) // There is command received
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2b01      	cmp	r3, #1
 8007242:	d132      	bne.n	80072aa <CDC_Receive_FS+0xe2>
  {
	  if(UserRxBufferFS[0] == USB_DEVICE_START)
 8007244:	4b1c      	ldr	r3, [pc, #112]	; (80072b8 <CDC_Receive_FS+0xf0>)
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	2b55      	cmp	r3, #85	; 0x55
 800724a:	d112      	bne.n	8007272 <CDC_Receive_FS+0xaa>
	  {
		  __HAL_RCC_TIM1_CLK_ENABLE();//start clocking interrupt timer
 800724c:	4b1c      	ldr	r3, [pc, #112]	; (80072c0 <CDC_Receive_FS+0xf8>)
 800724e:	699b      	ldr	r3, [r3, #24]
 8007250:	4a1b      	ldr	r2, [pc, #108]	; (80072c0 <CDC_Receive_FS+0xf8>)
 8007252:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007256:	6193      	str	r3, [r2, #24]
 8007258:	4b19      	ldr	r3, [pc, #100]	; (80072c0 <CDC_Receive_FS+0xf8>)
 800725a:	699b      	ldr	r3, [r3, #24]
 800725c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007260:	60fb      	str	r3, [r7, #12]
 8007262:	68fb      	ldr	r3, [r7, #12]
		  ReturnedCommand = USB_DEVICE_START;
 8007264:	4b17      	ldr	r3, [pc, #92]	; (80072c4 <CDC_Receive_FS+0xfc>)
 8007266:	2255      	movs	r2, #85	; 0x55
 8007268:	701a      	strb	r2, [r3, #0]
		  CDC_Transmit_FS(&ReturnedCommand, 0x01);
 800726a:	2101      	movs	r1, #1
 800726c:	4815      	ldr	r0, [pc, #84]	; (80072c4 <CDC_Receive_FS+0xfc>)
 800726e:	f000 f82b 	bl	80072c8 <CDC_Transmit_FS>
		  //issue feedback to PC
	  }
	  if(UserRxBufferFS[0] == USB_DEVICE_STOP)
 8007272:	4b11      	ldr	r3, [pc, #68]	; (80072b8 <CDC_Receive_FS+0xf0>)
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	2baa      	cmp	r3, #170	; 0xaa
 8007278:	d10c      	bne.n	8007294 <CDC_Receive_FS+0xcc>
	  {
		  __HAL_RCC_TIM1_CLK_DISABLE();//stop clocking interrupt timer
 800727a:	4b11      	ldr	r3, [pc, #68]	; (80072c0 <CDC_Receive_FS+0xf8>)
 800727c:	699b      	ldr	r3, [r3, #24]
 800727e:	4a10      	ldr	r2, [pc, #64]	; (80072c0 <CDC_Receive_FS+0xf8>)
 8007280:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007284:	6193      	str	r3, [r2, #24]
		  ReturnedCommand = USB_DEVICE_STOP;
 8007286:	4b0f      	ldr	r3, [pc, #60]	; (80072c4 <CDC_Receive_FS+0xfc>)
 8007288:	22aa      	movs	r2, #170	; 0xaa
 800728a:	701a      	strb	r2, [r3, #0]
		  CDC_Transmit_FS(&ReturnedCommand, 0x01);
 800728c:	2101      	movs	r1, #1
 800728e:	480d      	ldr	r0, [pc, #52]	; (80072c4 <CDC_Receive_FS+0xfc>)
 8007290:	f000 f81a 	bl	80072c8 <CDC_Transmit_FS>
		  //issue feedback to PC
	  }
	  if(UserRxBufferFS[0] == USB_DEVICE_TYPE)
 8007294:	4b08      	ldr	r3, [pc, #32]	; (80072b8 <CDC_Receive_FS+0xf0>)
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d102      	bne.n	80072a2 <CDC_Receive_FS+0xda>
		  ReturnedCommand = USB_DEVICE_TYPE;
 800729c:	4b09      	ldr	r3, [pc, #36]	; (80072c4 <CDC_Receive_FS+0xfc>)
 800729e:	2200      	movs	r2, #0
 80072a0:	701a      	strb	r2, [r3, #0]
		  CDC_Transmit_FS(&ReturnedCommand, 0x01);
 80072a2:	2101      	movs	r1, #1
 80072a4:	4807      	ldr	r0, [pc, #28]	; (80072c4 <CDC_Receive_FS+0xfc>)
 80072a6:	f000 f80f 	bl	80072c8 <CDC_Transmit_FS>
	  	  // Say to PC that this is "Lite"
  }
  return (USBD_OK);
 80072aa:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3718      	adds	r7, #24
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	2000078c 	.word	0x2000078c
 80072b8:	20000a50 	.word	0x20000a50
 80072bc:	20000200 	.word	0x20000200
 80072c0:	40021000 	.word	0x40021000
 80072c4:	20001220 	.word	0x20001220

080072c8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	460b      	mov	r3, r1
 80072d2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80072d4:	2300      	movs	r3, #0
 80072d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80072d8:	4b0d      	ldr	r3, [pc, #52]	; (8007310 <CDC_Transmit_FS+0x48>)
 80072da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072de:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d001      	beq.n	80072ee <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80072ea:	2301      	movs	r3, #1
 80072ec:	e00b      	b.n	8007306 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80072ee:	887b      	ldrh	r3, [r7, #2]
 80072f0:	461a      	mov	r2, r3
 80072f2:	6879      	ldr	r1, [r7, #4]
 80072f4:	4806      	ldr	r0, [pc, #24]	; (8007310 <CDC_Transmit_FS+0x48>)
 80072f6:	f7fe fd91 	bl	8005e1c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80072fa:	4805      	ldr	r0, [pc, #20]	; (8007310 <CDC_Transmit_FS+0x48>)
 80072fc:	f7fe fdba 	bl	8005e74 <USBD_CDC_TransmitPacket>
 8007300:	4603      	mov	r3, r0
 8007302:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007304:	7bfb      	ldrb	r3, [r7, #15]
}
 8007306:	4618      	mov	r0, r3
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	2000078c 	.word	0x2000078c

08007314 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	4603      	mov	r3, r0
 800731c:	6039      	str	r1, [r7, #0]
 800731e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	2212      	movs	r2, #18
 8007324:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007326:	4b03      	ldr	r3, [pc, #12]	; (8007334 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007328:	4618      	mov	r0, r3
 800732a:	370c      	adds	r7, #12
 800732c:	46bd      	mov	sp, r7
 800732e:	bc80      	pop	{r7}
 8007330:	4770      	bx	lr
 8007332:	bf00      	nop
 8007334:	20000148 	.word	0x20000148

08007338 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	4603      	mov	r3, r0
 8007340:	6039      	str	r1, [r7, #0]
 8007342:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	2204      	movs	r2, #4
 8007348:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800734a:	4b03      	ldr	r3, [pc, #12]	; (8007358 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800734c:	4618      	mov	r0, r3
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	bc80      	pop	{r7}
 8007354:	4770      	bx	lr
 8007356:	bf00      	nop
 8007358:	2000015c 	.word	0x2000015c

0800735c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
 8007362:	4603      	mov	r3, r0
 8007364:	6039      	str	r1, [r7, #0]
 8007366:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007368:	79fb      	ldrb	r3, [r7, #7]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d105      	bne.n	800737a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800736e:	683a      	ldr	r2, [r7, #0]
 8007370:	4907      	ldr	r1, [pc, #28]	; (8007390 <USBD_FS_ProductStrDescriptor+0x34>)
 8007372:	4808      	ldr	r0, [pc, #32]	; (8007394 <USBD_FS_ProductStrDescriptor+0x38>)
 8007374:	f7ff fda1 	bl	8006eba <USBD_GetString>
 8007378:	e004      	b.n	8007384 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800737a:	683a      	ldr	r2, [r7, #0]
 800737c:	4904      	ldr	r1, [pc, #16]	; (8007390 <USBD_FS_ProductStrDescriptor+0x34>)
 800737e:	4805      	ldr	r0, [pc, #20]	; (8007394 <USBD_FS_ProductStrDescriptor+0x38>)
 8007380:	f7ff fd9b 	bl	8006eba <USBD_GetString>
  }
  return USBD_StrDesc;
 8007384:	4b02      	ldr	r3, [pc, #8]	; (8007390 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007386:	4618      	mov	r0, r3
 8007388:	3708      	adds	r7, #8
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	20001224 	.word	0x20001224
 8007394:	08008a2c 	.word	0x08008a2c

08007398 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
 800739e:	4603      	mov	r3, r0
 80073a0:	6039      	str	r1, [r7, #0]
 80073a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80073a4:	683a      	ldr	r2, [r7, #0]
 80073a6:	4904      	ldr	r1, [pc, #16]	; (80073b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80073a8:	4804      	ldr	r0, [pc, #16]	; (80073bc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80073aa:	f7ff fd86 	bl	8006eba <USBD_GetString>
  return USBD_StrDesc;
 80073ae:	4b02      	ldr	r3, [pc, #8]	; (80073b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3708      	adds	r7, #8
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	20001224 	.word	0x20001224
 80073bc:	08008a44 	.word	0x08008a44

080073c0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	4603      	mov	r3, r0
 80073c8:	6039      	str	r1, [r7, #0]
 80073ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	221a      	movs	r2, #26
 80073d0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80073d2:	f000 f843 	bl	800745c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80073d6:	4b02      	ldr	r3, [pc, #8]	; (80073e0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3708      	adds	r7, #8
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	20000160 	.word	0x20000160

080073e4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	4603      	mov	r3, r0
 80073ec:	6039      	str	r1, [r7, #0]
 80073ee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80073f0:	79fb      	ldrb	r3, [r7, #7]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d105      	bne.n	8007402 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80073f6:	683a      	ldr	r2, [r7, #0]
 80073f8:	4907      	ldr	r1, [pc, #28]	; (8007418 <USBD_FS_ConfigStrDescriptor+0x34>)
 80073fa:	4808      	ldr	r0, [pc, #32]	; (800741c <USBD_FS_ConfigStrDescriptor+0x38>)
 80073fc:	f7ff fd5d 	bl	8006eba <USBD_GetString>
 8007400:	e004      	b.n	800740c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007402:	683a      	ldr	r2, [r7, #0]
 8007404:	4904      	ldr	r1, [pc, #16]	; (8007418 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007406:	4805      	ldr	r0, [pc, #20]	; (800741c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007408:	f7ff fd57 	bl	8006eba <USBD_GetString>
  }
  return USBD_StrDesc;
 800740c:	4b02      	ldr	r3, [pc, #8]	; (8007418 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800740e:	4618      	mov	r0, r3
 8007410:	3708      	adds	r7, #8
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	20001224 	.word	0x20001224
 800741c:	08008a54 	.word	0x08008a54

08007420 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	4603      	mov	r3, r0
 8007428:	6039      	str	r1, [r7, #0]
 800742a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800742c:	79fb      	ldrb	r3, [r7, #7]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d105      	bne.n	800743e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007432:	683a      	ldr	r2, [r7, #0]
 8007434:	4907      	ldr	r1, [pc, #28]	; (8007454 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007436:	4808      	ldr	r0, [pc, #32]	; (8007458 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007438:	f7ff fd3f 	bl	8006eba <USBD_GetString>
 800743c:	e004      	b.n	8007448 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800743e:	683a      	ldr	r2, [r7, #0]
 8007440:	4904      	ldr	r1, [pc, #16]	; (8007454 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007442:	4805      	ldr	r0, [pc, #20]	; (8007458 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007444:	f7ff fd39 	bl	8006eba <USBD_GetString>
  }
  return USBD_StrDesc;
 8007448:	4b02      	ldr	r3, [pc, #8]	; (8007454 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800744a:	4618      	mov	r0, r3
 800744c:	3708      	adds	r7, #8
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	20001224 	.word	0x20001224
 8007458:	08008a60 	.word	0x08008a60

0800745c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007462:	4b0f      	ldr	r3, [pc, #60]	; (80074a0 <Get_SerialNum+0x44>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007468:	4b0e      	ldr	r3, [pc, #56]	; (80074a4 <Get_SerialNum+0x48>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800746e:	4b0e      	ldr	r3, [pc, #56]	; (80074a8 <Get_SerialNum+0x4c>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4413      	add	r3, r2
 800747a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d009      	beq.n	8007496 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007482:	2208      	movs	r2, #8
 8007484:	4909      	ldr	r1, [pc, #36]	; (80074ac <Get_SerialNum+0x50>)
 8007486:	68f8      	ldr	r0, [r7, #12]
 8007488:	f000 f814 	bl	80074b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800748c:	2204      	movs	r2, #4
 800748e:	4908      	ldr	r1, [pc, #32]	; (80074b0 <Get_SerialNum+0x54>)
 8007490:	68b8      	ldr	r0, [r7, #8]
 8007492:	f000 f80f 	bl	80074b4 <IntToUnicode>
  }
}
 8007496:	bf00      	nop
 8007498:	3710      	adds	r7, #16
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	1ffff7e8 	.word	0x1ffff7e8
 80074a4:	1ffff7ec 	.word	0x1ffff7ec
 80074a8:	1ffff7f0 	.word	0x1ffff7f0
 80074ac:	20000162 	.word	0x20000162
 80074b0:	20000172 	.word	0x20000172

080074b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b087      	sub	sp, #28
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	4613      	mov	r3, r2
 80074c0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80074c2:	2300      	movs	r3, #0
 80074c4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80074c6:	2300      	movs	r3, #0
 80074c8:	75fb      	strb	r3, [r7, #23]
 80074ca:	e027      	b.n	800751c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	0f1b      	lsrs	r3, r3, #28
 80074d0:	2b09      	cmp	r3, #9
 80074d2:	d80b      	bhi.n	80074ec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	0f1b      	lsrs	r3, r3, #28
 80074d8:	b2da      	uxtb	r2, r3
 80074da:	7dfb      	ldrb	r3, [r7, #23]
 80074dc:	005b      	lsls	r3, r3, #1
 80074de:	4619      	mov	r1, r3
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	440b      	add	r3, r1
 80074e4:	3230      	adds	r2, #48	; 0x30
 80074e6:	b2d2      	uxtb	r2, r2
 80074e8:	701a      	strb	r2, [r3, #0]
 80074ea:	e00a      	b.n	8007502 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	0f1b      	lsrs	r3, r3, #28
 80074f0:	b2da      	uxtb	r2, r3
 80074f2:	7dfb      	ldrb	r3, [r7, #23]
 80074f4:	005b      	lsls	r3, r3, #1
 80074f6:	4619      	mov	r1, r3
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	440b      	add	r3, r1
 80074fc:	3237      	adds	r2, #55	; 0x37
 80074fe:	b2d2      	uxtb	r2, r2
 8007500:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	011b      	lsls	r3, r3, #4
 8007506:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007508:	7dfb      	ldrb	r3, [r7, #23]
 800750a:	005b      	lsls	r3, r3, #1
 800750c:	3301      	adds	r3, #1
 800750e:	68ba      	ldr	r2, [r7, #8]
 8007510:	4413      	add	r3, r2
 8007512:	2200      	movs	r2, #0
 8007514:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007516:	7dfb      	ldrb	r3, [r7, #23]
 8007518:	3301      	adds	r3, #1
 800751a:	75fb      	strb	r3, [r7, #23]
 800751c:	7dfa      	ldrb	r2, [r7, #23]
 800751e:	79fb      	ldrb	r3, [r7, #7]
 8007520:	429a      	cmp	r2, r3
 8007522:	d3d3      	bcc.n	80074cc <IntToUnicode+0x18>
  }
}
 8007524:	bf00      	nop
 8007526:	371c      	adds	r7, #28
 8007528:	46bd      	mov	sp, r7
 800752a:	bc80      	pop	{r7}
 800752c:	4770      	bx	lr
	...

08007530 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a0d      	ldr	r2, [pc, #52]	; (8007574 <HAL_PCD_MspInit+0x44>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d113      	bne.n	800756a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007542:	4b0d      	ldr	r3, [pc, #52]	; (8007578 <HAL_PCD_MspInit+0x48>)
 8007544:	69db      	ldr	r3, [r3, #28]
 8007546:	4a0c      	ldr	r2, [pc, #48]	; (8007578 <HAL_PCD_MspInit+0x48>)
 8007548:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800754c:	61d3      	str	r3, [r2, #28]
 800754e:	4b0a      	ldr	r3, [pc, #40]	; (8007578 <HAL_PCD_MspInit+0x48>)
 8007550:	69db      	ldr	r3, [r3, #28]
 8007552:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007556:	60fb      	str	r3, [r7, #12]
 8007558:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800755a:	2200      	movs	r2, #0
 800755c:	2100      	movs	r1, #0
 800755e:	2014      	movs	r0, #20
 8007560:	f7f9 fac1 	bl	8000ae6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007564:	2014      	movs	r0, #20
 8007566:	f7f9 fada 	bl	8000b1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800756a:	bf00      	nop
 800756c:	3710      	adds	r7, #16
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	40005c00 	.word	0x40005c00
 8007578:	40021000 	.word	0x40021000

0800757c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007590:	4619      	mov	r1, r3
 8007592:	4610      	mov	r0, r2
 8007594:	f7fe fd6e 	bl	8006074 <USBD_LL_SetupStage>
}
 8007598:	bf00      	nop
 800759a:	3708      	adds	r7, #8
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	460b      	mov	r3, r1
 80075aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80075b2:	78fa      	ldrb	r2, [r7, #3]
 80075b4:	6879      	ldr	r1, [r7, #4]
 80075b6:	4613      	mov	r3, r2
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	4413      	add	r3, r2
 80075bc:	00db      	lsls	r3, r3, #3
 80075be:	440b      	add	r3, r1
 80075c0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	78fb      	ldrb	r3, [r7, #3]
 80075c8:	4619      	mov	r1, r3
 80075ca:	f7fe fd9e 	bl	800610a <USBD_LL_DataOutStage>
}
 80075ce:	bf00      	nop
 80075d0:	3708      	adds	r7, #8
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b082      	sub	sp, #8
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
 80075de:	460b      	mov	r3, r1
 80075e0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80075e8:	78fa      	ldrb	r2, [r7, #3]
 80075ea:	6879      	ldr	r1, [r7, #4]
 80075ec:	4613      	mov	r3, r2
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	4413      	add	r3, r2
 80075f2:	00db      	lsls	r3, r3, #3
 80075f4:	440b      	add	r3, r1
 80075f6:	333c      	adds	r3, #60	; 0x3c
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	78fb      	ldrb	r3, [r7, #3]
 80075fc:	4619      	mov	r1, r3
 80075fe:	f7fe fdf5 	bl	80061ec <USBD_LL_DataInStage>
}
 8007602:	bf00      	nop
 8007604:	3708      	adds	r7, #8
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}

0800760a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800760a:	b580      	push	{r7, lr}
 800760c:	b082      	sub	sp, #8
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007618:	4618      	mov	r0, r3
 800761a:	f7fe ff05 	bl	8006428 <USBD_LL_SOF>
}
 800761e:	bf00      	nop
 8007620:	3708      	adds	r7, #8
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b084      	sub	sp, #16
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800762e:	2301      	movs	r3, #1
 8007630:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	2b02      	cmp	r3, #2
 8007638:	d001      	beq.n	800763e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800763a:	f7f8 fffd 	bl	8000638 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007644:	7bfa      	ldrb	r2, [r7, #15]
 8007646:	4611      	mov	r1, r2
 8007648:	4618      	mov	r0, r3
 800764a:	f7fe feb5 	bl	80063b8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007654:	4618      	mov	r0, r3
 8007656:	f7fe fe6e 	bl	8006336 <USBD_LL_Reset>
}
 800765a:	bf00      	nop
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
	...

08007664 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b082      	sub	sp, #8
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007672:	4618      	mov	r0, r3
 8007674:	f7fe feaf 	bl	80063d6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	699b      	ldr	r3, [r3, #24]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d005      	beq.n	800768c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007680:	4b04      	ldr	r3, [pc, #16]	; (8007694 <HAL_PCD_SuspendCallback+0x30>)
 8007682:	691b      	ldr	r3, [r3, #16]
 8007684:	4a03      	ldr	r2, [pc, #12]	; (8007694 <HAL_PCD_SuspendCallback+0x30>)
 8007686:	f043 0306 	orr.w	r3, r3, #6
 800768a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800768c:	bf00      	nop
 800768e:	3708      	adds	r7, #8
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}
 8007694:	e000ed00 	.word	0xe000ed00

08007698 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80076a6:	4618      	mov	r0, r3
 80076a8:	f7fe fea9 	bl	80063fe <USBD_LL_Resume>
}
 80076ac:	bf00      	nop
 80076ae:	3708      	adds	r7, #8
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80076bc:	4a28      	ldr	r2, [pc, #160]	; (8007760 <USBD_LL_Init+0xac>)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	4a26      	ldr	r2, [pc, #152]	; (8007760 <USBD_LL_Init+0xac>)
 80076c8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80076cc:	4b24      	ldr	r3, [pc, #144]	; (8007760 <USBD_LL_Init+0xac>)
 80076ce:	4a25      	ldr	r2, [pc, #148]	; (8007764 <USBD_LL_Init+0xb0>)
 80076d0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80076d2:	4b23      	ldr	r3, [pc, #140]	; (8007760 <USBD_LL_Init+0xac>)
 80076d4:	2208      	movs	r2, #8
 80076d6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80076d8:	4b21      	ldr	r3, [pc, #132]	; (8007760 <USBD_LL_Init+0xac>)
 80076da:	2202      	movs	r2, #2
 80076dc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80076de:	4b20      	ldr	r3, [pc, #128]	; (8007760 <USBD_LL_Init+0xac>)
 80076e0:	2200      	movs	r2, #0
 80076e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80076e4:	4b1e      	ldr	r3, [pc, #120]	; (8007760 <USBD_LL_Init+0xac>)
 80076e6:	2200      	movs	r2, #0
 80076e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80076ea:	4b1d      	ldr	r3, [pc, #116]	; (8007760 <USBD_LL_Init+0xac>)
 80076ec:	2200      	movs	r2, #0
 80076ee:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80076f0:	481b      	ldr	r0, [pc, #108]	; (8007760 <USBD_LL_Init+0xac>)
 80076f2:	f7f9 fe13 	bl	800131c <HAL_PCD_Init>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d001      	beq.n	8007700 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80076fc:	f7f8 ff9c 	bl	8000638 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007706:	2318      	movs	r3, #24
 8007708:	2200      	movs	r2, #0
 800770a:	2100      	movs	r1, #0
 800770c:	f7fb f947 	bl	800299e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007716:	2358      	movs	r3, #88	; 0x58
 8007718:	2200      	movs	r2, #0
 800771a:	2180      	movs	r1, #128	; 0x80
 800771c:	f7fb f93f 	bl	800299e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007726:	23c0      	movs	r3, #192	; 0xc0
 8007728:	2200      	movs	r2, #0
 800772a:	2181      	movs	r1, #129	; 0x81
 800772c:	f7fb f937 	bl	800299e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007736:	f44f 7388 	mov.w	r3, #272	; 0x110
 800773a:	2200      	movs	r2, #0
 800773c:	2101      	movs	r1, #1
 800773e:	f7fb f92e 	bl	800299e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007748:	f44f 7380 	mov.w	r3, #256	; 0x100
 800774c:	2200      	movs	r2, #0
 800774e:	2182      	movs	r1, #130	; 0x82
 8007750:	f7fb f925 	bl	800299e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3708      	adds	r7, #8
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	20001424 	.word	0x20001424
 8007764:	40005c00 	.word	0x40005c00

08007768 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007770:	2300      	movs	r3, #0
 8007772:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007774:	2300      	movs	r3, #0
 8007776:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800777e:	4618      	mov	r0, r3
 8007780:	f7f9 fed7 	bl	8001532 <HAL_PCD_Start>
 8007784:	4603      	mov	r3, r0
 8007786:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007788:	7bfb      	ldrb	r3, [r7, #15]
 800778a:	4618      	mov	r0, r3
 800778c:	f000 f94e 	bl	8007a2c <USBD_Get_USB_Status>
 8007790:	4603      	mov	r3, r0
 8007792:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007794:	7bbb      	ldrb	r3, [r7, #14]
}
 8007796:	4618      	mov	r0, r3
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}

0800779e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b084      	sub	sp, #16
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
 80077a6:	4608      	mov	r0, r1
 80077a8:	4611      	mov	r1, r2
 80077aa:	461a      	mov	r2, r3
 80077ac:	4603      	mov	r3, r0
 80077ae:	70fb      	strb	r3, [r7, #3]
 80077b0:	460b      	mov	r3, r1
 80077b2:	70bb      	strb	r3, [r7, #2]
 80077b4:	4613      	mov	r3, r2
 80077b6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077b8:	2300      	movs	r3, #0
 80077ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077bc:	2300      	movs	r3, #0
 80077be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80077c6:	78bb      	ldrb	r3, [r7, #2]
 80077c8:	883a      	ldrh	r2, [r7, #0]
 80077ca:	78f9      	ldrb	r1, [r7, #3]
 80077cc:	f7fa f851 	bl	8001872 <HAL_PCD_EP_Open>
 80077d0:	4603      	mov	r3, r0
 80077d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077d4:	7bfb      	ldrb	r3, [r7, #15]
 80077d6:	4618      	mov	r0, r3
 80077d8:	f000 f928 	bl	8007a2c <USBD_Get_USB_Status>
 80077dc:	4603      	mov	r3, r0
 80077de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b084      	sub	sp, #16
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
 80077f2:	460b      	mov	r3, r1
 80077f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077f6:	2300      	movs	r3, #0
 80077f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077fa:	2300      	movs	r3, #0
 80077fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007804:	78fa      	ldrb	r2, [r7, #3]
 8007806:	4611      	mov	r1, r2
 8007808:	4618      	mov	r0, r3
 800780a:	f7fa f898 	bl	800193e <HAL_PCD_EP_Close>
 800780e:	4603      	mov	r3, r0
 8007810:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007812:	7bfb      	ldrb	r3, [r7, #15]
 8007814:	4618      	mov	r0, r3
 8007816:	f000 f909 	bl	8007a2c <USBD_Get_USB_Status>
 800781a:	4603      	mov	r3, r0
 800781c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800781e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007820:	4618      	mov	r0, r3
 8007822:	3710      	adds	r7, #16
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	460b      	mov	r3, r1
 8007832:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007834:	2300      	movs	r3, #0
 8007836:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007838:	2300      	movs	r3, #0
 800783a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007842:	78fa      	ldrb	r2, [r7, #3]
 8007844:	4611      	mov	r1, r2
 8007846:	4618      	mov	r0, r3
 8007848:	f7fa f958 	bl	8001afc <HAL_PCD_EP_SetStall>
 800784c:	4603      	mov	r3, r0
 800784e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007850:	7bfb      	ldrb	r3, [r7, #15]
 8007852:	4618      	mov	r0, r3
 8007854:	f000 f8ea 	bl	8007a2c <USBD_Get_USB_Status>
 8007858:	4603      	mov	r3, r0
 800785a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800785c:	7bbb      	ldrb	r3, [r7, #14]
}
 800785e:	4618      	mov	r0, r3
 8007860:	3710      	adds	r7, #16
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b084      	sub	sp, #16
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
 800786e:	460b      	mov	r3, r1
 8007870:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007872:	2300      	movs	r3, #0
 8007874:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007876:	2300      	movs	r3, #0
 8007878:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007880:	78fa      	ldrb	r2, [r7, #3]
 8007882:	4611      	mov	r1, r2
 8007884:	4618      	mov	r0, r3
 8007886:	f7fa f999 	bl	8001bbc <HAL_PCD_EP_ClrStall>
 800788a:	4603      	mov	r3, r0
 800788c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800788e:	7bfb      	ldrb	r3, [r7, #15]
 8007890:	4618      	mov	r0, r3
 8007892:	f000 f8cb 	bl	8007a2c <USBD_Get_USB_Status>
 8007896:	4603      	mov	r3, r0
 8007898:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800789a:	7bbb      	ldrb	r3, [r7, #14]
}
 800789c:	4618      	mov	r0, r3
 800789e:	3710      	adds	r7, #16
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b085      	sub	sp, #20
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	460b      	mov	r3, r1
 80078ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078b6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80078b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	da0c      	bge.n	80078da <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80078c0:	78fb      	ldrb	r3, [r7, #3]
 80078c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078c6:	68f9      	ldr	r1, [r7, #12]
 80078c8:	1c5a      	adds	r2, r3, #1
 80078ca:	4613      	mov	r3, r2
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	4413      	add	r3, r2
 80078d0:	00db      	lsls	r3, r3, #3
 80078d2:	440b      	add	r3, r1
 80078d4:	3302      	adds	r3, #2
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	e00b      	b.n	80078f2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80078da:	78fb      	ldrb	r3, [r7, #3]
 80078dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80078e0:	68f9      	ldr	r1, [r7, #12]
 80078e2:	4613      	mov	r3, r2
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	4413      	add	r3, r2
 80078e8:	00db      	lsls	r3, r3, #3
 80078ea:	440b      	add	r3, r1
 80078ec:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80078f0:	781b      	ldrb	r3, [r3, #0]
  }
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3714      	adds	r7, #20
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bc80      	pop	{r7}
 80078fa:	4770      	bx	lr

080078fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	460b      	mov	r3, r1
 8007906:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007908:	2300      	movs	r3, #0
 800790a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800790c:	2300      	movs	r3, #0
 800790e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007916:	78fa      	ldrb	r2, [r7, #3]
 8007918:	4611      	mov	r1, r2
 800791a:	4618      	mov	r0, r3
 800791c:	f7f9 ff84 	bl	8001828 <HAL_PCD_SetAddress>
 8007920:	4603      	mov	r3, r0
 8007922:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007924:	7bfb      	ldrb	r3, [r7, #15]
 8007926:	4618      	mov	r0, r3
 8007928:	f000 f880 	bl	8007a2c <USBD_Get_USB_Status>
 800792c:	4603      	mov	r3, r0
 800792e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007930:	7bbb      	ldrb	r3, [r7, #14]
}
 8007932:	4618      	mov	r0, r3
 8007934:	3710      	adds	r7, #16
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b086      	sub	sp, #24
 800793e:	af00      	add	r7, sp, #0
 8007940:	60f8      	str	r0, [r7, #12]
 8007942:	607a      	str	r2, [r7, #4]
 8007944:	461a      	mov	r2, r3
 8007946:	460b      	mov	r3, r1
 8007948:	72fb      	strb	r3, [r7, #11]
 800794a:	4613      	mov	r3, r2
 800794c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800794e:	2300      	movs	r3, #0
 8007950:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007952:	2300      	movs	r3, #0
 8007954:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800795c:	893b      	ldrh	r3, [r7, #8]
 800795e:	7af9      	ldrb	r1, [r7, #11]
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	f7fa f888 	bl	8001a76 <HAL_PCD_EP_Transmit>
 8007966:	4603      	mov	r3, r0
 8007968:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800796a:	7dfb      	ldrb	r3, [r7, #23]
 800796c:	4618      	mov	r0, r3
 800796e:	f000 f85d 	bl	8007a2c <USBD_Get_USB_Status>
 8007972:	4603      	mov	r3, r0
 8007974:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007976:	7dbb      	ldrb	r3, [r7, #22]
}
 8007978:	4618      	mov	r0, r3
 800797a:	3718      	adds	r7, #24
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b086      	sub	sp, #24
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	607a      	str	r2, [r7, #4]
 800798a:	461a      	mov	r2, r3
 800798c:	460b      	mov	r3, r1
 800798e:	72fb      	strb	r3, [r7, #11]
 8007990:	4613      	mov	r3, r2
 8007992:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007994:	2300      	movs	r3, #0
 8007996:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007998:	2300      	movs	r3, #0
 800799a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80079a2:	893b      	ldrh	r3, [r7, #8]
 80079a4:	7af9      	ldrb	r1, [r7, #11]
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	f7fa f811 	bl	80019ce <HAL_PCD_EP_Receive>
 80079ac:	4603      	mov	r3, r0
 80079ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079b0:	7dfb      	ldrb	r3, [r7, #23]
 80079b2:	4618      	mov	r0, r3
 80079b4:	f000 f83a 	bl	8007a2c <USBD_Get_USB_Status>
 80079b8:	4603      	mov	r3, r0
 80079ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80079bc:	7dbb      	ldrb	r3, [r7, #22]
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3718      	adds	r7, #24
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	b082      	sub	sp, #8
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
 80079ce:	460b      	mov	r3, r1
 80079d0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079d8:	78fa      	ldrb	r2, [r7, #3]
 80079da:	4611      	mov	r1, r2
 80079dc:	4618      	mov	r0, r3
 80079de:	f7fa f833 	bl	8001a48 <HAL_PCD_EP_GetRxCount>
 80079e2:	4603      	mov	r3, r0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3708      	adds	r7, #8
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80079f4:	4b02      	ldr	r3, [pc, #8]	; (8007a00 <USBD_static_malloc+0x14>)
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	370c      	adds	r7, #12
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bc80      	pop	{r7}
 80079fe:	4770      	bx	lr
 8007a00:	200004d0 	.word	0x200004d0

08007a04 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]

}
 8007a0c:	bf00      	nop
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bc80      	pop	{r7}
 8007a14:	4770      	bx	lr

08007a16 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a16:	b480      	push	{r7}
 8007a18:	b083      	sub	sp, #12
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
 8007a1e:	460b      	mov	r3, r1
 8007a20:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007a22:	bf00      	nop
 8007a24:	370c      	adds	r7, #12
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bc80      	pop	{r7}
 8007a2a:	4770      	bx	lr

08007a2c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b085      	sub	sp, #20
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	4603      	mov	r3, r0
 8007a34:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a36:	2300      	movs	r3, #0
 8007a38:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007a3a:	79fb      	ldrb	r3, [r7, #7]
 8007a3c:	2b03      	cmp	r3, #3
 8007a3e:	d817      	bhi.n	8007a70 <USBD_Get_USB_Status+0x44>
 8007a40:	a201      	add	r2, pc, #4	; (adr r2, 8007a48 <USBD_Get_USB_Status+0x1c>)
 8007a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a46:	bf00      	nop
 8007a48:	08007a59 	.word	0x08007a59
 8007a4c:	08007a5f 	.word	0x08007a5f
 8007a50:	08007a65 	.word	0x08007a65
 8007a54:	08007a6b 	.word	0x08007a6b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	73fb      	strb	r3, [r7, #15]
    break;
 8007a5c:	e00b      	b.n	8007a76 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007a5e:	2302      	movs	r3, #2
 8007a60:	73fb      	strb	r3, [r7, #15]
    break;
 8007a62:	e008      	b.n	8007a76 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007a64:	2301      	movs	r3, #1
 8007a66:	73fb      	strb	r3, [r7, #15]
    break;
 8007a68:	e005      	b.n	8007a76 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007a6a:	2302      	movs	r3, #2
 8007a6c:	73fb      	strb	r3, [r7, #15]
    break;
 8007a6e:	e002      	b.n	8007a76 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007a70:	2302      	movs	r3, #2
 8007a72:	73fb      	strb	r3, [r7, #15]
    break;
 8007a74:	bf00      	nop
  }
  return usb_status;
 8007a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3714      	adds	r7, #20
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bc80      	pop	{r7}
 8007a80:	4770      	bx	lr
 8007a82:	bf00      	nop

08007a84 <__libc_init_array>:
 8007a84:	b570      	push	{r4, r5, r6, lr}
 8007a86:	2500      	movs	r5, #0
 8007a88:	4e0c      	ldr	r6, [pc, #48]	; (8007abc <__libc_init_array+0x38>)
 8007a8a:	4c0d      	ldr	r4, [pc, #52]	; (8007ac0 <__libc_init_array+0x3c>)
 8007a8c:	1ba4      	subs	r4, r4, r6
 8007a8e:	10a4      	asrs	r4, r4, #2
 8007a90:	42a5      	cmp	r5, r4
 8007a92:	d109      	bne.n	8007aa8 <__libc_init_array+0x24>
 8007a94:	f000 ff98 	bl	80089c8 <_init>
 8007a98:	2500      	movs	r5, #0
 8007a9a:	4e0a      	ldr	r6, [pc, #40]	; (8007ac4 <__libc_init_array+0x40>)
 8007a9c:	4c0a      	ldr	r4, [pc, #40]	; (8007ac8 <__libc_init_array+0x44>)
 8007a9e:	1ba4      	subs	r4, r4, r6
 8007aa0:	10a4      	asrs	r4, r4, #2
 8007aa2:	42a5      	cmp	r5, r4
 8007aa4:	d105      	bne.n	8007ab2 <__libc_init_array+0x2e>
 8007aa6:	bd70      	pop	{r4, r5, r6, pc}
 8007aa8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007aac:	4798      	blx	r3
 8007aae:	3501      	adds	r5, #1
 8007ab0:	e7ee      	b.n	8007a90 <__libc_init_array+0xc>
 8007ab2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ab6:	4798      	blx	r3
 8007ab8:	3501      	adds	r5, #1
 8007aba:	e7f2      	b.n	8007aa2 <__libc_init_array+0x1e>
 8007abc:	08008b18 	.word	0x08008b18
 8007ac0:	08008b18 	.word	0x08008b18
 8007ac4:	08008b18 	.word	0x08008b18
 8007ac8:	08008b1c 	.word	0x08008b1c

08007acc <memset>:
 8007acc:	4603      	mov	r3, r0
 8007ace:	4402      	add	r2, r0
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d100      	bne.n	8007ad6 <memset+0xa>
 8007ad4:	4770      	bx	lr
 8007ad6:	f803 1b01 	strb.w	r1, [r3], #1
 8007ada:	e7f9      	b.n	8007ad0 <memset+0x4>

08007adc <iprintf>:
 8007adc:	b40f      	push	{r0, r1, r2, r3}
 8007ade:	4b0a      	ldr	r3, [pc, #40]	; (8007b08 <iprintf+0x2c>)
 8007ae0:	b513      	push	{r0, r1, r4, lr}
 8007ae2:	681c      	ldr	r4, [r3, #0]
 8007ae4:	b124      	cbz	r4, 8007af0 <iprintf+0x14>
 8007ae6:	69a3      	ldr	r3, [r4, #24]
 8007ae8:	b913      	cbnz	r3, 8007af0 <iprintf+0x14>
 8007aea:	4620      	mov	r0, r4
 8007aec:	f000 f862 	bl	8007bb4 <__sinit>
 8007af0:	ab05      	add	r3, sp, #20
 8007af2:	9a04      	ldr	r2, [sp, #16]
 8007af4:	68a1      	ldr	r1, [r4, #8]
 8007af6:	4620      	mov	r0, r4
 8007af8:	9301      	str	r3, [sp, #4]
 8007afa:	f000 f967 	bl	8007dcc <_vfiprintf_r>
 8007afe:	b002      	add	sp, #8
 8007b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b04:	b004      	add	sp, #16
 8007b06:	4770      	bx	lr
 8007b08:	2000017c 	.word	0x2000017c

08007b0c <putchar>:
 8007b0c:	b538      	push	{r3, r4, r5, lr}
 8007b0e:	4b08      	ldr	r3, [pc, #32]	; (8007b30 <putchar+0x24>)
 8007b10:	4605      	mov	r5, r0
 8007b12:	681c      	ldr	r4, [r3, #0]
 8007b14:	b124      	cbz	r4, 8007b20 <putchar+0x14>
 8007b16:	69a3      	ldr	r3, [r4, #24]
 8007b18:	b913      	cbnz	r3, 8007b20 <putchar+0x14>
 8007b1a:	4620      	mov	r0, r4
 8007b1c:	f000 f84a 	bl	8007bb4 <__sinit>
 8007b20:	68a2      	ldr	r2, [r4, #8]
 8007b22:	4629      	mov	r1, r5
 8007b24:	4620      	mov	r0, r4
 8007b26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b2a:	f000 bbed 	b.w	8008308 <_putc_r>
 8007b2e:	bf00      	nop
 8007b30:	2000017c 	.word	0x2000017c

08007b34 <std>:
 8007b34:	2300      	movs	r3, #0
 8007b36:	b510      	push	{r4, lr}
 8007b38:	4604      	mov	r4, r0
 8007b3a:	e9c0 3300 	strd	r3, r3, [r0]
 8007b3e:	6083      	str	r3, [r0, #8]
 8007b40:	8181      	strh	r1, [r0, #12]
 8007b42:	6643      	str	r3, [r0, #100]	; 0x64
 8007b44:	81c2      	strh	r2, [r0, #14]
 8007b46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b4a:	6183      	str	r3, [r0, #24]
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	2208      	movs	r2, #8
 8007b50:	305c      	adds	r0, #92	; 0x5c
 8007b52:	f7ff ffbb 	bl	8007acc <memset>
 8007b56:	4b05      	ldr	r3, [pc, #20]	; (8007b6c <std+0x38>)
 8007b58:	6224      	str	r4, [r4, #32]
 8007b5a:	6263      	str	r3, [r4, #36]	; 0x24
 8007b5c:	4b04      	ldr	r3, [pc, #16]	; (8007b70 <std+0x3c>)
 8007b5e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b60:	4b04      	ldr	r3, [pc, #16]	; (8007b74 <std+0x40>)
 8007b62:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b64:	4b04      	ldr	r3, [pc, #16]	; (8007b78 <std+0x44>)
 8007b66:	6323      	str	r3, [r4, #48]	; 0x30
 8007b68:	bd10      	pop	{r4, pc}
 8007b6a:	bf00      	nop
 8007b6c:	08008395 	.word	0x08008395
 8007b70:	080083b7 	.word	0x080083b7
 8007b74:	080083ef 	.word	0x080083ef
 8007b78:	08008413 	.word	0x08008413

08007b7c <_cleanup_r>:
 8007b7c:	4901      	ldr	r1, [pc, #4]	; (8007b84 <_cleanup_r+0x8>)
 8007b7e:	f000 b885 	b.w	8007c8c <_fwalk_reent>
 8007b82:	bf00      	nop
 8007b84:	080086ed 	.word	0x080086ed

08007b88 <__sfmoreglue>:
 8007b88:	b570      	push	{r4, r5, r6, lr}
 8007b8a:	2568      	movs	r5, #104	; 0x68
 8007b8c:	1e4a      	subs	r2, r1, #1
 8007b8e:	4355      	muls	r5, r2
 8007b90:	460e      	mov	r6, r1
 8007b92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007b96:	f000 f897 	bl	8007cc8 <_malloc_r>
 8007b9a:	4604      	mov	r4, r0
 8007b9c:	b140      	cbz	r0, 8007bb0 <__sfmoreglue+0x28>
 8007b9e:	2100      	movs	r1, #0
 8007ba0:	e9c0 1600 	strd	r1, r6, [r0]
 8007ba4:	300c      	adds	r0, #12
 8007ba6:	60a0      	str	r0, [r4, #8]
 8007ba8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007bac:	f7ff ff8e 	bl	8007acc <memset>
 8007bb0:	4620      	mov	r0, r4
 8007bb2:	bd70      	pop	{r4, r5, r6, pc}

08007bb4 <__sinit>:
 8007bb4:	6983      	ldr	r3, [r0, #24]
 8007bb6:	b510      	push	{r4, lr}
 8007bb8:	4604      	mov	r4, r0
 8007bba:	bb33      	cbnz	r3, 8007c0a <__sinit+0x56>
 8007bbc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007bc0:	6503      	str	r3, [r0, #80]	; 0x50
 8007bc2:	4b12      	ldr	r3, [pc, #72]	; (8007c0c <__sinit+0x58>)
 8007bc4:	4a12      	ldr	r2, [pc, #72]	; (8007c10 <__sinit+0x5c>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	6282      	str	r2, [r0, #40]	; 0x28
 8007bca:	4298      	cmp	r0, r3
 8007bcc:	bf04      	itt	eq
 8007bce:	2301      	moveq	r3, #1
 8007bd0:	6183      	streq	r3, [r0, #24]
 8007bd2:	f000 f81f 	bl	8007c14 <__sfp>
 8007bd6:	6060      	str	r0, [r4, #4]
 8007bd8:	4620      	mov	r0, r4
 8007bda:	f000 f81b 	bl	8007c14 <__sfp>
 8007bde:	60a0      	str	r0, [r4, #8]
 8007be0:	4620      	mov	r0, r4
 8007be2:	f000 f817 	bl	8007c14 <__sfp>
 8007be6:	2200      	movs	r2, #0
 8007be8:	60e0      	str	r0, [r4, #12]
 8007bea:	2104      	movs	r1, #4
 8007bec:	6860      	ldr	r0, [r4, #4]
 8007bee:	f7ff ffa1 	bl	8007b34 <std>
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	2109      	movs	r1, #9
 8007bf6:	68a0      	ldr	r0, [r4, #8]
 8007bf8:	f7ff ff9c 	bl	8007b34 <std>
 8007bfc:	2202      	movs	r2, #2
 8007bfe:	2112      	movs	r1, #18
 8007c00:	68e0      	ldr	r0, [r4, #12]
 8007c02:	f7ff ff97 	bl	8007b34 <std>
 8007c06:	2301      	movs	r3, #1
 8007c08:	61a3      	str	r3, [r4, #24]
 8007c0a:	bd10      	pop	{r4, pc}
 8007c0c:	08008a80 	.word	0x08008a80
 8007c10:	08007b7d 	.word	0x08007b7d

08007c14 <__sfp>:
 8007c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c16:	4b1b      	ldr	r3, [pc, #108]	; (8007c84 <__sfp+0x70>)
 8007c18:	4607      	mov	r7, r0
 8007c1a:	681e      	ldr	r6, [r3, #0]
 8007c1c:	69b3      	ldr	r3, [r6, #24]
 8007c1e:	b913      	cbnz	r3, 8007c26 <__sfp+0x12>
 8007c20:	4630      	mov	r0, r6
 8007c22:	f7ff ffc7 	bl	8007bb4 <__sinit>
 8007c26:	3648      	adds	r6, #72	; 0x48
 8007c28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007c2c:	3b01      	subs	r3, #1
 8007c2e:	d503      	bpl.n	8007c38 <__sfp+0x24>
 8007c30:	6833      	ldr	r3, [r6, #0]
 8007c32:	b133      	cbz	r3, 8007c42 <__sfp+0x2e>
 8007c34:	6836      	ldr	r6, [r6, #0]
 8007c36:	e7f7      	b.n	8007c28 <__sfp+0x14>
 8007c38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007c3c:	b16d      	cbz	r5, 8007c5a <__sfp+0x46>
 8007c3e:	3468      	adds	r4, #104	; 0x68
 8007c40:	e7f4      	b.n	8007c2c <__sfp+0x18>
 8007c42:	2104      	movs	r1, #4
 8007c44:	4638      	mov	r0, r7
 8007c46:	f7ff ff9f 	bl	8007b88 <__sfmoreglue>
 8007c4a:	6030      	str	r0, [r6, #0]
 8007c4c:	2800      	cmp	r0, #0
 8007c4e:	d1f1      	bne.n	8007c34 <__sfp+0x20>
 8007c50:	230c      	movs	r3, #12
 8007c52:	4604      	mov	r4, r0
 8007c54:	603b      	str	r3, [r7, #0]
 8007c56:	4620      	mov	r0, r4
 8007c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c5a:	4b0b      	ldr	r3, [pc, #44]	; (8007c88 <__sfp+0x74>)
 8007c5c:	6665      	str	r5, [r4, #100]	; 0x64
 8007c5e:	e9c4 5500 	strd	r5, r5, [r4]
 8007c62:	60a5      	str	r5, [r4, #8]
 8007c64:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007c68:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007c6c:	2208      	movs	r2, #8
 8007c6e:	4629      	mov	r1, r5
 8007c70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007c74:	f7ff ff2a 	bl	8007acc <memset>
 8007c78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007c7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007c80:	e7e9      	b.n	8007c56 <__sfp+0x42>
 8007c82:	bf00      	nop
 8007c84:	08008a80 	.word	0x08008a80
 8007c88:	ffff0001 	.word	0xffff0001

08007c8c <_fwalk_reent>:
 8007c8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c90:	4680      	mov	r8, r0
 8007c92:	4689      	mov	r9, r1
 8007c94:	2600      	movs	r6, #0
 8007c96:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007c9a:	b914      	cbnz	r4, 8007ca2 <_fwalk_reent+0x16>
 8007c9c:	4630      	mov	r0, r6
 8007c9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ca2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007ca6:	3f01      	subs	r7, #1
 8007ca8:	d501      	bpl.n	8007cae <_fwalk_reent+0x22>
 8007caa:	6824      	ldr	r4, [r4, #0]
 8007cac:	e7f5      	b.n	8007c9a <_fwalk_reent+0xe>
 8007cae:	89ab      	ldrh	r3, [r5, #12]
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d907      	bls.n	8007cc4 <_fwalk_reent+0x38>
 8007cb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007cb8:	3301      	adds	r3, #1
 8007cba:	d003      	beq.n	8007cc4 <_fwalk_reent+0x38>
 8007cbc:	4629      	mov	r1, r5
 8007cbe:	4640      	mov	r0, r8
 8007cc0:	47c8      	blx	r9
 8007cc2:	4306      	orrs	r6, r0
 8007cc4:	3568      	adds	r5, #104	; 0x68
 8007cc6:	e7ee      	b.n	8007ca6 <_fwalk_reent+0x1a>

08007cc8 <_malloc_r>:
 8007cc8:	b570      	push	{r4, r5, r6, lr}
 8007cca:	1ccd      	adds	r5, r1, #3
 8007ccc:	f025 0503 	bic.w	r5, r5, #3
 8007cd0:	3508      	adds	r5, #8
 8007cd2:	2d0c      	cmp	r5, #12
 8007cd4:	bf38      	it	cc
 8007cd6:	250c      	movcc	r5, #12
 8007cd8:	2d00      	cmp	r5, #0
 8007cda:	4606      	mov	r6, r0
 8007cdc:	db01      	blt.n	8007ce2 <_malloc_r+0x1a>
 8007cde:	42a9      	cmp	r1, r5
 8007ce0:	d903      	bls.n	8007cea <_malloc_r+0x22>
 8007ce2:	230c      	movs	r3, #12
 8007ce4:	6033      	str	r3, [r6, #0]
 8007ce6:	2000      	movs	r0, #0
 8007ce8:	bd70      	pop	{r4, r5, r6, pc}
 8007cea:	f000 fdad 	bl	8008848 <__malloc_lock>
 8007cee:	4a21      	ldr	r2, [pc, #132]	; (8007d74 <_malloc_r+0xac>)
 8007cf0:	6814      	ldr	r4, [r2, #0]
 8007cf2:	4621      	mov	r1, r4
 8007cf4:	b991      	cbnz	r1, 8007d1c <_malloc_r+0x54>
 8007cf6:	4c20      	ldr	r4, [pc, #128]	; (8007d78 <_malloc_r+0xb0>)
 8007cf8:	6823      	ldr	r3, [r4, #0]
 8007cfa:	b91b      	cbnz	r3, 8007d04 <_malloc_r+0x3c>
 8007cfc:	4630      	mov	r0, r6
 8007cfe:	f000 fb39 	bl	8008374 <_sbrk_r>
 8007d02:	6020      	str	r0, [r4, #0]
 8007d04:	4629      	mov	r1, r5
 8007d06:	4630      	mov	r0, r6
 8007d08:	f000 fb34 	bl	8008374 <_sbrk_r>
 8007d0c:	1c43      	adds	r3, r0, #1
 8007d0e:	d124      	bne.n	8007d5a <_malloc_r+0x92>
 8007d10:	230c      	movs	r3, #12
 8007d12:	4630      	mov	r0, r6
 8007d14:	6033      	str	r3, [r6, #0]
 8007d16:	f000 fd98 	bl	800884a <__malloc_unlock>
 8007d1a:	e7e4      	b.n	8007ce6 <_malloc_r+0x1e>
 8007d1c:	680b      	ldr	r3, [r1, #0]
 8007d1e:	1b5b      	subs	r3, r3, r5
 8007d20:	d418      	bmi.n	8007d54 <_malloc_r+0x8c>
 8007d22:	2b0b      	cmp	r3, #11
 8007d24:	d90f      	bls.n	8007d46 <_malloc_r+0x7e>
 8007d26:	600b      	str	r3, [r1, #0]
 8007d28:	18cc      	adds	r4, r1, r3
 8007d2a:	50cd      	str	r5, [r1, r3]
 8007d2c:	4630      	mov	r0, r6
 8007d2e:	f000 fd8c 	bl	800884a <__malloc_unlock>
 8007d32:	f104 000b 	add.w	r0, r4, #11
 8007d36:	1d23      	adds	r3, r4, #4
 8007d38:	f020 0007 	bic.w	r0, r0, #7
 8007d3c:	1ac3      	subs	r3, r0, r3
 8007d3e:	d0d3      	beq.n	8007ce8 <_malloc_r+0x20>
 8007d40:	425a      	negs	r2, r3
 8007d42:	50e2      	str	r2, [r4, r3]
 8007d44:	e7d0      	b.n	8007ce8 <_malloc_r+0x20>
 8007d46:	684b      	ldr	r3, [r1, #4]
 8007d48:	428c      	cmp	r4, r1
 8007d4a:	bf16      	itet	ne
 8007d4c:	6063      	strne	r3, [r4, #4]
 8007d4e:	6013      	streq	r3, [r2, #0]
 8007d50:	460c      	movne	r4, r1
 8007d52:	e7eb      	b.n	8007d2c <_malloc_r+0x64>
 8007d54:	460c      	mov	r4, r1
 8007d56:	6849      	ldr	r1, [r1, #4]
 8007d58:	e7cc      	b.n	8007cf4 <_malloc_r+0x2c>
 8007d5a:	1cc4      	adds	r4, r0, #3
 8007d5c:	f024 0403 	bic.w	r4, r4, #3
 8007d60:	42a0      	cmp	r0, r4
 8007d62:	d005      	beq.n	8007d70 <_malloc_r+0xa8>
 8007d64:	1a21      	subs	r1, r4, r0
 8007d66:	4630      	mov	r0, r6
 8007d68:	f000 fb04 	bl	8008374 <_sbrk_r>
 8007d6c:	3001      	adds	r0, #1
 8007d6e:	d0cf      	beq.n	8007d10 <_malloc_r+0x48>
 8007d70:	6025      	str	r5, [r4, #0]
 8007d72:	e7db      	b.n	8007d2c <_malloc_r+0x64>
 8007d74:	200006f0 	.word	0x200006f0
 8007d78:	200006f4 	.word	0x200006f4

08007d7c <__sfputc_r>:
 8007d7c:	6893      	ldr	r3, [r2, #8]
 8007d7e:	b410      	push	{r4}
 8007d80:	3b01      	subs	r3, #1
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	6093      	str	r3, [r2, #8]
 8007d86:	da07      	bge.n	8007d98 <__sfputc_r+0x1c>
 8007d88:	6994      	ldr	r4, [r2, #24]
 8007d8a:	42a3      	cmp	r3, r4
 8007d8c:	db01      	blt.n	8007d92 <__sfputc_r+0x16>
 8007d8e:	290a      	cmp	r1, #10
 8007d90:	d102      	bne.n	8007d98 <__sfputc_r+0x1c>
 8007d92:	bc10      	pop	{r4}
 8007d94:	f000 bb42 	b.w	800841c <__swbuf_r>
 8007d98:	6813      	ldr	r3, [r2, #0]
 8007d9a:	1c58      	adds	r0, r3, #1
 8007d9c:	6010      	str	r0, [r2, #0]
 8007d9e:	7019      	strb	r1, [r3, #0]
 8007da0:	4608      	mov	r0, r1
 8007da2:	bc10      	pop	{r4}
 8007da4:	4770      	bx	lr

08007da6 <__sfputs_r>:
 8007da6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007da8:	4606      	mov	r6, r0
 8007daa:	460f      	mov	r7, r1
 8007dac:	4614      	mov	r4, r2
 8007dae:	18d5      	adds	r5, r2, r3
 8007db0:	42ac      	cmp	r4, r5
 8007db2:	d101      	bne.n	8007db8 <__sfputs_r+0x12>
 8007db4:	2000      	movs	r0, #0
 8007db6:	e007      	b.n	8007dc8 <__sfputs_r+0x22>
 8007db8:	463a      	mov	r2, r7
 8007dba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dbe:	4630      	mov	r0, r6
 8007dc0:	f7ff ffdc 	bl	8007d7c <__sfputc_r>
 8007dc4:	1c43      	adds	r3, r0, #1
 8007dc6:	d1f3      	bne.n	8007db0 <__sfputs_r+0xa>
 8007dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007dcc <_vfiprintf_r>:
 8007dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dd0:	460c      	mov	r4, r1
 8007dd2:	b09d      	sub	sp, #116	; 0x74
 8007dd4:	4617      	mov	r7, r2
 8007dd6:	461d      	mov	r5, r3
 8007dd8:	4606      	mov	r6, r0
 8007dda:	b118      	cbz	r0, 8007de4 <_vfiprintf_r+0x18>
 8007ddc:	6983      	ldr	r3, [r0, #24]
 8007dde:	b90b      	cbnz	r3, 8007de4 <_vfiprintf_r+0x18>
 8007de0:	f7ff fee8 	bl	8007bb4 <__sinit>
 8007de4:	4b7c      	ldr	r3, [pc, #496]	; (8007fd8 <_vfiprintf_r+0x20c>)
 8007de6:	429c      	cmp	r4, r3
 8007de8:	d158      	bne.n	8007e9c <_vfiprintf_r+0xd0>
 8007dea:	6874      	ldr	r4, [r6, #4]
 8007dec:	89a3      	ldrh	r3, [r4, #12]
 8007dee:	0718      	lsls	r0, r3, #28
 8007df0:	d55e      	bpl.n	8007eb0 <_vfiprintf_r+0xe4>
 8007df2:	6923      	ldr	r3, [r4, #16]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d05b      	beq.n	8007eb0 <_vfiprintf_r+0xe4>
 8007df8:	2300      	movs	r3, #0
 8007dfa:	9309      	str	r3, [sp, #36]	; 0x24
 8007dfc:	2320      	movs	r3, #32
 8007dfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e02:	2330      	movs	r3, #48	; 0x30
 8007e04:	f04f 0b01 	mov.w	fp, #1
 8007e08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e0c:	9503      	str	r5, [sp, #12]
 8007e0e:	46b8      	mov	r8, r7
 8007e10:	4645      	mov	r5, r8
 8007e12:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007e16:	b10b      	cbz	r3, 8007e1c <_vfiprintf_r+0x50>
 8007e18:	2b25      	cmp	r3, #37	; 0x25
 8007e1a:	d154      	bne.n	8007ec6 <_vfiprintf_r+0xfa>
 8007e1c:	ebb8 0a07 	subs.w	sl, r8, r7
 8007e20:	d00b      	beq.n	8007e3a <_vfiprintf_r+0x6e>
 8007e22:	4653      	mov	r3, sl
 8007e24:	463a      	mov	r2, r7
 8007e26:	4621      	mov	r1, r4
 8007e28:	4630      	mov	r0, r6
 8007e2a:	f7ff ffbc 	bl	8007da6 <__sfputs_r>
 8007e2e:	3001      	adds	r0, #1
 8007e30:	f000 80c2 	beq.w	8007fb8 <_vfiprintf_r+0x1ec>
 8007e34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e36:	4453      	add	r3, sl
 8007e38:	9309      	str	r3, [sp, #36]	; 0x24
 8007e3a:	f898 3000 	ldrb.w	r3, [r8]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	f000 80ba 	beq.w	8007fb8 <_vfiprintf_r+0x1ec>
 8007e44:	2300      	movs	r3, #0
 8007e46:	f04f 32ff 	mov.w	r2, #4294967295
 8007e4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e4e:	9304      	str	r3, [sp, #16]
 8007e50:	9307      	str	r3, [sp, #28]
 8007e52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e56:	931a      	str	r3, [sp, #104]	; 0x68
 8007e58:	46a8      	mov	r8, r5
 8007e5a:	2205      	movs	r2, #5
 8007e5c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007e60:	485e      	ldr	r0, [pc, #376]	; (8007fdc <_vfiprintf_r+0x210>)
 8007e62:	f000 fce3 	bl	800882c <memchr>
 8007e66:	9b04      	ldr	r3, [sp, #16]
 8007e68:	bb78      	cbnz	r0, 8007eca <_vfiprintf_r+0xfe>
 8007e6a:	06d9      	lsls	r1, r3, #27
 8007e6c:	bf44      	itt	mi
 8007e6e:	2220      	movmi	r2, #32
 8007e70:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007e74:	071a      	lsls	r2, r3, #28
 8007e76:	bf44      	itt	mi
 8007e78:	222b      	movmi	r2, #43	; 0x2b
 8007e7a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007e7e:	782a      	ldrb	r2, [r5, #0]
 8007e80:	2a2a      	cmp	r2, #42	; 0x2a
 8007e82:	d02a      	beq.n	8007eda <_vfiprintf_r+0x10e>
 8007e84:	46a8      	mov	r8, r5
 8007e86:	2000      	movs	r0, #0
 8007e88:	250a      	movs	r5, #10
 8007e8a:	9a07      	ldr	r2, [sp, #28]
 8007e8c:	4641      	mov	r1, r8
 8007e8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e92:	3b30      	subs	r3, #48	; 0x30
 8007e94:	2b09      	cmp	r3, #9
 8007e96:	d969      	bls.n	8007f6c <_vfiprintf_r+0x1a0>
 8007e98:	b360      	cbz	r0, 8007ef4 <_vfiprintf_r+0x128>
 8007e9a:	e024      	b.n	8007ee6 <_vfiprintf_r+0x11a>
 8007e9c:	4b50      	ldr	r3, [pc, #320]	; (8007fe0 <_vfiprintf_r+0x214>)
 8007e9e:	429c      	cmp	r4, r3
 8007ea0:	d101      	bne.n	8007ea6 <_vfiprintf_r+0xda>
 8007ea2:	68b4      	ldr	r4, [r6, #8]
 8007ea4:	e7a2      	b.n	8007dec <_vfiprintf_r+0x20>
 8007ea6:	4b4f      	ldr	r3, [pc, #316]	; (8007fe4 <_vfiprintf_r+0x218>)
 8007ea8:	429c      	cmp	r4, r3
 8007eaa:	bf08      	it	eq
 8007eac:	68f4      	ldreq	r4, [r6, #12]
 8007eae:	e79d      	b.n	8007dec <_vfiprintf_r+0x20>
 8007eb0:	4621      	mov	r1, r4
 8007eb2:	4630      	mov	r0, r6
 8007eb4:	f000 fb16 	bl	80084e4 <__swsetup_r>
 8007eb8:	2800      	cmp	r0, #0
 8007eba:	d09d      	beq.n	8007df8 <_vfiprintf_r+0x2c>
 8007ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ec0:	b01d      	add	sp, #116	; 0x74
 8007ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ec6:	46a8      	mov	r8, r5
 8007ec8:	e7a2      	b.n	8007e10 <_vfiprintf_r+0x44>
 8007eca:	4a44      	ldr	r2, [pc, #272]	; (8007fdc <_vfiprintf_r+0x210>)
 8007ecc:	4645      	mov	r5, r8
 8007ece:	1a80      	subs	r0, r0, r2
 8007ed0:	fa0b f000 	lsl.w	r0, fp, r0
 8007ed4:	4318      	orrs	r0, r3
 8007ed6:	9004      	str	r0, [sp, #16]
 8007ed8:	e7be      	b.n	8007e58 <_vfiprintf_r+0x8c>
 8007eda:	9a03      	ldr	r2, [sp, #12]
 8007edc:	1d11      	adds	r1, r2, #4
 8007ede:	6812      	ldr	r2, [r2, #0]
 8007ee0:	9103      	str	r1, [sp, #12]
 8007ee2:	2a00      	cmp	r2, #0
 8007ee4:	db01      	blt.n	8007eea <_vfiprintf_r+0x11e>
 8007ee6:	9207      	str	r2, [sp, #28]
 8007ee8:	e004      	b.n	8007ef4 <_vfiprintf_r+0x128>
 8007eea:	4252      	negs	r2, r2
 8007eec:	f043 0302 	orr.w	r3, r3, #2
 8007ef0:	9207      	str	r2, [sp, #28]
 8007ef2:	9304      	str	r3, [sp, #16]
 8007ef4:	f898 3000 	ldrb.w	r3, [r8]
 8007ef8:	2b2e      	cmp	r3, #46	; 0x2e
 8007efa:	d10e      	bne.n	8007f1a <_vfiprintf_r+0x14e>
 8007efc:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007f00:	2b2a      	cmp	r3, #42	; 0x2a
 8007f02:	d138      	bne.n	8007f76 <_vfiprintf_r+0x1aa>
 8007f04:	9b03      	ldr	r3, [sp, #12]
 8007f06:	f108 0802 	add.w	r8, r8, #2
 8007f0a:	1d1a      	adds	r2, r3, #4
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	9203      	str	r2, [sp, #12]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	bfb8      	it	lt
 8007f14:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f18:	9305      	str	r3, [sp, #20]
 8007f1a:	4d33      	ldr	r5, [pc, #204]	; (8007fe8 <_vfiprintf_r+0x21c>)
 8007f1c:	2203      	movs	r2, #3
 8007f1e:	f898 1000 	ldrb.w	r1, [r8]
 8007f22:	4628      	mov	r0, r5
 8007f24:	f000 fc82 	bl	800882c <memchr>
 8007f28:	b140      	cbz	r0, 8007f3c <_vfiprintf_r+0x170>
 8007f2a:	2340      	movs	r3, #64	; 0x40
 8007f2c:	1b40      	subs	r0, r0, r5
 8007f2e:	fa03 f000 	lsl.w	r0, r3, r0
 8007f32:	9b04      	ldr	r3, [sp, #16]
 8007f34:	f108 0801 	add.w	r8, r8, #1
 8007f38:	4303      	orrs	r3, r0
 8007f3a:	9304      	str	r3, [sp, #16]
 8007f3c:	f898 1000 	ldrb.w	r1, [r8]
 8007f40:	2206      	movs	r2, #6
 8007f42:	482a      	ldr	r0, [pc, #168]	; (8007fec <_vfiprintf_r+0x220>)
 8007f44:	f108 0701 	add.w	r7, r8, #1
 8007f48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f4c:	f000 fc6e 	bl	800882c <memchr>
 8007f50:	2800      	cmp	r0, #0
 8007f52:	d037      	beq.n	8007fc4 <_vfiprintf_r+0x1f8>
 8007f54:	4b26      	ldr	r3, [pc, #152]	; (8007ff0 <_vfiprintf_r+0x224>)
 8007f56:	bb1b      	cbnz	r3, 8007fa0 <_vfiprintf_r+0x1d4>
 8007f58:	9b03      	ldr	r3, [sp, #12]
 8007f5a:	3307      	adds	r3, #7
 8007f5c:	f023 0307 	bic.w	r3, r3, #7
 8007f60:	3308      	adds	r3, #8
 8007f62:	9303      	str	r3, [sp, #12]
 8007f64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f66:	444b      	add	r3, r9
 8007f68:	9309      	str	r3, [sp, #36]	; 0x24
 8007f6a:	e750      	b.n	8007e0e <_vfiprintf_r+0x42>
 8007f6c:	fb05 3202 	mla	r2, r5, r2, r3
 8007f70:	2001      	movs	r0, #1
 8007f72:	4688      	mov	r8, r1
 8007f74:	e78a      	b.n	8007e8c <_vfiprintf_r+0xc0>
 8007f76:	2300      	movs	r3, #0
 8007f78:	250a      	movs	r5, #10
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	f108 0801 	add.w	r8, r8, #1
 8007f80:	9305      	str	r3, [sp, #20]
 8007f82:	4640      	mov	r0, r8
 8007f84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f88:	3a30      	subs	r2, #48	; 0x30
 8007f8a:	2a09      	cmp	r2, #9
 8007f8c:	d903      	bls.n	8007f96 <_vfiprintf_r+0x1ca>
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d0c3      	beq.n	8007f1a <_vfiprintf_r+0x14e>
 8007f92:	9105      	str	r1, [sp, #20]
 8007f94:	e7c1      	b.n	8007f1a <_vfiprintf_r+0x14e>
 8007f96:	fb05 2101 	mla	r1, r5, r1, r2
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	4680      	mov	r8, r0
 8007f9e:	e7f0      	b.n	8007f82 <_vfiprintf_r+0x1b6>
 8007fa0:	ab03      	add	r3, sp, #12
 8007fa2:	9300      	str	r3, [sp, #0]
 8007fa4:	4622      	mov	r2, r4
 8007fa6:	4b13      	ldr	r3, [pc, #76]	; (8007ff4 <_vfiprintf_r+0x228>)
 8007fa8:	a904      	add	r1, sp, #16
 8007faa:	4630      	mov	r0, r6
 8007fac:	f3af 8000 	nop.w
 8007fb0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007fb4:	4681      	mov	r9, r0
 8007fb6:	d1d5      	bne.n	8007f64 <_vfiprintf_r+0x198>
 8007fb8:	89a3      	ldrh	r3, [r4, #12]
 8007fba:	065b      	lsls	r3, r3, #25
 8007fbc:	f53f af7e 	bmi.w	8007ebc <_vfiprintf_r+0xf0>
 8007fc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007fc2:	e77d      	b.n	8007ec0 <_vfiprintf_r+0xf4>
 8007fc4:	ab03      	add	r3, sp, #12
 8007fc6:	9300      	str	r3, [sp, #0]
 8007fc8:	4622      	mov	r2, r4
 8007fca:	4b0a      	ldr	r3, [pc, #40]	; (8007ff4 <_vfiprintf_r+0x228>)
 8007fcc:	a904      	add	r1, sp, #16
 8007fce:	4630      	mov	r0, r6
 8007fd0:	f000 f888 	bl	80080e4 <_printf_i>
 8007fd4:	e7ec      	b.n	8007fb0 <_vfiprintf_r+0x1e4>
 8007fd6:	bf00      	nop
 8007fd8:	08008aa4 	.word	0x08008aa4
 8007fdc:	08008ae4 	.word	0x08008ae4
 8007fe0:	08008ac4 	.word	0x08008ac4
 8007fe4:	08008a84 	.word	0x08008a84
 8007fe8:	08008aea 	.word	0x08008aea
 8007fec:	08008aee 	.word	0x08008aee
 8007ff0:	00000000 	.word	0x00000000
 8007ff4:	08007da7 	.word	0x08007da7

08007ff8 <_printf_common>:
 8007ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ffc:	4691      	mov	r9, r2
 8007ffe:	461f      	mov	r7, r3
 8008000:	688a      	ldr	r2, [r1, #8]
 8008002:	690b      	ldr	r3, [r1, #16]
 8008004:	4606      	mov	r6, r0
 8008006:	4293      	cmp	r3, r2
 8008008:	bfb8      	it	lt
 800800a:	4613      	movlt	r3, r2
 800800c:	f8c9 3000 	str.w	r3, [r9]
 8008010:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008014:	460c      	mov	r4, r1
 8008016:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800801a:	b112      	cbz	r2, 8008022 <_printf_common+0x2a>
 800801c:	3301      	adds	r3, #1
 800801e:	f8c9 3000 	str.w	r3, [r9]
 8008022:	6823      	ldr	r3, [r4, #0]
 8008024:	0699      	lsls	r1, r3, #26
 8008026:	bf42      	ittt	mi
 8008028:	f8d9 3000 	ldrmi.w	r3, [r9]
 800802c:	3302      	addmi	r3, #2
 800802e:	f8c9 3000 	strmi.w	r3, [r9]
 8008032:	6825      	ldr	r5, [r4, #0]
 8008034:	f015 0506 	ands.w	r5, r5, #6
 8008038:	d107      	bne.n	800804a <_printf_common+0x52>
 800803a:	f104 0a19 	add.w	sl, r4, #25
 800803e:	68e3      	ldr	r3, [r4, #12]
 8008040:	f8d9 2000 	ldr.w	r2, [r9]
 8008044:	1a9b      	subs	r3, r3, r2
 8008046:	42ab      	cmp	r3, r5
 8008048:	dc29      	bgt.n	800809e <_printf_common+0xa6>
 800804a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800804e:	6822      	ldr	r2, [r4, #0]
 8008050:	3300      	adds	r3, #0
 8008052:	bf18      	it	ne
 8008054:	2301      	movne	r3, #1
 8008056:	0692      	lsls	r2, r2, #26
 8008058:	d42e      	bmi.n	80080b8 <_printf_common+0xc0>
 800805a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800805e:	4639      	mov	r1, r7
 8008060:	4630      	mov	r0, r6
 8008062:	47c0      	blx	r8
 8008064:	3001      	adds	r0, #1
 8008066:	d021      	beq.n	80080ac <_printf_common+0xb4>
 8008068:	6823      	ldr	r3, [r4, #0]
 800806a:	68e5      	ldr	r5, [r4, #12]
 800806c:	f003 0306 	and.w	r3, r3, #6
 8008070:	2b04      	cmp	r3, #4
 8008072:	bf18      	it	ne
 8008074:	2500      	movne	r5, #0
 8008076:	f8d9 2000 	ldr.w	r2, [r9]
 800807a:	f04f 0900 	mov.w	r9, #0
 800807e:	bf08      	it	eq
 8008080:	1aad      	subeq	r5, r5, r2
 8008082:	68a3      	ldr	r3, [r4, #8]
 8008084:	6922      	ldr	r2, [r4, #16]
 8008086:	bf08      	it	eq
 8008088:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800808c:	4293      	cmp	r3, r2
 800808e:	bfc4      	itt	gt
 8008090:	1a9b      	subgt	r3, r3, r2
 8008092:	18ed      	addgt	r5, r5, r3
 8008094:	341a      	adds	r4, #26
 8008096:	454d      	cmp	r5, r9
 8008098:	d11a      	bne.n	80080d0 <_printf_common+0xd8>
 800809a:	2000      	movs	r0, #0
 800809c:	e008      	b.n	80080b0 <_printf_common+0xb8>
 800809e:	2301      	movs	r3, #1
 80080a0:	4652      	mov	r2, sl
 80080a2:	4639      	mov	r1, r7
 80080a4:	4630      	mov	r0, r6
 80080a6:	47c0      	blx	r8
 80080a8:	3001      	adds	r0, #1
 80080aa:	d103      	bne.n	80080b4 <_printf_common+0xbc>
 80080ac:	f04f 30ff 	mov.w	r0, #4294967295
 80080b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080b4:	3501      	adds	r5, #1
 80080b6:	e7c2      	b.n	800803e <_printf_common+0x46>
 80080b8:	2030      	movs	r0, #48	; 0x30
 80080ba:	18e1      	adds	r1, r4, r3
 80080bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80080c0:	1c5a      	adds	r2, r3, #1
 80080c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80080c6:	4422      	add	r2, r4
 80080c8:	3302      	adds	r3, #2
 80080ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80080ce:	e7c4      	b.n	800805a <_printf_common+0x62>
 80080d0:	2301      	movs	r3, #1
 80080d2:	4622      	mov	r2, r4
 80080d4:	4639      	mov	r1, r7
 80080d6:	4630      	mov	r0, r6
 80080d8:	47c0      	blx	r8
 80080da:	3001      	adds	r0, #1
 80080dc:	d0e6      	beq.n	80080ac <_printf_common+0xb4>
 80080de:	f109 0901 	add.w	r9, r9, #1
 80080e2:	e7d8      	b.n	8008096 <_printf_common+0x9e>

080080e4 <_printf_i>:
 80080e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80080e8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80080ec:	460c      	mov	r4, r1
 80080ee:	7e09      	ldrb	r1, [r1, #24]
 80080f0:	b085      	sub	sp, #20
 80080f2:	296e      	cmp	r1, #110	; 0x6e
 80080f4:	4617      	mov	r7, r2
 80080f6:	4606      	mov	r6, r0
 80080f8:	4698      	mov	r8, r3
 80080fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80080fc:	f000 80b3 	beq.w	8008266 <_printf_i+0x182>
 8008100:	d822      	bhi.n	8008148 <_printf_i+0x64>
 8008102:	2963      	cmp	r1, #99	; 0x63
 8008104:	d036      	beq.n	8008174 <_printf_i+0x90>
 8008106:	d80a      	bhi.n	800811e <_printf_i+0x3a>
 8008108:	2900      	cmp	r1, #0
 800810a:	f000 80b9 	beq.w	8008280 <_printf_i+0x19c>
 800810e:	2958      	cmp	r1, #88	; 0x58
 8008110:	f000 8083 	beq.w	800821a <_printf_i+0x136>
 8008114:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008118:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800811c:	e032      	b.n	8008184 <_printf_i+0xa0>
 800811e:	2964      	cmp	r1, #100	; 0x64
 8008120:	d001      	beq.n	8008126 <_printf_i+0x42>
 8008122:	2969      	cmp	r1, #105	; 0x69
 8008124:	d1f6      	bne.n	8008114 <_printf_i+0x30>
 8008126:	6820      	ldr	r0, [r4, #0]
 8008128:	6813      	ldr	r3, [r2, #0]
 800812a:	0605      	lsls	r5, r0, #24
 800812c:	f103 0104 	add.w	r1, r3, #4
 8008130:	d52a      	bpl.n	8008188 <_printf_i+0xa4>
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	6011      	str	r1, [r2, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	da03      	bge.n	8008142 <_printf_i+0x5e>
 800813a:	222d      	movs	r2, #45	; 0x2d
 800813c:	425b      	negs	r3, r3
 800813e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008142:	486f      	ldr	r0, [pc, #444]	; (8008300 <_printf_i+0x21c>)
 8008144:	220a      	movs	r2, #10
 8008146:	e039      	b.n	80081bc <_printf_i+0xd8>
 8008148:	2973      	cmp	r1, #115	; 0x73
 800814a:	f000 809d 	beq.w	8008288 <_printf_i+0x1a4>
 800814e:	d808      	bhi.n	8008162 <_printf_i+0x7e>
 8008150:	296f      	cmp	r1, #111	; 0x6f
 8008152:	d020      	beq.n	8008196 <_printf_i+0xb2>
 8008154:	2970      	cmp	r1, #112	; 0x70
 8008156:	d1dd      	bne.n	8008114 <_printf_i+0x30>
 8008158:	6823      	ldr	r3, [r4, #0]
 800815a:	f043 0320 	orr.w	r3, r3, #32
 800815e:	6023      	str	r3, [r4, #0]
 8008160:	e003      	b.n	800816a <_printf_i+0x86>
 8008162:	2975      	cmp	r1, #117	; 0x75
 8008164:	d017      	beq.n	8008196 <_printf_i+0xb2>
 8008166:	2978      	cmp	r1, #120	; 0x78
 8008168:	d1d4      	bne.n	8008114 <_printf_i+0x30>
 800816a:	2378      	movs	r3, #120	; 0x78
 800816c:	4865      	ldr	r0, [pc, #404]	; (8008304 <_printf_i+0x220>)
 800816e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008172:	e055      	b.n	8008220 <_printf_i+0x13c>
 8008174:	6813      	ldr	r3, [r2, #0]
 8008176:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800817a:	1d19      	adds	r1, r3, #4
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	6011      	str	r1, [r2, #0]
 8008180:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008184:	2301      	movs	r3, #1
 8008186:	e08c      	b.n	80082a2 <_printf_i+0x1be>
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800818e:	6011      	str	r1, [r2, #0]
 8008190:	bf18      	it	ne
 8008192:	b21b      	sxthne	r3, r3
 8008194:	e7cf      	b.n	8008136 <_printf_i+0x52>
 8008196:	6813      	ldr	r3, [r2, #0]
 8008198:	6825      	ldr	r5, [r4, #0]
 800819a:	1d18      	adds	r0, r3, #4
 800819c:	6010      	str	r0, [r2, #0]
 800819e:	0628      	lsls	r0, r5, #24
 80081a0:	d501      	bpl.n	80081a6 <_printf_i+0xc2>
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	e002      	b.n	80081ac <_printf_i+0xc8>
 80081a6:	0668      	lsls	r0, r5, #25
 80081a8:	d5fb      	bpl.n	80081a2 <_printf_i+0xbe>
 80081aa:	881b      	ldrh	r3, [r3, #0]
 80081ac:	296f      	cmp	r1, #111	; 0x6f
 80081ae:	bf14      	ite	ne
 80081b0:	220a      	movne	r2, #10
 80081b2:	2208      	moveq	r2, #8
 80081b4:	4852      	ldr	r0, [pc, #328]	; (8008300 <_printf_i+0x21c>)
 80081b6:	2100      	movs	r1, #0
 80081b8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80081bc:	6865      	ldr	r5, [r4, #4]
 80081be:	2d00      	cmp	r5, #0
 80081c0:	60a5      	str	r5, [r4, #8]
 80081c2:	f2c0 8095 	blt.w	80082f0 <_printf_i+0x20c>
 80081c6:	6821      	ldr	r1, [r4, #0]
 80081c8:	f021 0104 	bic.w	r1, r1, #4
 80081cc:	6021      	str	r1, [r4, #0]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d13d      	bne.n	800824e <_printf_i+0x16a>
 80081d2:	2d00      	cmp	r5, #0
 80081d4:	f040 808e 	bne.w	80082f4 <_printf_i+0x210>
 80081d8:	4665      	mov	r5, ip
 80081da:	2a08      	cmp	r2, #8
 80081dc:	d10b      	bne.n	80081f6 <_printf_i+0x112>
 80081de:	6823      	ldr	r3, [r4, #0]
 80081e0:	07db      	lsls	r3, r3, #31
 80081e2:	d508      	bpl.n	80081f6 <_printf_i+0x112>
 80081e4:	6923      	ldr	r3, [r4, #16]
 80081e6:	6862      	ldr	r2, [r4, #4]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	bfde      	ittt	le
 80081ec:	2330      	movle	r3, #48	; 0x30
 80081ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 80081f2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80081f6:	ebac 0305 	sub.w	r3, ip, r5
 80081fa:	6123      	str	r3, [r4, #16]
 80081fc:	f8cd 8000 	str.w	r8, [sp]
 8008200:	463b      	mov	r3, r7
 8008202:	aa03      	add	r2, sp, #12
 8008204:	4621      	mov	r1, r4
 8008206:	4630      	mov	r0, r6
 8008208:	f7ff fef6 	bl	8007ff8 <_printf_common>
 800820c:	3001      	adds	r0, #1
 800820e:	d14d      	bne.n	80082ac <_printf_i+0x1c8>
 8008210:	f04f 30ff 	mov.w	r0, #4294967295
 8008214:	b005      	add	sp, #20
 8008216:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800821a:	4839      	ldr	r0, [pc, #228]	; (8008300 <_printf_i+0x21c>)
 800821c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008220:	6813      	ldr	r3, [r2, #0]
 8008222:	6821      	ldr	r1, [r4, #0]
 8008224:	1d1d      	adds	r5, r3, #4
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	6015      	str	r5, [r2, #0]
 800822a:	060a      	lsls	r2, r1, #24
 800822c:	d50b      	bpl.n	8008246 <_printf_i+0x162>
 800822e:	07ca      	lsls	r2, r1, #31
 8008230:	bf44      	itt	mi
 8008232:	f041 0120 	orrmi.w	r1, r1, #32
 8008236:	6021      	strmi	r1, [r4, #0]
 8008238:	b91b      	cbnz	r3, 8008242 <_printf_i+0x15e>
 800823a:	6822      	ldr	r2, [r4, #0]
 800823c:	f022 0220 	bic.w	r2, r2, #32
 8008240:	6022      	str	r2, [r4, #0]
 8008242:	2210      	movs	r2, #16
 8008244:	e7b7      	b.n	80081b6 <_printf_i+0xd2>
 8008246:	064d      	lsls	r5, r1, #25
 8008248:	bf48      	it	mi
 800824a:	b29b      	uxthmi	r3, r3
 800824c:	e7ef      	b.n	800822e <_printf_i+0x14a>
 800824e:	4665      	mov	r5, ip
 8008250:	fbb3 f1f2 	udiv	r1, r3, r2
 8008254:	fb02 3311 	mls	r3, r2, r1, r3
 8008258:	5cc3      	ldrb	r3, [r0, r3]
 800825a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800825e:	460b      	mov	r3, r1
 8008260:	2900      	cmp	r1, #0
 8008262:	d1f5      	bne.n	8008250 <_printf_i+0x16c>
 8008264:	e7b9      	b.n	80081da <_printf_i+0xf6>
 8008266:	6813      	ldr	r3, [r2, #0]
 8008268:	6825      	ldr	r5, [r4, #0]
 800826a:	1d18      	adds	r0, r3, #4
 800826c:	6961      	ldr	r1, [r4, #20]
 800826e:	6010      	str	r0, [r2, #0]
 8008270:	0628      	lsls	r0, r5, #24
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	d501      	bpl.n	800827a <_printf_i+0x196>
 8008276:	6019      	str	r1, [r3, #0]
 8008278:	e002      	b.n	8008280 <_printf_i+0x19c>
 800827a:	066a      	lsls	r2, r5, #25
 800827c:	d5fb      	bpl.n	8008276 <_printf_i+0x192>
 800827e:	8019      	strh	r1, [r3, #0]
 8008280:	2300      	movs	r3, #0
 8008282:	4665      	mov	r5, ip
 8008284:	6123      	str	r3, [r4, #16]
 8008286:	e7b9      	b.n	80081fc <_printf_i+0x118>
 8008288:	6813      	ldr	r3, [r2, #0]
 800828a:	1d19      	adds	r1, r3, #4
 800828c:	6011      	str	r1, [r2, #0]
 800828e:	681d      	ldr	r5, [r3, #0]
 8008290:	6862      	ldr	r2, [r4, #4]
 8008292:	2100      	movs	r1, #0
 8008294:	4628      	mov	r0, r5
 8008296:	f000 fac9 	bl	800882c <memchr>
 800829a:	b108      	cbz	r0, 80082a0 <_printf_i+0x1bc>
 800829c:	1b40      	subs	r0, r0, r5
 800829e:	6060      	str	r0, [r4, #4]
 80082a0:	6863      	ldr	r3, [r4, #4]
 80082a2:	6123      	str	r3, [r4, #16]
 80082a4:	2300      	movs	r3, #0
 80082a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082aa:	e7a7      	b.n	80081fc <_printf_i+0x118>
 80082ac:	6923      	ldr	r3, [r4, #16]
 80082ae:	462a      	mov	r2, r5
 80082b0:	4639      	mov	r1, r7
 80082b2:	4630      	mov	r0, r6
 80082b4:	47c0      	blx	r8
 80082b6:	3001      	adds	r0, #1
 80082b8:	d0aa      	beq.n	8008210 <_printf_i+0x12c>
 80082ba:	6823      	ldr	r3, [r4, #0]
 80082bc:	079b      	lsls	r3, r3, #30
 80082be:	d413      	bmi.n	80082e8 <_printf_i+0x204>
 80082c0:	68e0      	ldr	r0, [r4, #12]
 80082c2:	9b03      	ldr	r3, [sp, #12]
 80082c4:	4298      	cmp	r0, r3
 80082c6:	bfb8      	it	lt
 80082c8:	4618      	movlt	r0, r3
 80082ca:	e7a3      	b.n	8008214 <_printf_i+0x130>
 80082cc:	2301      	movs	r3, #1
 80082ce:	464a      	mov	r2, r9
 80082d0:	4639      	mov	r1, r7
 80082d2:	4630      	mov	r0, r6
 80082d4:	47c0      	blx	r8
 80082d6:	3001      	adds	r0, #1
 80082d8:	d09a      	beq.n	8008210 <_printf_i+0x12c>
 80082da:	3501      	adds	r5, #1
 80082dc:	68e3      	ldr	r3, [r4, #12]
 80082de:	9a03      	ldr	r2, [sp, #12]
 80082e0:	1a9b      	subs	r3, r3, r2
 80082e2:	42ab      	cmp	r3, r5
 80082e4:	dcf2      	bgt.n	80082cc <_printf_i+0x1e8>
 80082e6:	e7eb      	b.n	80082c0 <_printf_i+0x1dc>
 80082e8:	2500      	movs	r5, #0
 80082ea:	f104 0919 	add.w	r9, r4, #25
 80082ee:	e7f5      	b.n	80082dc <_printf_i+0x1f8>
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d1ac      	bne.n	800824e <_printf_i+0x16a>
 80082f4:	7803      	ldrb	r3, [r0, #0]
 80082f6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80082fe:	e76c      	b.n	80081da <_printf_i+0xf6>
 8008300:	08008af5 	.word	0x08008af5
 8008304:	08008b06 	.word	0x08008b06

08008308 <_putc_r>:
 8008308:	b570      	push	{r4, r5, r6, lr}
 800830a:	460d      	mov	r5, r1
 800830c:	4614      	mov	r4, r2
 800830e:	4606      	mov	r6, r0
 8008310:	b118      	cbz	r0, 800831a <_putc_r+0x12>
 8008312:	6983      	ldr	r3, [r0, #24]
 8008314:	b90b      	cbnz	r3, 800831a <_putc_r+0x12>
 8008316:	f7ff fc4d 	bl	8007bb4 <__sinit>
 800831a:	4b13      	ldr	r3, [pc, #76]	; (8008368 <_putc_r+0x60>)
 800831c:	429c      	cmp	r4, r3
 800831e:	d112      	bne.n	8008346 <_putc_r+0x3e>
 8008320:	6874      	ldr	r4, [r6, #4]
 8008322:	68a3      	ldr	r3, [r4, #8]
 8008324:	3b01      	subs	r3, #1
 8008326:	2b00      	cmp	r3, #0
 8008328:	60a3      	str	r3, [r4, #8]
 800832a:	da16      	bge.n	800835a <_putc_r+0x52>
 800832c:	69a2      	ldr	r2, [r4, #24]
 800832e:	4293      	cmp	r3, r2
 8008330:	db02      	blt.n	8008338 <_putc_r+0x30>
 8008332:	b2eb      	uxtb	r3, r5
 8008334:	2b0a      	cmp	r3, #10
 8008336:	d110      	bne.n	800835a <_putc_r+0x52>
 8008338:	4622      	mov	r2, r4
 800833a:	4629      	mov	r1, r5
 800833c:	4630      	mov	r0, r6
 800833e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008342:	f000 b86b 	b.w	800841c <__swbuf_r>
 8008346:	4b09      	ldr	r3, [pc, #36]	; (800836c <_putc_r+0x64>)
 8008348:	429c      	cmp	r4, r3
 800834a:	d101      	bne.n	8008350 <_putc_r+0x48>
 800834c:	68b4      	ldr	r4, [r6, #8]
 800834e:	e7e8      	b.n	8008322 <_putc_r+0x1a>
 8008350:	4b07      	ldr	r3, [pc, #28]	; (8008370 <_putc_r+0x68>)
 8008352:	429c      	cmp	r4, r3
 8008354:	bf08      	it	eq
 8008356:	68f4      	ldreq	r4, [r6, #12]
 8008358:	e7e3      	b.n	8008322 <_putc_r+0x1a>
 800835a:	6823      	ldr	r3, [r4, #0]
 800835c:	b2e8      	uxtb	r0, r5
 800835e:	1c5a      	adds	r2, r3, #1
 8008360:	6022      	str	r2, [r4, #0]
 8008362:	701d      	strb	r5, [r3, #0]
 8008364:	bd70      	pop	{r4, r5, r6, pc}
 8008366:	bf00      	nop
 8008368:	08008aa4 	.word	0x08008aa4
 800836c:	08008ac4 	.word	0x08008ac4
 8008370:	08008a84 	.word	0x08008a84

08008374 <_sbrk_r>:
 8008374:	b538      	push	{r3, r4, r5, lr}
 8008376:	2300      	movs	r3, #0
 8008378:	4c05      	ldr	r4, [pc, #20]	; (8008390 <_sbrk_r+0x1c>)
 800837a:	4605      	mov	r5, r0
 800837c:	4608      	mov	r0, r1
 800837e:	6023      	str	r3, [r4, #0]
 8008380:	f000 fb0c 	bl	800899c <_sbrk>
 8008384:	1c43      	adds	r3, r0, #1
 8008386:	d102      	bne.n	800838e <_sbrk_r+0x1a>
 8008388:	6823      	ldr	r3, [r4, #0]
 800838a:	b103      	cbz	r3, 800838e <_sbrk_r+0x1a>
 800838c:	602b      	str	r3, [r5, #0]
 800838e:	bd38      	pop	{r3, r4, r5, pc}
 8008390:	20001710 	.word	0x20001710

08008394 <__sread>:
 8008394:	b510      	push	{r4, lr}
 8008396:	460c      	mov	r4, r1
 8008398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800839c:	f000 faa2 	bl	80088e4 <_read_r>
 80083a0:	2800      	cmp	r0, #0
 80083a2:	bfab      	itete	ge
 80083a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80083a6:	89a3      	ldrhlt	r3, [r4, #12]
 80083a8:	181b      	addge	r3, r3, r0
 80083aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80083ae:	bfac      	ite	ge
 80083b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80083b2:	81a3      	strhlt	r3, [r4, #12]
 80083b4:	bd10      	pop	{r4, pc}

080083b6 <__swrite>:
 80083b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083ba:	461f      	mov	r7, r3
 80083bc:	898b      	ldrh	r3, [r1, #12]
 80083be:	4605      	mov	r5, r0
 80083c0:	05db      	lsls	r3, r3, #23
 80083c2:	460c      	mov	r4, r1
 80083c4:	4616      	mov	r6, r2
 80083c6:	d505      	bpl.n	80083d4 <__swrite+0x1e>
 80083c8:	2302      	movs	r3, #2
 80083ca:	2200      	movs	r2, #0
 80083cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083d0:	f000 f9b6 	bl	8008740 <_lseek_r>
 80083d4:	89a3      	ldrh	r3, [r4, #12]
 80083d6:	4632      	mov	r2, r6
 80083d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80083dc:	81a3      	strh	r3, [r4, #12]
 80083de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083e2:	463b      	mov	r3, r7
 80083e4:	4628      	mov	r0, r5
 80083e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083ea:	f000 b869 	b.w	80084c0 <_write_r>

080083ee <__sseek>:
 80083ee:	b510      	push	{r4, lr}
 80083f0:	460c      	mov	r4, r1
 80083f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083f6:	f000 f9a3 	bl	8008740 <_lseek_r>
 80083fa:	1c43      	adds	r3, r0, #1
 80083fc:	89a3      	ldrh	r3, [r4, #12]
 80083fe:	bf15      	itete	ne
 8008400:	6560      	strne	r0, [r4, #84]	; 0x54
 8008402:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008406:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800840a:	81a3      	strheq	r3, [r4, #12]
 800840c:	bf18      	it	ne
 800840e:	81a3      	strhne	r3, [r4, #12]
 8008410:	bd10      	pop	{r4, pc}

08008412 <__sclose>:
 8008412:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008416:	f000 b8d3 	b.w	80085c0 <_close_r>
	...

0800841c <__swbuf_r>:
 800841c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800841e:	460e      	mov	r6, r1
 8008420:	4614      	mov	r4, r2
 8008422:	4605      	mov	r5, r0
 8008424:	b118      	cbz	r0, 800842e <__swbuf_r+0x12>
 8008426:	6983      	ldr	r3, [r0, #24]
 8008428:	b90b      	cbnz	r3, 800842e <__swbuf_r+0x12>
 800842a:	f7ff fbc3 	bl	8007bb4 <__sinit>
 800842e:	4b21      	ldr	r3, [pc, #132]	; (80084b4 <__swbuf_r+0x98>)
 8008430:	429c      	cmp	r4, r3
 8008432:	d12a      	bne.n	800848a <__swbuf_r+0x6e>
 8008434:	686c      	ldr	r4, [r5, #4]
 8008436:	69a3      	ldr	r3, [r4, #24]
 8008438:	60a3      	str	r3, [r4, #8]
 800843a:	89a3      	ldrh	r3, [r4, #12]
 800843c:	071a      	lsls	r2, r3, #28
 800843e:	d52e      	bpl.n	800849e <__swbuf_r+0x82>
 8008440:	6923      	ldr	r3, [r4, #16]
 8008442:	b363      	cbz	r3, 800849e <__swbuf_r+0x82>
 8008444:	6923      	ldr	r3, [r4, #16]
 8008446:	6820      	ldr	r0, [r4, #0]
 8008448:	b2f6      	uxtb	r6, r6
 800844a:	1ac0      	subs	r0, r0, r3
 800844c:	6963      	ldr	r3, [r4, #20]
 800844e:	4637      	mov	r7, r6
 8008450:	4283      	cmp	r3, r0
 8008452:	dc04      	bgt.n	800845e <__swbuf_r+0x42>
 8008454:	4621      	mov	r1, r4
 8008456:	4628      	mov	r0, r5
 8008458:	f000 f948 	bl	80086ec <_fflush_r>
 800845c:	bb28      	cbnz	r0, 80084aa <__swbuf_r+0x8e>
 800845e:	68a3      	ldr	r3, [r4, #8]
 8008460:	3001      	adds	r0, #1
 8008462:	3b01      	subs	r3, #1
 8008464:	60a3      	str	r3, [r4, #8]
 8008466:	6823      	ldr	r3, [r4, #0]
 8008468:	1c5a      	adds	r2, r3, #1
 800846a:	6022      	str	r2, [r4, #0]
 800846c:	701e      	strb	r6, [r3, #0]
 800846e:	6963      	ldr	r3, [r4, #20]
 8008470:	4283      	cmp	r3, r0
 8008472:	d004      	beq.n	800847e <__swbuf_r+0x62>
 8008474:	89a3      	ldrh	r3, [r4, #12]
 8008476:	07db      	lsls	r3, r3, #31
 8008478:	d519      	bpl.n	80084ae <__swbuf_r+0x92>
 800847a:	2e0a      	cmp	r6, #10
 800847c:	d117      	bne.n	80084ae <__swbuf_r+0x92>
 800847e:	4621      	mov	r1, r4
 8008480:	4628      	mov	r0, r5
 8008482:	f000 f933 	bl	80086ec <_fflush_r>
 8008486:	b190      	cbz	r0, 80084ae <__swbuf_r+0x92>
 8008488:	e00f      	b.n	80084aa <__swbuf_r+0x8e>
 800848a:	4b0b      	ldr	r3, [pc, #44]	; (80084b8 <__swbuf_r+0x9c>)
 800848c:	429c      	cmp	r4, r3
 800848e:	d101      	bne.n	8008494 <__swbuf_r+0x78>
 8008490:	68ac      	ldr	r4, [r5, #8]
 8008492:	e7d0      	b.n	8008436 <__swbuf_r+0x1a>
 8008494:	4b09      	ldr	r3, [pc, #36]	; (80084bc <__swbuf_r+0xa0>)
 8008496:	429c      	cmp	r4, r3
 8008498:	bf08      	it	eq
 800849a:	68ec      	ldreq	r4, [r5, #12]
 800849c:	e7cb      	b.n	8008436 <__swbuf_r+0x1a>
 800849e:	4621      	mov	r1, r4
 80084a0:	4628      	mov	r0, r5
 80084a2:	f000 f81f 	bl	80084e4 <__swsetup_r>
 80084a6:	2800      	cmp	r0, #0
 80084a8:	d0cc      	beq.n	8008444 <__swbuf_r+0x28>
 80084aa:	f04f 37ff 	mov.w	r7, #4294967295
 80084ae:	4638      	mov	r0, r7
 80084b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084b2:	bf00      	nop
 80084b4:	08008aa4 	.word	0x08008aa4
 80084b8:	08008ac4 	.word	0x08008ac4
 80084bc:	08008a84 	.word	0x08008a84

080084c0 <_write_r>:
 80084c0:	b538      	push	{r3, r4, r5, lr}
 80084c2:	4605      	mov	r5, r0
 80084c4:	4608      	mov	r0, r1
 80084c6:	4611      	mov	r1, r2
 80084c8:	2200      	movs	r2, #0
 80084ca:	4c05      	ldr	r4, [pc, #20]	; (80084e0 <_write_r+0x20>)
 80084cc:	6022      	str	r2, [r4, #0]
 80084ce:	461a      	mov	r2, r3
 80084d0:	f000 fa72 	bl	80089b8 <_write>
 80084d4:	1c43      	adds	r3, r0, #1
 80084d6:	d102      	bne.n	80084de <_write_r+0x1e>
 80084d8:	6823      	ldr	r3, [r4, #0]
 80084da:	b103      	cbz	r3, 80084de <_write_r+0x1e>
 80084dc:	602b      	str	r3, [r5, #0]
 80084de:	bd38      	pop	{r3, r4, r5, pc}
 80084e0:	20001710 	.word	0x20001710

080084e4 <__swsetup_r>:
 80084e4:	4b32      	ldr	r3, [pc, #200]	; (80085b0 <__swsetup_r+0xcc>)
 80084e6:	b570      	push	{r4, r5, r6, lr}
 80084e8:	681d      	ldr	r5, [r3, #0]
 80084ea:	4606      	mov	r6, r0
 80084ec:	460c      	mov	r4, r1
 80084ee:	b125      	cbz	r5, 80084fa <__swsetup_r+0x16>
 80084f0:	69ab      	ldr	r3, [r5, #24]
 80084f2:	b913      	cbnz	r3, 80084fa <__swsetup_r+0x16>
 80084f4:	4628      	mov	r0, r5
 80084f6:	f7ff fb5d 	bl	8007bb4 <__sinit>
 80084fa:	4b2e      	ldr	r3, [pc, #184]	; (80085b4 <__swsetup_r+0xd0>)
 80084fc:	429c      	cmp	r4, r3
 80084fe:	d10f      	bne.n	8008520 <__swsetup_r+0x3c>
 8008500:	686c      	ldr	r4, [r5, #4]
 8008502:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008506:	b29a      	uxth	r2, r3
 8008508:	0715      	lsls	r5, r2, #28
 800850a:	d42c      	bmi.n	8008566 <__swsetup_r+0x82>
 800850c:	06d0      	lsls	r0, r2, #27
 800850e:	d411      	bmi.n	8008534 <__swsetup_r+0x50>
 8008510:	2209      	movs	r2, #9
 8008512:	6032      	str	r2, [r6, #0]
 8008514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008518:	81a3      	strh	r3, [r4, #12]
 800851a:	f04f 30ff 	mov.w	r0, #4294967295
 800851e:	e03e      	b.n	800859e <__swsetup_r+0xba>
 8008520:	4b25      	ldr	r3, [pc, #148]	; (80085b8 <__swsetup_r+0xd4>)
 8008522:	429c      	cmp	r4, r3
 8008524:	d101      	bne.n	800852a <__swsetup_r+0x46>
 8008526:	68ac      	ldr	r4, [r5, #8]
 8008528:	e7eb      	b.n	8008502 <__swsetup_r+0x1e>
 800852a:	4b24      	ldr	r3, [pc, #144]	; (80085bc <__swsetup_r+0xd8>)
 800852c:	429c      	cmp	r4, r3
 800852e:	bf08      	it	eq
 8008530:	68ec      	ldreq	r4, [r5, #12]
 8008532:	e7e6      	b.n	8008502 <__swsetup_r+0x1e>
 8008534:	0751      	lsls	r1, r2, #29
 8008536:	d512      	bpl.n	800855e <__swsetup_r+0x7a>
 8008538:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800853a:	b141      	cbz	r1, 800854e <__swsetup_r+0x6a>
 800853c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008540:	4299      	cmp	r1, r3
 8008542:	d002      	beq.n	800854a <__swsetup_r+0x66>
 8008544:	4630      	mov	r0, r6
 8008546:	f000 f981 	bl	800884c <_free_r>
 800854a:	2300      	movs	r3, #0
 800854c:	6363      	str	r3, [r4, #52]	; 0x34
 800854e:	89a3      	ldrh	r3, [r4, #12]
 8008550:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008554:	81a3      	strh	r3, [r4, #12]
 8008556:	2300      	movs	r3, #0
 8008558:	6063      	str	r3, [r4, #4]
 800855a:	6923      	ldr	r3, [r4, #16]
 800855c:	6023      	str	r3, [r4, #0]
 800855e:	89a3      	ldrh	r3, [r4, #12]
 8008560:	f043 0308 	orr.w	r3, r3, #8
 8008564:	81a3      	strh	r3, [r4, #12]
 8008566:	6923      	ldr	r3, [r4, #16]
 8008568:	b94b      	cbnz	r3, 800857e <__swsetup_r+0x9a>
 800856a:	89a3      	ldrh	r3, [r4, #12]
 800856c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008570:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008574:	d003      	beq.n	800857e <__swsetup_r+0x9a>
 8008576:	4621      	mov	r1, r4
 8008578:	4630      	mov	r0, r6
 800857a:	f000 f917 	bl	80087ac <__smakebuf_r>
 800857e:	89a2      	ldrh	r2, [r4, #12]
 8008580:	f012 0301 	ands.w	r3, r2, #1
 8008584:	d00c      	beq.n	80085a0 <__swsetup_r+0xbc>
 8008586:	2300      	movs	r3, #0
 8008588:	60a3      	str	r3, [r4, #8]
 800858a:	6963      	ldr	r3, [r4, #20]
 800858c:	425b      	negs	r3, r3
 800858e:	61a3      	str	r3, [r4, #24]
 8008590:	6923      	ldr	r3, [r4, #16]
 8008592:	b953      	cbnz	r3, 80085aa <__swsetup_r+0xc6>
 8008594:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008598:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800859c:	d1ba      	bne.n	8008514 <__swsetup_r+0x30>
 800859e:	bd70      	pop	{r4, r5, r6, pc}
 80085a0:	0792      	lsls	r2, r2, #30
 80085a2:	bf58      	it	pl
 80085a4:	6963      	ldrpl	r3, [r4, #20]
 80085a6:	60a3      	str	r3, [r4, #8]
 80085a8:	e7f2      	b.n	8008590 <__swsetup_r+0xac>
 80085aa:	2000      	movs	r0, #0
 80085ac:	e7f7      	b.n	800859e <__swsetup_r+0xba>
 80085ae:	bf00      	nop
 80085b0:	2000017c 	.word	0x2000017c
 80085b4:	08008aa4 	.word	0x08008aa4
 80085b8:	08008ac4 	.word	0x08008ac4
 80085bc:	08008a84 	.word	0x08008a84

080085c0 <_close_r>:
 80085c0:	b538      	push	{r3, r4, r5, lr}
 80085c2:	2300      	movs	r3, #0
 80085c4:	4c05      	ldr	r4, [pc, #20]	; (80085dc <_close_r+0x1c>)
 80085c6:	4605      	mov	r5, r0
 80085c8:	4608      	mov	r0, r1
 80085ca:	6023      	str	r3, [r4, #0]
 80085cc:	f000 f9be 	bl	800894c <_close>
 80085d0:	1c43      	adds	r3, r0, #1
 80085d2:	d102      	bne.n	80085da <_close_r+0x1a>
 80085d4:	6823      	ldr	r3, [r4, #0]
 80085d6:	b103      	cbz	r3, 80085da <_close_r+0x1a>
 80085d8:	602b      	str	r3, [r5, #0]
 80085da:	bd38      	pop	{r3, r4, r5, pc}
 80085dc:	20001710 	.word	0x20001710

080085e0 <__sflush_r>:
 80085e0:	898a      	ldrh	r2, [r1, #12]
 80085e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085e6:	4605      	mov	r5, r0
 80085e8:	0710      	lsls	r0, r2, #28
 80085ea:	460c      	mov	r4, r1
 80085ec:	d458      	bmi.n	80086a0 <__sflush_r+0xc0>
 80085ee:	684b      	ldr	r3, [r1, #4]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	dc05      	bgt.n	8008600 <__sflush_r+0x20>
 80085f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	dc02      	bgt.n	8008600 <__sflush_r+0x20>
 80085fa:	2000      	movs	r0, #0
 80085fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008600:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008602:	2e00      	cmp	r6, #0
 8008604:	d0f9      	beq.n	80085fa <__sflush_r+0x1a>
 8008606:	2300      	movs	r3, #0
 8008608:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800860c:	682f      	ldr	r7, [r5, #0]
 800860e:	6a21      	ldr	r1, [r4, #32]
 8008610:	602b      	str	r3, [r5, #0]
 8008612:	d032      	beq.n	800867a <__sflush_r+0x9a>
 8008614:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008616:	89a3      	ldrh	r3, [r4, #12]
 8008618:	075a      	lsls	r2, r3, #29
 800861a:	d505      	bpl.n	8008628 <__sflush_r+0x48>
 800861c:	6863      	ldr	r3, [r4, #4]
 800861e:	1ac0      	subs	r0, r0, r3
 8008620:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008622:	b10b      	cbz	r3, 8008628 <__sflush_r+0x48>
 8008624:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008626:	1ac0      	subs	r0, r0, r3
 8008628:	2300      	movs	r3, #0
 800862a:	4602      	mov	r2, r0
 800862c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800862e:	6a21      	ldr	r1, [r4, #32]
 8008630:	4628      	mov	r0, r5
 8008632:	47b0      	blx	r6
 8008634:	1c43      	adds	r3, r0, #1
 8008636:	89a3      	ldrh	r3, [r4, #12]
 8008638:	d106      	bne.n	8008648 <__sflush_r+0x68>
 800863a:	6829      	ldr	r1, [r5, #0]
 800863c:	291d      	cmp	r1, #29
 800863e:	d848      	bhi.n	80086d2 <__sflush_r+0xf2>
 8008640:	4a29      	ldr	r2, [pc, #164]	; (80086e8 <__sflush_r+0x108>)
 8008642:	40ca      	lsrs	r2, r1
 8008644:	07d6      	lsls	r6, r2, #31
 8008646:	d544      	bpl.n	80086d2 <__sflush_r+0xf2>
 8008648:	2200      	movs	r2, #0
 800864a:	6062      	str	r2, [r4, #4]
 800864c:	6922      	ldr	r2, [r4, #16]
 800864e:	04d9      	lsls	r1, r3, #19
 8008650:	6022      	str	r2, [r4, #0]
 8008652:	d504      	bpl.n	800865e <__sflush_r+0x7e>
 8008654:	1c42      	adds	r2, r0, #1
 8008656:	d101      	bne.n	800865c <__sflush_r+0x7c>
 8008658:	682b      	ldr	r3, [r5, #0]
 800865a:	b903      	cbnz	r3, 800865e <__sflush_r+0x7e>
 800865c:	6560      	str	r0, [r4, #84]	; 0x54
 800865e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008660:	602f      	str	r7, [r5, #0]
 8008662:	2900      	cmp	r1, #0
 8008664:	d0c9      	beq.n	80085fa <__sflush_r+0x1a>
 8008666:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800866a:	4299      	cmp	r1, r3
 800866c:	d002      	beq.n	8008674 <__sflush_r+0x94>
 800866e:	4628      	mov	r0, r5
 8008670:	f000 f8ec 	bl	800884c <_free_r>
 8008674:	2000      	movs	r0, #0
 8008676:	6360      	str	r0, [r4, #52]	; 0x34
 8008678:	e7c0      	b.n	80085fc <__sflush_r+0x1c>
 800867a:	2301      	movs	r3, #1
 800867c:	4628      	mov	r0, r5
 800867e:	47b0      	blx	r6
 8008680:	1c41      	adds	r1, r0, #1
 8008682:	d1c8      	bne.n	8008616 <__sflush_r+0x36>
 8008684:	682b      	ldr	r3, [r5, #0]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d0c5      	beq.n	8008616 <__sflush_r+0x36>
 800868a:	2b1d      	cmp	r3, #29
 800868c:	d001      	beq.n	8008692 <__sflush_r+0xb2>
 800868e:	2b16      	cmp	r3, #22
 8008690:	d101      	bne.n	8008696 <__sflush_r+0xb6>
 8008692:	602f      	str	r7, [r5, #0]
 8008694:	e7b1      	b.n	80085fa <__sflush_r+0x1a>
 8008696:	89a3      	ldrh	r3, [r4, #12]
 8008698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800869c:	81a3      	strh	r3, [r4, #12]
 800869e:	e7ad      	b.n	80085fc <__sflush_r+0x1c>
 80086a0:	690f      	ldr	r7, [r1, #16]
 80086a2:	2f00      	cmp	r7, #0
 80086a4:	d0a9      	beq.n	80085fa <__sflush_r+0x1a>
 80086a6:	0793      	lsls	r3, r2, #30
 80086a8:	bf18      	it	ne
 80086aa:	2300      	movne	r3, #0
 80086ac:	680e      	ldr	r6, [r1, #0]
 80086ae:	bf08      	it	eq
 80086b0:	694b      	ldreq	r3, [r1, #20]
 80086b2:	eba6 0807 	sub.w	r8, r6, r7
 80086b6:	600f      	str	r7, [r1, #0]
 80086b8:	608b      	str	r3, [r1, #8]
 80086ba:	f1b8 0f00 	cmp.w	r8, #0
 80086be:	dd9c      	ble.n	80085fa <__sflush_r+0x1a>
 80086c0:	4643      	mov	r3, r8
 80086c2:	463a      	mov	r2, r7
 80086c4:	6a21      	ldr	r1, [r4, #32]
 80086c6:	4628      	mov	r0, r5
 80086c8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80086ca:	47b0      	blx	r6
 80086cc:	2800      	cmp	r0, #0
 80086ce:	dc06      	bgt.n	80086de <__sflush_r+0xfe>
 80086d0:	89a3      	ldrh	r3, [r4, #12]
 80086d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086d6:	81a3      	strh	r3, [r4, #12]
 80086d8:	f04f 30ff 	mov.w	r0, #4294967295
 80086dc:	e78e      	b.n	80085fc <__sflush_r+0x1c>
 80086de:	4407      	add	r7, r0
 80086e0:	eba8 0800 	sub.w	r8, r8, r0
 80086e4:	e7e9      	b.n	80086ba <__sflush_r+0xda>
 80086e6:	bf00      	nop
 80086e8:	20400001 	.word	0x20400001

080086ec <_fflush_r>:
 80086ec:	b538      	push	{r3, r4, r5, lr}
 80086ee:	690b      	ldr	r3, [r1, #16]
 80086f0:	4605      	mov	r5, r0
 80086f2:	460c      	mov	r4, r1
 80086f4:	b1db      	cbz	r3, 800872e <_fflush_r+0x42>
 80086f6:	b118      	cbz	r0, 8008700 <_fflush_r+0x14>
 80086f8:	6983      	ldr	r3, [r0, #24]
 80086fa:	b90b      	cbnz	r3, 8008700 <_fflush_r+0x14>
 80086fc:	f7ff fa5a 	bl	8007bb4 <__sinit>
 8008700:	4b0c      	ldr	r3, [pc, #48]	; (8008734 <_fflush_r+0x48>)
 8008702:	429c      	cmp	r4, r3
 8008704:	d109      	bne.n	800871a <_fflush_r+0x2e>
 8008706:	686c      	ldr	r4, [r5, #4]
 8008708:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800870c:	b17b      	cbz	r3, 800872e <_fflush_r+0x42>
 800870e:	4621      	mov	r1, r4
 8008710:	4628      	mov	r0, r5
 8008712:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008716:	f7ff bf63 	b.w	80085e0 <__sflush_r>
 800871a:	4b07      	ldr	r3, [pc, #28]	; (8008738 <_fflush_r+0x4c>)
 800871c:	429c      	cmp	r4, r3
 800871e:	d101      	bne.n	8008724 <_fflush_r+0x38>
 8008720:	68ac      	ldr	r4, [r5, #8]
 8008722:	e7f1      	b.n	8008708 <_fflush_r+0x1c>
 8008724:	4b05      	ldr	r3, [pc, #20]	; (800873c <_fflush_r+0x50>)
 8008726:	429c      	cmp	r4, r3
 8008728:	bf08      	it	eq
 800872a:	68ec      	ldreq	r4, [r5, #12]
 800872c:	e7ec      	b.n	8008708 <_fflush_r+0x1c>
 800872e:	2000      	movs	r0, #0
 8008730:	bd38      	pop	{r3, r4, r5, pc}
 8008732:	bf00      	nop
 8008734:	08008aa4 	.word	0x08008aa4
 8008738:	08008ac4 	.word	0x08008ac4
 800873c:	08008a84 	.word	0x08008a84

08008740 <_lseek_r>:
 8008740:	b538      	push	{r3, r4, r5, lr}
 8008742:	4605      	mov	r5, r0
 8008744:	4608      	mov	r0, r1
 8008746:	4611      	mov	r1, r2
 8008748:	2200      	movs	r2, #0
 800874a:	4c05      	ldr	r4, [pc, #20]	; (8008760 <_lseek_r+0x20>)
 800874c:	6022      	str	r2, [r4, #0]
 800874e:	461a      	mov	r2, r3
 8008750:	f000 f914 	bl	800897c <_lseek>
 8008754:	1c43      	adds	r3, r0, #1
 8008756:	d102      	bne.n	800875e <_lseek_r+0x1e>
 8008758:	6823      	ldr	r3, [r4, #0]
 800875a:	b103      	cbz	r3, 800875e <_lseek_r+0x1e>
 800875c:	602b      	str	r3, [r5, #0]
 800875e:	bd38      	pop	{r3, r4, r5, pc}
 8008760:	20001710 	.word	0x20001710

08008764 <__swhatbuf_r>:
 8008764:	b570      	push	{r4, r5, r6, lr}
 8008766:	460e      	mov	r6, r1
 8008768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800876c:	b096      	sub	sp, #88	; 0x58
 800876e:	2900      	cmp	r1, #0
 8008770:	4614      	mov	r4, r2
 8008772:	461d      	mov	r5, r3
 8008774:	da07      	bge.n	8008786 <__swhatbuf_r+0x22>
 8008776:	2300      	movs	r3, #0
 8008778:	602b      	str	r3, [r5, #0]
 800877a:	89b3      	ldrh	r3, [r6, #12]
 800877c:	061a      	lsls	r2, r3, #24
 800877e:	d410      	bmi.n	80087a2 <__swhatbuf_r+0x3e>
 8008780:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008784:	e00e      	b.n	80087a4 <__swhatbuf_r+0x40>
 8008786:	466a      	mov	r2, sp
 8008788:	f000 f8be 	bl	8008908 <_fstat_r>
 800878c:	2800      	cmp	r0, #0
 800878e:	dbf2      	blt.n	8008776 <__swhatbuf_r+0x12>
 8008790:	9a01      	ldr	r2, [sp, #4]
 8008792:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008796:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800879a:	425a      	negs	r2, r3
 800879c:	415a      	adcs	r2, r3
 800879e:	602a      	str	r2, [r5, #0]
 80087a0:	e7ee      	b.n	8008780 <__swhatbuf_r+0x1c>
 80087a2:	2340      	movs	r3, #64	; 0x40
 80087a4:	2000      	movs	r0, #0
 80087a6:	6023      	str	r3, [r4, #0]
 80087a8:	b016      	add	sp, #88	; 0x58
 80087aa:	bd70      	pop	{r4, r5, r6, pc}

080087ac <__smakebuf_r>:
 80087ac:	898b      	ldrh	r3, [r1, #12]
 80087ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80087b0:	079d      	lsls	r5, r3, #30
 80087b2:	4606      	mov	r6, r0
 80087b4:	460c      	mov	r4, r1
 80087b6:	d507      	bpl.n	80087c8 <__smakebuf_r+0x1c>
 80087b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80087bc:	6023      	str	r3, [r4, #0]
 80087be:	6123      	str	r3, [r4, #16]
 80087c0:	2301      	movs	r3, #1
 80087c2:	6163      	str	r3, [r4, #20]
 80087c4:	b002      	add	sp, #8
 80087c6:	bd70      	pop	{r4, r5, r6, pc}
 80087c8:	ab01      	add	r3, sp, #4
 80087ca:	466a      	mov	r2, sp
 80087cc:	f7ff ffca 	bl	8008764 <__swhatbuf_r>
 80087d0:	9900      	ldr	r1, [sp, #0]
 80087d2:	4605      	mov	r5, r0
 80087d4:	4630      	mov	r0, r6
 80087d6:	f7ff fa77 	bl	8007cc8 <_malloc_r>
 80087da:	b948      	cbnz	r0, 80087f0 <__smakebuf_r+0x44>
 80087dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087e0:	059a      	lsls	r2, r3, #22
 80087e2:	d4ef      	bmi.n	80087c4 <__smakebuf_r+0x18>
 80087e4:	f023 0303 	bic.w	r3, r3, #3
 80087e8:	f043 0302 	orr.w	r3, r3, #2
 80087ec:	81a3      	strh	r3, [r4, #12]
 80087ee:	e7e3      	b.n	80087b8 <__smakebuf_r+0xc>
 80087f0:	4b0d      	ldr	r3, [pc, #52]	; (8008828 <__smakebuf_r+0x7c>)
 80087f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80087f4:	89a3      	ldrh	r3, [r4, #12]
 80087f6:	6020      	str	r0, [r4, #0]
 80087f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087fc:	81a3      	strh	r3, [r4, #12]
 80087fe:	9b00      	ldr	r3, [sp, #0]
 8008800:	6120      	str	r0, [r4, #16]
 8008802:	6163      	str	r3, [r4, #20]
 8008804:	9b01      	ldr	r3, [sp, #4]
 8008806:	b15b      	cbz	r3, 8008820 <__smakebuf_r+0x74>
 8008808:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800880c:	4630      	mov	r0, r6
 800880e:	f000 f88d 	bl	800892c <_isatty_r>
 8008812:	b128      	cbz	r0, 8008820 <__smakebuf_r+0x74>
 8008814:	89a3      	ldrh	r3, [r4, #12]
 8008816:	f023 0303 	bic.w	r3, r3, #3
 800881a:	f043 0301 	orr.w	r3, r3, #1
 800881e:	81a3      	strh	r3, [r4, #12]
 8008820:	89a3      	ldrh	r3, [r4, #12]
 8008822:	431d      	orrs	r5, r3
 8008824:	81a5      	strh	r5, [r4, #12]
 8008826:	e7cd      	b.n	80087c4 <__smakebuf_r+0x18>
 8008828:	08007b7d 	.word	0x08007b7d

0800882c <memchr>:
 800882c:	b510      	push	{r4, lr}
 800882e:	b2c9      	uxtb	r1, r1
 8008830:	4402      	add	r2, r0
 8008832:	4290      	cmp	r0, r2
 8008834:	4603      	mov	r3, r0
 8008836:	d101      	bne.n	800883c <memchr+0x10>
 8008838:	2300      	movs	r3, #0
 800883a:	e003      	b.n	8008844 <memchr+0x18>
 800883c:	781c      	ldrb	r4, [r3, #0]
 800883e:	3001      	adds	r0, #1
 8008840:	428c      	cmp	r4, r1
 8008842:	d1f6      	bne.n	8008832 <memchr+0x6>
 8008844:	4618      	mov	r0, r3
 8008846:	bd10      	pop	{r4, pc}

08008848 <__malloc_lock>:
 8008848:	4770      	bx	lr

0800884a <__malloc_unlock>:
 800884a:	4770      	bx	lr

0800884c <_free_r>:
 800884c:	b538      	push	{r3, r4, r5, lr}
 800884e:	4605      	mov	r5, r0
 8008850:	2900      	cmp	r1, #0
 8008852:	d043      	beq.n	80088dc <_free_r+0x90>
 8008854:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008858:	1f0c      	subs	r4, r1, #4
 800885a:	2b00      	cmp	r3, #0
 800885c:	bfb8      	it	lt
 800885e:	18e4      	addlt	r4, r4, r3
 8008860:	f7ff fff2 	bl	8008848 <__malloc_lock>
 8008864:	4a1e      	ldr	r2, [pc, #120]	; (80088e0 <_free_r+0x94>)
 8008866:	6813      	ldr	r3, [r2, #0]
 8008868:	4610      	mov	r0, r2
 800886a:	b933      	cbnz	r3, 800887a <_free_r+0x2e>
 800886c:	6063      	str	r3, [r4, #4]
 800886e:	6014      	str	r4, [r2, #0]
 8008870:	4628      	mov	r0, r5
 8008872:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008876:	f7ff bfe8 	b.w	800884a <__malloc_unlock>
 800887a:	42a3      	cmp	r3, r4
 800887c:	d90b      	bls.n	8008896 <_free_r+0x4a>
 800887e:	6821      	ldr	r1, [r4, #0]
 8008880:	1862      	adds	r2, r4, r1
 8008882:	4293      	cmp	r3, r2
 8008884:	bf01      	itttt	eq
 8008886:	681a      	ldreq	r2, [r3, #0]
 8008888:	685b      	ldreq	r3, [r3, #4]
 800888a:	1852      	addeq	r2, r2, r1
 800888c:	6022      	streq	r2, [r4, #0]
 800888e:	6063      	str	r3, [r4, #4]
 8008890:	6004      	str	r4, [r0, #0]
 8008892:	e7ed      	b.n	8008870 <_free_r+0x24>
 8008894:	4613      	mov	r3, r2
 8008896:	685a      	ldr	r2, [r3, #4]
 8008898:	b10a      	cbz	r2, 800889e <_free_r+0x52>
 800889a:	42a2      	cmp	r2, r4
 800889c:	d9fa      	bls.n	8008894 <_free_r+0x48>
 800889e:	6819      	ldr	r1, [r3, #0]
 80088a0:	1858      	adds	r0, r3, r1
 80088a2:	42a0      	cmp	r0, r4
 80088a4:	d10b      	bne.n	80088be <_free_r+0x72>
 80088a6:	6820      	ldr	r0, [r4, #0]
 80088a8:	4401      	add	r1, r0
 80088aa:	1858      	adds	r0, r3, r1
 80088ac:	4282      	cmp	r2, r0
 80088ae:	6019      	str	r1, [r3, #0]
 80088b0:	d1de      	bne.n	8008870 <_free_r+0x24>
 80088b2:	6810      	ldr	r0, [r2, #0]
 80088b4:	6852      	ldr	r2, [r2, #4]
 80088b6:	4401      	add	r1, r0
 80088b8:	6019      	str	r1, [r3, #0]
 80088ba:	605a      	str	r2, [r3, #4]
 80088bc:	e7d8      	b.n	8008870 <_free_r+0x24>
 80088be:	d902      	bls.n	80088c6 <_free_r+0x7a>
 80088c0:	230c      	movs	r3, #12
 80088c2:	602b      	str	r3, [r5, #0]
 80088c4:	e7d4      	b.n	8008870 <_free_r+0x24>
 80088c6:	6820      	ldr	r0, [r4, #0]
 80088c8:	1821      	adds	r1, r4, r0
 80088ca:	428a      	cmp	r2, r1
 80088cc:	bf01      	itttt	eq
 80088ce:	6811      	ldreq	r1, [r2, #0]
 80088d0:	6852      	ldreq	r2, [r2, #4]
 80088d2:	1809      	addeq	r1, r1, r0
 80088d4:	6021      	streq	r1, [r4, #0]
 80088d6:	6062      	str	r2, [r4, #4]
 80088d8:	605c      	str	r4, [r3, #4]
 80088da:	e7c9      	b.n	8008870 <_free_r+0x24>
 80088dc:	bd38      	pop	{r3, r4, r5, pc}
 80088de:	bf00      	nop
 80088e0:	200006f0 	.word	0x200006f0

080088e4 <_read_r>:
 80088e4:	b538      	push	{r3, r4, r5, lr}
 80088e6:	4605      	mov	r5, r0
 80088e8:	4608      	mov	r0, r1
 80088ea:	4611      	mov	r1, r2
 80088ec:	2200      	movs	r2, #0
 80088ee:	4c05      	ldr	r4, [pc, #20]	; (8008904 <_read_r+0x20>)
 80088f0:	6022      	str	r2, [r4, #0]
 80088f2:	461a      	mov	r2, r3
 80088f4:	f000 f84a 	bl	800898c <_read>
 80088f8:	1c43      	adds	r3, r0, #1
 80088fa:	d102      	bne.n	8008902 <_read_r+0x1e>
 80088fc:	6823      	ldr	r3, [r4, #0]
 80088fe:	b103      	cbz	r3, 8008902 <_read_r+0x1e>
 8008900:	602b      	str	r3, [r5, #0]
 8008902:	bd38      	pop	{r3, r4, r5, pc}
 8008904:	20001710 	.word	0x20001710

08008908 <_fstat_r>:
 8008908:	b538      	push	{r3, r4, r5, lr}
 800890a:	2300      	movs	r3, #0
 800890c:	4c06      	ldr	r4, [pc, #24]	; (8008928 <_fstat_r+0x20>)
 800890e:	4605      	mov	r5, r0
 8008910:	4608      	mov	r0, r1
 8008912:	4611      	mov	r1, r2
 8008914:	6023      	str	r3, [r4, #0]
 8008916:	f000 f821 	bl	800895c <_fstat>
 800891a:	1c43      	adds	r3, r0, #1
 800891c:	d102      	bne.n	8008924 <_fstat_r+0x1c>
 800891e:	6823      	ldr	r3, [r4, #0]
 8008920:	b103      	cbz	r3, 8008924 <_fstat_r+0x1c>
 8008922:	602b      	str	r3, [r5, #0]
 8008924:	bd38      	pop	{r3, r4, r5, pc}
 8008926:	bf00      	nop
 8008928:	20001710 	.word	0x20001710

0800892c <_isatty_r>:
 800892c:	b538      	push	{r3, r4, r5, lr}
 800892e:	2300      	movs	r3, #0
 8008930:	4c05      	ldr	r4, [pc, #20]	; (8008948 <_isatty_r+0x1c>)
 8008932:	4605      	mov	r5, r0
 8008934:	4608      	mov	r0, r1
 8008936:	6023      	str	r3, [r4, #0]
 8008938:	f000 f818 	bl	800896c <_isatty>
 800893c:	1c43      	adds	r3, r0, #1
 800893e:	d102      	bne.n	8008946 <_isatty_r+0x1a>
 8008940:	6823      	ldr	r3, [r4, #0]
 8008942:	b103      	cbz	r3, 8008946 <_isatty_r+0x1a>
 8008944:	602b      	str	r3, [r5, #0]
 8008946:	bd38      	pop	{r3, r4, r5, pc}
 8008948:	20001710 	.word	0x20001710

0800894c <_close>:
 800894c:	2258      	movs	r2, #88	; 0x58
 800894e:	4b02      	ldr	r3, [pc, #8]	; (8008958 <_close+0xc>)
 8008950:	f04f 30ff 	mov.w	r0, #4294967295
 8008954:	601a      	str	r2, [r3, #0]
 8008956:	4770      	bx	lr
 8008958:	20001710 	.word	0x20001710

0800895c <_fstat>:
 800895c:	2258      	movs	r2, #88	; 0x58
 800895e:	4b02      	ldr	r3, [pc, #8]	; (8008968 <_fstat+0xc>)
 8008960:	f04f 30ff 	mov.w	r0, #4294967295
 8008964:	601a      	str	r2, [r3, #0]
 8008966:	4770      	bx	lr
 8008968:	20001710 	.word	0x20001710

0800896c <_isatty>:
 800896c:	2258      	movs	r2, #88	; 0x58
 800896e:	4b02      	ldr	r3, [pc, #8]	; (8008978 <_isatty+0xc>)
 8008970:	2000      	movs	r0, #0
 8008972:	601a      	str	r2, [r3, #0]
 8008974:	4770      	bx	lr
 8008976:	bf00      	nop
 8008978:	20001710 	.word	0x20001710

0800897c <_lseek>:
 800897c:	2258      	movs	r2, #88	; 0x58
 800897e:	4b02      	ldr	r3, [pc, #8]	; (8008988 <_lseek+0xc>)
 8008980:	f04f 30ff 	mov.w	r0, #4294967295
 8008984:	601a      	str	r2, [r3, #0]
 8008986:	4770      	bx	lr
 8008988:	20001710 	.word	0x20001710

0800898c <_read>:
 800898c:	2258      	movs	r2, #88	; 0x58
 800898e:	4b02      	ldr	r3, [pc, #8]	; (8008998 <_read+0xc>)
 8008990:	f04f 30ff 	mov.w	r0, #4294967295
 8008994:	601a      	str	r2, [r3, #0]
 8008996:	4770      	bx	lr
 8008998:	20001710 	.word	0x20001710

0800899c <_sbrk>:
 800899c:	4b04      	ldr	r3, [pc, #16]	; (80089b0 <_sbrk+0x14>)
 800899e:	4602      	mov	r2, r0
 80089a0:	6819      	ldr	r1, [r3, #0]
 80089a2:	b909      	cbnz	r1, 80089a8 <_sbrk+0xc>
 80089a4:	4903      	ldr	r1, [pc, #12]	; (80089b4 <_sbrk+0x18>)
 80089a6:	6019      	str	r1, [r3, #0]
 80089a8:	6818      	ldr	r0, [r3, #0]
 80089aa:	4402      	add	r2, r0
 80089ac:	601a      	str	r2, [r3, #0]
 80089ae:	4770      	bx	lr
 80089b0:	200006f8 	.word	0x200006f8
 80089b4:	20001718 	.word	0x20001718

080089b8 <_write>:
 80089b8:	2258      	movs	r2, #88	; 0x58
 80089ba:	4b02      	ldr	r3, [pc, #8]	; (80089c4 <_write+0xc>)
 80089bc:	f04f 30ff 	mov.w	r0, #4294967295
 80089c0:	601a      	str	r2, [r3, #0]
 80089c2:	4770      	bx	lr
 80089c4:	20001710 	.word	0x20001710

080089c8 <_init>:
 80089c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ca:	bf00      	nop
 80089cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ce:	bc08      	pop	{r3}
 80089d0:	469e      	mov	lr, r3
 80089d2:	4770      	bx	lr

080089d4 <_fini>:
 80089d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089d6:	bf00      	nop
 80089d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089da:	bc08      	pop	{r3}
 80089dc:	469e      	mov	lr, r3
 80089de:	4770      	bx	lr


iSTM32DDSLite.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008888  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08008994  08008994  00018994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ad0  08008ad0  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  08008ad0  08008ad0  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008ad0  08008ad0  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ad0  08008ad0  00018ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ad4  08008ad4  00018ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08008ad8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001530  200001f0  08008cc8  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001720  08008cc8  00021720  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015ce1  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030e2  00000000  00000000  00035efa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001060  00000000  00000000  00038fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ee8  00000000  00000000  0003a040  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001acd0  00000000  00000000  0003af28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000101e3  00000000  00000000  00055bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d3de  00000000  00000000  00065ddb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f31b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b38  00000000  00000000  000f3234  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         0000009c  00000000  00000000  000f7d6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000014d  00000000  00000000  000f7e08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001f0 	.word	0x200001f0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800897c 	.word	0x0800897c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001f4 	.word	0x200001f4
 8000148:	0800897c 	.word	0x0800897c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000152:	f000 fb67 	bl	8000824 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f833 	bl	80001c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f95b 	bl	8000414 <MX_GPIO_Init>
  MX_TIM1_Init();
 800015e:	f000 f889 	bl	8000274 <MX_TIM1_Init>
  MX_DMA_Init();
 8000162:	f000 f8e7 	bl	8000334 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000166:	f006 ff7f 	bl	8007068 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  /*Square wave generation and put it into aOutputWave */
  for (int i = 0; i < BUFFER_SIZE; ++i)
 800016a:	2300      	movs	r3, #0
 800016c:	607b      	str	r3, [r7, #4]
 800016e:	e011      	b.n	8000194 <main+0x48>
  {
	  if (i < BUFFER_SIZE/2) aOutputWave[i]=0;
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	2bb3      	cmp	r3, #179	; 0xb3
 8000174:	dc05      	bgt.n	8000182 <main+0x36>
 8000176:	4a10      	ldr	r2, [pc, #64]	; (80001b8 <main+0x6c>)
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2100      	movs	r1, #0
 800017c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000180:	e005      	b.n	800018e <main+0x42>
	  else aOutputWave[i]=0xFFFF;
 8000182:	4a0d      	ldr	r2, [pc, #52]	; (80001b8 <main+0x6c>)
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800018a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0; i < BUFFER_SIZE; ++i)
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	3301      	adds	r3, #1
 8000192:	607b      	str	r3, [r7, #4]
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800019a:	dbe9      	blt.n	8000170 <main+0x24>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800019c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001a0:	4806      	ldr	r0, [pc, #24]	; (80001bc <main+0x70>)
 80001a2:	f001 f879 	bl	8001298 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80001a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001aa:	f000 fb9d 	bl	80008e8 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_Delay(1000);
 80001ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001b2:	f000 fb99 	bl	80008e8 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80001b6:	e7f1      	b.n	800019c <main+0x50>
 80001b8:	20000210 	.word	0x20000210
 80001bc:	40011000 	.word	0x40011000

080001c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b094      	sub	sp, #80	; 0x50
 80001c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001ca:	2228      	movs	r2, #40	; 0x28
 80001cc:	2100      	movs	r1, #0
 80001ce:	4618      	mov	r0, r3
 80001d0:	f007 fc56 	bl	8007a80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d4:	f107 0314 	add.w	r3, r7, #20
 80001d8:	2200      	movs	r2, #0
 80001da:	601a      	str	r2, [r3, #0]
 80001dc:	605a      	str	r2, [r3, #4]
 80001de:	609a      	str	r2, [r3, #8]
 80001e0:	60da      	str	r2, [r3, #12]
 80001e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001e4:	1d3b      	adds	r3, r7, #4
 80001e6:	2200      	movs	r2, #0
 80001e8:	601a      	str	r2, [r3, #0]
 80001ea:	605a      	str	r2, [r3, #4]
 80001ec:	609a      	str	r2, [r3, #8]
 80001ee:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001f0:	2301      	movs	r3, #1
 80001f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001fa:	2300      	movs	r3, #0
 80001fc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001fe:	2301      	movs	r3, #1
 8000200:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000202:	2302      	movs	r3, #2
 8000204:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000206:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800020a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800020c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000210:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000212:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000216:	4618      	mov	r0, r3
 8000218:	f002 fbfe 	bl	8002a18 <HAL_RCC_OscConfig>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d001      	beq.n	8000226 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000222:	f000 fa03 	bl	800062c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000226:	230f      	movs	r3, #15
 8000228:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800022a:	2302      	movs	r3, #2
 800022c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800022e:	2300      	movs	r3, #0
 8000230:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000232:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000236:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000238:	2300      	movs	r3, #0
 800023a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800023c:	f107 0314 	add.w	r3, r7, #20
 8000240:	2102      	movs	r1, #2
 8000242:	4618      	mov	r0, r3
 8000244:	f002 fe68 	bl	8002f18 <HAL_RCC_ClockConfig>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800024e:	f000 f9ed 	bl	800062c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000252:	2310      	movs	r3, #16
 8000254:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000256:	2300      	movs	r3, #0
 8000258:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	4618      	mov	r0, r3
 800025e:	f002 ffc5 	bl	80031ec <HAL_RCCEx_PeriphCLKConfig>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000268:	f000 f9e0 	bl	800062c <Error_Handler>
  }
}
 800026c:	bf00      	nop
 800026e:	3750      	adds	r7, #80	; 0x50
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}

08000274 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b088      	sub	sp, #32
 8000278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800027a:	f107 0310 	add.w	r3, r7, #16
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
 8000282:	605a      	str	r2, [r3, #4]
 8000284:	609a      	str	r2, [r3, #8]
 8000286:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000288:	f107 0308 	add.w	r3, r7, #8
 800028c:	2200      	movs	r2, #0
 800028e:	601a      	str	r2, [r3, #0]
 8000290:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */
	__HAL_RCC_TIM1_CLK_ENABLE();
 8000292:	4b25      	ldr	r3, [pc, #148]	; (8000328 <MX_TIM1_Init+0xb4>)
 8000294:	699b      	ldr	r3, [r3, #24]
 8000296:	4a24      	ldr	r2, [pc, #144]	; (8000328 <MX_TIM1_Init+0xb4>)
 8000298:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800029c:	6193      	str	r3, [r2, #24]
 800029e:	4b22      	ldr	r3, [pc, #136]	; (8000328 <MX_TIM1_Init+0xb4>)
 80002a0:	699b      	ldr	r3, [r3, #24]
 80002a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002a6:	607b      	str	r3, [r7, #4]
 80002a8:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002aa:	4b20      	ldr	r3, [pc, #128]	; (800032c <MX_TIM1_Init+0xb8>)
 80002ac:	4a20      	ldr	r2, [pc, #128]	; (8000330 <MX_TIM1_Init+0xbc>)
 80002ae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0; // 1000;
 80002b0:	4b1e      	ldr	r3, [pc, #120]	; (800032c <MX_TIM1_Init+0xb8>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002b6:	4b1d      	ldr	r3, [pc, #116]	; (800032c <MX_TIM1_Init+0xb8>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7; //65535;
 80002bc:	4b1b      	ldr	r3, [pc, #108]	; (800032c <MX_TIM1_Init+0xb8>)
 80002be:	2207      	movs	r2, #7
 80002c0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002c2:	4b1a      	ldr	r3, [pc, #104]	; (800032c <MX_TIM1_Init+0xb8>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80002c8:	4b18      	ldr	r3, [pc, #96]	; (800032c <MX_TIM1_Init+0xb8>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002ce:	4b17      	ldr	r3, [pc, #92]	; (800032c <MX_TIM1_Init+0xb8>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80002d4:	4815      	ldr	r0, [pc, #84]	; (800032c <MX_TIM1_Init+0xb8>)
 80002d6:	f003 f83f 	bl	8003358 <HAL_TIM_Base_Init>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 80002e0:	f000 f9a4 	bl	800062c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80002ea:	f107 0310 	add.w	r3, r7, #16
 80002ee:	4619      	mov	r1, r3
 80002f0:	480e      	ldr	r0, [pc, #56]	; (800032c <MX_TIM1_Init+0xb8>)
 80002f2:	f003 f880 	bl	80033f6 <HAL_TIM_ConfigClockSource>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 80002fc:	f000 f996 	bl	800062c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000300:	2300      	movs	r3, #0
 8000302:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000304:	2300      	movs	r3, #0
 8000306:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000308:	f107 0308 	add.w	r3, r7, #8
 800030c:	4619      	mov	r1, r3
 800030e:	4807      	ldr	r0, [pc, #28]	; (800032c <MX_TIM1_Init+0xb8>)
 8000310:	f003 fa20 	bl	8003754 <HAL_TIMEx_MasterConfigSynchronization>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 800031a:	f000 f987 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800031e:	bf00      	nop
 8000320:	3720      	adds	r7, #32
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	40021000 	.word	0x40021000
 800032c:	2000070c 	.word	0x2000070c
 8000330:	40012c00 	.word	0x40012c00

08000334 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800033a:	4b2e      	ldr	r3, [pc, #184]	; (80003f4 <MX_DMA_Init+0xc0>)
 800033c:	695b      	ldr	r3, [r3, #20]
 800033e:	4a2d      	ldr	r2, [pc, #180]	; (80003f4 <MX_DMA_Init+0xc0>)
 8000340:	f043 0301 	orr.w	r3, r3, #1
 8000344:	6153      	str	r3, [r2, #20]
 8000346:	4b2b      	ldr	r3, [pc, #172]	; (80003f4 <MX_DMA_Init+0xc0>)
 8000348:	695b      	ldr	r3, [r3, #20]
 800034a:	f003 0301 	and.w	r3, r3, #1
 800034e:	607b      	str	r3, [r7, #4]
 8000350:	687b      	ldr	r3, [r7, #4]
  /* DMA configuration */
  hdma_tim1_up.Instance = DMA1_Channel5;
 8000352:	4b29      	ldr	r3, [pc, #164]	; (80003f8 <MX_DMA_Init+0xc4>)
 8000354:	4a29      	ldr	r2, [pc, #164]	; (80003fc <MX_DMA_Init+0xc8>)
 8000356:	601a      	str	r2, [r3, #0]
  hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000358:	4b27      	ldr	r3, [pc, #156]	; (80003f8 <MX_DMA_Init+0xc4>)
 800035a:	2210      	movs	r2, #16
 800035c:	605a      	str	r2, [r3, #4]
  hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800035e:	4b26      	ldr	r3, [pc, #152]	; (80003f8 <MX_DMA_Init+0xc4>)
 8000360:	2200      	movs	r2, #0
 8000362:	609a      	str	r2, [r3, #8]
  hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8000364:	4b24      	ldr	r3, [pc, #144]	; (80003f8 <MX_DMA_Init+0xc4>)
 8000366:	2280      	movs	r2, #128	; 0x80
 8000368:	60da      	str	r2, [r3, #12]
  hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD; // 16 bits
 800036a:	4b23      	ldr	r3, [pc, #140]	; (80003f8 <MX_DMA_Init+0xc4>)
 800036c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000370:	611a      	str	r2, [r3, #16]
  hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000372:	4b21      	ldr	r3, [pc, #132]	; (80003f8 <MX_DMA_Init+0xc4>)
 8000374:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000378:	615a      	str	r2, [r3, #20]
  hdma_tim1_up.Init.Mode = DMA_CIRCULAR;//DMA_NORMAL;
 800037a:	4b1f      	ldr	r3, [pc, #124]	; (80003f8 <MX_DMA_Init+0xc4>)
 800037c:	2220      	movs	r2, #32
 800037e:	619a      	str	r2, [r3, #24]
  hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 8000380:	4b1d      	ldr	r3, [pc, #116]	; (80003f8 <MX_DMA_Init+0xc4>)
 8000382:	2200      	movs	r2, #0
 8000384:	61da      	str	r2, [r3, #28]
  HAL_DMA_Init(&hdma_tim1_up);
 8000386:	481c      	ldr	r0, [pc, #112]	; (80003f8 <MX_DMA_Init+0xc4>)
 8000388:	f000 fbde 	bl	8000b48 <HAL_DMA_Init>
//  __HAL_DMA1_REMAP(HAL_DMA1_CH3_TIM6_UP);
  __HAL_LINKDMA(&htim1,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 800038c:	4b1c      	ldr	r3, [pc, #112]	; (8000400 <MX_DMA_Init+0xcc>)
 800038e:	4a1a      	ldr	r2, [pc, #104]	; (80003f8 <MX_DMA_Init+0xc4>)
 8000390:	621a      	str	r2, [r3, #32]
 8000392:	4b19      	ldr	r3, [pc, #100]	; (80003f8 <MX_DMA_Init+0xc4>)
 8000394:	4a1a      	ldr	r2, [pc, #104]	; (8000400 <MX_DMA_Init+0xcc>)
 8000396:	625a      	str	r2, [r3, #36]	; 0x24
  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000398:	2200      	movs	r2, #0
 800039a:	2100      	movs	r1, #0
 800039c:	200f      	movs	r0, #15
 800039e:	f000 fb9c 	bl	8000ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80003a2:	200f      	movs	r0, #15
 80003a4:	f000 fbb5 	bl	8000b12 <HAL_NVIC_EnableIRQ>
  /* Select Callbacks functions called after Transfer complete and Transfer error */
  HAL_DMA_RegisterCallback(&hdma_tim1_up, HAL_DMA_XFER_CPLT_CB_ID, TransferComplete);
 80003a8:	4a16      	ldr	r2, [pc, #88]	; (8000404 <MX_DMA_Init+0xd0>)
 80003aa:	2100      	movs	r1, #0
 80003ac:	4812      	ldr	r0, [pc, #72]	; (80003f8 <MX_DMA_Init+0xc4>)
 80003ae:	f000 fd8b 	bl	8000ec8 <HAL_DMA_RegisterCallback>
  HAL_DMA_RegisterCallback(&hdma_tim1_up, HAL_DMA_XFER_ERROR_CB_ID, TransferError);
 80003b2:	4a15      	ldr	r2, [pc, #84]	; (8000408 <MX_DMA_Init+0xd4>)
 80003b4:	2102      	movs	r1, #2
 80003b6:	4810      	ldr	r0, [pc, #64]	; (80003f8 <MX_DMA_Init+0xc4>)
 80003b8:	f000 fd86 	bl	8000ec8 <HAL_DMA_RegisterCallback>
  /* (Callbacks for DMA IRQs) */
//  htim1->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = data_tramsmitted_handler;
//  htim1->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = transmit_error_handler;
  /*  (Enable DMA) */
  HAL_DMA_Start_IT(htim1.hdma[TIM_DMA_ID_UPDATE],(uint32_t)&aOutputWave,
 80003bc:	4b10      	ldr	r3, [pc, #64]	; (8000400 <MX_DMA_Init+0xcc>)
 80003be:	6a18      	ldr	r0, [r3, #32]
 80003c0:	4912      	ldr	r1, [pc, #72]	; (800040c <MX_DMA_Init+0xd8>)
 80003c2:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80003c6:	4a12      	ldr	r2, [pc, #72]	; (8000410 <MX_DMA_Init+0xdc>)
 80003c8:	f000 fc18 	bl	8000bfc <HAL_DMA_Start_IT>
  		(uint32_t)&GPIOB->ODR, BUFFER_SIZE);
  /*  (Enable TIM for DMA events) */
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 80003cc:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <MX_DMA_Init+0xcc>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	68da      	ldr	r2, [r3, #12]
 80003d2:	4b0b      	ldr	r3, [pc, #44]	; (8000400 <MX_DMA_Init+0xcc>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80003da:	60da      	str	r2, [r3, #12]

  /*  (Run TIM) */
  __HAL_TIM_ENABLE(&htim1);
 80003dc:	4b08      	ldr	r3, [pc, #32]	; (8000400 <MX_DMA_Init+0xcc>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	681a      	ldr	r2, [r3, #0]
 80003e2:	4b07      	ldr	r3, [pc, #28]	; (8000400 <MX_DMA_Init+0xcc>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	f042 0201 	orr.w	r2, r2, #1
 80003ea:	601a      	str	r2, [r3, #0]
}
 80003ec:	bf00      	nop
 80003ee:	3708      	adds	r7, #8
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	40021000 	.word	0x40021000
 80003f8:	20000754 	.word	0x20000754
 80003fc:	40020058 	.word	0x40020058
 8000400:	2000070c 	.word	0x2000070c
 8000404:	08000579 	.word	0x08000579
 8000408:	080005e5 	.word	0x080005e5
 800040c:	20000210 	.word	0x20000210
 8000410:	40010c0c 	.word	0x40010c0c

08000414 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b088      	sub	sp, #32
 8000418:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041a:	f107 0310 	add.w	r3, r7, #16
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
 8000422:	605a      	str	r2, [r3, #4]
 8000424:	609a      	str	r2, [r3, #8]
 8000426:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000428:	4b4e      	ldr	r3, [pc, #312]	; (8000564 <MX_GPIO_Init+0x150>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	4a4d      	ldr	r2, [pc, #308]	; (8000564 <MX_GPIO_Init+0x150>)
 800042e:	f043 0310 	orr.w	r3, r3, #16
 8000432:	6193      	str	r3, [r2, #24]
 8000434:	4b4b      	ldr	r3, [pc, #300]	; (8000564 <MX_GPIO_Init+0x150>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	f003 0310 	and.w	r3, r3, #16
 800043c:	60fb      	str	r3, [r7, #12]
 800043e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000440:	4b48      	ldr	r3, [pc, #288]	; (8000564 <MX_GPIO_Init+0x150>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	4a47      	ldr	r2, [pc, #284]	; (8000564 <MX_GPIO_Init+0x150>)
 8000446:	f043 0320 	orr.w	r3, r3, #32
 800044a:	6193      	str	r3, [r2, #24]
 800044c:	4b45      	ldr	r3, [pc, #276]	; (8000564 <MX_GPIO_Init+0x150>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	f003 0320 	and.w	r3, r3, #32
 8000454:	60bb      	str	r3, [r7, #8]
 8000456:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000458:	4b42      	ldr	r3, [pc, #264]	; (8000564 <MX_GPIO_Init+0x150>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	4a41      	ldr	r2, [pc, #260]	; (8000564 <MX_GPIO_Init+0x150>)
 800045e:	f043 0304 	orr.w	r3, r3, #4
 8000462:	6193      	str	r3, [r2, #24]
 8000464:	4b3f      	ldr	r3, [pc, #252]	; (8000564 <MX_GPIO_Init+0x150>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	f003 0304 	and.w	r3, r3, #4
 800046c:	607b      	str	r3, [r7, #4]
 800046e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000470:	4b3c      	ldr	r3, [pc, #240]	; (8000564 <MX_GPIO_Init+0x150>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	4a3b      	ldr	r2, [pc, #236]	; (8000564 <MX_GPIO_Init+0x150>)
 8000476:	f043 0308 	orr.w	r3, r3, #8
 800047a:	6193      	str	r3, [r2, #24]
 800047c:	4b39      	ldr	r3, [pc, #228]	; (8000564 <MX_GPIO_Init+0x150>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	f003 0308 	and.w	r3, r3, #8
 8000484:	603b      	str	r3, [r7, #0]
 8000486:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_RESET);
 8000488:	2200      	movs	r2, #0
 800048a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800048e:	4836      	ldr	r0, [pc, #216]	; (8000568 <MX_GPIO_Init+0x154>)
 8000490:	f000 feea 	bl	8001268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DACA_0_Pin|DACA_1_Pin|DACA_2_Pin|DACA_3_Pin
 8000494:	2200      	movs	r2, #0
 8000496:	f248 01ff 	movw	r1, #33023	; 0x80ff
 800049a:	4834      	ldr	r0, [pc, #208]	; (800056c <MX_GPIO_Init+0x158>)
 800049c:	f000 fee4 	bl	8001268 <HAL_GPIO_WritePin>
                          |DACA_4_Pin|DACA_5_Pin|DACA_6_Pin|DACA_7_Pin
                          |LED_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DACB_0_Pin|DACB_1_Pin|DACB_2_Pin|DACB_10_Pin
 80004a0:	2200      	movs	r2, #0
 80004a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80004a6:	4832      	ldr	r0, [pc, #200]	; (8000570 <MX_GPIO_Init+0x15c>)
 80004a8:	f000 fede 	bl	8001268 <HAL_GPIO_WritePin>
                          |DACB_11_Pin|DACB_12_Pin|DACB_13_Pin|DACB_14_Pin
                          |DACB_15_Pin|DACB_3_Pin|DACB_4_Pin|DACB_5_Pin
                          |DACB_6_Pin|DACB_7_Pin|DACB_8_Pin|DACB_9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_0_Pin */
  GPIO_InitStruct.Pin = LED_0_Pin;
 80004ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80004b2:	2311      	movs	r3, #17
 80004b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b6:	2300      	movs	r3, #0
 80004b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ba:	2302      	movs	r3, #2
 80004bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_0_GPIO_Port, &GPIO_InitStruct);
 80004be:	f107 0310 	add.w	r3, r7, #16
 80004c2:	4619      	mov	r1, r3
 80004c4:	4828      	ldr	r0, [pc, #160]	; (8000568 <MX_GPIO_Init+0x154>)
 80004c6:	f000 fd75 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DACA_0_Pin DACA_1_Pin DACA_2_Pin DACA_3_Pin
                           DACA_4_Pin DACA_5_Pin DACA_6_Pin DACA_7_Pin */
  GPIO_InitStruct.Pin = DACA_0_Pin|DACA_1_Pin|DACA_2_Pin|DACA_3_Pin
 80004ca:	23ff      	movs	r3, #255	; 0xff
 80004cc:	613b      	str	r3, [r7, #16]
                          |DACA_4_Pin|DACA_5_Pin|DACA_6_Pin|DACA_7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ce:	2301      	movs	r3, #1
 80004d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d2:	2300      	movs	r3, #0
 80004d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d6:	2302      	movs	r3, #2
 80004d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004da:	f107 0310 	add.w	r3, r7, #16
 80004de:	4619      	mov	r1, r3
 80004e0:	4822      	ldr	r0, [pc, #136]	; (800056c <MX_GPIO_Init+0x158>)
 80004e2:	f000 fd67 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DACB_0_Pin DACB_1_Pin DACB_2_Pin DACB_10_Pin
                           DACB_11_Pin DACB_12_Pin DACB_13_Pin DACB_14_Pin
                           DACB_15_Pin DACB_3_Pin DACB_4_Pin DACB_5_Pin
                           DACB_6_Pin DACB_7_Pin DACB_8_Pin DACB_9_Pin */
  GPIO_InitStruct.Pin = DACB_0_Pin|DACB_1_Pin|DACB_2_Pin|DACB_10_Pin
 80004e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004ea:	613b      	str	r3, [r7, #16]
                          |DACB_11_Pin|DACB_12_Pin|DACB_13_Pin|DACB_14_Pin
                          |DACB_15_Pin|DACB_3_Pin|DACB_4_Pin|DACB_5_Pin
                          |DACB_6_Pin|DACB_7_Pin|DACB_8_Pin|DACB_9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ec:	2301      	movs	r3, #1
 80004ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f0:	2300      	movs	r3, #0
 80004f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004f4:	2303      	movs	r3, #3
 80004f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004f8:	f107 0310 	add.w	r3, r7, #16
 80004fc:	4619      	mov	r1, r3
 80004fe:	481c      	ldr	r0, [pc, #112]	; (8000570 <MX_GPIO_Init+0x15c>)
 8000500:	f000 fd58 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB_MODE_Pin PB_UP_Pin PB_DOWN_Pin */
  GPIO_InitStruct.Pin = PB_MODE_Pin|PB_UP_Pin|PB_DOWN_Pin;
 8000504:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000508:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800050a:	4b1a      	ldr	r3, [pc, #104]	; (8000574 <MX_GPIO_Init+0x160>)
 800050c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050e:	2300      	movs	r3, #0
 8000510:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000512:	f107 0310 	add.w	r3, r7, #16
 8000516:	4619      	mov	r1, r3
 8000518:	4814      	ldr	r0, [pc, #80]	; (800056c <MX_GPIO_Init+0x158>)
 800051a:	f000 fd4b 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_1_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin;
 800051e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000522:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000524:	2311      	movs	r3, #17
 8000526:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000528:	2300      	movs	r3, #0
 800052a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052c:	2302      	movs	r3, #2
 800052e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 8000530:	f107 0310 	add.w	r3, r7, #16
 8000534:	4619      	mov	r1, r3
 8000536:	480d      	ldr	r0, [pc, #52]	; (800056c <MX_GPIO_Init+0x158>)
 8000538:	f000 fd3c 	bl	8000fb4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 800053c:	2200      	movs	r2, #0
 800053e:	2101      	movs	r1, #1
 8000540:	2017      	movs	r0, #23
 8000542:	f000 faca 	bl	8000ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000546:	2017      	movs	r0, #23
 8000548:	f000 fae3 	bl	8000b12 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800054c:	2200      	movs	r2, #0
 800054e:	2100      	movs	r1, #0
 8000550:	2028      	movs	r0, #40	; 0x28
 8000552:	f000 fac2 	bl	8000ada <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000556:	2028      	movs	r0, #40	; 0x28
 8000558:	f000 fadb 	bl	8000b12 <HAL_NVIC_EnableIRQ>

}
 800055c:	bf00      	nop
 800055e:	3720      	adds	r7, #32
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	40021000 	.word	0x40021000
 8000568:	40011000 	.word	0x40011000
 800056c:	40010800 	.word	0x40010800
 8000570:	40010c00 	.word	0x40010c00
 8000574:	10210000 	.word	0x10210000

08000578 <TransferComplete>:

/* USER CODE BEGIN 4 */
/*  (DMA IRQ callbacks) */
void TransferComplete(DMA_HandleTypeDef *hdma)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
    /* Stop timer */
    __HAL_TIM_DISABLE(&htim1);
 8000580:	4b15      	ldr	r3, [pc, #84]	; (80005d8 <TransferComplete+0x60>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	6a1a      	ldr	r2, [r3, #32]
 8000586:	f241 1311 	movw	r3, #4369	; 0x1111
 800058a:	4013      	ands	r3, r2
 800058c:	2b00      	cmp	r3, #0
 800058e:	d10f      	bne.n	80005b0 <TransferComplete+0x38>
 8000590:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <TransferComplete+0x60>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	6a1a      	ldr	r2, [r3, #32]
 8000596:	f240 4344 	movw	r3, #1092	; 0x444
 800059a:	4013      	ands	r3, r2
 800059c:	2b00      	cmp	r3, #0
 800059e:	d107      	bne.n	80005b0 <TransferComplete+0x38>
 80005a0:	4b0d      	ldr	r3, [pc, #52]	; (80005d8 <TransferComplete+0x60>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <TransferComplete+0x60>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	f022 0201 	bic.w	r2, r2, #1
 80005ae:	601a      	str	r2, [r3, #0]
    /* Reconfigure DMA */
    HAL_DMA_Start_IT(htim1.hdma[TIM_DMA_ID_UPDATE],(uint32_t)&aOutputWave,
 80005b0:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <TransferComplete+0x60>)
 80005b2:	6a18      	ldr	r0, [r3, #32]
 80005b4:	4909      	ldr	r1, [pc, #36]	; (80005dc <TransferComplete+0x64>)
 80005b6:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80005ba:	4a09      	ldr	r2, [pc, #36]	; (80005e0 <TransferComplete+0x68>)
 80005bc:	f000 fb1e 	bl	8000bfc <HAL_DMA_Start_IT>
    		(uint32_t)&GPIOB->ODR, BUFFER_SIZE);
    /* Start timer for new data transmit */
    __HAL_TIM_ENABLE(&htim1);
 80005c0:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <TransferComplete+0x60>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	4b04      	ldr	r3, [pc, #16]	; (80005d8 <TransferComplete+0x60>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f042 0201 	orr.w	r2, r2, #1
 80005ce:	601a      	str	r2, [r3, #0]
}
 80005d0:	bf00      	nop
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	2000070c 	.word	0x2000070c
 80005dc:	20000210 	.word	0x20000210
 80005e0:	40010c0c 	.word	0x40010c0c

080005e4 <TransferError>:

void TransferError(DMA_HandleTypeDef *hdma)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
    /* Stop timer */
    __HAL_TIM_DISABLE(&htim1);
 80005ec:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <TransferError+0x44>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	6a1a      	ldr	r2, [r3, #32]
 80005f2:	f241 1311 	movw	r3, #4369	; 0x1111
 80005f6:	4013      	ands	r3, r2
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d10f      	bne.n	800061c <TransferError+0x38>
 80005fc:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <TransferError+0x44>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	6a1a      	ldr	r2, [r3, #32]
 8000602:	f240 4344 	movw	r3, #1092	; 0x444
 8000606:	4013      	ands	r3, r2
 8000608:	2b00      	cmp	r3, #0
 800060a:	d107      	bne.n	800061c <TransferError+0x38>
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <TransferError+0x44>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	681a      	ldr	r2, [r3, #0]
 8000612:	4b05      	ldr	r3, [pc, #20]	; (8000628 <TransferError+0x44>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	f022 0201 	bic.w	r2, r2, #1
 800061a:	601a      	str	r2, [r3, #0]
    /* !!! Some error handle for future implementation */
}
 800061c:	bf00      	nop
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	bc80      	pop	{r7}
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	2000070c 	.word	0x2000070c

0800062c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000630:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000632:	e7fe      	b.n	8000632 <Error_Handler+0x6>

08000634 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800063a:	4b15      	ldr	r3, [pc, #84]	; (8000690 <HAL_MspInit+0x5c>)
 800063c:	699b      	ldr	r3, [r3, #24]
 800063e:	4a14      	ldr	r2, [pc, #80]	; (8000690 <HAL_MspInit+0x5c>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	6193      	str	r3, [r2, #24]
 8000646:	4b12      	ldr	r3, [pc, #72]	; (8000690 <HAL_MspInit+0x5c>)
 8000648:	699b      	ldr	r3, [r3, #24]
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000652:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <HAL_MspInit+0x5c>)
 8000654:	69db      	ldr	r3, [r3, #28]
 8000656:	4a0e      	ldr	r2, [pc, #56]	; (8000690 <HAL_MspInit+0x5c>)
 8000658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065c:	61d3      	str	r3, [r2, #28]
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <HAL_MspInit+0x5c>)
 8000660:	69db      	ldr	r3, [r3, #28]
 8000662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800066a:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <HAL_MspInit+0x60>)
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	4a04      	ldr	r2, [pc, #16]	; (8000694 <HAL_MspInit+0x60>)
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000686:	bf00      	nop
 8000688:	3714      	adds	r7, #20
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr
 8000690:	40021000 	.word	0x40021000
 8000694:	40010000 	.word	0x40010000

08000698 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a1d      	ldr	r2, [pc, #116]	; (800071c <HAL_TIM_Base_MspInit+0x84>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d134      	bne.n	8000714 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80006aa:	4b1d      	ldr	r3, [pc, #116]	; (8000720 <HAL_TIM_Base_MspInit+0x88>)
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	4a1c      	ldr	r2, [pc, #112]	; (8000720 <HAL_TIM_Base_MspInit+0x88>)
 80006b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006b4:	6193      	str	r3, [r2, #24]
 80006b6:	4b1a      	ldr	r3, [pc, #104]	; (8000720 <HAL_TIM_Base_MspInit+0x88>)
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA1_Channel5;
 80006c2:	4b18      	ldr	r3, [pc, #96]	; (8000724 <HAL_TIM_Base_MspInit+0x8c>)
 80006c4:	4a18      	ldr	r2, [pc, #96]	; (8000728 <HAL_TIM_Base_MspInit+0x90>)
 80006c6:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80006c8:	4b16      	ldr	r3, [pc, #88]	; (8000724 <HAL_TIM_Base_MspInit+0x8c>)
 80006ca:	2210      	movs	r2, #16
 80006cc:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80006ce:	4b15      	ldr	r3, [pc, #84]	; (8000724 <HAL_TIM_Base_MspInit+0x8c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 80006d4:	4b13      	ldr	r3, [pc, #76]	; (8000724 <HAL_TIM_Base_MspInit+0x8c>)
 80006d6:	2280      	movs	r2, #128	; 0x80
 80006d8:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006da:	4b12      	ldr	r3, [pc, #72]	; (8000724 <HAL_TIM_Base_MspInit+0x8c>)
 80006dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006e0:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006e2:	4b10      	ldr	r3, [pc, #64]	; (8000724 <HAL_TIM_Base_MspInit+0x8c>)
 80006e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006e8:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <HAL_TIM_Base_MspInit+0x8c>)
 80006ec:	2220      	movs	r2, #32
 80006ee:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80006f0:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <HAL_TIM_Base_MspInit+0x8c>)
 80006f2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80006f6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 80006f8:	480a      	ldr	r0, [pc, #40]	; (8000724 <HAL_TIM_Base_MspInit+0x8c>)
 80006fa:	f000 fa25 	bl	8000b48 <HAL_DMA_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <HAL_TIM_Base_MspInit+0x70>
    {
      Error_Handler();
 8000704:	f7ff ff92 	bl	800062c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4a06      	ldr	r2, [pc, #24]	; (8000724 <HAL_TIM_Base_MspInit+0x8c>)
 800070c:	621a      	str	r2, [r3, #32]
 800070e:	4a05      	ldr	r2, [pc, #20]	; (8000724 <HAL_TIM_Base_MspInit+0x8c>)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000714:	bf00      	nop
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40012c00 	.word	0x40012c00
 8000720:	40021000 	.word	0x40021000
 8000724:	20000754 	.word	0x20000754
 8000728:	40020058 	.word	0x40020058

0800072c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000730:	e7fe      	b.n	8000730 <NMI_Handler+0x4>

08000732 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000736:	e7fe      	b.n	8000736 <HardFault_Handler+0x4>

08000738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800073c:	e7fe      	b.n	800073c <MemManage_Handler+0x4>

0800073e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000742:	e7fe      	b.n	8000742 <BusFault_Handler+0x4>

08000744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000748:	e7fe      	b.n	8000748 <UsageFault_Handler+0x4>

0800074a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800074e:	bf00      	nop
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr

08000756 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800075a:	bf00      	nop
 800075c:	46bd      	mov	sp, r7
 800075e:	bc80      	pop	{r7}
 8000760:	4770      	bx	lr

08000762 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr

0800076e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000772:	f000 f89d 	bl	80008b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8000780:	4802      	ldr	r0, [pc, #8]	; (800078c <DMA1_Channel5_IRQHandler+0x10>)
 8000782:	f000 fa9b 	bl	8000cbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000754 	.word	0x20000754

08000790 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000794:	4802      	ldr	r0, [pc, #8]	; (80007a0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000796:	f000 feec 	bl	8001572 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20001430 	.word	0x20001430

080007a4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80007a8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80007ac:	f000 fd8e 	bl	80012cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80007b0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007b4:	f000 fd8a 	bl	80012cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}

080007bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80007c0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80007c4:	f000 fd82 	bl	80012cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}

080007cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr

080007d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80007d8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80007da:	e003      	b.n	80007e4 <LoopCopyDataInit>

080007dc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80007dc:	4b0b      	ldr	r3, [pc, #44]	; (800080c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80007de:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80007e0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80007e2:	3104      	adds	r1, #4

080007e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80007e4:	480a      	ldr	r0, [pc, #40]	; (8000810 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80007e8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80007ea:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80007ec:	d3f6      	bcc.n	80007dc <CopyDataInit>
  ldr r2, =_sbss
 80007ee:	4a0a      	ldr	r2, [pc, #40]	; (8000818 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80007f0:	e002      	b.n	80007f8 <LoopFillZerobss>

080007f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80007f2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80007f4:	f842 3b04 	str.w	r3, [r2], #4

080007f8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80007f8:	4b08      	ldr	r3, [pc, #32]	; (800081c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80007fa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80007fc:	d3f9      	bcc.n	80007f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007fe:	f7ff ffe5 	bl	80007cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000802:	f007 f919 	bl	8007a38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000806:	f7ff fca1 	bl	800014c <main>
  bx lr
 800080a:	4770      	bx	lr
  ldr r3, =_sidata
 800080c:	08008ad8 	.word	0x08008ad8
  ldr r0, =_sdata
 8000810:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000814:	200001f0 	.word	0x200001f0
  ldr r2, =_sbss
 8000818:	200001f0 	.word	0x200001f0
  ldr r3, = _ebss
 800081c:	20001720 	.word	0x20001720

08000820 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000820:	e7fe      	b.n	8000820 <ADC1_2_IRQHandler>
	...

08000824 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000828:	4b08      	ldr	r3, [pc, #32]	; (800084c <HAL_Init+0x28>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a07      	ldr	r2, [pc, #28]	; (800084c <HAL_Init+0x28>)
 800082e:	f043 0310 	orr.w	r3, r3, #16
 8000832:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000834:	2003      	movs	r0, #3
 8000836:	f000 f945 	bl	8000ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800083a:	2000      	movs	r0, #0
 800083c:	f000 f808 	bl	8000850 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000840:	f7ff fef8 	bl	8000634 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000844:	2300      	movs	r3, #0
}
 8000846:	4618      	mov	r0, r3
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40022000 	.word	0x40022000

08000850 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000858:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <HAL_InitTick+0x54>)
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <HAL_InitTick+0x58>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	4619      	mov	r1, r3
 8000862:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000866:	fbb3 f3f1 	udiv	r3, r3, r1
 800086a:	fbb2 f3f3 	udiv	r3, r2, r3
 800086e:	4618      	mov	r0, r3
 8000870:	f000 f95d 	bl	8000b2e <HAL_SYSTICK_Config>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800087a:	2301      	movs	r3, #1
 800087c:	e00e      	b.n	800089c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2b0f      	cmp	r3, #15
 8000882:	d80a      	bhi.n	800089a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000884:	2200      	movs	r2, #0
 8000886:	6879      	ldr	r1, [r7, #4]
 8000888:	f04f 30ff 	mov.w	r0, #4294967295
 800088c:	f000 f925 	bl	8000ada <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000890:	4a06      	ldr	r2, [pc, #24]	; (80008ac <HAL_InitTick+0x5c>)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000896:	2300      	movs	r3, #0
 8000898:	e000      	b.n	800089c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800089a:	2301      	movs	r3, #1
}
 800089c:	4618      	mov	r0, r3
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000000 	.word	0x20000000
 80008a8:	20000008 	.word	0x20000008
 80008ac:	20000004 	.word	0x20000004

080008b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008b4:	4b05      	ldr	r3, [pc, #20]	; (80008cc <HAL_IncTick+0x1c>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	461a      	mov	r2, r3
 80008ba:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <HAL_IncTick+0x20>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4413      	add	r3, r2
 80008c0:	4a03      	ldr	r2, [pc, #12]	; (80008d0 <HAL_IncTick+0x20>)
 80008c2:	6013      	str	r3, [r2, #0]
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bc80      	pop	{r7}
 80008ca:	4770      	bx	lr
 80008cc:	20000008 	.word	0x20000008
 80008d0:	20000798 	.word	0x20000798

080008d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  return uwTick;
 80008d8:	4b02      	ldr	r3, [pc, #8]	; (80008e4 <HAL_GetTick+0x10>)
 80008da:	681b      	ldr	r3, [r3, #0]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr
 80008e4:	20000798 	.word	0x20000798

080008e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008f0:	f7ff fff0 	bl	80008d4 <HAL_GetTick>
 80008f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000900:	d005      	beq.n	800090e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <HAL_Delay+0x40>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	461a      	mov	r2, r3
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	4413      	add	r3, r2
 800090c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800090e:	bf00      	nop
 8000910:	f7ff ffe0 	bl	80008d4 <HAL_GetTick>
 8000914:	4602      	mov	r2, r0
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	1ad3      	subs	r3, r2, r3
 800091a:	68fa      	ldr	r2, [r7, #12]
 800091c:	429a      	cmp	r2, r3
 800091e:	d8f7      	bhi.n	8000910 <HAL_Delay+0x28>
  {
  }
}
 8000920:	bf00      	nop
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000008 	.word	0x20000008

0800092c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	f003 0307 	and.w	r3, r3, #7
 800093a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <__NVIC_SetPriorityGrouping+0x44>)
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000942:	68ba      	ldr	r2, [r7, #8]
 8000944:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000948:	4013      	ands	r3, r2
 800094a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000954:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800095c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800095e:	4a04      	ldr	r2, [pc, #16]	; (8000970 <__NVIC_SetPriorityGrouping+0x44>)
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	60d3      	str	r3, [r2, #12]
}
 8000964:	bf00      	nop
 8000966:	3714      	adds	r7, #20
 8000968:	46bd      	mov	sp, r7
 800096a:	bc80      	pop	{r7}
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000978:	4b04      	ldr	r3, [pc, #16]	; (800098c <__NVIC_GetPriorityGrouping+0x18>)
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	0a1b      	lsrs	r3, r3, #8
 800097e:	f003 0307 	and.w	r3, r3, #7
}
 8000982:	4618      	mov	r0, r3
 8000984:	46bd      	mov	sp, r7
 8000986:	bc80      	pop	{r7}
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800099a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	db0b      	blt.n	80009ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	f003 021f 	and.w	r2, r3, #31
 80009a8:	4906      	ldr	r1, [pc, #24]	; (80009c4 <__NVIC_EnableIRQ+0x34>)
 80009aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ae:	095b      	lsrs	r3, r3, #5
 80009b0:	2001      	movs	r0, #1
 80009b2:	fa00 f202 	lsl.w	r2, r0, r2
 80009b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009ba:	bf00      	nop
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr
 80009c4:	e000e100 	.word	0xe000e100

080009c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	6039      	str	r1, [r7, #0]
 80009d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	db0a      	blt.n	80009f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	490c      	ldr	r1, [pc, #48]	; (8000a14 <__NVIC_SetPriority+0x4c>)
 80009e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e6:	0112      	lsls	r2, r2, #4
 80009e8:	b2d2      	uxtb	r2, r2
 80009ea:	440b      	add	r3, r1
 80009ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009f0:	e00a      	b.n	8000a08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	b2da      	uxtb	r2, r3
 80009f6:	4908      	ldr	r1, [pc, #32]	; (8000a18 <__NVIC_SetPriority+0x50>)
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	f003 030f 	and.w	r3, r3, #15
 80009fe:	3b04      	subs	r3, #4
 8000a00:	0112      	lsls	r2, r2, #4
 8000a02:	b2d2      	uxtb	r2, r2
 8000a04:	440b      	add	r3, r1
 8000a06:	761a      	strb	r2, [r3, #24]
}
 8000a08:	bf00      	nop
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bc80      	pop	{r7}
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	e000e100 	.word	0xe000e100
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b089      	sub	sp, #36	; 0x24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	f003 0307 	and.w	r3, r3, #7
 8000a2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a30:	69fb      	ldr	r3, [r7, #28]
 8000a32:	f1c3 0307 	rsb	r3, r3, #7
 8000a36:	2b04      	cmp	r3, #4
 8000a38:	bf28      	it	cs
 8000a3a:	2304      	movcs	r3, #4
 8000a3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	3304      	adds	r3, #4
 8000a42:	2b06      	cmp	r3, #6
 8000a44:	d902      	bls.n	8000a4c <NVIC_EncodePriority+0x30>
 8000a46:	69fb      	ldr	r3, [r7, #28]
 8000a48:	3b03      	subs	r3, #3
 8000a4a:	e000      	b.n	8000a4e <NVIC_EncodePriority+0x32>
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a50:	f04f 32ff 	mov.w	r2, #4294967295
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5a:	43da      	mvns	r2, r3
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	401a      	ands	r2, r3
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a64:	f04f 31ff 	mov.w	r1, #4294967295
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a6e:	43d9      	mvns	r1, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a74:	4313      	orrs	r3, r2
         );
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3724      	adds	r7, #36	; 0x24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr

08000a80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a90:	d301      	bcc.n	8000a96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a92:	2301      	movs	r3, #1
 8000a94:	e00f      	b.n	8000ab6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a96:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <SysTick_Config+0x40>)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a9e:	210f      	movs	r1, #15
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	f7ff ff90 	bl	80009c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <SysTick_Config+0x40>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aae:	4b04      	ldr	r3, [pc, #16]	; (8000ac0 <SysTick_Config+0x40>)
 8000ab0:	2207      	movs	r2, #7
 8000ab2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	e000e010 	.word	0xe000e010

08000ac4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f7ff ff2d 	bl	800092c <__NVIC_SetPriorityGrouping>
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b086      	sub	sp, #24
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	60b9      	str	r1, [r7, #8]
 8000ae4:	607a      	str	r2, [r7, #4]
 8000ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000aec:	f7ff ff42 	bl	8000974 <__NVIC_GetPriorityGrouping>
 8000af0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	68b9      	ldr	r1, [r7, #8]
 8000af6:	6978      	ldr	r0, [r7, #20]
 8000af8:	f7ff ff90 	bl	8000a1c <NVIC_EncodePriority>
 8000afc:	4602      	mov	r2, r0
 8000afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b02:	4611      	mov	r1, r2
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ff5f 	bl	80009c8 <__NVIC_SetPriority>
}
 8000b0a:	bf00      	nop
 8000b0c:	3718      	adds	r7, #24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b082      	sub	sp, #8
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	4603      	mov	r3, r0
 8000b1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff ff35 	bl	8000990 <__NVIC_EnableIRQ>
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b082      	sub	sp, #8
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f7ff ffa2 	bl	8000a80 <SysTick_Config>
 8000b3c:	4603      	mov	r3, r0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
	...

08000b48 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d101      	bne.n	8000b5e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e043      	b.n	8000be6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	461a      	mov	r2, r3
 8000b64:	4b22      	ldr	r3, [pc, #136]	; (8000bf0 <HAL_DMA_Init+0xa8>)
 8000b66:	4413      	add	r3, r2
 8000b68:	4a22      	ldr	r2, [pc, #136]	; (8000bf4 <HAL_DMA_Init+0xac>)
 8000b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b6e:	091b      	lsrs	r3, r3, #4
 8000b70:	009a      	lsls	r2, r3, #2
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4a1f      	ldr	r2, [pc, #124]	; (8000bf8 <HAL_DMA_Init+0xb0>)
 8000b7a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2202      	movs	r2, #2
 8000b80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000b92:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000b96:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000ba0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	68db      	ldr	r3, [r3, #12]
 8000ba6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	695b      	ldr	r3, [r3, #20]
 8000bb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	69db      	ldr	r3, [r3, #28]
 8000bbe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000bc0:	68fa      	ldr	r2, [r7, #12]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	68fa      	ldr	r2, [r7, #12]
 8000bcc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2200      	movs	r2, #0
 8000be0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000be4:	2300      	movs	r3, #0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3714      	adds	r7, #20
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr
 8000bf0:	bffdfff8 	.word	0xbffdfff8
 8000bf4:	cccccccd 	.word	0xcccccccd
 8000bf8:	40020000 	.word	0x40020000

08000bfc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
 8000c08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d101      	bne.n	8000c1c <HAL_DMA_Start_IT+0x20>
 8000c18:	2302      	movs	r3, #2
 8000c1a:	e04a      	b.n	8000cb2 <HAL_DMA_Start_IT+0xb6>
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	2201      	movs	r2, #1
 8000c20:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d13a      	bne.n	8000ca4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	2202      	movs	r2, #2
 8000c32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	2200      	movs	r2, #0
 8000c3a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f022 0201 	bic.w	r2, r2, #1
 8000c4a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	68b9      	ldr	r1, [r7, #8]
 8000c52:	68f8      	ldr	r0, [r7, #12]
 8000c54:	f000 f980 	bl	8000f58 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d008      	beq.n	8000c72 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f042 020e 	orr.w	r2, r2, #14
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	e00f      	b.n	8000c92 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f022 0204 	bic.w	r2, r2, #4
 8000c80:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f042 020a 	orr.w	r2, r2, #10
 8000c90:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f042 0201 	orr.w	r2, r2, #1
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	e005      	b.n	8000cb0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000cac:	2302      	movs	r3, #2
 8000cae:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000cb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3718      	adds	r7, #24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
	...

08000cbc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd8:	2204      	movs	r2, #4
 8000cda:	409a      	lsls	r2, r3
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d04f      	beq.n	8000d84 <HAL_DMA_IRQHandler+0xc8>
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	f003 0304 	and.w	r3, r3, #4
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d04a      	beq.n	8000d84 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f003 0320 	and.w	r3, r3, #32
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d107      	bne.n	8000d0c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f022 0204 	bic.w	r2, r2, #4
 8000d0a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a66      	ldr	r2, [pc, #408]	; (8000eac <HAL_DMA_IRQHandler+0x1f0>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d029      	beq.n	8000d6a <HAL_DMA_IRQHandler+0xae>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a65      	ldr	r2, [pc, #404]	; (8000eb0 <HAL_DMA_IRQHandler+0x1f4>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d022      	beq.n	8000d66 <HAL_DMA_IRQHandler+0xaa>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a63      	ldr	r2, [pc, #396]	; (8000eb4 <HAL_DMA_IRQHandler+0x1f8>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d01a      	beq.n	8000d60 <HAL_DMA_IRQHandler+0xa4>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a62      	ldr	r2, [pc, #392]	; (8000eb8 <HAL_DMA_IRQHandler+0x1fc>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d012      	beq.n	8000d5a <HAL_DMA_IRQHandler+0x9e>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a60      	ldr	r2, [pc, #384]	; (8000ebc <HAL_DMA_IRQHandler+0x200>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d00a      	beq.n	8000d54 <HAL_DMA_IRQHandler+0x98>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a5f      	ldr	r2, [pc, #380]	; (8000ec0 <HAL_DMA_IRQHandler+0x204>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d102      	bne.n	8000d4e <HAL_DMA_IRQHandler+0x92>
 8000d48:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d4c:	e00e      	b.n	8000d6c <HAL_DMA_IRQHandler+0xb0>
 8000d4e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000d52:	e00b      	b.n	8000d6c <HAL_DMA_IRQHandler+0xb0>
 8000d54:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000d58:	e008      	b.n	8000d6c <HAL_DMA_IRQHandler+0xb0>
 8000d5a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d5e:	e005      	b.n	8000d6c <HAL_DMA_IRQHandler+0xb0>
 8000d60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d64:	e002      	b.n	8000d6c <HAL_DMA_IRQHandler+0xb0>
 8000d66:	2340      	movs	r3, #64	; 0x40
 8000d68:	e000      	b.n	8000d6c <HAL_DMA_IRQHandler+0xb0>
 8000d6a:	2304      	movs	r3, #4
 8000d6c:	4a55      	ldr	r2, [pc, #340]	; (8000ec4 <HAL_DMA_IRQHandler+0x208>)
 8000d6e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	f000 8094 	beq.w	8000ea2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000d82:	e08e      	b.n	8000ea2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d88:	2202      	movs	r2, #2
 8000d8a:	409a      	lsls	r2, r3
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d056      	beq.n	8000e42 <HAL_DMA_IRQHandler+0x186>
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	f003 0302 	and.w	r3, r3, #2
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d051      	beq.n	8000e42 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f003 0320 	and.w	r3, r3, #32
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d10b      	bne.n	8000dc4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f022 020a 	bic.w	r2, r2, #10
 8000dba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a38      	ldr	r2, [pc, #224]	; (8000eac <HAL_DMA_IRQHandler+0x1f0>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d029      	beq.n	8000e22 <HAL_DMA_IRQHandler+0x166>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a37      	ldr	r2, [pc, #220]	; (8000eb0 <HAL_DMA_IRQHandler+0x1f4>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d022      	beq.n	8000e1e <HAL_DMA_IRQHandler+0x162>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a35      	ldr	r2, [pc, #212]	; (8000eb4 <HAL_DMA_IRQHandler+0x1f8>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d01a      	beq.n	8000e18 <HAL_DMA_IRQHandler+0x15c>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a34      	ldr	r2, [pc, #208]	; (8000eb8 <HAL_DMA_IRQHandler+0x1fc>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d012      	beq.n	8000e12 <HAL_DMA_IRQHandler+0x156>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a32      	ldr	r2, [pc, #200]	; (8000ebc <HAL_DMA_IRQHandler+0x200>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d00a      	beq.n	8000e0c <HAL_DMA_IRQHandler+0x150>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a31      	ldr	r2, [pc, #196]	; (8000ec0 <HAL_DMA_IRQHandler+0x204>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d102      	bne.n	8000e06 <HAL_DMA_IRQHandler+0x14a>
 8000e00:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000e04:	e00e      	b.n	8000e24 <HAL_DMA_IRQHandler+0x168>
 8000e06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e0a:	e00b      	b.n	8000e24 <HAL_DMA_IRQHandler+0x168>
 8000e0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e10:	e008      	b.n	8000e24 <HAL_DMA_IRQHandler+0x168>
 8000e12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e16:	e005      	b.n	8000e24 <HAL_DMA_IRQHandler+0x168>
 8000e18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e1c:	e002      	b.n	8000e24 <HAL_DMA_IRQHandler+0x168>
 8000e1e:	2320      	movs	r3, #32
 8000e20:	e000      	b.n	8000e24 <HAL_DMA_IRQHandler+0x168>
 8000e22:	2302      	movs	r3, #2
 8000e24:	4a27      	ldr	r2, [pc, #156]	; (8000ec4 <HAL_DMA_IRQHandler+0x208>)
 8000e26:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d034      	beq.n	8000ea2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000e40:	e02f      	b.n	8000ea2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e46:	2208      	movs	r2, #8
 8000e48:	409a      	lsls	r2, r3
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d028      	beq.n	8000ea4 <HAL_DMA_IRQHandler+0x1e8>
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	f003 0308 	and.w	r3, r3, #8
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d023      	beq.n	8000ea4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f022 020e 	bic.w	r2, r2, #14
 8000e6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e74:	2101      	movs	r1, #1
 8000e76:	fa01 f202 	lsl.w	r2, r1, r2
 8000e7a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2201      	movs	r2, #1
 8000e80:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2201      	movs	r2, #1
 8000e86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d004      	beq.n	8000ea4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	4798      	blx	r3
    }
  }
  return;
 8000ea2:	bf00      	nop
 8000ea4:	bf00      	nop
}
 8000ea6:	3710      	adds	r7, #16
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40020008 	.word	0x40020008
 8000eb0:	4002001c 	.word	0x4002001c
 8000eb4:	40020030 	.word	0x40020030
 8000eb8:	40020044 	.word	0x40020044
 8000ebc:	40020058 	.word	0x40020058
 8000ec0:	4002006c 	.word	0x4002006c
 8000ec4:	40020000 	.word	0x40020000

08000ec8 <HAL_DMA_RegisterCallback>:
  * @param pCallback: pointer to private callbacsk function which has pointer to 
  *                   a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                          
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b087      	sub	sp, #28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	607a      	str	r2, [r7, #4]
 8000ed4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	75fb      	strb	r3, [r7, #23]
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d101      	bne.n	8000ee8 <HAL_DMA_RegisterCallback+0x20>
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	e032      	b.n	8000f4e <HAL_DMA_RegisterCallback+0x86>
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	2201      	movs	r2, #1
 8000eec:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d122      	bne.n	8000f40 <HAL_DMA_RegisterCallback+0x78>
  {
    switch (CallbackID)
 8000efa:	7afb      	ldrb	r3, [r7, #11]
 8000efc:	2b03      	cmp	r3, #3
 8000efe:	d81b      	bhi.n	8000f38 <HAL_DMA_RegisterCallback+0x70>
 8000f00:	a201      	add	r2, pc, #4	; (adr r2, 8000f08 <HAL_DMA_RegisterCallback+0x40>)
 8000f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f06:	bf00      	nop
 8000f08:	08000f19 	.word	0x08000f19
 8000f0c:	08000f21 	.word	0x08000f21
 8000f10:	08000f29 	.word	0x08000f29
 8000f14:	08000f31 	.word	0x08000f31
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8000f1e:	e011      	b.n	8000f44 <HAL_DMA_RegisterCallback+0x7c>
      
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	62da      	str	r2, [r3, #44]	; 0x2c
      break;         
 8000f26:	e00d      	b.n	8000f44 <HAL_DMA_RegisterCallback+0x7c>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	631a      	str	r2, [r3, #48]	; 0x30
      break;         
 8000f2e:	e009      	b.n	8000f44 <HAL_DMA_RegisterCallback+0x7c>
      
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	635a      	str	r2, [r3, #52]	; 0x34
      break; 
 8000f36:	e005      	b.n	8000f44 <HAL_DMA_RegisterCallback+0x7c>
      
    default:
      status = HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	75fb      	strb	r3, [r7, #23]
      break;                                                            
 8000f3c:	bf00      	nop
 8000f3e:	e001      	b.n	8000f44 <HAL_DMA_RegisterCallback+0x7c>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f40:	2301      	movs	r3, #1
 8000f42:	75fb      	strb	r3, [r7, #23]
  } 
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	2200      	movs	r2, #0
 8000f48:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status;
 8000f4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	371c      	adds	r7, #28
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr

08000f58 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
 8000f64:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f6e:	2101      	movs	r1, #1
 8000f70:	fa01 f202 	lsl.w	r2, r1, r2
 8000f74:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	683a      	ldr	r2, [r7, #0]
 8000f7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	2b10      	cmp	r3, #16
 8000f84:	d108      	bne.n	8000f98 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	68ba      	ldr	r2, [r7, #8]
 8000f94:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000f96:	e007      	b.n	8000fa8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	68ba      	ldr	r2, [r7, #8]
 8000f9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	60da      	str	r2, [r3, #12]
}
 8000fa8:	bf00      	nop
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bc80      	pop	{r7}
 8000fb0:	4770      	bx	lr
	...

08000fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b08b      	sub	sp, #44	; 0x2c
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fc6:	e127      	b.n	8001218 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	69fa      	ldr	r2, [r7, #28]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	f040 8116 	bne.w	8001212 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	2b12      	cmp	r3, #18
 8000fec:	d034      	beq.n	8001058 <HAL_GPIO_Init+0xa4>
 8000fee:	2b12      	cmp	r3, #18
 8000ff0:	d80d      	bhi.n	800100e <HAL_GPIO_Init+0x5a>
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d02b      	beq.n	800104e <HAL_GPIO_Init+0x9a>
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d804      	bhi.n	8001004 <HAL_GPIO_Init+0x50>
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d031      	beq.n	8001062 <HAL_GPIO_Init+0xae>
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d01c      	beq.n	800103c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001002:	e048      	b.n	8001096 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001004:	2b03      	cmp	r3, #3
 8001006:	d043      	beq.n	8001090 <HAL_GPIO_Init+0xdc>
 8001008:	2b11      	cmp	r3, #17
 800100a:	d01b      	beq.n	8001044 <HAL_GPIO_Init+0x90>
          break;
 800100c:	e043      	b.n	8001096 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800100e:	4a89      	ldr	r2, [pc, #548]	; (8001234 <HAL_GPIO_Init+0x280>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d026      	beq.n	8001062 <HAL_GPIO_Init+0xae>
 8001014:	4a87      	ldr	r2, [pc, #540]	; (8001234 <HAL_GPIO_Init+0x280>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d806      	bhi.n	8001028 <HAL_GPIO_Init+0x74>
 800101a:	4a87      	ldr	r2, [pc, #540]	; (8001238 <HAL_GPIO_Init+0x284>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d020      	beq.n	8001062 <HAL_GPIO_Init+0xae>
 8001020:	4a86      	ldr	r2, [pc, #536]	; (800123c <HAL_GPIO_Init+0x288>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d01d      	beq.n	8001062 <HAL_GPIO_Init+0xae>
          break;
 8001026:	e036      	b.n	8001096 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001028:	4a85      	ldr	r2, [pc, #532]	; (8001240 <HAL_GPIO_Init+0x28c>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d019      	beq.n	8001062 <HAL_GPIO_Init+0xae>
 800102e:	4a85      	ldr	r2, [pc, #532]	; (8001244 <HAL_GPIO_Init+0x290>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d016      	beq.n	8001062 <HAL_GPIO_Init+0xae>
 8001034:	4a84      	ldr	r2, [pc, #528]	; (8001248 <HAL_GPIO_Init+0x294>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d013      	beq.n	8001062 <HAL_GPIO_Init+0xae>
          break;
 800103a:	e02c      	b.n	8001096 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	623b      	str	r3, [r7, #32]
          break;
 8001042:	e028      	b.n	8001096 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	3304      	adds	r3, #4
 800104a:	623b      	str	r3, [r7, #32]
          break;
 800104c:	e023      	b.n	8001096 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	3308      	adds	r3, #8
 8001054:	623b      	str	r3, [r7, #32]
          break;
 8001056:	e01e      	b.n	8001096 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	330c      	adds	r3, #12
 800105e:	623b      	str	r3, [r7, #32]
          break;
 8001060:	e019      	b.n	8001096 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d102      	bne.n	8001070 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800106a:	2304      	movs	r3, #4
 800106c:	623b      	str	r3, [r7, #32]
          break;
 800106e:	e012      	b.n	8001096 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d105      	bne.n	8001084 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001078:	2308      	movs	r3, #8
 800107a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	69fa      	ldr	r2, [r7, #28]
 8001080:	611a      	str	r2, [r3, #16]
          break;
 8001082:	e008      	b.n	8001096 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001084:	2308      	movs	r3, #8
 8001086:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	69fa      	ldr	r2, [r7, #28]
 800108c:	615a      	str	r2, [r3, #20]
          break;
 800108e:	e002      	b.n	8001096 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001090:	2300      	movs	r3, #0
 8001092:	623b      	str	r3, [r7, #32]
          break;
 8001094:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	2bff      	cmp	r3, #255	; 0xff
 800109a:	d801      	bhi.n	80010a0 <HAL_GPIO_Init+0xec>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	e001      	b.n	80010a4 <HAL_GPIO_Init+0xf0>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3304      	adds	r3, #4
 80010a4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	2bff      	cmp	r3, #255	; 0xff
 80010aa:	d802      	bhi.n	80010b2 <HAL_GPIO_Init+0xfe>
 80010ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	e002      	b.n	80010b8 <HAL_GPIO_Init+0x104>
 80010b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b4:	3b08      	subs	r3, #8
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	210f      	movs	r1, #15
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	fa01 f303 	lsl.w	r3, r1, r3
 80010c6:	43db      	mvns	r3, r3
 80010c8:	401a      	ands	r2, r3
 80010ca:	6a39      	ldr	r1, [r7, #32]
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	fa01 f303 	lsl.w	r3, r1, r3
 80010d2:	431a      	orrs	r2, r3
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	f000 8096 	beq.w	8001212 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010e6:	4b59      	ldr	r3, [pc, #356]	; (800124c <HAL_GPIO_Init+0x298>)
 80010e8:	699b      	ldr	r3, [r3, #24]
 80010ea:	4a58      	ldr	r2, [pc, #352]	; (800124c <HAL_GPIO_Init+0x298>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6193      	str	r3, [r2, #24]
 80010f2:	4b56      	ldr	r3, [pc, #344]	; (800124c <HAL_GPIO_Init+0x298>)
 80010f4:	699b      	ldr	r3, [r3, #24]
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010fe:	4a54      	ldr	r2, [pc, #336]	; (8001250 <HAL_GPIO_Init+0x29c>)
 8001100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001102:	089b      	lsrs	r3, r3, #2
 8001104:	3302      	adds	r3, #2
 8001106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800110a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800110c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110e:	f003 0303 	and.w	r3, r3, #3
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	220f      	movs	r2, #15
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43db      	mvns	r3, r3
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	4013      	ands	r3, r2
 8001120:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a4b      	ldr	r2, [pc, #300]	; (8001254 <HAL_GPIO_Init+0x2a0>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d013      	beq.n	8001152 <HAL_GPIO_Init+0x19e>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a4a      	ldr	r2, [pc, #296]	; (8001258 <HAL_GPIO_Init+0x2a4>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d00d      	beq.n	800114e <HAL_GPIO_Init+0x19a>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a49      	ldr	r2, [pc, #292]	; (800125c <HAL_GPIO_Init+0x2a8>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d007      	beq.n	800114a <HAL_GPIO_Init+0x196>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a48      	ldr	r2, [pc, #288]	; (8001260 <HAL_GPIO_Init+0x2ac>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d101      	bne.n	8001146 <HAL_GPIO_Init+0x192>
 8001142:	2303      	movs	r3, #3
 8001144:	e006      	b.n	8001154 <HAL_GPIO_Init+0x1a0>
 8001146:	2304      	movs	r3, #4
 8001148:	e004      	b.n	8001154 <HAL_GPIO_Init+0x1a0>
 800114a:	2302      	movs	r3, #2
 800114c:	e002      	b.n	8001154 <HAL_GPIO_Init+0x1a0>
 800114e:	2301      	movs	r3, #1
 8001150:	e000      	b.n	8001154 <HAL_GPIO_Init+0x1a0>
 8001152:	2300      	movs	r3, #0
 8001154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001156:	f002 0203 	and.w	r2, r2, #3
 800115a:	0092      	lsls	r2, r2, #2
 800115c:	4093      	lsls	r3, r2
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	4313      	orrs	r3, r2
 8001162:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001164:	493a      	ldr	r1, [pc, #232]	; (8001250 <HAL_GPIO_Init+0x29c>)
 8001166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001168:	089b      	lsrs	r3, r3, #2
 800116a:	3302      	adds	r3, #2
 800116c:	68fa      	ldr	r2, [r7, #12]
 800116e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d006      	beq.n	800118c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800117e:	4b39      	ldr	r3, [pc, #228]	; (8001264 <HAL_GPIO_Init+0x2b0>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	4938      	ldr	r1, [pc, #224]	; (8001264 <HAL_GPIO_Init+0x2b0>)
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	4313      	orrs	r3, r2
 8001188:	600b      	str	r3, [r1, #0]
 800118a:	e006      	b.n	800119a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800118c:	4b35      	ldr	r3, [pc, #212]	; (8001264 <HAL_GPIO_Init+0x2b0>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	43db      	mvns	r3, r3
 8001194:	4933      	ldr	r1, [pc, #204]	; (8001264 <HAL_GPIO_Init+0x2b0>)
 8001196:	4013      	ands	r3, r2
 8001198:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d006      	beq.n	80011b4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011a6:	4b2f      	ldr	r3, [pc, #188]	; (8001264 <HAL_GPIO_Init+0x2b0>)
 80011a8:	685a      	ldr	r2, [r3, #4]
 80011aa:	492e      	ldr	r1, [pc, #184]	; (8001264 <HAL_GPIO_Init+0x2b0>)
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	604b      	str	r3, [r1, #4]
 80011b2:	e006      	b.n	80011c2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011b4:	4b2b      	ldr	r3, [pc, #172]	; (8001264 <HAL_GPIO_Init+0x2b0>)
 80011b6:	685a      	ldr	r2, [r3, #4]
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	43db      	mvns	r3, r3
 80011bc:	4929      	ldr	r1, [pc, #164]	; (8001264 <HAL_GPIO_Init+0x2b0>)
 80011be:	4013      	ands	r3, r2
 80011c0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d006      	beq.n	80011dc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011ce:	4b25      	ldr	r3, [pc, #148]	; (8001264 <HAL_GPIO_Init+0x2b0>)
 80011d0:	689a      	ldr	r2, [r3, #8]
 80011d2:	4924      	ldr	r1, [pc, #144]	; (8001264 <HAL_GPIO_Init+0x2b0>)
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	608b      	str	r3, [r1, #8]
 80011da:	e006      	b.n	80011ea <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011dc:	4b21      	ldr	r3, [pc, #132]	; (8001264 <HAL_GPIO_Init+0x2b0>)
 80011de:	689a      	ldr	r2, [r3, #8]
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	43db      	mvns	r3, r3
 80011e4:	491f      	ldr	r1, [pc, #124]	; (8001264 <HAL_GPIO_Init+0x2b0>)
 80011e6:	4013      	ands	r3, r2
 80011e8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d006      	beq.n	8001204 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011f6:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <HAL_GPIO_Init+0x2b0>)
 80011f8:	68da      	ldr	r2, [r3, #12]
 80011fa:	491a      	ldr	r1, [pc, #104]	; (8001264 <HAL_GPIO_Init+0x2b0>)
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	4313      	orrs	r3, r2
 8001200:	60cb      	str	r3, [r1, #12]
 8001202:	e006      	b.n	8001212 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001204:	4b17      	ldr	r3, [pc, #92]	; (8001264 <HAL_GPIO_Init+0x2b0>)
 8001206:	68da      	ldr	r2, [r3, #12]
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	43db      	mvns	r3, r3
 800120c:	4915      	ldr	r1, [pc, #84]	; (8001264 <HAL_GPIO_Init+0x2b0>)
 800120e:	4013      	ands	r3, r2
 8001210:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001214:	3301      	adds	r3, #1
 8001216:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121e:	fa22 f303 	lsr.w	r3, r2, r3
 8001222:	2b00      	cmp	r3, #0
 8001224:	f47f aed0 	bne.w	8000fc8 <HAL_GPIO_Init+0x14>
  }
}
 8001228:	bf00      	nop
 800122a:	372c      	adds	r7, #44	; 0x2c
 800122c:	46bd      	mov	sp, r7
 800122e:	bc80      	pop	{r7}
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	10210000 	.word	0x10210000
 8001238:	10110000 	.word	0x10110000
 800123c:	10120000 	.word	0x10120000
 8001240:	10310000 	.word	0x10310000
 8001244:	10320000 	.word	0x10320000
 8001248:	10220000 	.word	0x10220000
 800124c:	40021000 	.word	0x40021000
 8001250:	40010000 	.word	0x40010000
 8001254:	40010800 	.word	0x40010800
 8001258:	40010c00 	.word	0x40010c00
 800125c:	40011000 	.word	0x40011000
 8001260:	40011400 	.word	0x40011400
 8001264:	40010400 	.word	0x40010400

08001268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	460b      	mov	r3, r1
 8001272:	807b      	strh	r3, [r7, #2]
 8001274:	4613      	mov	r3, r2
 8001276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001278:	787b      	ldrb	r3, [r7, #1]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800127e:	887a      	ldrh	r2, [r7, #2]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001284:	e003      	b.n	800128e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001286:	887b      	ldrh	r3, [r7, #2]
 8001288:	041a      	lsls	r2, r3, #16
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	611a      	str	r2, [r3, #16]
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr

08001298 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	460b      	mov	r3, r1
 80012a2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012aa:	887a      	ldrh	r2, [r7, #2]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4013      	ands	r3, r2
 80012b0:	041a      	lsls	r2, r3, #16
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	43d9      	mvns	r1, r3
 80012b6:	887b      	ldrh	r3, [r7, #2]
 80012b8:	400b      	ands	r3, r1
 80012ba:	431a      	orrs	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	611a      	str	r2, [r3, #16]
}
 80012c0:	bf00      	nop
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr
	...

080012cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80012d6:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012d8:	695a      	ldr	r2, [r3, #20]
 80012da:	88fb      	ldrh	r3, [r7, #6]
 80012dc:	4013      	ands	r3, r2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d006      	beq.n	80012f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012e2:	4a05      	ldr	r2, [pc, #20]	; (80012f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012e4:	88fb      	ldrh	r3, [r7, #6]
 80012e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012e8:	88fb      	ldrh	r3, [r7, #6]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 f806 	bl	80012fc <HAL_GPIO_EXTI_Callback>
  }
}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40010400 	.word	0x40010400

080012fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr

08001310 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001312:	b08b      	sub	sp, #44	; 0x2c
 8001314:	af06      	add	r7, sp, #24
 8001316:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e0fd      	b.n	800151e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001328:	b2db      	uxtb	r3, r3
 800132a:	2b00      	cmp	r3, #0
 800132c:	d106      	bne.n	800133c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f006 f8d4 	bl	80074e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2203      	movs	r2, #3
 8001340:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4618      	mov	r0, r3
 800134a:	f002 fa87 	bl	800385c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	603b      	str	r3, [r7, #0]
 8001354:	687e      	ldr	r6, [r7, #4]
 8001356:	466d      	mov	r5, sp
 8001358:	f106 0410 	add.w	r4, r6, #16
 800135c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800135e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001360:	6823      	ldr	r3, [r4, #0]
 8001362:	602b      	str	r3, [r5, #0]
 8001364:	1d33      	adds	r3, r6, #4
 8001366:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001368:	6838      	ldr	r0, [r7, #0]
 800136a:	f002 fa51 	bl	8003810 <USB_CoreInit>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d005      	beq.n	8001380 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2202      	movs	r2, #2
 8001378:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e0ce      	b.n	800151e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2100      	movs	r1, #0
 8001386:	4618      	mov	r0, r3
 8001388:	f002 fa82 	bl	8003890 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800138c:	2300      	movs	r3, #0
 800138e:	73fb      	strb	r3, [r7, #15]
 8001390:	e04c      	b.n	800142c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001392:	7bfb      	ldrb	r3, [r7, #15]
 8001394:	6879      	ldr	r1, [r7, #4]
 8001396:	1c5a      	adds	r2, r3, #1
 8001398:	4613      	mov	r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4413      	add	r3, r2
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	440b      	add	r3, r1
 80013a2:	3301      	adds	r3, #1
 80013a4:	2201      	movs	r2, #1
 80013a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
 80013aa:	6879      	ldr	r1, [r7, #4]
 80013ac:	1c5a      	adds	r2, r3, #1
 80013ae:	4613      	mov	r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	4413      	add	r3, r2
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	440b      	add	r3, r1
 80013b8:	7bfa      	ldrb	r2, [r7, #15]
 80013ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013bc:	7bfa      	ldrb	r2, [r7, #15]
 80013be:	7bfb      	ldrb	r3, [r7, #15]
 80013c0:	b298      	uxth	r0, r3
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	4613      	mov	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	4413      	add	r3, r2
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	440b      	add	r3, r1
 80013ce:	3336      	adds	r3, #54	; 0x36
 80013d0:	4602      	mov	r2, r0
 80013d2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013d4:	7bfb      	ldrb	r3, [r7, #15]
 80013d6:	6879      	ldr	r1, [r7, #4]
 80013d8:	1c5a      	adds	r2, r3, #1
 80013da:	4613      	mov	r3, r2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	4413      	add	r3, r2
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	440b      	add	r3, r1
 80013e4:	3303      	adds	r3, #3
 80013e6:	2200      	movs	r2, #0
 80013e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013ea:	7bfa      	ldrb	r2, [r7, #15]
 80013ec:	6879      	ldr	r1, [r7, #4]
 80013ee:	4613      	mov	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	440b      	add	r3, r1
 80013f8:	3338      	adds	r3, #56	; 0x38
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80013fe:	7bfa      	ldrb	r2, [r7, #15]
 8001400:	6879      	ldr	r1, [r7, #4]
 8001402:	4613      	mov	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4413      	add	r3, r2
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	440b      	add	r3, r1
 800140c:	333c      	adds	r3, #60	; 0x3c
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001412:	7bfa      	ldrb	r2, [r7, #15]
 8001414:	6879      	ldr	r1, [r7, #4]
 8001416:	4613      	mov	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4413      	add	r3, r2
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	440b      	add	r3, r1
 8001420:	3340      	adds	r3, #64	; 0x40
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	3301      	adds	r3, #1
 800142a:	73fb      	strb	r3, [r7, #15]
 800142c:	7bfa      	ldrb	r2, [r7, #15]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	429a      	cmp	r2, r3
 8001434:	d3ad      	bcc.n	8001392 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001436:	2300      	movs	r3, #0
 8001438:	73fb      	strb	r3, [r7, #15]
 800143a:	e044      	b.n	80014c6 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800143c:	7bfa      	ldrb	r2, [r7, #15]
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	4613      	mov	r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	4413      	add	r3, r2
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	440b      	add	r3, r1
 800144a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800144e:	2200      	movs	r2, #0
 8001450:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001452:	7bfa      	ldrb	r2, [r7, #15]
 8001454:	6879      	ldr	r1, [r7, #4]
 8001456:	4613      	mov	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4413      	add	r3, r2
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	440b      	add	r3, r1
 8001460:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001464:	7bfa      	ldrb	r2, [r7, #15]
 8001466:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001468:	7bfa      	ldrb	r2, [r7, #15]
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	4613      	mov	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	4413      	add	r3, r2
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	440b      	add	r3, r1
 8001476:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800147a:	2200      	movs	r2, #0
 800147c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800147e:	7bfa      	ldrb	r2, [r7, #15]
 8001480:	6879      	ldr	r1, [r7, #4]
 8001482:	4613      	mov	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	4413      	add	r3, r2
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	440b      	add	r3, r1
 800148c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001494:	7bfa      	ldrb	r2, [r7, #15]
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	4613      	mov	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4413      	add	r3, r2
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	440b      	add	r3, r1
 80014a2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014aa:	7bfa      	ldrb	r2, [r7, #15]
 80014ac:	6879      	ldr	r1, [r7, #4]
 80014ae:	4613      	mov	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4413      	add	r3, r2
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	440b      	add	r3, r1
 80014b8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
 80014c2:	3301      	adds	r3, #1
 80014c4:	73fb      	strb	r3, [r7, #15]
 80014c6:	7bfa      	ldrb	r2, [r7, #15]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d3b5      	bcc.n	800143c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	603b      	str	r3, [r7, #0]
 80014d6:	687e      	ldr	r6, [r7, #4]
 80014d8:	466d      	mov	r5, sp
 80014da:	f106 0410 	add.w	r4, r6, #16
 80014de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014e2:	6823      	ldr	r3, [r4, #0]
 80014e4:	602b      	str	r3, [r5, #0]
 80014e6:	1d33      	adds	r3, r6, #4
 80014e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014ea:	6838      	ldr	r0, [r7, #0]
 80014ec:	f002 f9dc 	bl	80038a8 <USB_DevInit>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d005      	beq.n	8001502 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2202      	movs	r2, #2
 80014fa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e00d      	b.n	800151e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2201      	movs	r2, #1
 800150e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f004 f976 	bl	8005808 <USB_DevDisconnect>

  return HAL_OK;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3714      	adds	r7, #20
 8001522:	46bd      	mov	sp, r7
 8001524:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001526 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001534:	2b01      	cmp	r3, #1
 8001536:	d101      	bne.n	800153c <HAL_PCD_Start+0x16>
 8001538:	2302      	movs	r3, #2
 800153a:	e016      	b.n	800156a <HAL_PCD_Start+0x44>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2201      	movs	r2, #1
 8001540:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f002 f971 	bl	8003830 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800154e:	2101      	movs	r1, #1
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f006 fa3a 	bl	80079ca <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f004 f94a 	bl	80057f4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b088      	sub	sp, #32
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f004 f94c 	bl	800581c <USB_ReadInterrupts>
 8001584:	4603      	mov	r3, r0
 8001586:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800158a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800158e:	d102      	bne.n	8001596 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f000 fb61 	bl	8001c58 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f004 f93e 	bl	800581c <USB_ReadInterrupts>
 80015a0:	4603      	mov	r3, r0
 80015a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015aa:	d112      	bne.n	80015d2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015b4:	b29a      	uxth	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015be:	b292      	uxth	r2, r2
 80015c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f006 f808 	bl	80075da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80015ca:	2100      	movs	r1, #0
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f000 f925 	bl	800181c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f004 f920 	bl	800581c <USB_ReadInterrupts>
 80015dc:	4603      	mov	r3, r0
 80015de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015e6:	d10b      	bne.n	8001600 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80015fa:	b292      	uxth	r2, r2
 80015fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f004 f909 	bl	800581c <USB_ReadInterrupts>
 800160a:	4603      	mov	r3, r0
 800160c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001610:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001614:	d10b      	bne.n	800162e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800161e:	b29a      	uxth	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001628:	b292      	uxth	r2, r2
 800162a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f004 f8f2 	bl	800581c <USB_ReadInterrupts>
 8001638:	4603      	mov	r3, r0
 800163a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800163e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001642:	d126      	bne.n	8001692 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800164c:	b29a      	uxth	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f022 0204 	bic.w	r2, r2, #4
 8001656:	b292      	uxth	r2, r2
 8001658:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001664:	b29a      	uxth	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f022 0208 	bic.w	r2, r2, #8
 800166e:	b292      	uxth	r2, r2
 8001670:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f005 ffe9 	bl	800764c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001682:	b29a      	uxth	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800168c:	b292      	uxth	r2, r2
 800168e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f004 f8c0 	bl	800581c <USB_ReadInterrupts>
 800169c:	4603      	mov	r3, r0
 800169e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016a6:	f040 8084 	bne.w	80017b2 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80016aa:	2300      	movs	r3, #0
 80016ac:	77fb      	strb	r3, [r7, #31]
 80016ae:	e011      	b.n	80016d4 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	461a      	mov	r2, r3
 80016b6:	7ffb      	ldrb	r3, [r7, #31]
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	441a      	add	r2, r3
 80016bc:	7ffb      	ldrb	r3, [r7, #31]
 80016be:	8812      	ldrh	r2, [r2, #0]
 80016c0:	b292      	uxth	r2, r2
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	f107 0120 	add.w	r1, r7, #32
 80016c8:	440b      	add	r3, r1
 80016ca:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80016ce:	7ffb      	ldrb	r3, [r7, #31]
 80016d0:	3301      	adds	r3, #1
 80016d2:	77fb      	strb	r3, [r7, #31]
 80016d4:	7ffb      	ldrb	r3, [r7, #31]
 80016d6:	2b07      	cmp	r3, #7
 80016d8:	d9ea      	bls.n	80016b0 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016e2:	b29a      	uxth	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f042 0201 	orr.w	r2, r2, #1
 80016ec:	b292      	uxth	r2, r2
 80016ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 0201 	bic.w	r2, r2, #1
 8001704:	b292      	uxth	r2, r2
 8001706:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800170a:	bf00      	nop
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001714:	b29b      	uxth	r3, r3
 8001716:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800171a:	2b00      	cmp	r3, #0
 800171c:	d0f6      	beq.n	800170c <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001726:	b29a      	uxth	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001730:	b292      	uxth	r2, r2
 8001732:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001736:	2300      	movs	r3, #0
 8001738:	77fb      	strb	r3, [r7, #31]
 800173a:	e010      	b.n	800175e <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800173c:	7ffb      	ldrb	r3, [r7, #31]
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	6812      	ldr	r2, [r2, #0]
 8001742:	4611      	mov	r1, r2
 8001744:	7ffa      	ldrb	r2, [r7, #31]
 8001746:	0092      	lsls	r2, r2, #2
 8001748:	440a      	add	r2, r1
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	f107 0120 	add.w	r1, r7, #32
 8001750:	440b      	add	r3, r1
 8001752:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001756:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001758:	7ffb      	ldrb	r3, [r7, #31]
 800175a:	3301      	adds	r3, #1
 800175c:	77fb      	strb	r3, [r7, #31]
 800175e:	7ffb      	ldrb	r3, [r7, #31]
 8001760:	2b07      	cmp	r3, #7
 8001762:	d9eb      	bls.n	800173c <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800176c:	b29a      	uxth	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f042 0208 	orr.w	r2, r2, #8
 8001776:	b292      	uxth	r2, r2
 8001778:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001784:	b29a      	uxth	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800178e:	b292      	uxth	r2, r2
 8001790:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800179c:	b29a      	uxth	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f042 0204 	orr.w	r2, r2, #4
 80017a6:	b292      	uxth	r2, r2
 80017a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f005 ff33 	bl	8007618 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f004 f830 	bl	800581c <USB_ReadInterrupts>
 80017bc:	4603      	mov	r3, r0
 80017be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017c6:	d10e      	bne.n	80017e6 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017da:	b292      	uxth	r2, r2
 80017dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f005 feec 	bl	80075be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f004 f816 	bl	800581c <USB_ReadInterrupts>
 80017f0:	4603      	mov	r3, r0
 80017f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017fa:	d10b      	bne.n	8001814 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001804:	b29a      	uxth	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800180e:	b292      	uxth	r2, r2
 8001810:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001814:	bf00      	nop
 8001816:	3720      	adds	r7, #32
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	460b      	mov	r3, r1
 8001826:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800182e:	2b01      	cmp	r3, #1
 8001830:	d101      	bne.n	8001836 <HAL_PCD_SetAddress+0x1a>
 8001832:	2302      	movs	r3, #2
 8001834:	e013      	b.n	800185e <HAL_PCD_SetAddress+0x42>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2201      	movs	r2, #1
 800183a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	78fa      	ldrb	r2, [r7, #3]
 8001842:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	78fa      	ldrb	r2, [r7, #3]
 800184c:	4611      	mov	r1, r2
 800184e:	4618      	mov	r0, r3
 8001850:	f003 ffbd 	bl	80057ce <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b084      	sub	sp, #16
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
 800186e:	4608      	mov	r0, r1
 8001870:	4611      	mov	r1, r2
 8001872:	461a      	mov	r2, r3
 8001874:	4603      	mov	r3, r0
 8001876:	70fb      	strb	r3, [r7, #3]
 8001878:	460b      	mov	r3, r1
 800187a:	803b      	strh	r3, [r7, #0]
 800187c:	4613      	mov	r3, r2
 800187e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001880:	2300      	movs	r3, #0
 8001882:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001884:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001888:	2b00      	cmp	r3, #0
 800188a:	da0e      	bge.n	80018aa <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800188c:	78fb      	ldrb	r3, [r7, #3]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	1c5a      	adds	r2, r3, #1
 8001894:	4613      	mov	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	4413      	add	r3, r2
 80018a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2201      	movs	r2, #1
 80018a6:	705a      	strb	r2, [r3, #1]
 80018a8:	e00e      	b.n	80018c8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018aa:	78fb      	ldrb	r3, [r7, #3]
 80018ac:	f003 0207 	and.w	r2, r3, #7
 80018b0:	4613      	mov	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	4413      	add	r3, r2
 80018c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2200      	movs	r2, #0
 80018c6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80018c8:	78fb      	ldrb	r3, [r7, #3]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80018d4:	883a      	ldrh	r2, [r7, #0]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	78ba      	ldrb	r2, [r7, #2]
 80018de:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	785b      	ldrb	r3, [r3, #1]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d004      	beq.n	80018f2 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80018f2:	78bb      	ldrb	r3, [r7, #2]
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d102      	bne.n	80018fe <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2200      	movs	r2, #0
 80018fc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001904:	2b01      	cmp	r3, #1
 8001906:	d101      	bne.n	800190c <HAL_PCD_EP_Open+0xa6>
 8001908:	2302      	movs	r3, #2
 800190a:	e00e      	b.n	800192a <HAL_PCD_EP_Open+0xc4>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	68f9      	ldr	r1, [r7, #12]
 800191a:	4618      	mov	r0, r3
 800191c:	f001 ffe4 	bl	80038e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001928:	7afb      	ldrb	r3, [r7, #11]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b084      	sub	sp, #16
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
 800193a:	460b      	mov	r3, r1
 800193c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800193e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001942:	2b00      	cmp	r3, #0
 8001944:	da0e      	bge.n	8001964 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001946:	78fb      	ldrb	r3, [r7, #3]
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	1c5a      	adds	r2, r3, #1
 800194e:	4613      	mov	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4413      	add	r3, r2
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	4413      	add	r3, r2
 800195a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2201      	movs	r2, #1
 8001960:	705a      	strb	r2, [r3, #1]
 8001962:	e00e      	b.n	8001982 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001964:	78fb      	ldrb	r3, [r7, #3]
 8001966:	f003 0207 	and.w	r2, r3, #7
 800196a:	4613      	mov	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4413      	add	r3, r2
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	4413      	add	r3, r2
 800197a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2200      	movs	r2, #0
 8001980:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001982:	78fb      	ldrb	r3, [r7, #3]
 8001984:	f003 0307 	and.w	r3, r3, #7
 8001988:	b2da      	uxtb	r2, r3
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001994:	2b01      	cmp	r3, #1
 8001996:	d101      	bne.n	800199c <HAL_PCD_EP_Close+0x6a>
 8001998:	2302      	movs	r3, #2
 800199a:	e00e      	b.n	80019ba <HAL_PCD_EP_Close+0x88>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	68f9      	ldr	r1, [r7, #12]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f002 fb06 	bl	8003fbc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b086      	sub	sp, #24
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	60f8      	str	r0, [r7, #12]
 80019ca:	607a      	str	r2, [r7, #4]
 80019cc:	603b      	str	r3, [r7, #0]
 80019ce:	460b      	mov	r3, r1
 80019d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019d2:	7afb      	ldrb	r3, [r7, #11]
 80019d4:	f003 0207 	and.w	r2, r3, #7
 80019d8:	4613      	mov	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019e4:	68fa      	ldr	r2, [r7, #12]
 80019e6:	4413      	add	r3, r2
 80019e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	2200      	movs	r2, #0
 80019fa:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	2200      	movs	r2, #0
 8001a00:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a02:	7afb      	ldrb	r3, [r7, #11]
 8001a04:	f003 0307 	and.w	r3, r3, #7
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a0e:	7afb      	ldrb	r3, [r7, #11]
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d106      	bne.n	8001a26 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6979      	ldr	r1, [r7, #20]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f002 fcb8 	bl	8004394 <USB_EPStartXfer>
 8001a24:	e005      	b.n	8001a32 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	6979      	ldr	r1, [r7, #20]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f002 fcb1 	bl	8004394 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3718      	adds	r7, #24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	460b      	mov	r3, r1
 8001a46:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001a48:	78fb      	ldrb	r3, [r7, #3]
 8001a4a:	f003 0207 	and.w	r2, r3, #7
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	4613      	mov	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	4413      	add	r3, r2
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	440b      	add	r3, r1
 8001a5a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001a5e:	681b      	ldr	r3, [r3, #0]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bc80      	pop	{r7}
 8001a68:	4770      	bx	lr

08001a6a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b086      	sub	sp, #24
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	60f8      	str	r0, [r7, #12]
 8001a72:	607a      	str	r2, [r7, #4]
 8001a74:	603b      	str	r3, [r7, #0]
 8001a76:	460b      	mov	r3, r1
 8001a78:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a7a:	7afb      	ldrb	r3, [r7, #11]
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	1c5a      	adds	r2, r3, #1
 8001a82:	4613      	mov	r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	4413      	add	r3, r2
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	2200      	movs	r2, #0
 8001aae:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ab6:	7afb      	ldrb	r3, [r7, #11]
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ac2:	7afb      	ldrb	r3, [r7, #11]
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d106      	bne.n	8001ada <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6979      	ldr	r1, [r7, #20]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f002 fc5e 	bl	8004394 <USB_EPStartXfer>
 8001ad8:	e005      	b.n	8001ae6 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6979      	ldr	r1, [r7, #20]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f002 fc57 	bl	8004394 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	460b      	mov	r3, r1
 8001afa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001afc:	78fb      	ldrb	r3, [r7, #3]
 8001afe:	f003 0207 	and.w	r2, r3, #7
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d901      	bls.n	8001b0e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e04c      	b.n	8001ba8 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	da0e      	bge.n	8001b34 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b16:	78fb      	ldrb	r3, [r7, #3]
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	1c5a      	adds	r2, r3, #1
 8001b1e:	4613      	mov	r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	4413      	add	r3, r2
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	4413      	add	r3, r2
 8001b2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	705a      	strb	r2, [r3, #1]
 8001b32:	e00c      	b.n	8001b4e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b34:	78fa      	ldrb	r2, [r7, #3]
 8001b36:	4613      	mov	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	4413      	add	r3, r2
 8001b46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2201      	movs	r2, #1
 8001b52:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b54:	78fb      	ldrb	r3, [r7, #3]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	b2da      	uxtb	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d101      	bne.n	8001b6e <HAL_PCD_EP_SetStall+0x7e>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	e01c      	b.n	8001ba8 <HAL_PCD_EP_SetStall+0xb8>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2201      	movs	r2, #1
 8001b72:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68f9      	ldr	r1, [r7, #12]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f003 fd29 	bl	80055d4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b82:	78fb      	ldrb	r3, [r7, #3]
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d108      	bne.n	8001b9e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001b96:	4619      	mov	r1, r3
 8001b98:	4610      	mov	r0, r2
 8001b9a:	f003 fe4e 	bl	800583a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001bbc:	78fb      	ldrb	r3, [r7, #3]
 8001bbe:	f003 020f 	and.w	r2, r3, #15
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d901      	bls.n	8001bce <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e040      	b.n	8001c50 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001bce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	da0e      	bge.n	8001bf4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bd6:	78fb      	ldrb	r3, [r7, #3]
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	1c5a      	adds	r2, r3, #1
 8001bde:	4613      	mov	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4413      	add	r3, r2
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	4413      	add	r3, r2
 8001bea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	705a      	strb	r2, [r3, #1]
 8001bf2:	e00e      	b.n	8001c12 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bf4:	78fb      	ldrb	r3, [r7, #3]
 8001bf6:	f003 0207 	and.w	r2, r3, #7
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	4413      	add	r3, r2
 8001c0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c18:	78fb      	ldrb	r3, [r7, #3]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d101      	bne.n	8001c32 <HAL_PCD_EP_ClrStall+0x82>
 8001c2e:	2302      	movs	r3, #2
 8001c30:	e00e      	b.n	8001c50 <HAL_PCD_EP_ClrStall+0xa0>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	68f9      	ldr	r1, [r7, #12]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f003 fd17 	bl	8005674 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b08e      	sub	sp, #56	; 0x38
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001c60:	e2df      	b.n	8002222 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c6a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001c6c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	f003 030f 	and.w	r3, r3, #15
 8001c74:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001c78:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f040 8158 	bne.w	8001f32 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001c82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c84:	f003 0310 	and.w	r3, r3, #16
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d152      	bne.n	8001d32 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c9c:	81fb      	strh	r3, [r7, #14]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	89fb      	ldrh	r3, [r7, #14]
 8001ca4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ca8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3328      	adds	r3, #40	; 0x28
 8001cb4:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	4413      	add	r3, r2
 8001cca:	3302      	adds	r3, #2
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6812      	ldr	r2, [r2, #0]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cd8:	881b      	ldrh	r3, [r3, #0]
 8001cda:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	695a      	ldr	r2, [r3, #20]
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	441a      	add	r2, r3
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f005 fc49 	bl	800758a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	f000 828e 	beq.w	8002222 <PCD_EP_ISR_Handler+0x5ca>
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f040 8289 	bne.w	8002222 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	b292      	uxth	r2, r2
 8001d24:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001d30:	e277      	b.n	8002222 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	881b      	ldrh	r3, [r3, #0]
 8001d40:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001d42:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001d44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d034      	beq.n	8001db6 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	461a      	mov	r2, r3
 8001d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	4413      	add	r3, r2
 8001d60:	3306      	adds	r3, #6
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	6812      	ldr	r2, [r2, #0]
 8001d68:	4413      	add	r3, r2
 8001d6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d6e:	881b      	ldrh	r3, [r3, #0]
 8001d70:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d76:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6818      	ldr	r0, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d84:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	f003 fda4 	bl	80058d8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	823b      	strh	r3, [r7, #16]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	8a3a      	ldrh	r2, [r7, #16]
 8001da6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001daa:	b292      	uxth	r2, r2
 8001dac:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f005 fbbe 	bl	8007530 <HAL_PCD_SetupStageCallback>
 8001db4:	e235      	b.n	8002222 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001db6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f280 8231 	bge.w	8002222 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	881b      	ldrh	r3, [r3, #0]
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001dcc:	4013      	ands	r3, r2
 8001dce:	83bb      	strh	r3, [r7, #28]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	8bba      	ldrh	r2, [r7, #28]
 8001dd6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dda:	b292      	uxth	r2, r2
 8001ddc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	461a      	mov	r2, r3
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	4413      	add	r3, r2
 8001df2:	3306      	adds	r3, #6
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	6812      	ldr	r2, [r2, #0]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e00:	881b      	ldrh	r3, [r3, #0]
 8001e02:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d019      	beq.n	8001e46 <PCD_EP_ISR_Handler+0x1ee>
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d015      	beq.n	8001e46 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6818      	ldr	r0, [r3, #0]
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	6959      	ldr	r1, [r3, #20]
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	f003 fd54 	bl	80058d8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e32:	695a      	ldr	r2, [r3, #20]
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	69db      	ldr	r3, [r3, #28]
 8001e38:	441a      	add	r2, r3
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001e3e:	2100      	movs	r1, #0
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f005 fb87 	bl	8007554 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	61bb      	str	r3, [r7, #24]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	461a      	mov	r2, r3
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001e64:	617b      	str	r3, [r7, #20]
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d112      	bne.n	8001e94 <PCD_EP_ISR_Handler+0x23c>
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	881b      	ldrh	r3, [r3, #0]
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	801a      	strh	r2, [r3, #0]
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	881b      	ldrh	r3, [r3, #0]
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	801a      	strh	r2, [r3, #0]
 8001e92:	e02f      	b.n	8001ef4 <PCD_EP_ISR_Handler+0x29c>
 8001e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	2b3e      	cmp	r3, #62	; 0x3e
 8001e9a:	d813      	bhi.n	8001ec4 <PCD_EP_ISR_Handler+0x26c>
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	085b      	lsrs	r3, r3, #1
 8001ea2:	633b      	str	r3, [r7, #48]	; 0x30
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d002      	beq.n	8001eb6 <PCD_EP_ISR_Handler+0x25e>
 8001eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	633b      	str	r3, [r7, #48]	; 0x30
 8001eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	029b      	lsls	r3, r3, #10
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	801a      	strh	r2, [r3, #0]
 8001ec2:	e017      	b.n	8001ef4 <PCD_EP_ISR_Handler+0x29c>
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	095b      	lsrs	r3, r3, #5
 8001eca:	633b      	str	r3, [r7, #48]	; 0x30
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	f003 031f 	and.w	r3, r3, #31
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d102      	bne.n	8001ede <PCD_EP_ISR_Handler+0x286>
 8001ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eda:	3b01      	subs	r3, #1
 8001edc:	633b      	str	r3, [r7, #48]	; 0x30
 8001ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	029b      	lsls	r3, r3, #10
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001eea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	881b      	ldrh	r3, [r3, #0]
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f04:	827b      	strh	r3, [r7, #18]
 8001f06:	8a7b      	ldrh	r3, [r7, #18]
 8001f08:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001f0c:	827b      	strh	r3, [r7, #18]
 8001f0e:	8a7b      	ldrh	r3, [r7, #18]
 8001f10:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001f14:	827b      	strh	r3, [r7, #18]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	8a7b      	ldrh	r3, [r7, #18]
 8001f1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	8013      	strh	r3, [r2, #0]
 8001f30:	e177      	b.n	8002222 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	461a      	mov	r2, r3
 8001f38:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	881b      	ldrh	r3, [r3, #0]
 8001f42:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f44:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f280 80ea 	bge.w	8002122 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	461a      	mov	r2, r3
 8001f54:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	881b      	ldrh	r3, [r3, #0]
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f64:	4013      	ands	r3, r2
 8001f66:	853b      	strh	r3, [r7, #40]	; 0x28
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001f78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f7c:	b292      	uxth	r2, r2
 8001f7e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001f80:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001f84:	4613      	mov	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4413      	add	r3, r2
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	4413      	add	r3, r2
 8001f94:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f98:	7b1b      	ldrb	r3, [r3, #12]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d122      	bne.n	8001fe4 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	461a      	mov	r2, r3
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	3306      	adds	r3, #6
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	6812      	ldr	r2, [r2, #0]
 8001fba:	4413      	add	r3, r2
 8001fbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fc0:	881b      	ldrh	r3, [r3, #0]
 8001fc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fc6:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001fc8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 8087 	beq.w	80020de <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6818      	ldr	r0, [r3, #0]
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	6959      	ldr	r1, [r3, #20]
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	88da      	ldrh	r2, [r3, #6]
 8001fdc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fde:	f003 fc7b 	bl	80058d8 <USB_ReadPMA>
 8001fe2:	e07c      	b.n	80020de <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	78db      	ldrb	r3, [r3, #3]
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d108      	bne.n	8001ffe <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001fec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001fee:	461a      	mov	r2, r3
 8001ff0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f923 	bl	800223e <HAL_PCD_EP_DB_Receive>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001ffc:	e06f      	b.n	80020de <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	461a      	mov	r2, r3
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	881b      	ldrh	r3, [r3, #0]
 800200e:	b29b      	uxth	r3, r3
 8002010:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002018:	847b      	strh	r3, [r7, #34]	; 0x22
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	461a      	mov	r2, r3
 8002020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	441a      	add	r2, r3
 8002028:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800202a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800202e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002036:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800203a:	b29b      	uxth	r3, r3
 800203c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	461a      	mov	r2, r3
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	881b      	ldrh	r3, [r3, #0]
 800204e:	b29b      	uxth	r3, r3
 8002050:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d021      	beq.n	800209c <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002060:	b29b      	uxth	r3, r3
 8002062:	461a      	mov	r2, r3
 8002064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	4413      	add	r3, r2
 800206c:	3302      	adds	r3, #2
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	6812      	ldr	r2, [r2, #0]
 8002074:	4413      	add	r3, r2
 8002076:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800207a:	881b      	ldrh	r3, [r3, #0]
 800207c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002080:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002082:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002084:	2b00      	cmp	r3, #0
 8002086:	d02a      	beq.n	80020de <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6818      	ldr	r0, [r3, #0]
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	6959      	ldr	r1, [r3, #20]
 8002090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002092:	891a      	ldrh	r2, [r3, #8]
 8002094:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002096:	f003 fc1f 	bl	80058d8 <USB_ReadPMA>
 800209a:	e020      	b.n	80020de <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	461a      	mov	r2, r3
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	4413      	add	r3, r2
 80020b0:	3306      	adds	r3, #6
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	6812      	ldr	r2, [r2, #0]
 80020b8:	4413      	add	r3, r2
 80020ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020c4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80020c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d008      	beq.n	80020de <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6818      	ldr	r0, [r3, #0]
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	6959      	ldr	r1, [r3, #20]
 80020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d6:	895a      	ldrh	r2, [r3, #10]
 80020d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020da:	f003 fbfd 	bl	80058d8 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	69da      	ldr	r2, [r3, #28]
 80020e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020e4:	441a      	add	r2, r3
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	695a      	ldr	r2, [r3, #20]
 80020ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020f0:	441a      	add	r2, r3
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d004      	beq.n	8002108 <PCD_EP_ISR_Handler+0x4b0>
 80020fe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	429a      	cmp	r2, r3
 8002106:	d206      	bcs.n	8002116 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	4619      	mov	r1, r3
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f005 fa20 	bl	8007554 <HAL_PCD_DataOutStageCallback>
 8002114:	e005      	b.n	8002122 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800211c:	4618      	mov	r0, r3
 800211e:	f002 f939 	bl	8004394 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002122:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002128:	2b00      	cmp	r3, #0
 800212a:	d07a      	beq.n	8002222 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 800212c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002130:	1c5a      	adds	r2, r3, #1
 8002132:	4613      	mov	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	4413      	add	r3, r2
 800213e:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	461a      	mov	r2, r3
 8002146:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	881b      	ldrh	r3, [r3, #0]
 8002150:	b29b      	uxth	r3, r3
 8002152:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800215a:	843b      	strh	r3, [r7, #32]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	461a      	mov	r2, r3
 8002162:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	441a      	add	r2, r3
 800216a:	8c3b      	ldrh	r3, [r7, #32]
 800216c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002170:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002174:	b29b      	uxth	r3, r3
 8002176:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217a:	78db      	ldrb	r3, [r3, #3]
 800217c:	2b02      	cmp	r3, #2
 800217e:	d108      	bne.n	8002192 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002182:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002184:	2b02      	cmp	r3, #2
 8002186:	d146      	bne.n	8002216 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002188:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800218a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218e:	2b00      	cmp	r3, #0
 8002190:	d141      	bne.n	8002216 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800219a:	b29b      	uxth	r3, r3
 800219c:	461a      	mov	r2, r3
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	4413      	add	r3, r2
 80021a6:	3302      	adds	r3, #2
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	6812      	ldr	r2, [r2, #0]
 80021ae:	4413      	add	r3, r2
 80021b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021b4:	881b      	ldrh	r3, [r3, #0]
 80021b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021ba:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80021bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021be:	699a      	ldr	r2, [r3, #24]
 80021c0:	8bfb      	ldrh	r3, [r7, #30]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d906      	bls.n	80021d4 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	699a      	ldr	r2, [r3, #24]
 80021ca:	8bfb      	ldrh	r3, [r7, #30]
 80021cc:	1ad2      	subs	r2, r2, r3
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	619a      	str	r2, [r3, #24]
 80021d2:	e002      	b.n	80021da <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 80021d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d6:	2200      	movs	r2, #0
 80021d8:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80021da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d106      	bne.n	80021f0 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80021e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	4619      	mov	r1, r3
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f005 f9ce 	bl	800758a <HAL_PCD_DataInStageCallback>
 80021ee:	e018      	b.n	8002222 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	695a      	ldr	r2, [r3, #20]
 80021f4:	8bfb      	ldrh	r3, [r7, #30]
 80021f6:	441a      	add	r2, r3
 80021f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fa:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80021fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fe:	69da      	ldr	r2, [r3, #28]
 8002200:	8bfb      	ldrh	r3, [r7, #30]
 8002202:	441a      	add	r2, r3
 8002204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002206:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800220e:	4618      	mov	r0, r3
 8002210:	f002 f8c0 	bl	8004394 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002214:	e005      	b.n	8002222 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002216:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002218:	461a      	mov	r2, r3
 800221a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 f91b 	bl	8002458 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800222a:	b29b      	uxth	r3, r3
 800222c:	b21b      	sxth	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	f6ff ad17 	blt.w	8001c62 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3738      	adds	r7, #56	; 0x38
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b088      	sub	sp, #32
 8002242:	af00      	add	r7, sp, #0
 8002244:	60f8      	str	r0, [r7, #12]
 8002246:	60b9      	str	r1, [r7, #8]
 8002248:	4613      	mov	r3, r2
 800224a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800224c:	88fb      	ldrh	r3, [r7, #6]
 800224e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d07e      	beq.n	8002354 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800225e:	b29b      	uxth	r3, r3
 8002260:	461a      	mov	r2, r3
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	4413      	add	r3, r2
 800226a:	3302      	adds	r3, #2
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	6812      	ldr	r2, [r2, #0]
 8002272:	4413      	add	r3, r2
 8002274:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002278:	881b      	ldrh	r3, [r3, #0]
 800227a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800227e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	699a      	ldr	r2, [r3, #24]
 8002284:	8b7b      	ldrh	r3, [r7, #26]
 8002286:	429a      	cmp	r2, r3
 8002288:	d306      	bcc.n	8002298 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	699a      	ldr	r2, [r3, #24]
 800228e:	8b7b      	ldrh	r3, [r7, #26]
 8002290:	1ad2      	subs	r2, r2, r3
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	619a      	str	r2, [r3, #24]
 8002296:	e002      	b.n	800229e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	2200      	movs	r2, #0
 800229c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d123      	bne.n	80022ee <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	461a      	mov	r2, r3
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	4413      	add	r3, r2
 80022b4:	881b      	ldrh	r3, [r3, #0]
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022c0:	833b      	strh	r3, [r7, #24]
 80022c2:	8b3b      	ldrh	r3, [r7, #24]
 80022c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80022c8:	833b      	strh	r3, [r7, #24]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	461a      	mov	r2, r3
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	441a      	add	r2, r3
 80022d8:	8b3b      	ldrh	r3, [r7, #24]
 80022da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80022ee:	88fb      	ldrh	r3, [r7, #6]
 80022f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d01f      	beq.n	8002338 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	461a      	mov	r2, r3
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4413      	add	r3, r2
 8002306:	881b      	ldrh	r3, [r3, #0]
 8002308:	b29b      	uxth	r3, r3
 800230a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800230e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002312:	82fb      	strh	r3, [r7, #22]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	461a      	mov	r2, r3
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	441a      	add	r2, r3
 8002322:	8afb      	ldrh	r3, [r7, #22]
 8002324:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002328:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800232c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002330:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002334:	b29b      	uxth	r3, r3
 8002336:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002338:	8b7b      	ldrh	r3, [r7, #26]
 800233a:	2b00      	cmp	r3, #0
 800233c:	f000 8087 	beq.w	800244e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6818      	ldr	r0, [r3, #0]
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	6959      	ldr	r1, [r3, #20]
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	891a      	ldrh	r2, [r3, #8]
 800234c:	8b7b      	ldrh	r3, [r7, #26]
 800234e:	f003 fac3 	bl	80058d8 <USB_ReadPMA>
 8002352:	e07c      	b.n	800244e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800235c:	b29b      	uxth	r3, r3
 800235e:	461a      	mov	r2, r3
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	4413      	add	r3, r2
 8002368:	3306      	adds	r3, #6
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	4413      	add	r3, r2
 8002372:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800237c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	699a      	ldr	r2, [r3, #24]
 8002382:	8b7b      	ldrh	r3, [r7, #26]
 8002384:	429a      	cmp	r2, r3
 8002386:	d306      	bcc.n	8002396 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	699a      	ldr	r2, [r3, #24]
 800238c:	8b7b      	ldrh	r3, [r7, #26]
 800238e:	1ad2      	subs	r2, r2, r3
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	619a      	str	r2, [r3, #24]
 8002394:	e002      	b.n	800239c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	2200      	movs	r2, #0
 800239a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d123      	bne.n	80023ec <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	461a      	mov	r2, r3
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	881b      	ldrh	r3, [r3, #0]
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023be:	83fb      	strh	r3, [r7, #30]
 80023c0:	8bfb      	ldrh	r3, [r7, #30]
 80023c2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80023c6:	83fb      	strh	r3, [r7, #30]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	461a      	mov	r2, r3
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	441a      	add	r2, r3
 80023d6:	8bfb      	ldrh	r3, [r7, #30]
 80023d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80023ec:	88fb      	ldrh	r3, [r7, #6]
 80023ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d11f      	bne.n	8002436 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	461a      	mov	r2, r3
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4413      	add	r3, r2
 8002404:	881b      	ldrh	r3, [r3, #0]
 8002406:	b29b      	uxth	r3, r3
 8002408:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800240c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002410:	83bb      	strh	r3, [r7, #28]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	461a      	mov	r2, r3
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	441a      	add	r2, r3
 8002420:	8bbb      	ldrh	r3, [r7, #28]
 8002422:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002426:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800242a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800242e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002432:	b29b      	uxth	r3, r3
 8002434:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002436:	8b7b      	ldrh	r3, [r7, #26]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d008      	beq.n	800244e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6818      	ldr	r0, [r3, #0]
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	6959      	ldr	r1, [r3, #20]
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	895a      	ldrh	r2, [r3, #10]
 8002448:	8b7b      	ldrh	r3, [r7, #26]
 800244a:	f003 fa45 	bl	80058d8 <USB_ReadPMA>
    }
  }

  return count;
 800244e:	8b7b      	ldrh	r3, [r7, #26]
}
 8002450:	4618      	mov	r0, r3
 8002452:	3720      	adds	r7, #32
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b092      	sub	sp, #72	; 0x48
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	4613      	mov	r3, r2
 8002464:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002466:	88fb      	ldrh	r3, [r7, #6]
 8002468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800246c:	2b00      	cmp	r3, #0
 800246e:	f000 8132 	beq.w	80026d6 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800247a:	b29b      	uxth	r3, r3
 800247c:	461a      	mov	r2, r3
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	4413      	add	r3, r2
 8002486:	3302      	adds	r3, #2
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	6812      	ldr	r2, [r2, #0]
 800248e:	4413      	add	r3, r2
 8002490:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002494:	881b      	ldrh	r3, [r3, #0]
 8002496:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800249a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	699a      	ldr	r2, [r3, #24]
 80024a0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d906      	bls.n	80024b4 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	699a      	ldr	r2, [r3, #24]
 80024aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80024ac:	1ad2      	subs	r2, r2, r3
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	619a      	str	r2, [r3, #24]
 80024b2:	e002      	b.n	80024ba <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	2200      	movs	r2, #0
 80024b8:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d12c      	bne.n	800251c <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	4619      	mov	r1, r3
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f005 f85e 	bl	800758a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80024ce:	88fb      	ldrh	r3, [r7, #6]
 80024d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f000 822f 	beq.w	8002938 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	461a      	mov	r2, r3
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	4413      	add	r3, r2
 80024e8:	881b      	ldrh	r3, [r3, #0]
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024f4:	827b      	strh	r3, [r7, #18]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	461a      	mov	r2, r3
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	441a      	add	r2, r3
 8002504:	8a7b      	ldrh	r3, [r7, #18]
 8002506:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800250a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800250e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002512:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002516:	b29b      	uxth	r3, r3
 8002518:	8013      	strh	r3, [r2, #0]
 800251a:	e20d      	b.n	8002938 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800251c:	88fb      	ldrh	r3, [r7, #6]
 800251e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d01f      	beq.n	8002566 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	461a      	mov	r2, r3
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	881b      	ldrh	r3, [r3, #0]
 8002536:	b29b      	uxth	r3, r3
 8002538:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800253c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002540:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	461a      	mov	r2, r3
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	441a      	add	r2, r3
 8002550:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002552:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002556:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800255a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800255e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002562:	b29b      	uxth	r3, r3
 8002564:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800256c:	2b01      	cmp	r3, #1
 800256e:	f040 81e3 	bne.w	8002938 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	695a      	ldr	r2, [r3, #20]
 8002576:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002578:	441a      	add	r2, r3
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	69da      	ldr	r2, [r3, #28]
 8002582:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002584:	441a      	add	r2, r3
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	6a1a      	ldr	r2, [r3, #32]
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	429a      	cmp	r2, r3
 8002594:	d309      	bcc.n	80025aa <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	6a1a      	ldr	r2, [r3, #32]
 80025a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a2:	1ad2      	subs	r2, r2, r3
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	621a      	str	r2, [r3, #32]
 80025a8:	e014      	b.n	80025d4 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d106      	bne.n	80025c0 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 80025b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80025b4:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80025be:	e009      	b.n	80025d4 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	2200      	movs	r2, #0
 80025d2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	785b      	ldrb	r3, [r3, #1]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d155      	bne.n	8002688 <HAL_PCD_EP_DB_Transmit+0x230>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	61bb      	str	r3, [r7, #24]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	461a      	mov	r2, r3
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	4413      	add	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	011a      	lsls	r2, r3, #4
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	4413      	add	r3, r2
 80025fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002602:	617b      	str	r3, [r7, #20]
 8002604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002606:	2b00      	cmp	r3, #0
 8002608:	d112      	bne.n	8002630 <HAL_PCD_EP_DB_Transmit+0x1d8>
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	881b      	ldrh	r3, [r3, #0]
 800260e:	b29b      	uxth	r3, r3
 8002610:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002614:	b29a      	uxth	r2, r3
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	801a      	strh	r2, [r3, #0]
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	881b      	ldrh	r3, [r3, #0]
 800261e:	b29b      	uxth	r3, r3
 8002620:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002624:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002628:	b29a      	uxth	r2, r3
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	801a      	strh	r2, [r3, #0]
 800262e:	e047      	b.n	80026c0 <HAL_PCD_EP_DB_Transmit+0x268>
 8002630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002632:	2b3e      	cmp	r3, #62	; 0x3e
 8002634:	d811      	bhi.n	800265a <HAL_PCD_EP_DB_Transmit+0x202>
 8002636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002638:	085b      	lsrs	r3, r3, #1
 800263a:	62bb      	str	r3, [r7, #40]	; 0x28
 800263c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b00      	cmp	r3, #0
 8002644:	d002      	beq.n	800264c <HAL_PCD_EP_DB_Transmit+0x1f4>
 8002646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002648:	3301      	adds	r3, #1
 800264a:	62bb      	str	r3, [r7, #40]	; 0x28
 800264c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800264e:	b29b      	uxth	r3, r3
 8002650:	029b      	lsls	r3, r3, #10
 8002652:	b29a      	uxth	r2, r3
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	801a      	strh	r2, [r3, #0]
 8002658:	e032      	b.n	80026c0 <HAL_PCD_EP_DB_Transmit+0x268>
 800265a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800265c:	095b      	lsrs	r3, r3, #5
 800265e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002662:	f003 031f 	and.w	r3, r3, #31
 8002666:	2b00      	cmp	r3, #0
 8002668:	d102      	bne.n	8002670 <HAL_PCD_EP_DB_Transmit+0x218>
 800266a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266c:	3b01      	subs	r3, #1
 800266e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002672:	b29b      	uxth	r3, r3
 8002674:	029b      	lsls	r3, r3, #10
 8002676:	b29b      	uxth	r3, r3
 8002678:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800267c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002680:	b29a      	uxth	r2, r3
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	801a      	strh	r2, [r3, #0]
 8002686:	e01b      	b.n	80026c0 <HAL_PCD_EP_DB_Transmit+0x268>
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	785b      	ldrb	r3, [r3, #1]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d117      	bne.n	80026c0 <HAL_PCD_EP_DB_Transmit+0x268>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	623b      	str	r3, [r7, #32]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800269e:	b29b      	uxth	r3, r3
 80026a0:	461a      	mov	r2, r3
 80026a2:	6a3b      	ldr	r3, [r7, #32]
 80026a4:	4413      	add	r3, r2
 80026a6:	623b      	str	r3, [r7, #32]
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	011a      	lsls	r2, r3, #4
 80026ae:	6a3b      	ldr	r3, [r7, #32]
 80026b0:	4413      	add	r3, r2
 80026b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80026b6:	61fb      	str	r3, [r7, #28]
 80026b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6818      	ldr	r0, [r3, #0]
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	6959      	ldr	r1, [r3, #20]
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	891a      	ldrh	r2, [r3, #8]
 80026cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	f003 f8be 	bl	8005850 <USB_WritePMA>
 80026d4:	e130      	b.n	8002938 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026de:	b29b      	uxth	r3, r3
 80026e0:	461a      	mov	r2, r3
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	4413      	add	r3, r2
 80026ea:	3306      	adds	r3, #6
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	6812      	ldr	r2, [r2, #0]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026f8:	881b      	ldrh	r3, [r3, #0]
 80026fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026fe:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	699a      	ldr	r2, [r3, #24]
 8002704:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002706:	429a      	cmp	r2, r3
 8002708:	d306      	bcc.n	8002718 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	699a      	ldr	r2, [r3, #24]
 800270e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002710:	1ad2      	subs	r2, r2, r3
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	619a      	str	r2, [r3, #24]
 8002716:	e002      	b.n	800271e <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	2200      	movs	r2, #0
 800271c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d12c      	bne.n	8002780 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	4619      	mov	r1, r3
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f004 ff2c 	bl	800758a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002732:	88fb      	ldrh	r3, [r7, #6]
 8002734:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002738:	2b00      	cmp	r3, #0
 800273a:	f040 80fd 	bne.w	8002938 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	461a      	mov	r2, r3
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4413      	add	r3, r2
 800274c:	881b      	ldrh	r3, [r3, #0]
 800274e:	b29b      	uxth	r3, r3
 8002750:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002754:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002758:	84fb      	strh	r3, [r7, #38]	; 0x26
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	461a      	mov	r2, r3
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	441a      	add	r2, r3
 8002768:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800276a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800276e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002772:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800277a:	b29b      	uxth	r3, r3
 800277c:	8013      	strh	r3, [r2, #0]
 800277e:	e0db      	b.n	8002938 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002780:	88fb      	ldrh	r3, [r7, #6]
 8002782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d11f      	bne.n	80027ca <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	461a      	mov	r2, r3
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	881b      	ldrh	r3, [r3, #0]
 800279a:	b29b      	uxth	r3, r3
 800279c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027a4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	461a      	mov	r2, r3
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	441a      	add	r2, r3
 80027b4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80027b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	f040 80b1 	bne.w	8002938 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	695a      	ldr	r2, [r3, #20]
 80027da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80027dc:	441a      	add	r2, r3
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	69da      	ldr	r2, [r3, #28]
 80027e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80027e8:	441a      	add	r2, r3
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	6a1a      	ldr	r2, [r3, #32]
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d309      	bcc.n	800280e <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	6a1a      	ldr	r2, [r3, #32]
 8002804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002806:	1ad2      	subs	r2, r2, r3
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	621a      	str	r2, [r3, #32]
 800280c:	e014      	b.n	8002838 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d106      	bne.n	8002824 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8002816:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002818:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002822:	e009      	b.n	8002838 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	2200      	movs	r2, #0
 800282e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	637b      	str	r3, [r7, #52]	; 0x34
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	785b      	ldrb	r3, [r3, #1]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d155      	bne.n	80028f2 <HAL_PCD_EP_DB_Transmit+0x49a>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	647b      	str	r3, [r7, #68]	; 0x44
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002854:	b29b      	uxth	r3, r3
 8002856:	461a      	mov	r2, r3
 8002858:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800285a:	4413      	add	r3, r2
 800285c:	647b      	str	r3, [r7, #68]	; 0x44
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	011a      	lsls	r2, r3, #4
 8002864:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002866:	4413      	add	r3, r2
 8002868:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800286c:	643b      	str	r3, [r7, #64]	; 0x40
 800286e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002870:	2b00      	cmp	r3, #0
 8002872:	d112      	bne.n	800289a <HAL_PCD_EP_DB_Transmit+0x442>
 8002874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002876:	881b      	ldrh	r3, [r3, #0]
 8002878:	b29b      	uxth	r3, r3
 800287a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800287e:	b29a      	uxth	r2, r3
 8002880:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002882:	801a      	strh	r2, [r3, #0]
 8002884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002886:	881b      	ldrh	r3, [r3, #0]
 8002888:	b29b      	uxth	r3, r3
 800288a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800288e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002892:	b29a      	uxth	r2, r3
 8002894:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002896:	801a      	strh	r2, [r3, #0]
 8002898:	e044      	b.n	8002924 <HAL_PCD_EP_DB_Transmit+0x4cc>
 800289a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800289c:	2b3e      	cmp	r3, #62	; 0x3e
 800289e:	d811      	bhi.n	80028c4 <HAL_PCD_EP_DB_Transmit+0x46c>
 80028a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a2:	085b      	lsrs	r3, r3, #1
 80028a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d002      	beq.n	80028b6 <HAL_PCD_EP_DB_Transmit+0x45e>
 80028b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028b2:	3301      	adds	r3, #1
 80028b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	029b      	lsls	r3, r3, #10
 80028bc:	b29a      	uxth	r2, r3
 80028be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028c0:	801a      	strh	r2, [r3, #0]
 80028c2:	e02f      	b.n	8002924 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80028c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c6:	095b      	lsrs	r3, r3, #5
 80028c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028cc:	f003 031f 	and.w	r3, r3, #31
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d102      	bne.n	80028da <HAL_PCD_EP_DB_Transmit+0x482>
 80028d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028d6:	3b01      	subs	r3, #1
 80028d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028dc:	b29b      	uxth	r3, r3
 80028de:	029b      	lsls	r3, r3, #10
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028ee:	801a      	strh	r2, [r3, #0]
 80028f0:	e018      	b.n	8002924 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	785b      	ldrb	r3, [r3, #1]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d114      	bne.n	8002924 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002902:	b29b      	uxth	r3, r3
 8002904:	461a      	mov	r2, r3
 8002906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002908:	4413      	add	r3, r2
 800290a:	637b      	str	r3, [r7, #52]	; 0x34
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	011a      	lsls	r2, r3, #4
 8002912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002914:	4413      	add	r3, r2
 8002916:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800291a:	633b      	str	r3, [r7, #48]	; 0x30
 800291c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800291e:	b29a      	uxth	r2, r3
 8002920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002922:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6818      	ldr	r0, [r3, #0]
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	6959      	ldr	r1, [r3, #20]
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	895a      	ldrh	r2, [r3, #10]
 8002930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002932:	b29b      	uxth	r3, r3
 8002934:	f002 ff8c 	bl	8005850 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	461a      	mov	r2, r3
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	881b      	ldrh	r3, [r3, #0]
 8002948:	b29b      	uxth	r3, r3
 800294a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800294e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002952:	823b      	strh	r3, [r7, #16]
 8002954:	8a3b      	ldrh	r3, [r7, #16]
 8002956:	f083 0310 	eor.w	r3, r3, #16
 800295a:	823b      	strh	r3, [r7, #16]
 800295c:	8a3b      	ldrh	r3, [r7, #16]
 800295e:	f083 0320 	eor.w	r3, r3, #32
 8002962:	823b      	strh	r3, [r7, #16]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	461a      	mov	r2, r3
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	441a      	add	r2, r3
 8002972:	8a3b      	ldrh	r3, [r7, #16]
 8002974:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002978:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800297c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002984:	b29b      	uxth	r3, r3
 8002986:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3748      	adds	r7, #72	; 0x48
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002992:	b480      	push	{r7}
 8002994:	b087      	sub	sp, #28
 8002996:	af00      	add	r7, sp, #0
 8002998:	60f8      	str	r0, [r7, #12]
 800299a:	607b      	str	r3, [r7, #4]
 800299c:	460b      	mov	r3, r1
 800299e:	817b      	strh	r3, [r7, #10]
 80029a0:	4613      	mov	r3, r2
 80029a2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80029a4:	897b      	ldrh	r3, [r7, #10]
 80029a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00b      	beq.n	80029c8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029b0:	897b      	ldrh	r3, [r7, #10]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	1c5a      	adds	r2, r3, #1
 80029b8:	4613      	mov	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4413      	add	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	4413      	add	r3, r2
 80029c4:	617b      	str	r3, [r7, #20]
 80029c6:	e009      	b.n	80029dc <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029c8:	897a      	ldrh	r2, [r7, #10]
 80029ca:	4613      	mov	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4413      	add	r3, r2
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	4413      	add	r3, r2
 80029da:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80029dc:	893b      	ldrh	r3, [r7, #8]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d107      	bne.n	80029f2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	2200      	movs	r2, #0
 80029e6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	80da      	strh	r2, [r3, #6]
 80029f0:	e00b      	b.n	8002a0a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	2201      	movs	r2, #1
 80029f6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	0c1b      	lsrs	r3, r3, #16
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	371c      	adds	r7, #28
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bc80      	pop	{r7}
 8002a14:	4770      	bx	lr
	...

08002a18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e26c      	b.n	8002f04 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f000 8087 	beq.w	8002b46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a38:	4b92      	ldr	r3, [pc, #584]	; (8002c84 <HAL_RCC_OscConfig+0x26c>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f003 030c 	and.w	r3, r3, #12
 8002a40:	2b04      	cmp	r3, #4
 8002a42:	d00c      	beq.n	8002a5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a44:	4b8f      	ldr	r3, [pc, #572]	; (8002c84 <HAL_RCC_OscConfig+0x26c>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f003 030c 	and.w	r3, r3, #12
 8002a4c:	2b08      	cmp	r3, #8
 8002a4e:	d112      	bne.n	8002a76 <HAL_RCC_OscConfig+0x5e>
 8002a50:	4b8c      	ldr	r3, [pc, #560]	; (8002c84 <HAL_RCC_OscConfig+0x26c>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a5c:	d10b      	bne.n	8002a76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a5e:	4b89      	ldr	r3, [pc, #548]	; (8002c84 <HAL_RCC_OscConfig+0x26c>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d06c      	beq.n	8002b44 <HAL_RCC_OscConfig+0x12c>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d168      	bne.n	8002b44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e246      	b.n	8002f04 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a7e:	d106      	bne.n	8002a8e <HAL_RCC_OscConfig+0x76>
 8002a80:	4b80      	ldr	r3, [pc, #512]	; (8002c84 <HAL_RCC_OscConfig+0x26c>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a7f      	ldr	r2, [pc, #508]	; (8002c84 <HAL_RCC_OscConfig+0x26c>)
 8002a86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a8a:	6013      	str	r3, [r2, #0]
 8002a8c:	e02e      	b.n	8002aec <HAL_RCC_OscConfig+0xd4>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10c      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x98>
 8002a96:	4b7b      	ldr	r3, [pc, #492]	; (8002c84 <HAL_RCC_OscConfig+0x26c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a7a      	ldr	r2, [pc, #488]	; (8002c84 <HAL_RCC_OscConfig+0x26c>)
 8002a9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aa0:	6013      	str	r3, [r2, #0]
 8002aa2:	4b78      	ldr	r3, [pc, #480]	; (8002c84 <HAL_RCC_OscConfig+0x26c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a77      	ldr	r2, [pc, #476]	; (8002c84 <HAL_RCC_OscConfig+0x26c>)
 8002aa8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aac:	6013      	str	r3, [r2, #0]
 8002aae:	e01d      	b.n	8002aec <HAL_RCC_OscConfig+0xd4>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ab8:	d10c      	bne.n	8002ad4 <HAL_RCC_OscConfig+0xbc>
 8002aba:	4b72      	ldr	r3, [pc, #456]	; (8002c84 <HAL_RCC_OscConfig+0x26c>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a71      	ldr	r2, [pc, #452]	; (8002c84 <HAL_RCC_OscConfig+0x26c>)
 8002ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ac4:	6013      	str	r3, [r2, #0]
 8002ac6:	4b6f      	ldr	r3, [pc, #444]	; (8002c84 <HAL_RCC_OscConfig+0x26c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a6e      	ldr	r2, [pc, #440]	; (8002c84 <HAL_RCC_OscConfig+0x26c>)
 8002acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	e00b      	b.n	8002aec <HAL_RCC_OscConfig+0xd4>
 8002ad4:	4b6b      	ldr	r3, [pc, #428]	; (8002c84 <HAL_RCC_OscConfig+0x26c>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a6a      	ldr	r2, [pc, #424]	; (8002c84 <HAL_RCC_OscConfig+0x26c>)
 8002ada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ade:	6013      	str	r3, [r2, #0]
 8002ae0:	4b68      	ldr	r3, [pc, #416]	; (8002c84 <HAL_RCC_OscConfig+0x26c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a67      	ldr	r2, [pc, #412]	; (8002c84 <HAL_RCC_OscConfig+0x26c>)
 8002ae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d013      	beq.n	8002b1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af4:	f7fd feee 	bl	80008d4 <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002afc:	f7fd feea 	bl	80008d4 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b64      	cmp	r3, #100	; 0x64
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e1fa      	b.n	8002f04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0e:	4b5d      	ldr	r3, [pc, #372]	; (8002c84 <HAL_RCC_OscConfig+0x26c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d0f0      	beq.n	8002afc <HAL_RCC_OscConfig+0xe4>
 8002b1a:	e014      	b.n	8002b46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1c:	f7fd feda 	bl	80008d4 <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b24:	f7fd fed6 	bl	80008d4 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b64      	cmp	r3, #100	; 0x64
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e1e6      	b.n	8002f04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b36:	4b53      	ldr	r3, [pc, #332]	; (8002c84 <HAL_RCC_OscConfig+0x26c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1f0      	bne.n	8002b24 <HAL_RCC_OscConfig+0x10c>
 8002b42:	e000      	b.n	8002b46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d063      	beq.n	8002c1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b52:	4b4c      	ldr	r3, [pc, #304]	; (8002c84 <HAL_RCC_OscConfig+0x26c>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f003 030c 	and.w	r3, r3, #12
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00b      	beq.n	8002b76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b5e:	4b49      	ldr	r3, [pc, #292]	; (8002c84 <HAL_RCC_OscConfig+0x26c>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f003 030c 	and.w	r3, r3, #12
 8002b66:	2b08      	cmp	r3, #8
 8002b68:	d11c      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x18c>
 8002b6a:	4b46      	ldr	r3, [pc, #280]	; (8002c84 <HAL_RCC_OscConfig+0x26c>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d116      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b76:	4b43      	ldr	r3, [pc, #268]	; (8002c84 <HAL_RCC_OscConfig+0x26c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d005      	beq.n	8002b8e <HAL_RCC_OscConfig+0x176>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d001      	beq.n	8002b8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e1ba      	b.n	8002f04 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b8e:	4b3d      	ldr	r3, [pc, #244]	; (8002c84 <HAL_RCC_OscConfig+0x26c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	4939      	ldr	r1, [pc, #228]	; (8002c84 <HAL_RCC_OscConfig+0x26c>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ba2:	e03a      	b.n	8002c1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d020      	beq.n	8002bee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bac:	4b36      	ldr	r3, [pc, #216]	; (8002c88 <HAL_RCC_OscConfig+0x270>)
 8002bae:	2201      	movs	r2, #1
 8002bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb2:	f7fd fe8f 	bl	80008d4 <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb8:	e008      	b.n	8002bcc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bba:	f7fd fe8b 	bl	80008d4 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e19b      	b.n	8002f04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bcc:	4b2d      	ldr	r3, [pc, #180]	; (8002c84 <HAL_RCC_OscConfig+0x26c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d0f0      	beq.n	8002bba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd8:	4b2a      	ldr	r3, [pc, #168]	; (8002c84 <HAL_RCC_OscConfig+0x26c>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	695b      	ldr	r3, [r3, #20]
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	4927      	ldr	r1, [pc, #156]	; (8002c84 <HAL_RCC_OscConfig+0x26c>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	600b      	str	r3, [r1, #0]
 8002bec:	e015      	b.n	8002c1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bee:	4b26      	ldr	r3, [pc, #152]	; (8002c88 <HAL_RCC_OscConfig+0x270>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf4:	f7fd fe6e 	bl	80008d4 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bfc:	f7fd fe6a 	bl	80008d4 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e17a      	b.n	8002f04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0e:	4b1d      	ldr	r3, [pc, #116]	; (8002c84 <HAL_RCC_OscConfig+0x26c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1f0      	bne.n	8002bfc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0308 	and.w	r3, r3, #8
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d03a      	beq.n	8002c9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d019      	beq.n	8002c62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c2e:	4b17      	ldr	r3, [pc, #92]	; (8002c8c <HAL_RCC_OscConfig+0x274>)
 8002c30:	2201      	movs	r2, #1
 8002c32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c34:	f7fd fe4e 	bl	80008d4 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c3c:	f7fd fe4a 	bl	80008d4 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e15a      	b.n	8002f04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c4e:	4b0d      	ldr	r3, [pc, #52]	; (8002c84 <HAL_RCC_OscConfig+0x26c>)
 8002c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0f0      	beq.n	8002c3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c5a:	2001      	movs	r0, #1
 8002c5c:	f000 faa8 	bl	80031b0 <RCC_Delay>
 8002c60:	e01c      	b.n	8002c9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c62:	4b0a      	ldr	r3, [pc, #40]	; (8002c8c <HAL_RCC_OscConfig+0x274>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c68:	f7fd fe34 	bl	80008d4 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c6e:	e00f      	b.n	8002c90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c70:	f7fd fe30 	bl	80008d4 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d908      	bls.n	8002c90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e140      	b.n	8002f04 <HAL_RCC_OscConfig+0x4ec>
 8002c82:	bf00      	nop
 8002c84:	40021000 	.word	0x40021000
 8002c88:	42420000 	.word	0x42420000
 8002c8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c90:	4b9e      	ldr	r3, [pc, #632]	; (8002f0c <HAL_RCC_OscConfig+0x4f4>)
 8002c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d1e9      	bne.n	8002c70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f000 80a6 	beq.w	8002df6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002caa:	2300      	movs	r3, #0
 8002cac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cae:	4b97      	ldr	r3, [pc, #604]	; (8002f0c <HAL_RCC_OscConfig+0x4f4>)
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10d      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cba:	4b94      	ldr	r3, [pc, #592]	; (8002f0c <HAL_RCC_OscConfig+0x4f4>)
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	4a93      	ldr	r2, [pc, #588]	; (8002f0c <HAL_RCC_OscConfig+0x4f4>)
 8002cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cc4:	61d3      	str	r3, [r2, #28]
 8002cc6:	4b91      	ldr	r3, [pc, #580]	; (8002f0c <HAL_RCC_OscConfig+0x4f4>)
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cce:	60bb      	str	r3, [r7, #8]
 8002cd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd6:	4b8e      	ldr	r3, [pc, #568]	; (8002f10 <HAL_RCC_OscConfig+0x4f8>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d118      	bne.n	8002d14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ce2:	4b8b      	ldr	r3, [pc, #556]	; (8002f10 <HAL_RCC_OscConfig+0x4f8>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a8a      	ldr	r2, [pc, #552]	; (8002f10 <HAL_RCC_OscConfig+0x4f8>)
 8002ce8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cee:	f7fd fdf1 	bl	80008d4 <HAL_GetTick>
 8002cf2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf4:	e008      	b.n	8002d08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cf6:	f7fd fded 	bl	80008d4 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b64      	cmp	r3, #100	; 0x64
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e0fd      	b.n	8002f04 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d08:	4b81      	ldr	r3, [pc, #516]	; (8002f10 <HAL_RCC_OscConfig+0x4f8>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d0f0      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d106      	bne.n	8002d2a <HAL_RCC_OscConfig+0x312>
 8002d1c:	4b7b      	ldr	r3, [pc, #492]	; (8002f0c <HAL_RCC_OscConfig+0x4f4>)
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	4a7a      	ldr	r2, [pc, #488]	; (8002f0c <HAL_RCC_OscConfig+0x4f4>)
 8002d22:	f043 0301 	orr.w	r3, r3, #1
 8002d26:	6213      	str	r3, [r2, #32]
 8002d28:	e02d      	b.n	8002d86 <HAL_RCC_OscConfig+0x36e>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10c      	bne.n	8002d4c <HAL_RCC_OscConfig+0x334>
 8002d32:	4b76      	ldr	r3, [pc, #472]	; (8002f0c <HAL_RCC_OscConfig+0x4f4>)
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	4a75      	ldr	r2, [pc, #468]	; (8002f0c <HAL_RCC_OscConfig+0x4f4>)
 8002d38:	f023 0301 	bic.w	r3, r3, #1
 8002d3c:	6213      	str	r3, [r2, #32]
 8002d3e:	4b73      	ldr	r3, [pc, #460]	; (8002f0c <HAL_RCC_OscConfig+0x4f4>)
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	4a72      	ldr	r2, [pc, #456]	; (8002f0c <HAL_RCC_OscConfig+0x4f4>)
 8002d44:	f023 0304 	bic.w	r3, r3, #4
 8002d48:	6213      	str	r3, [r2, #32]
 8002d4a:	e01c      	b.n	8002d86 <HAL_RCC_OscConfig+0x36e>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	2b05      	cmp	r3, #5
 8002d52:	d10c      	bne.n	8002d6e <HAL_RCC_OscConfig+0x356>
 8002d54:	4b6d      	ldr	r3, [pc, #436]	; (8002f0c <HAL_RCC_OscConfig+0x4f4>)
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	4a6c      	ldr	r2, [pc, #432]	; (8002f0c <HAL_RCC_OscConfig+0x4f4>)
 8002d5a:	f043 0304 	orr.w	r3, r3, #4
 8002d5e:	6213      	str	r3, [r2, #32]
 8002d60:	4b6a      	ldr	r3, [pc, #424]	; (8002f0c <HAL_RCC_OscConfig+0x4f4>)
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	4a69      	ldr	r2, [pc, #420]	; (8002f0c <HAL_RCC_OscConfig+0x4f4>)
 8002d66:	f043 0301 	orr.w	r3, r3, #1
 8002d6a:	6213      	str	r3, [r2, #32]
 8002d6c:	e00b      	b.n	8002d86 <HAL_RCC_OscConfig+0x36e>
 8002d6e:	4b67      	ldr	r3, [pc, #412]	; (8002f0c <HAL_RCC_OscConfig+0x4f4>)
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	4a66      	ldr	r2, [pc, #408]	; (8002f0c <HAL_RCC_OscConfig+0x4f4>)
 8002d74:	f023 0301 	bic.w	r3, r3, #1
 8002d78:	6213      	str	r3, [r2, #32]
 8002d7a:	4b64      	ldr	r3, [pc, #400]	; (8002f0c <HAL_RCC_OscConfig+0x4f4>)
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	4a63      	ldr	r2, [pc, #396]	; (8002f0c <HAL_RCC_OscConfig+0x4f4>)
 8002d80:	f023 0304 	bic.w	r3, r3, #4
 8002d84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d015      	beq.n	8002dba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d8e:	f7fd fda1 	bl	80008d4 <HAL_GetTick>
 8002d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d94:	e00a      	b.n	8002dac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d96:	f7fd fd9d 	bl	80008d4 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e0ab      	b.n	8002f04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dac:	4b57      	ldr	r3, [pc, #348]	; (8002f0c <HAL_RCC_OscConfig+0x4f4>)
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d0ee      	beq.n	8002d96 <HAL_RCC_OscConfig+0x37e>
 8002db8:	e014      	b.n	8002de4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dba:	f7fd fd8b 	bl	80008d4 <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dc0:	e00a      	b.n	8002dd8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dc2:	f7fd fd87 	bl	80008d4 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e095      	b.n	8002f04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dd8:	4b4c      	ldr	r3, [pc, #304]	; (8002f0c <HAL_RCC_OscConfig+0x4f4>)
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1ee      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002de4:	7dfb      	ldrb	r3, [r7, #23]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d105      	bne.n	8002df6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dea:	4b48      	ldr	r3, [pc, #288]	; (8002f0c <HAL_RCC_OscConfig+0x4f4>)
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	4a47      	ldr	r2, [pc, #284]	; (8002f0c <HAL_RCC_OscConfig+0x4f4>)
 8002df0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002df4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f000 8081 	beq.w	8002f02 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e00:	4b42      	ldr	r3, [pc, #264]	; (8002f0c <HAL_RCC_OscConfig+0x4f4>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f003 030c 	and.w	r3, r3, #12
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	d061      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	69db      	ldr	r3, [r3, #28]
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d146      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e14:	4b3f      	ldr	r3, [pc, #252]	; (8002f14 <HAL_RCC_OscConfig+0x4fc>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1a:	f7fd fd5b 	bl	80008d4 <HAL_GetTick>
 8002e1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e20:	e008      	b.n	8002e34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e22:	f7fd fd57 	bl	80008d4 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e067      	b.n	8002f04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e34:	4b35      	ldr	r3, [pc, #212]	; (8002f0c <HAL_RCC_OscConfig+0x4f4>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1f0      	bne.n	8002e22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e48:	d108      	bne.n	8002e5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e4a:	4b30      	ldr	r3, [pc, #192]	; (8002f0c <HAL_RCC_OscConfig+0x4f4>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	492d      	ldr	r1, [pc, #180]	; (8002f0c <HAL_RCC_OscConfig+0x4f4>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e5c:	4b2b      	ldr	r3, [pc, #172]	; (8002f0c <HAL_RCC_OscConfig+0x4f4>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a19      	ldr	r1, [r3, #32]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	430b      	orrs	r3, r1
 8002e6e:	4927      	ldr	r1, [pc, #156]	; (8002f0c <HAL_RCC_OscConfig+0x4f4>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e74:	4b27      	ldr	r3, [pc, #156]	; (8002f14 <HAL_RCC_OscConfig+0x4fc>)
 8002e76:	2201      	movs	r2, #1
 8002e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7a:	f7fd fd2b 	bl	80008d4 <HAL_GetTick>
 8002e7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e80:	e008      	b.n	8002e94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e82:	f7fd fd27 	bl	80008d4 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e037      	b.n	8002f04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e94:	4b1d      	ldr	r3, [pc, #116]	; (8002f0c <HAL_RCC_OscConfig+0x4f4>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0f0      	beq.n	8002e82 <HAL_RCC_OscConfig+0x46a>
 8002ea0:	e02f      	b.n	8002f02 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea2:	4b1c      	ldr	r3, [pc, #112]	; (8002f14 <HAL_RCC_OscConfig+0x4fc>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea8:	f7fd fd14 	bl	80008d4 <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb0:	f7fd fd10 	bl	80008d4 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e020      	b.n	8002f04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ec2:	4b12      	ldr	r3, [pc, #72]	; (8002f0c <HAL_RCC_OscConfig+0x4f4>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1f0      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x498>
 8002ece:	e018      	b.n	8002f02 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	69db      	ldr	r3, [r3, #28]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d101      	bne.n	8002edc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e013      	b.n	8002f04 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002edc:	4b0b      	ldr	r3, [pc, #44]	; (8002f0c <HAL_RCC_OscConfig+0x4f4>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d106      	bne.n	8002efe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d001      	beq.n	8002f02 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e000      	b.n	8002f04 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3718      	adds	r7, #24
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	40007000 	.word	0x40007000
 8002f14:	42420060 	.word	0x42420060

08002f18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e0d0      	b.n	80030ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f2c:	4b6a      	ldr	r3, [pc, #424]	; (80030d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d910      	bls.n	8002f5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f3a:	4b67      	ldr	r3, [pc, #412]	; (80030d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f023 0207 	bic.w	r2, r3, #7
 8002f42:	4965      	ldr	r1, [pc, #404]	; (80030d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f4a:	4b63      	ldr	r3, [pc, #396]	; (80030d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0307 	and.w	r3, r3, #7
 8002f52:	683a      	ldr	r2, [r7, #0]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d001      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e0b8      	b.n	80030ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d020      	beq.n	8002faa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0304 	and.w	r3, r3, #4
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d005      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f74:	4b59      	ldr	r3, [pc, #356]	; (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	4a58      	ldr	r2, [pc, #352]	; (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8002f7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0308 	and.w	r3, r3, #8
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d005      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f8c:	4b53      	ldr	r3, [pc, #332]	; (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	4a52      	ldr	r2, [pc, #328]	; (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8002f92:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f98:	4b50      	ldr	r3, [pc, #320]	; (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	494d      	ldr	r1, [pc, #308]	; (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d040      	beq.n	8003038 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d107      	bne.n	8002fce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fbe:	4b47      	ldr	r3, [pc, #284]	; (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d115      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e07f      	b.n	80030ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d107      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fd6:	4b41      	ldr	r3, [pc, #260]	; (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d109      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e073      	b.n	80030ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe6:	4b3d      	ldr	r3, [pc, #244]	; (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e06b      	b.n	80030ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ff6:	4b39      	ldr	r3, [pc, #228]	; (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f023 0203 	bic.w	r2, r3, #3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	4936      	ldr	r1, [pc, #216]	; (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8003004:	4313      	orrs	r3, r2
 8003006:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003008:	f7fd fc64 	bl	80008d4 <HAL_GetTick>
 800300c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800300e:	e00a      	b.n	8003026 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003010:	f7fd fc60 	bl	80008d4 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	f241 3288 	movw	r2, #5000	; 0x1388
 800301e:	4293      	cmp	r3, r2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e053      	b.n	80030ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003026:	4b2d      	ldr	r3, [pc, #180]	; (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f003 020c 	and.w	r2, r3, #12
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	429a      	cmp	r2, r3
 8003036:	d1eb      	bne.n	8003010 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003038:	4b27      	ldr	r3, [pc, #156]	; (80030d8 <HAL_RCC_ClockConfig+0x1c0>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	429a      	cmp	r2, r3
 8003044:	d210      	bcs.n	8003068 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003046:	4b24      	ldr	r3, [pc, #144]	; (80030d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f023 0207 	bic.w	r2, r3, #7
 800304e:	4922      	ldr	r1, [pc, #136]	; (80030d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	4313      	orrs	r3, r2
 8003054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003056:	4b20      	ldr	r3, [pc, #128]	; (80030d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0307 	and.w	r3, r3, #7
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	429a      	cmp	r2, r3
 8003062:	d001      	beq.n	8003068 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e032      	b.n	80030ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	2b00      	cmp	r3, #0
 8003072:	d008      	beq.n	8003086 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003074:	4b19      	ldr	r3, [pc, #100]	; (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	4916      	ldr	r1, [pc, #88]	; (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8003082:	4313      	orrs	r3, r2
 8003084:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0308 	and.w	r3, r3, #8
 800308e:	2b00      	cmp	r3, #0
 8003090:	d009      	beq.n	80030a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003092:	4b12      	ldr	r3, [pc, #72]	; (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	490e      	ldr	r1, [pc, #56]	; (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030a6:	f000 f821 	bl	80030ec <HAL_RCC_GetSysClockFreq>
 80030aa:	4601      	mov	r1, r0
 80030ac:	4b0b      	ldr	r3, [pc, #44]	; (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	091b      	lsrs	r3, r3, #4
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	4a0a      	ldr	r2, [pc, #40]	; (80030e0 <HAL_RCC_ClockConfig+0x1c8>)
 80030b8:	5cd3      	ldrb	r3, [r2, r3]
 80030ba:	fa21 f303 	lsr.w	r3, r1, r3
 80030be:	4a09      	ldr	r2, [pc, #36]	; (80030e4 <HAL_RCC_ClockConfig+0x1cc>)
 80030c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030c2:	4b09      	ldr	r3, [pc, #36]	; (80030e8 <HAL_RCC_ClockConfig+0x1d0>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7fd fbc2 	bl	8000850 <HAL_InitTick>

  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	40022000 	.word	0x40022000
 80030dc:	40021000 	.word	0x40021000
 80030e0:	08008a28 	.word	0x08008a28
 80030e4:	20000000 	.word	0x20000000
 80030e8:	20000004 	.word	0x20000004

080030ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030ec:	b490      	push	{r4, r7}
 80030ee:	b08a      	sub	sp, #40	; 0x28
 80030f0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80030f2:	4b2a      	ldr	r3, [pc, #168]	; (800319c <HAL_RCC_GetSysClockFreq+0xb0>)
 80030f4:	1d3c      	adds	r4, r7, #4
 80030f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80030fc:	4b28      	ldr	r3, [pc, #160]	; (80031a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80030fe:	881b      	ldrh	r3, [r3, #0]
 8003100:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003102:	2300      	movs	r3, #0
 8003104:	61fb      	str	r3, [r7, #28]
 8003106:	2300      	movs	r3, #0
 8003108:	61bb      	str	r3, [r7, #24]
 800310a:	2300      	movs	r3, #0
 800310c:	627b      	str	r3, [r7, #36]	; 0x24
 800310e:	2300      	movs	r3, #0
 8003110:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003112:	2300      	movs	r3, #0
 8003114:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003116:	4b23      	ldr	r3, [pc, #140]	; (80031a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	f003 030c 	and.w	r3, r3, #12
 8003122:	2b04      	cmp	r3, #4
 8003124:	d002      	beq.n	800312c <HAL_RCC_GetSysClockFreq+0x40>
 8003126:	2b08      	cmp	r3, #8
 8003128:	d003      	beq.n	8003132 <HAL_RCC_GetSysClockFreq+0x46>
 800312a:	e02d      	b.n	8003188 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800312c:	4b1e      	ldr	r3, [pc, #120]	; (80031a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800312e:	623b      	str	r3, [r7, #32]
      break;
 8003130:	e02d      	b.n	800318e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	0c9b      	lsrs	r3, r3, #18
 8003136:	f003 030f 	and.w	r3, r3, #15
 800313a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800313e:	4413      	add	r3, r2
 8003140:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003144:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d013      	beq.n	8003178 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003150:	4b14      	ldr	r3, [pc, #80]	; (80031a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	0c5b      	lsrs	r3, r3, #17
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800315e:	4413      	add	r3, r2
 8003160:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003164:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	4a0f      	ldr	r2, [pc, #60]	; (80031a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800316a:	fb02 f203 	mul.w	r2, r2, r3
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	fbb2 f3f3 	udiv	r3, r2, r3
 8003174:	627b      	str	r3, [r7, #36]	; 0x24
 8003176:	e004      	b.n	8003182 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	4a0c      	ldr	r2, [pc, #48]	; (80031ac <HAL_RCC_GetSysClockFreq+0xc0>)
 800317c:	fb02 f303 	mul.w	r3, r2, r3
 8003180:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003184:	623b      	str	r3, [r7, #32]
      break;
 8003186:	e002      	b.n	800318e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003188:	4b07      	ldr	r3, [pc, #28]	; (80031a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800318a:	623b      	str	r3, [r7, #32]
      break;
 800318c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800318e:	6a3b      	ldr	r3, [r7, #32]
}
 8003190:	4618      	mov	r0, r3
 8003192:	3728      	adds	r7, #40	; 0x28
 8003194:	46bd      	mov	sp, r7
 8003196:	bc90      	pop	{r4, r7}
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	08008994 	.word	0x08008994
 80031a0:	080089a4 	.word	0x080089a4
 80031a4:	40021000 	.word	0x40021000
 80031a8:	007a1200 	.word	0x007a1200
 80031ac:	003d0900 	.word	0x003d0900

080031b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031b8:	4b0a      	ldr	r3, [pc, #40]	; (80031e4 <RCC_Delay+0x34>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a0a      	ldr	r2, [pc, #40]	; (80031e8 <RCC_Delay+0x38>)
 80031be:	fba2 2303 	umull	r2, r3, r2, r3
 80031c2:	0a5b      	lsrs	r3, r3, #9
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	fb02 f303 	mul.w	r3, r2, r3
 80031ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031cc:	bf00      	nop
  }
  while (Delay --);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	1e5a      	subs	r2, r3, #1
 80031d2:	60fa      	str	r2, [r7, #12]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1f9      	bne.n	80031cc <RCC_Delay+0x1c>
}
 80031d8:	bf00      	nop
 80031da:	3714      	adds	r7, #20
 80031dc:	46bd      	mov	sp, r7
 80031de:	bc80      	pop	{r7}
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	20000000 	.word	0x20000000
 80031e8:	10624dd3 	.word	0x10624dd3

080031ec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80031f4:	2300      	movs	r3, #0
 80031f6:	613b      	str	r3, [r7, #16]
 80031f8:	2300      	movs	r3, #0
 80031fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	2b00      	cmp	r3, #0
 8003206:	d07d      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003208:	2300      	movs	r3, #0
 800320a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800320c:	4b4f      	ldr	r3, [pc, #316]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800320e:	69db      	ldr	r3, [r3, #28]
 8003210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10d      	bne.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003218:	4b4c      	ldr	r3, [pc, #304]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	4a4b      	ldr	r2, [pc, #300]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800321e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003222:	61d3      	str	r3, [r2, #28]
 8003224:	4b49      	ldr	r3, [pc, #292]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003226:	69db      	ldr	r3, [r3, #28]
 8003228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800322c:	60bb      	str	r3, [r7, #8]
 800322e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003230:	2301      	movs	r3, #1
 8003232:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003234:	4b46      	ldr	r3, [pc, #280]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323c:	2b00      	cmp	r3, #0
 800323e:	d118      	bne.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003240:	4b43      	ldr	r3, [pc, #268]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a42      	ldr	r2, [pc, #264]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800324a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800324c:	f7fd fb42 	bl	80008d4 <HAL_GetTick>
 8003250:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003252:	e008      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003254:	f7fd fb3e 	bl	80008d4 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b64      	cmp	r3, #100	; 0x64
 8003260:	d901      	bls.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e06d      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003266:	4b3a      	ldr	r3, [pc, #232]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800326e:	2b00      	cmp	r3, #0
 8003270:	d0f0      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003272:	4b36      	ldr	r3, [pc, #216]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800327a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d02e      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	429a      	cmp	r2, r3
 800328e:	d027      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003290:	4b2e      	ldr	r3, [pc, #184]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003298:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800329a:	4b2e      	ldr	r3, [pc, #184]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800329c:	2201      	movs	r2, #1
 800329e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032a0:	4b2c      	ldr	r3, [pc, #176]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032a6:	4a29      	ldr	r2, [pc, #164]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d014      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b6:	f7fd fb0d 	bl	80008d4 <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032bc:	e00a      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032be:	f7fd fb09 	bl	80008d4 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e036      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d4:	4b1d      	ldr	r3, [pc, #116]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0ee      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032e0:	4b1a      	ldr	r3, [pc, #104]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	4917      	ldr	r1, [pc, #92]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032f2:	7dfb      	ldrb	r3, [r7, #23]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d105      	bne.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032f8:	4b14      	ldr	r3, [pc, #80]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032fa:	69db      	ldr	r3, [r3, #28]
 80032fc:	4a13      	ldr	r2, [pc, #76]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003302:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d008      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003310:	4b0e      	ldr	r3, [pc, #56]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	490b      	ldr	r1, [pc, #44]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800331e:	4313      	orrs	r3, r2
 8003320:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0310 	and.w	r3, r3, #16
 800332a:	2b00      	cmp	r3, #0
 800332c:	d008      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800332e:	4b07      	ldr	r3, [pc, #28]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	4904      	ldr	r1, [pc, #16]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800333c:	4313      	orrs	r3, r2
 800333e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3718      	adds	r7, #24
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40021000 	.word	0x40021000
 8003350:	40007000 	.word	0x40007000
 8003354:	42420440 	.word	0x42420440

08003358 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e041      	b.n	80033ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d106      	bne.n	8003384 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7fd f98a 	bl	8000698 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2202      	movs	r2, #2
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3304      	adds	r3, #4
 8003394:	4619      	mov	r1, r3
 8003396:	4610      	mov	r0, r2
 8003398:	f000 f8e4 	bl	8003564 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b084      	sub	sp, #16
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
 80033fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003406:	2b01      	cmp	r3, #1
 8003408:	d101      	bne.n	800340e <HAL_TIM_ConfigClockSource+0x18>
 800340a:	2302      	movs	r3, #2
 800340c:	e0a6      	b.n	800355c <HAL_TIM_ConfigClockSource+0x166>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2202      	movs	r2, #2
 800341a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800342c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003434:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2b40      	cmp	r3, #64	; 0x40
 8003444:	d067      	beq.n	8003516 <HAL_TIM_ConfigClockSource+0x120>
 8003446:	2b40      	cmp	r3, #64	; 0x40
 8003448:	d80b      	bhi.n	8003462 <HAL_TIM_ConfigClockSource+0x6c>
 800344a:	2b10      	cmp	r3, #16
 800344c:	d073      	beq.n	8003536 <HAL_TIM_ConfigClockSource+0x140>
 800344e:	2b10      	cmp	r3, #16
 8003450:	d802      	bhi.n	8003458 <HAL_TIM_ConfigClockSource+0x62>
 8003452:	2b00      	cmp	r3, #0
 8003454:	d06f      	beq.n	8003536 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003456:	e078      	b.n	800354a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003458:	2b20      	cmp	r3, #32
 800345a:	d06c      	beq.n	8003536 <HAL_TIM_ConfigClockSource+0x140>
 800345c:	2b30      	cmp	r3, #48	; 0x30
 800345e:	d06a      	beq.n	8003536 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003460:	e073      	b.n	800354a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003462:	2b70      	cmp	r3, #112	; 0x70
 8003464:	d00d      	beq.n	8003482 <HAL_TIM_ConfigClockSource+0x8c>
 8003466:	2b70      	cmp	r3, #112	; 0x70
 8003468:	d804      	bhi.n	8003474 <HAL_TIM_ConfigClockSource+0x7e>
 800346a:	2b50      	cmp	r3, #80	; 0x50
 800346c:	d033      	beq.n	80034d6 <HAL_TIM_ConfigClockSource+0xe0>
 800346e:	2b60      	cmp	r3, #96	; 0x60
 8003470:	d041      	beq.n	80034f6 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003472:	e06a      	b.n	800354a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003478:	d066      	beq.n	8003548 <HAL_TIM_ConfigClockSource+0x152>
 800347a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800347e:	d017      	beq.n	80034b0 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003480:	e063      	b.n	800354a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6818      	ldr	r0, [r3, #0]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	6899      	ldr	r1, [r3, #8]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	f000 f940 	bl	8003716 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034a4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	609a      	str	r2, [r3, #8]
      break;
 80034ae:	e04c      	b.n	800354a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6818      	ldr	r0, [r3, #0]
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	6899      	ldr	r1, [r3, #8]
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	f000 f929 	bl	8003716 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689a      	ldr	r2, [r3, #8]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034d2:	609a      	str	r2, [r3, #8]
      break;
 80034d4:	e039      	b.n	800354a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6818      	ldr	r0, [r3, #0]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	6859      	ldr	r1, [r3, #4]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	461a      	mov	r2, r3
 80034e4:	f000 f8a0 	bl	8003628 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2150      	movs	r1, #80	; 0x50
 80034ee:	4618      	mov	r0, r3
 80034f0:	f000 f8f7 	bl	80036e2 <TIM_ITRx_SetConfig>
      break;
 80034f4:	e029      	b.n	800354a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6818      	ldr	r0, [r3, #0]
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	6859      	ldr	r1, [r3, #4]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	461a      	mov	r2, r3
 8003504:	f000 f8be 	bl	8003684 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2160      	movs	r1, #96	; 0x60
 800350e:	4618      	mov	r0, r3
 8003510:	f000 f8e7 	bl	80036e2 <TIM_ITRx_SetConfig>
      break;
 8003514:	e019      	b.n	800354a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6818      	ldr	r0, [r3, #0]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	6859      	ldr	r1, [r3, #4]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	461a      	mov	r2, r3
 8003524:	f000 f880 	bl	8003628 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2140      	movs	r1, #64	; 0x40
 800352e:	4618      	mov	r0, r3
 8003530:	f000 f8d7 	bl	80036e2 <TIM_ITRx_SetConfig>
      break;
 8003534:	e009      	b.n	800354a <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4619      	mov	r1, r3
 8003540:	4610      	mov	r0, r2
 8003542:	f000 f8ce 	bl	80036e2 <TIM_ITRx_SetConfig>
        break;
 8003546:	e000      	b.n	800354a <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003548:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a29      	ldr	r2, [pc, #164]	; (800361c <TIM_Base_SetConfig+0xb8>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d00b      	beq.n	8003594 <TIM_Base_SetConfig+0x30>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003582:	d007      	beq.n	8003594 <TIM_Base_SetConfig+0x30>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a26      	ldr	r2, [pc, #152]	; (8003620 <TIM_Base_SetConfig+0xbc>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d003      	beq.n	8003594 <TIM_Base_SetConfig+0x30>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a25      	ldr	r2, [pc, #148]	; (8003624 <TIM_Base_SetConfig+0xc0>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d108      	bne.n	80035a6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800359a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a1c      	ldr	r2, [pc, #112]	; (800361c <TIM_Base_SetConfig+0xb8>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d00b      	beq.n	80035c6 <TIM_Base_SetConfig+0x62>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035b4:	d007      	beq.n	80035c6 <TIM_Base_SetConfig+0x62>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a19      	ldr	r2, [pc, #100]	; (8003620 <TIM_Base_SetConfig+0xbc>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d003      	beq.n	80035c6 <TIM_Base_SetConfig+0x62>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a18      	ldr	r2, [pc, #96]	; (8003624 <TIM_Base_SetConfig+0xc0>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d108      	bne.n	80035d8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	689a      	ldr	r2, [r3, #8]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a07      	ldr	r2, [pc, #28]	; (800361c <TIM_Base_SetConfig+0xb8>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d103      	bne.n	800360c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	691a      	ldr	r2, [r3, #16]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	615a      	str	r2, [r3, #20]
}
 8003612:	bf00      	nop
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	bc80      	pop	{r7}
 800361a:	4770      	bx	lr
 800361c:	40012c00 	.word	0x40012c00
 8003620:	40000400 	.word	0x40000400
 8003624:	40000800 	.word	0x40000800

08003628 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003628:	b480      	push	{r7}
 800362a:	b087      	sub	sp, #28
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	f023 0201 	bic.w	r2, r3, #1
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003652:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	011b      	lsls	r3, r3, #4
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	4313      	orrs	r3, r2
 800365c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	f023 030a 	bic.w	r3, r3, #10
 8003664:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	4313      	orrs	r3, r2
 800366c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	621a      	str	r2, [r3, #32]
}
 800367a:	bf00      	nop
 800367c:	371c      	adds	r7, #28
 800367e:	46bd      	mov	sp, r7
 8003680:	bc80      	pop	{r7}
 8003682:	4770      	bx	lr

08003684 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003684:	b480      	push	{r7}
 8003686:	b087      	sub	sp, #28
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	f023 0210 	bic.w	r2, r3, #16
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	031b      	lsls	r3, r3, #12
 80036b4:	697a      	ldr	r2, [r7, #20]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	011b      	lsls	r3, r3, #4
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	621a      	str	r2, [r3, #32]
}
 80036d8:	bf00      	nop
 80036da:	371c      	adds	r7, #28
 80036dc:	46bd      	mov	sp, r7
 80036de:	bc80      	pop	{r7}
 80036e0:	4770      	bx	lr

080036e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b085      	sub	sp, #20
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
 80036ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4313      	orrs	r3, r2
 8003700:	f043 0307 	orr.w	r3, r3, #7
 8003704:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	609a      	str	r2, [r3, #8]
}
 800370c:	bf00      	nop
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	bc80      	pop	{r7}
 8003714:	4770      	bx	lr

08003716 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003716:	b480      	push	{r7}
 8003718:	b087      	sub	sp, #28
 800371a:	af00      	add	r7, sp, #0
 800371c:	60f8      	str	r0, [r7, #12]
 800371e:	60b9      	str	r1, [r7, #8]
 8003720:	607a      	str	r2, [r7, #4]
 8003722:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003730:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	021a      	lsls	r2, r3, #8
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	431a      	orrs	r2, r3
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	4313      	orrs	r3, r2
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	4313      	orrs	r3, r2
 8003742:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	609a      	str	r2, [r3, #8]
}
 800374a:	bf00      	nop
 800374c:	371c      	adds	r7, #28
 800374e:	46bd      	mov	sp, r7
 8003750:	bc80      	pop	{r7}
 8003752:	4770      	bx	lr

08003754 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003764:	2b01      	cmp	r3, #1
 8003766:	d101      	bne.n	800376c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003768:	2302      	movs	r3, #2
 800376a:	e046      	b.n	80037fa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2202      	movs	r2, #2
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003792:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	4313      	orrs	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a16      	ldr	r2, [pc, #88]	; (8003804 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d00e      	beq.n	80037ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037b8:	d009      	beq.n	80037ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a12      	ldr	r2, [pc, #72]	; (8003808 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d004      	beq.n	80037ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a10      	ldr	r2, [pc, #64]	; (800380c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d10c      	bne.n	80037e8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	4313      	orrs	r3, r2
 80037de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68ba      	ldr	r2, [r7, #8]
 80037e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3714      	adds	r7, #20
 80037fe:	46bd      	mov	sp, r7
 8003800:	bc80      	pop	{r7}
 8003802:	4770      	bx	lr
 8003804:	40012c00 	.word	0x40012c00
 8003808:	40000400 	.word	0x40000400
 800380c:	40000800 	.word	0x40000800

08003810 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003810:	b084      	sub	sp, #16
 8003812:	b480      	push	{r7}
 8003814:	b083      	sub	sp, #12
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
 800381a:	f107 0014 	add.w	r0, r7, #20
 800381e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	bc80      	pop	{r7}
 800382c:	b004      	add	sp, #16
 800382e:	4770      	bx	lr

08003830 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003840:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003844:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	b29a      	uxth	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3714      	adds	r7, #20
 8003856:	46bd      	mov	sp, r7
 8003858:	bc80      	pop	{r7}
 800385a:	4770      	bx	lr

0800385c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003864:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003868:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003870:	b29a      	uxth	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	b29b      	uxth	r3, r3
 8003876:	43db      	mvns	r3, r3
 8003878:	b29b      	uxth	r3, r3
 800387a:	4013      	ands	r3, r2
 800387c:	b29a      	uxth	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3714      	adds	r7, #20
 800388a:	46bd      	mov	sp, r7
 800388c:	bc80      	pop	{r7}
 800388e:	4770      	bx	lr

08003890 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	460b      	mov	r3, r1
 800389a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr

080038a8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80038a8:	b084      	sub	sp, #16
 80038aa:	b480      	push	{r7}
 80038ac:	b083      	sub	sp, #12
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
 80038b2:	f107 0014 	add.w	r0, r7, #20
 80038b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bc80      	pop	{r7}
 80038e4:	b004      	add	sp, #16
 80038e6:	4770      	bx	lr

080038e8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b09b      	sub	sp, #108	; 0x6c
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80038f2:	2300      	movs	r3, #0
 80038f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4413      	add	r3, r2
 8003902:	881b      	ldrh	r3, [r3, #0]
 8003904:	b29b      	uxth	r3, r3
 8003906:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800390a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800390e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	78db      	ldrb	r3, [r3, #3]
 8003916:	2b03      	cmp	r3, #3
 8003918:	d81f      	bhi.n	800395a <USB_ActivateEndpoint+0x72>
 800391a:	a201      	add	r2, pc, #4	; (adr r2, 8003920 <USB_ActivateEndpoint+0x38>)
 800391c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003920:	08003931 	.word	0x08003931
 8003924:	0800394d 	.word	0x0800394d
 8003928:	08003963 	.word	0x08003963
 800392c:	0800393f 	.word	0x0800393f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003930:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003934:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003938:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800393c:	e012      	b.n	8003964 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800393e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003942:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003946:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800394a:	e00b      	b.n	8003964 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800394c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003950:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003954:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003958:	e004      	b.n	8003964 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003960:	e000      	b.n	8003964 <USB_ActivateEndpoint+0x7c>
      break;
 8003962:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	441a      	add	r2, r3
 800396e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003972:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003976:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800397a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800397e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003982:	b29b      	uxth	r3, r3
 8003984:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	4413      	add	r3, r2
 8003990:	881b      	ldrh	r3, [r3, #0]
 8003992:	b29b      	uxth	r3, r3
 8003994:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800399c:	b29a      	uxth	r2, r3
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	4313      	orrs	r3, r2
 80039a6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	441a      	add	r2, r3
 80039b4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80039b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	7b1b      	ldrb	r3, [r3, #12]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f040 8149 	bne.w	8003c68 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	785b      	ldrb	r3, [r3, #1]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f000 8084 	beq.w	8003ae8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	617b      	str	r3, [r7, #20]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	461a      	mov	r2, r3
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	4413      	add	r3, r2
 80039f2:	617b      	str	r3, [r7, #20]
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	011a      	lsls	r2, r3, #4
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	4413      	add	r3, r2
 80039fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a02:	613b      	str	r3, [r7, #16]
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	88db      	ldrh	r3, [r3, #6]
 8003a08:	085b      	lsrs	r3, r3, #1
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	4413      	add	r3, r2
 8003a1e:	881b      	ldrh	r3, [r3, #0]
 8003a20:	81fb      	strh	r3, [r7, #14]
 8003a22:	89fb      	ldrh	r3, [r7, #14]
 8003a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d01b      	beq.n	8003a64 <USB_ActivateEndpoint+0x17c>
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	4413      	add	r3, r2
 8003a36:	881b      	ldrh	r3, [r3, #0]
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a42:	81bb      	strh	r3, [r7, #12]
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	441a      	add	r2, r3
 8003a4e:	89bb      	ldrh	r3, [r7, #12]
 8003a50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a5c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	78db      	ldrb	r3, [r3, #3]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d020      	beq.n	8003aae <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4413      	add	r3, r2
 8003a76:	881b      	ldrh	r3, [r3, #0]
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a82:	813b      	strh	r3, [r7, #8]
 8003a84:	893b      	ldrh	r3, [r7, #8]
 8003a86:	f083 0320 	eor.w	r3, r3, #32
 8003a8a:	813b      	strh	r3, [r7, #8]
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	441a      	add	r2, r3
 8003a96:	893b      	ldrh	r3, [r7, #8]
 8003a98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003aa0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	8013      	strh	r3, [r2, #0]
 8003aac:	e27f      	b.n	8003fae <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	4413      	add	r3, r2
 8003ab8:	881b      	ldrh	r3, [r3, #0]
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ac0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ac4:	817b      	strh	r3, [r7, #10]
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	441a      	add	r2, r3
 8003ad0:	897b      	ldrh	r3, [r7, #10]
 8003ad2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ad6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ada:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	8013      	strh	r3, [r2, #0]
 8003ae6:	e262      	b.n	8003fae <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	461a      	mov	r2, r3
 8003af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af8:	4413      	add	r3, r2
 8003afa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	011a      	lsls	r2, r3, #4
 8003b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b04:	4413      	add	r3, r2
 8003b06:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003b0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	88db      	ldrh	r3, [r3, #6]
 8003b10:	085b      	lsrs	r3, r3, #1
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	461a      	mov	r2, r3
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2c:	4413      	add	r3, r2
 8003b2e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	011a      	lsls	r2, r3, #4
 8003b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b38:	4413      	add	r3, r2
 8003b3a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b3e:	623b      	str	r3, [r7, #32]
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d112      	bne.n	8003b6e <USB_ActivateEndpoint+0x286>
 8003b48:	6a3b      	ldr	r3, [r7, #32]
 8003b4a:	881b      	ldrh	r3, [r3, #0]
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	6a3b      	ldr	r3, [r7, #32]
 8003b56:	801a      	strh	r2, [r3, #0]
 8003b58:	6a3b      	ldr	r3, [r7, #32]
 8003b5a:	881b      	ldrh	r3, [r3, #0]
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	6a3b      	ldr	r3, [r7, #32]
 8003b6a:	801a      	strh	r2, [r3, #0]
 8003b6c:	e02f      	b.n	8003bce <USB_ActivateEndpoint+0x2e6>
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	2b3e      	cmp	r3, #62	; 0x3e
 8003b74:	d813      	bhi.n	8003b9e <USB_ActivateEndpoint+0x2b6>
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	085b      	lsrs	r3, r3, #1
 8003b7c:	663b      	str	r3, [r7, #96]	; 0x60
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d002      	beq.n	8003b90 <USB_ActivateEndpoint+0x2a8>
 8003b8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	663b      	str	r3, [r7, #96]	; 0x60
 8003b90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	029b      	lsls	r3, r3, #10
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	6a3b      	ldr	r3, [r7, #32]
 8003b9a:	801a      	strh	r2, [r3, #0]
 8003b9c:	e017      	b.n	8003bce <USB_ActivateEndpoint+0x2e6>
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	095b      	lsrs	r3, r3, #5
 8003ba4:	663b      	str	r3, [r7, #96]	; 0x60
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	f003 031f 	and.w	r3, r3, #31
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d102      	bne.n	8003bb8 <USB_ActivateEndpoint+0x2d0>
 8003bb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	663b      	str	r3, [r7, #96]	; 0x60
 8003bb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	029b      	lsls	r3, r3, #10
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	6a3b      	ldr	r3, [r7, #32]
 8003bcc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	881b      	ldrh	r3, [r3, #0]
 8003bda:	83fb      	strh	r3, [r7, #30]
 8003bdc:	8bfb      	ldrh	r3, [r7, #30]
 8003bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d01b      	beq.n	8003c1e <USB_ActivateEndpoint+0x336>
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	881b      	ldrh	r3, [r3, #0]
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bfc:	83bb      	strh	r3, [r7, #28]
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	441a      	add	r2, r3
 8003c08:	8bbb      	ldrh	r3, [r7, #28]
 8003c0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	4413      	add	r3, r2
 8003c28:	881b      	ldrh	r3, [r3, #0]
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c34:	837b      	strh	r3, [r7, #26]
 8003c36:	8b7b      	ldrh	r3, [r7, #26]
 8003c38:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003c3c:	837b      	strh	r3, [r7, #26]
 8003c3e:	8b7b      	ldrh	r3, [r7, #26]
 8003c40:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003c44:	837b      	strh	r3, [r7, #26]
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	441a      	add	r2, r3
 8003c50:	8b7b      	ldrh	r3, [r7, #26]
 8003c52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	8013      	strh	r3, [r2, #0]
 8003c66:	e1a2      	b.n	8003fae <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	4413      	add	r3, r2
 8003c72:	881b      	ldrh	r3, [r3, #0]
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c7e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	441a      	add	r2, r3
 8003c8c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003c90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c98:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003cb4:	4413      	add	r3, r2
 8003cb6:	65bb      	str	r3, [r7, #88]	; 0x58
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	011a      	lsls	r2, r3, #4
 8003cbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003cc0:	4413      	add	r3, r2
 8003cc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cc6:	657b      	str	r3, [r7, #84]	; 0x54
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	891b      	ldrh	r3, [r3, #8]
 8003ccc:	085b      	lsrs	r3, r3, #1
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	005b      	lsls	r3, r3, #1
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cd6:	801a      	strh	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	653b      	str	r3, [r7, #80]	; 0x50
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ce8:	4413      	add	r3, r2
 8003cea:	653b      	str	r3, [r7, #80]	; 0x50
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	011a      	lsls	r2, r3, #4
 8003cf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cf4:	4413      	add	r3, r2
 8003cf6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	895b      	ldrh	r3, [r3, #10]
 8003d00:	085b      	lsrs	r3, r3, #1
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d0a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	785b      	ldrb	r3, [r3, #1]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f040 8091 	bne.w	8003e38 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	4413      	add	r3, r2
 8003d20:	881b      	ldrh	r3, [r3, #0]
 8003d22:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003d24:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003d26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d01b      	beq.n	8003d66 <USB_ActivateEndpoint+0x47e>
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	4413      	add	r3, r2
 8003d38:	881b      	ldrh	r3, [r3, #0]
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d44:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	441a      	add	r2, r3
 8003d50:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003d52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	4413      	add	r3, r2
 8003d70:	881b      	ldrh	r3, [r3, #0]
 8003d72:	873b      	strh	r3, [r7, #56]	; 0x38
 8003d74:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d01b      	beq.n	8003db6 <USB_ActivateEndpoint+0x4ce>
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	881b      	ldrh	r3, [r3, #0]
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d94:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	441a      	add	r2, r3
 8003da0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003da2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003da6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003daa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	4413      	add	r3, r2
 8003dc0:	881b      	ldrh	r3, [r3, #0]
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dcc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003dce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003dd0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003dd4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003dd6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003dd8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003ddc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	441a      	add	r2, r3
 8003de8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003dea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003df2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003df6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	4413      	add	r3, r2
 8003e08:	881b      	ldrh	r3, [r3, #0]
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e14:	867b      	strh	r3, [r7, #50]	; 0x32
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	441a      	add	r2, r3
 8003e20:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003e22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	8013      	strh	r3, [r2, #0]
 8003e36:	e0ba      	b.n	8003fae <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	4413      	add	r3, r2
 8003e42:	881b      	ldrh	r3, [r3, #0]
 8003e44:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003e48:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003e4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d01d      	beq.n	8003e90 <USB_ActivateEndpoint+0x5a8>
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	4413      	add	r3, r2
 8003e5e:	881b      	ldrh	r3, [r3, #0]
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e6a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	441a      	add	r2, r3
 8003e78:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003e7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	4413      	add	r3, r2
 8003e9a:	881b      	ldrh	r3, [r3, #0]
 8003e9c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003ea0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d01d      	beq.n	8003ee8 <USB_ActivateEndpoint+0x600>
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4413      	add	r3, r2
 8003eb6:	881b      	ldrh	r3, [r3, #0]
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ec2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	441a      	add	r2, r3
 8003ed0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003ed4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ed8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003edc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ee0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	78db      	ldrb	r3, [r3, #3]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d024      	beq.n	8003f3a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4413      	add	r3, r2
 8003efa:	881b      	ldrh	r3, [r3, #0]
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f06:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003f0a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003f0e:	f083 0320 	eor.w	r3, r3, #32
 8003f12:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	441a      	add	r2, r3
 8003f20:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003f24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	8013      	strh	r3, [r2, #0]
 8003f38:	e01d      	b.n	8003f76 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4413      	add	r3, r2
 8003f44:	881b      	ldrh	r3, [r3, #0]
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f50:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	441a      	add	r2, r3
 8003f5e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003f62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	4413      	add	r3, r2
 8003f80:	881b      	ldrh	r3, [r3, #0]
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f8c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	441a      	add	r2, r3
 8003f98:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003f9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003fae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	376c      	adds	r7, #108	; 0x6c
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bc80      	pop	{r7}
 8003fba:	4770      	bx	lr

08003fbc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b08d      	sub	sp, #52	; 0x34
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	7b1b      	ldrb	r3, [r3, #12]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f040 808e 	bne.w	80040ec <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	785b      	ldrb	r3, [r3, #1]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d044      	beq.n	8004062 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	4413      	add	r3, r2
 8003fe2:	881b      	ldrh	r3, [r3, #0]
 8003fe4:	81bb      	strh	r3, [r7, #12]
 8003fe6:	89bb      	ldrh	r3, [r7, #12]
 8003fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d01b      	beq.n	8004028 <USB_DeactivateEndpoint+0x6c>
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4413      	add	r3, r2
 8003ffa:	881b      	ldrh	r3, [r3, #0]
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004006:	817b      	strh	r3, [r7, #10]
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	441a      	add	r2, r3
 8004012:	897b      	ldrh	r3, [r7, #10]
 8004014:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004018:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800401c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004020:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004024:	b29b      	uxth	r3, r3
 8004026:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4413      	add	r3, r2
 8004032:	881b      	ldrh	r3, [r3, #0]
 8004034:	b29b      	uxth	r3, r3
 8004036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800403a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800403e:	813b      	strh	r3, [r7, #8]
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	441a      	add	r2, r3
 800404a:	893b      	ldrh	r3, [r7, #8]
 800404c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004050:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004054:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800405c:	b29b      	uxth	r3, r3
 800405e:	8013      	strh	r3, [r2, #0]
 8004060:	e192      	b.n	8004388 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	4413      	add	r3, r2
 800406c:	881b      	ldrh	r3, [r3, #0]
 800406e:	827b      	strh	r3, [r7, #18]
 8004070:	8a7b      	ldrh	r3, [r7, #18]
 8004072:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d01b      	beq.n	80040b2 <USB_DeactivateEndpoint+0xf6>
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	4413      	add	r3, r2
 8004084:	881b      	ldrh	r3, [r3, #0]
 8004086:	b29b      	uxth	r3, r3
 8004088:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800408c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004090:	823b      	strh	r3, [r7, #16]
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	441a      	add	r2, r3
 800409c:	8a3b      	ldrh	r3, [r7, #16]
 800409e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4413      	add	r3, r2
 80040bc:	881b      	ldrh	r3, [r3, #0]
 80040be:	b29b      	uxth	r3, r3
 80040c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c8:	81fb      	strh	r3, [r7, #14]
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	441a      	add	r2, r3
 80040d4:	89fb      	ldrh	r3, [r7, #14]
 80040d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	8013      	strh	r3, [r2, #0]
 80040ea:	e14d      	b.n	8004388 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	785b      	ldrb	r3, [r3, #1]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f040 80a5 	bne.w	8004240 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4413      	add	r3, r2
 8004100:	881b      	ldrh	r3, [r3, #0]
 8004102:	843b      	strh	r3, [r7, #32]
 8004104:	8c3b      	ldrh	r3, [r7, #32]
 8004106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d01b      	beq.n	8004146 <USB_DeactivateEndpoint+0x18a>
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	4413      	add	r3, r2
 8004118:	881b      	ldrh	r3, [r3, #0]
 800411a:	b29b      	uxth	r3, r3
 800411c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004124:	83fb      	strh	r3, [r7, #30]
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	441a      	add	r2, r3
 8004130:	8bfb      	ldrh	r3, [r7, #30]
 8004132:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004136:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800413a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800413e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004142:	b29b      	uxth	r3, r3
 8004144:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4413      	add	r3, r2
 8004150:	881b      	ldrh	r3, [r3, #0]
 8004152:	83bb      	strh	r3, [r7, #28]
 8004154:	8bbb      	ldrh	r3, [r7, #28]
 8004156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800415a:	2b00      	cmp	r3, #0
 800415c:	d01b      	beq.n	8004196 <USB_DeactivateEndpoint+0x1da>
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4413      	add	r3, r2
 8004168:	881b      	ldrh	r3, [r3, #0]
 800416a:	b29b      	uxth	r3, r3
 800416c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004174:	837b      	strh	r3, [r7, #26]
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	441a      	add	r2, r3
 8004180:	8b7b      	ldrh	r3, [r7, #26]
 8004182:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004186:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800418a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800418e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004192:	b29b      	uxth	r3, r3
 8004194:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4413      	add	r3, r2
 80041a0:	881b      	ldrh	r3, [r3, #0]
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ac:	833b      	strh	r3, [r7, #24]
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	441a      	add	r2, r3
 80041b8:	8b3b      	ldrh	r3, [r7, #24]
 80041ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	4413      	add	r3, r2
 80041d8:	881b      	ldrh	r3, [r3, #0]
 80041da:	b29b      	uxth	r3, r3
 80041dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e4:	82fb      	strh	r3, [r7, #22]
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	441a      	add	r2, r3
 80041f0:	8afb      	ldrh	r3, [r7, #22]
 80041f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004202:	b29b      	uxth	r3, r3
 8004204:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	4413      	add	r3, r2
 8004210:	881b      	ldrh	r3, [r3, #0]
 8004212:	b29b      	uxth	r3, r3
 8004214:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004218:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800421c:	82bb      	strh	r3, [r7, #20]
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	441a      	add	r2, r3
 8004228:	8abb      	ldrh	r3, [r7, #20]
 800422a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800422e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004236:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800423a:	b29b      	uxth	r3, r3
 800423c:	8013      	strh	r3, [r2, #0]
 800423e:	e0a3      	b.n	8004388 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	4413      	add	r3, r2
 800424a:	881b      	ldrh	r3, [r3, #0]
 800424c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800424e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004250:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d01b      	beq.n	8004290 <USB_DeactivateEndpoint+0x2d4>
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4413      	add	r3, r2
 8004262:	881b      	ldrh	r3, [r3, #0]
 8004264:	b29b      	uxth	r3, r3
 8004266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800426a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800426e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	441a      	add	r2, r3
 800427a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800427c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004280:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004284:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800428c:	b29b      	uxth	r3, r3
 800428e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	4413      	add	r3, r2
 800429a:	881b      	ldrh	r3, [r3, #0]
 800429c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800429e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80042a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d01b      	beq.n	80042e0 <USB_DeactivateEndpoint+0x324>
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	4413      	add	r3, r2
 80042b2:	881b      	ldrh	r3, [r3, #0]
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042be:	853b      	strh	r3, [r7, #40]	; 0x28
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	441a      	add	r2, r3
 80042ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80042cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80042dc:	b29b      	uxth	r3, r3
 80042de:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4413      	add	r3, r2
 80042ea:	881b      	ldrh	r3, [r3, #0]
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042f6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	441a      	add	r2, r3
 8004302:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004304:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004308:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800430c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004314:	b29b      	uxth	r3, r3
 8004316:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	4413      	add	r3, r2
 8004322:	881b      	ldrh	r3, [r3, #0]
 8004324:	b29b      	uxth	r3, r3
 8004326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800432a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800432e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	441a      	add	r2, r3
 800433a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800433c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004340:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004344:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800434c:	b29b      	uxth	r3, r3
 800434e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4413      	add	r3, r2
 800435a:	881b      	ldrh	r3, [r3, #0]
 800435c:	b29b      	uxth	r3, r3
 800435e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004366:	847b      	strh	r3, [r7, #34]	; 0x22
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	441a      	add	r2, r3
 8004372:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004374:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004378:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800437c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004384:	b29b      	uxth	r3, r3
 8004386:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3734      	adds	r7, #52	; 0x34
 800438e:	46bd      	mov	sp, r7
 8004390:	bc80      	pop	{r7}
 8004392:	4770      	bx	lr

08004394 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b0c4      	sub	sp, #272	; 0x110
 8004398:	af00      	add	r7, sp, #0
 800439a:	1d3b      	adds	r3, r7, #4
 800439c:	6018      	str	r0, [r3, #0]
 800439e:	463b      	mov	r3, r7
 80043a0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80043a2:	463b      	mov	r3, r7
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	785b      	ldrb	r3, [r3, #1]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	f040 8557 	bne.w	8004e5c <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80043ae:	463b      	mov	r3, r7
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	699a      	ldr	r2, [r3, #24]
 80043b4:	463b      	mov	r3, r7
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d905      	bls.n	80043ca <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80043be:	463b      	mov	r3, r7
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80043c8:	e004      	b.n	80043d4 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80043ca:	463b      	mov	r3, r7
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80043d4:	463b      	mov	r3, r7
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	7b1b      	ldrb	r3, [r3, #12]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d12c      	bne.n	8004438 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80043de:	463b      	mov	r3, r7
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	6959      	ldr	r1, [r3, #20]
 80043e4:	463b      	mov	r3, r7
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	88da      	ldrh	r2, [r3, #6]
 80043ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	1d38      	adds	r0, r7, #4
 80043f2:	6800      	ldr	r0, [r0, #0]
 80043f4:	f001 fa2c 	bl	8005850 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80043f8:	1d3b      	adds	r3, r7, #4
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	617b      	str	r3, [r7, #20]
 80043fe:	1d3b      	adds	r3, r7, #4
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004406:	b29b      	uxth	r3, r3
 8004408:	461a      	mov	r2, r3
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	4413      	add	r3, r2
 800440e:	617b      	str	r3, [r7, #20]
 8004410:	463b      	mov	r3, r7
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	011a      	lsls	r2, r3, #4
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	4413      	add	r3, r2
 800441c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004420:	f107 0310 	add.w	r3, r7, #16
 8004424:	601a      	str	r2, [r3, #0]
 8004426:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800442a:	b29a      	uxth	r2, r3
 800442c:	f107 0310 	add.w	r3, r7, #16
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	801a      	strh	r2, [r3, #0]
 8004434:	f000 bcdd 	b.w	8004df2 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004438:	463b      	mov	r3, r7
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	78db      	ldrb	r3, [r3, #3]
 800443e:	2b02      	cmp	r3, #2
 8004440:	f040 8347 	bne.w	8004ad2 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004444:	463b      	mov	r3, r7
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6a1a      	ldr	r2, [r3, #32]
 800444a:	463b      	mov	r3, r7
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	429a      	cmp	r2, r3
 8004452:	f240 82eb 	bls.w	8004a2c <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004456:	1d3b      	adds	r3, r7, #4
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	463b      	mov	r3, r7
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4413      	add	r3, r2
 8004464:	881b      	ldrh	r3, [r3, #0]
 8004466:	b29b      	uxth	r3, r3
 8004468:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800446c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004470:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8004474:	1d3b      	adds	r3, r7, #4
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	463b      	mov	r3, r7
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	441a      	add	r2, r3
 8004482:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004486:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800448a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800448e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004496:	b29b      	uxth	r3, r3
 8004498:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800449a:	463b      	mov	r3, r7
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	6a1a      	ldr	r2, [r3, #32]
 80044a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044a4:	1ad2      	subs	r2, r2, r3
 80044a6:	463b      	mov	r3, r7
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80044ac:	1d3b      	adds	r3, r7, #4
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	463b      	mov	r3, r7
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	4413      	add	r3, r2
 80044ba:	881b      	ldrh	r3, [r3, #0]
 80044bc:	b29b      	uxth	r3, r3
 80044be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f000 8159 	beq.w	800477a <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80044c8:	1d3b      	adds	r3, r7, #4
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	637b      	str	r3, [r7, #52]	; 0x34
 80044ce:	463b      	mov	r3, r7
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	785b      	ldrb	r3, [r3, #1]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d164      	bne.n	80045a2 <USB_EPStartXfer+0x20e>
 80044d8:	1d3b      	adds	r3, r7, #4
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044de:	1d3b      	adds	r3, r7, #4
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	461a      	mov	r2, r3
 80044ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ec:	4413      	add	r3, r2
 80044ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044f0:	463b      	mov	r3, r7
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	011a      	lsls	r2, r3, #4
 80044f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044fa:	4413      	add	r3, r2
 80044fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004500:	62bb      	str	r3, [r7, #40]	; 0x28
 8004502:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004506:	2b00      	cmp	r3, #0
 8004508:	d112      	bne.n	8004530 <USB_EPStartXfer+0x19c>
 800450a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450c:	881b      	ldrh	r3, [r3, #0]
 800450e:	b29b      	uxth	r3, r3
 8004510:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004514:	b29a      	uxth	r2, r3
 8004516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004518:	801a      	strh	r2, [r3, #0]
 800451a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451c:	881b      	ldrh	r3, [r3, #0]
 800451e:	b29b      	uxth	r3, r3
 8004520:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004524:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004528:	b29a      	uxth	r2, r3
 800452a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452c:	801a      	strh	r2, [r3, #0]
 800452e:	e054      	b.n	80045da <USB_EPStartXfer+0x246>
 8004530:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004534:	2b3e      	cmp	r3, #62	; 0x3e
 8004536:	d817      	bhi.n	8004568 <USB_EPStartXfer+0x1d4>
 8004538:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800453c:	085b      	lsrs	r3, r3, #1
 800453e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004542:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b00      	cmp	r3, #0
 800454c:	d004      	beq.n	8004558 <USB_EPStartXfer+0x1c4>
 800454e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004552:	3301      	adds	r3, #1
 8004554:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004558:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800455c:	b29b      	uxth	r3, r3
 800455e:	029b      	lsls	r3, r3, #10
 8004560:	b29a      	uxth	r2, r3
 8004562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004564:	801a      	strh	r2, [r3, #0]
 8004566:	e038      	b.n	80045da <USB_EPStartXfer+0x246>
 8004568:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800456c:	095b      	lsrs	r3, r3, #5
 800456e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004572:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004576:	f003 031f 	and.w	r3, r3, #31
 800457a:	2b00      	cmp	r3, #0
 800457c:	d104      	bne.n	8004588 <USB_EPStartXfer+0x1f4>
 800457e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004582:	3b01      	subs	r3, #1
 8004584:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004588:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800458c:	b29b      	uxth	r3, r3
 800458e:	029b      	lsls	r3, r3, #10
 8004590:	b29b      	uxth	r3, r3
 8004592:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004596:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800459a:	b29a      	uxth	r2, r3
 800459c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459e:	801a      	strh	r2, [r3, #0]
 80045a0:	e01b      	b.n	80045da <USB_EPStartXfer+0x246>
 80045a2:	463b      	mov	r3, r7
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	785b      	ldrb	r3, [r3, #1]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d116      	bne.n	80045da <USB_EPStartXfer+0x246>
 80045ac:	1d3b      	adds	r3, r7, #4
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	461a      	mov	r2, r3
 80045b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ba:	4413      	add	r3, r2
 80045bc:	637b      	str	r3, [r7, #52]	; 0x34
 80045be:	463b      	mov	r3, r7
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	011a      	lsls	r2, r3, #4
 80045c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045c8:	4413      	add	r3, r2
 80045ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045ce:	633b      	str	r3, [r7, #48]	; 0x30
 80045d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80045da:	463b      	mov	r3, r7
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	895b      	ldrh	r3, [r3, #10]
 80045e0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80045e4:	463b      	mov	r3, r7
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	6959      	ldr	r1, [r3, #20]
 80045ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80045f4:	1d38      	adds	r0, r7, #4
 80045f6:	6800      	ldr	r0, [r0, #0]
 80045f8:	f001 f92a 	bl	8005850 <USB_WritePMA>
            ep->xfer_buff += len;
 80045fc:	463b      	mov	r3, r7
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	695a      	ldr	r2, [r3, #20]
 8004602:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004606:	441a      	add	r2, r3
 8004608:	463b      	mov	r3, r7
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800460e:	463b      	mov	r3, r7
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	6a1a      	ldr	r2, [r3, #32]
 8004614:	463b      	mov	r3, r7
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	429a      	cmp	r2, r3
 800461c:	d909      	bls.n	8004632 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 800461e:	463b      	mov	r3, r7
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	6a1a      	ldr	r2, [r3, #32]
 8004624:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004628:	1ad2      	subs	r2, r2, r3
 800462a:	463b      	mov	r3, r7
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	621a      	str	r2, [r3, #32]
 8004630:	e008      	b.n	8004644 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8004632:	463b      	mov	r3, r7
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6a1b      	ldr	r3, [r3, #32]
 8004638:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800463c:	463b      	mov	r3, r7
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2200      	movs	r2, #0
 8004642:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004644:	463b      	mov	r3, r7
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	785b      	ldrb	r3, [r3, #1]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d164      	bne.n	8004718 <USB_EPStartXfer+0x384>
 800464e:	1d3b      	adds	r3, r7, #4
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	61fb      	str	r3, [r7, #28]
 8004654:	1d3b      	adds	r3, r7, #4
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800465c:	b29b      	uxth	r3, r3
 800465e:	461a      	mov	r2, r3
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	4413      	add	r3, r2
 8004664:	61fb      	str	r3, [r7, #28]
 8004666:	463b      	mov	r3, r7
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	011a      	lsls	r2, r3, #4
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	4413      	add	r3, r2
 8004672:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004676:	61bb      	str	r3, [r7, #24]
 8004678:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800467c:	2b00      	cmp	r3, #0
 800467e:	d112      	bne.n	80046a6 <USB_EPStartXfer+0x312>
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	881b      	ldrh	r3, [r3, #0]
 8004684:	b29b      	uxth	r3, r3
 8004686:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800468a:	b29a      	uxth	r2, r3
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	801a      	strh	r2, [r3, #0]
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	881b      	ldrh	r3, [r3, #0]
 8004694:	b29b      	uxth	r3, r3
 8004696:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800469a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800469e:	b29a      	uxth	r2, r3
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	801a      	strh	r2, [r3, #0]
 80046a4:	e057      	b.n	8004756 <USB_EPStartXfer+0x3c2>
 80046a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046aa:	2b3e      	cmp	r3, #62	; 0x3e
 80046ac:	d817      	bhi.n	80046de <USB_EPStartXfer+0x34a>
 80046ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046b2:	085b      	lsrs	r3, r3, #1
 80046b4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80046b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046bc:	f003 0301 	and.w	r3, r3, #1
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d004      	beq.n	80046ce <USB_EPStartXfer+0x33a>
 80046c4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80046c8:	3301      	adds	r3, #1
 80046ca:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80046ce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	029b      	lsls	r3, r3, #10
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	801a      	strh	r2, [r3, #0]
 80046dc:	e03b      	b.n	8004756 <USB_EPStartXfer+0x3c2>
 80046de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046e2:	095b      	lsrs	r3, r3, #5
 80046e4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80046e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046ec:	f003 031f 	and.w	r3, r3, #31
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d104      	bne.n	80046fe <USB_EPStartXfer+0x36a>
 80046f4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80046f8:	3b01      	subs	r3, #1
 80046fa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80046fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004702:	b29b      	uxth	r3, r3
 8004704:	029b      	lsls	r3, r3, #10
 8004706:	b29b      	uxth	r3, r3
 8004708:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800470c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004710:	b29a      	uxth	r2, r3
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	801a      	strh	r2, [r3, #0]
 8004716:	e01e      	b.n	8004756 <USB_EPStartXfer+0x3c2>
 8004718:	463b      	mov	r3, r7
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	785b      	ldrb	r3, [r3, #1]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d119      	bne.n	8004756 <USB_EPStartXfer+0x3c2>
 8004722:	1d3b      	adds	r3, r7, #4
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	627b      	str	r3, [r7, #36]	; 0x24
 8004728:	1d3b      	adds	r3, r7, #4
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004730:	b29b      	uxth	r3, r3
 8004732:	461a      	mov	r2, r3
 8004734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004736:	4413      	add	r3, r2
 8004738:	627b      	str	r3, [r7, #36]	; 0x24
 800473a:	463b      	mov	r3, r7
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	011a      	lsls	r2, r3, #4
 8004742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004744:	4413      	add	r3, r2
 8004746:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800474a:	623b      	str	r3, [r7, #32]
 800474c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004750:	b29a      	uxth	r2, r3
 8004752:	6a3b      	ldr	r3, [r7, #32]
 8004754:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004756:	463b      	mov	r3, r7
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	891b      	ldrh	r3, [r3, #8]
 800475c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004760:	463b      	mov	r3, r7
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	6959      	ldr	r1, [r3, #20]
 8004766:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800476a:	b29b      	uxth	r3, r3
 800476c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004770:	1d38      	adds	r0, r7, #4
 8004772:	6800      	ldr	r0, [r0, #0]
 8004774:	f001 f86c 	bl	8005850 <USB_WritePMA>
 8004778:	e33b      	b.n	8004df2 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800477a:	463b      	mov	r3, r7
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	785b      	ldrb	r3, [r3, #1]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d164      	bne.n	800484e <USB_EPStartXfer+0x4ba>
 8004784:	1d3b      	adds	r3, r7, #4
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	64fb      	str	r3, [r7, #76]	; 0x4c
 800478a:	1d3b      	adds	r3, r7, #4
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004792:	b29b      	uxth	r3, r3
 8004794:	461a      	mov	r2, r3
 8004796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004798:	4413      	add	r3, r2
 800479a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800479c:	463b      	mov	r3, r7
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	011a      	lsls	r2, r3, #4
 80047a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047a6:	4413      	add	r3, r2
 80047a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80047ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80047ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d112      	bne.n	80047dc <USB_EPStartXfer+0x448>
 80047b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047b8:	881b      	ldrh	r3, [r3, #0]
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047c4:	801a      	strh	r2, [r3, #0]
 80047c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047c8:	881b      	ldrh	r3, [r3, #0]
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047d8:	801a      	strh	r2, [r3, #0]
 80047da:	e057      	b.n	800488c <USB_EPStartXfer+0x4f8>
 80047dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047e0:	2b3e      	cmp	r3, #62	; 0x3e
 80047e2:	d817      	bhi.n	8004814 <USB_EPStartXfer+0x480>
 80047e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047e8:	085b      	lsrs	r3, r3, #1
 80047ea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80047ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d004      	beq.n	8004804 <USB_EPStartXfer+0x470>
 80047fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047fe:	3301      	adds	r3, #1
 8004800:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004804:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004808:	b29b      	uxth	r3, r3
 800480a:	029b      	lsls	r3, r3, #10
 800480c:	b29a      	uxth	r2, r3
 800480e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004810:	801a      	strh	r2, [r3, #0]
 8004812:	e03b      	b.n	800488c <USB_EPStartXfer+0x4f8>
 8004814:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004818:	095b      	lsrs	r3, r3, #5
 800481a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800481e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004822:	f003 031f 	and.w	r3, r3, #31
 8004826:	2b00      	cmp	r3, #0
 8004828:	d104      	bne.n	8004834 <USB_EPStartXfer+0x4a0>
 800482a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800482e:	3b01      	subs	r3, #1
 8004830:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004834:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004838:	b29b      	uxth	r3, r3
 800483a:	029b      	lsls	r3, r3, #10
 800483c:	b29b      	uxth	r3, r3
 800483e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004842:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004846:	b29a      	uxth	r2, r3
 8004848:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800484a:	801a      	strh	r2, [r3, #0]
 800484c:	e01e      	b.n	800488c <USB_EPStartXfer+0x4f8>
 800484e:	463b      	mov	r3, r7
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	785b      	ldrb	r3, [r3, #1]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d119      	bne.n	800488c <USB_EPStartXfer+0x4f8>
 8004858:	1d3b      	adds	r3, r7, #4
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	657b      	str	r3, [r7, #84]	; 0x54
 800485e:	1d3b      	adds	r3, r7, #4
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004866:	b29b      	uxth	r3, r3
 8004868:	461a      	mov	r2, r3
 800486a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800486c:	4413      	add	r3, r2
 800486e:	657b      	str	r3, [r7, #84]	; 0x54
 8004870:	463b      	mov	r3, r7
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	011a      	lsls	r2, r3, #4
 8004878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800487a:	4413      	add	r3, r2
 800487c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004880:	653b      	str	r3, [r7, #80]	; 0x50
 8004882:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004886:	b29a      	uxth	r2, r3
 8004888:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800488a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800488c:	463b      	mov	r3, r7
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	891b      	ldrh	r3, [r3, #8]
 8004892:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004896:	463b      	mov	r3, r7
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	6959      	ldr	r1, [r3, #20]
 800489c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80048a6:	1d38      	adds	r0, r7, #4
 80048a8:	6800      	ldr	r0, [r0, #0]
 80048aa:	f000 ffd1 	bl	8005850 <USB_WritePMA>
            ep->xfer_buff += len;
 80048ae:	463b      	mov	r3, r7
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	695a      	ldr	r2, [r3, #20]
 80048b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048b8:	441a      	add	r2, r3
 80048ba:	463b      	mov	r3, r7
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80048c0:	463b      	mov	r3, r7
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6a1a      	ldr	r2, [r3, #32]
 80048c6:	463b      	mov	r3, r7
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d909      	bls.n	80048e4 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 80048d0:	463b      	mov	r3, r7
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6a1a      	ldr	r2, [r3, #32]
 80048d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048da:	1ad2      	subs	r2, r2, r3
 80048dc:	463b      	mov	r3, r7
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	621a      	str	r2, [r3, #32]
 80048e2:	e008      	b.n	80048f6 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 80048e4:	463b      	mov	r3, r7
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80048ee:	463b      	mov	r3, r7
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2200      	movs	r2, #0
 80048f4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80048f6:	1d3b      	adds	r3, r7, #4
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	647b      	str	r3, [r7, #68]	; 0x44
 80048fc:	463b      	mov	r3, r7
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	785b      	ldrb	r3, [r3, #1]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d164      	bne.n	80049d0 <USB_EPStartXfer+0x63c>
 8004906:	1d3b      	adds	r3, r7, #4
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800490c:	1d3b      	adds	r3, r7, #4
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004914:	b29b      	uxth	r3, r3
 8004916:	461a      	mov	r2, r3
 8004918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800491a:	4413      	add	r3, r2
 800491c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800491e:	463b      	mov	r3, r7
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	011a      	lsls	r2, r3, #4
 8004926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004928:	4413      	add	r3, r2
 800492a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800492e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004930:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004934:	2b00      	cmp	r3, #0
 8004936:	d112      	bne.n	800495e <USB_EPStartXfer+0x5ca>
 8004938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800493a:	881b      	ldrh	r3, [r3, #0]
 800493c:	b29b      	uxth	r3, r3
 800493e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004942:	b29a      	uxth	r2, r3
 8004944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004946:	801a      	strh	r2, [r3, #0]
 8004948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800494a:	881b      	ldrh	r3, [r3, #0]
 800494c:	b29b      	uxth	r3, r3
 800494e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004952:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004956:	b29a      	uxth	r2, r3
 8004958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800495a:	801a      	strh	r2, [r3, #0]
 800495c:	e054      	b.n	8004a08 <USB_EPStartXfer+0x674>
 800495e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004962:	2b3e      	cmp	r3, #62	; 0x3e
 8004964:	d817      	bhi.n	8004996 <USB_EPStartXfer+0x602>
 8004966:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800496a:	085b      	lsrs	r3, r3, #1
 800496c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004970:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	2b00      	cmp	r3, #0
 800497a:	d004      	beq.n	8004986 <USB_EPStartXfer+0x5f2>
 800497c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004980:	3301      	adds	r3, #1
 8004982:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004986:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800498a:	b29b      	uxth	r3, r3
 800498c:	029b      	lsls	r3, r3, #10
 800498e:	b29a      	uxth	r2, r3
 8004990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004992:	801a      	strh	r2, [r3, #0]
 8004994:	e038      	b.n	8004a08 <USB_EPStartXfer+0x674>
 8004996:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800499a:	095b      	lsrs	r3, r3, #5
 800499c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80049a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049a4:	f003 031f 	and.w	r3, r3, #31
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d104      	bne.n	80049b6 <USB_EPStartXfer+0x622>
 80049ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80049b0:	3b01      	subs	r3, #1
 80049b2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80049b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	029b      	lsls	r3, r3, #10
 80049be:	b29b      	uxth	r3, r3
 80049c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049cc:	801a      	strh	r2, [r3, #0]
 80049ce:	e01b      	b.n	8004a08 <USB_EPStartXfer+0x674>
 80049d0:	463b      	mov	r3, r7
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	785b      	ldrb	r3, [r3, #1]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d116      	bne.n	8004a08 <USB_EPStartXfer+0x674>
 80049da:	1d3b      	adds	r3, r7, #4
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	461a      	mov	r2, r3
 80049e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049e8:	4413      	add	r3, r2
 80049ea:	647b      	str	r3, [r7, #68]	; 0x44
 80049ec:	463b      	mov	r3, r7
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	011a      	lsls	r2, r3, #4
 80049f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049f6:	4413      	add	r3, r2
 80049f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80049fc:	643b      	str	r3, [r7, #64]	; 0x40
 80049fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a06:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004a08:	463b      	mov	r3, r7
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	895b      	ldrh	r3, [r3, #10]
 8004a0e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a12:	463b      	mov	r3, r7
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	6959      	ldr	r1, [r3, #20]
 8004a18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004a22:	1d38      	adds	r0, r7, #4
 8004a24:	6800      	ldr	r0, [r0, #0]
 8004a26:	f000 ff13 	bl	8005850 <USB_WritePMA>
 8004a2a:	e1e2      	b.n	8004df2 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004a2c:	463b      	mov	r3, r7
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004a36:	1d3b      	adds	r3, r7, #4
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	463b      	mov	r3, r7
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	4413      	add	r3, r2
 8004a44:	881b      	ldrh	r3, [r3, #0]
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004a4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a50:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004a54:	1d3b      	adds	r3, r7, #4
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	463b      	mov	r3, r7
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	441a      	add	r2, r3
 8004a62:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004a66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004a7a:	1d3b      	adds	r3, r7, #4
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	663b      	str	r3, [r7, #96]	; 0x60
 8004a80:	1d3b      	adds	r3, r7, #4
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a8e:	4413      	add	r3, r2
 8004a90:	663b      	str	r3, [r7, #96]	; 0x60
 8004a92:	463b      	mov	r3, r7
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	011a      	lsls	r2, r3, #4
 8004a9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004aa2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004aa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004aac:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004aae:	463b      	mov	r3, r7
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	891b      	ldrh	r3, [r3, #8]
 8004ab4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ab8:	463b      	mov	r3, r7
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6959      	ldr	r1, [r3, #20]
 8004abe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004ac8:	1d38      	adds	r0, r7, #4
 8004aca:	6800      	ldr	r0, [r0, #0]
 8004acc:	f000 fec0 	bl	8005850 <USB_WritePMA>
 8004ad0:	e18f      	b.n	8004df2 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004ad2:	1d3b      	adds	r3, r7, #4
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	463b      	mov	r3, r7
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	4413      	add	r3, r2
 8004ae0:	881b      	ldrh	r3, [r3, #0]
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 808f 	beq.w	8004c0c <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004aee:	1d3b      	adds	r3, r7, #4
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	67bb      	str	r3, [r7, #120]	; 0x78
 8004af4:	463b      	mov	r3, r7
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	785b      	ldrb	r3, [r3, #1]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d164      	bne.n	8004bc8 <USB_EPStartXfer+0x834>
 8004afe:	1d3b      	adds	r3, r7, #4
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	673b      	str	r3, [r7, #112]	; 0x70
 8004b04:	1d3b      	adds	r3, r7, #4
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	461a      	mov	r2, r3
 8004b10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b12:	4413      	add	r3, r2
 8004b14:	673b      	str	r3, [r7, #112]	; 0x70
 8004b16:	463b      	mov	r3, r7
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	011a      	lsls	r2, r3, #4
 8004b1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b20:	4413      	add	r3, r2
 8004b22:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d112      	bne.n	8004b56 <USB_EPStartXfer+0x7c2>
 8004b30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b32:	881b      	ldrh	r3, [r3, #0]
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b3e:	801a      	strh	r2, [r3, #0]
 8004b40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b42:	881b      	ldrh	r3, [r3, #0]
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b52:	801a      	strh	r2, [r3, #0]
 8004b54:	e054      	b.n	8004c00 <USB_EPStartXfer+0x86c>
 8004b56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b5a:	2b3e      	cmp	r3, #62	; 0x3e
 8004b5c:	d817      	bhi.n	8004b8e <USB_EPStartXfer+0x7fa>
 8004b5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b62:	085b      	lsrs	r3, r3, #1
 8004b64:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004b68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b6c:	f003 0301 	and.w	r3, r3, #1
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d004      	beq.n	8004b7e <USB_EPStartXfer+0x7ea>
 8004b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b78:	3301      	adds	r3, #1
 8004b7a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	029b      	lsls	r3, r3, #10
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b8a:	801a      	strh	r2, [r3, #0]
 8004b8c:	e038      	b.n	8004c00 <USB_EPStartXfer+0x86c>
 8004b8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b92:	095b      	lsrs	r3, r3, #5
 8004b94:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004b98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b9c:	f003 031f 	and.w	r3, r3, #31
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d104      	bne.n	8004bae <USB_EPStartXfer+0x81a>
 8004ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	029b      	lsls	r3, r3, #10
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bc4:	801a      	strh	r2, [r3, #0]
 8004bc6:	e01b      	b.n	8004c00 <USB_EPStartXfer+0x86c>
 8004bc8:	463b      	mov	r3, r7
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	785b      	ldrb	r3, [r3, #1]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d116      	bne.n	8004c00 <USB_EPStartXfer+0x86c>
 8004bd2:	1d3b      	adds	r3, r7, #4
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	461a      	mov	r2, r3
 8004bde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004be0:	4413      	add	r3, r2
 8004be2:	67bb      	str	r3, [r7, #120]	; 0x78
 8004be4:	463b      	mov	r3, r7
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	011a      	lsls	r2, r3, #4
 8004bec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bee:	4413      	add	r3, r2
 8004bf0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004bf4:	677b      	str	r3, [r7, #116]	; 0x74
 8004bf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bfa:	b29a      	uxth	r2, r3
 8004bfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bfe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004c00:	463b      	mov	r3, r7
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	895b      	ldrh	r3, [r3, #10]
 8004c06:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8004c0a:	e097      	b.n	8004d3c <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004c0c:	463b      	mov	r3, r7
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	785b      	ldrb	r3, [r3, #1]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d168      	bne.n	8004ce8 <USB_EPStartXfer+0x954>
 8004c16:	1d3b      	adds	r3, r7, #4
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c1e:	1d3b      	adds	r3, r7, #4
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	461a      	mov	r2, r3
 8004c2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c2e:	4413      	add	r3, r2
 8004c30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c34:	463b      	mov	r3, r7
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	011a      	lsls	r2, r3, #4
 8004c3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c40:	4413      	add	r3, r2
 8004c42:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c46:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004c48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d112      	bne.n	8004c76 <USB_EPStartXfer+0x8e2>
 8004c50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c52:	881b      	ldrh	r3, [r3, #0]
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c5e:	801a      	strh	r2, [r3, #0]
 8004c60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c62:	881b      	ldrh	r3, [r3, #0]
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c72:	801a      	strh	r2, [r3, #0]
 8004c74:	e05d      	b.n	8004d32 <USB_EPStartXfer+0x99e>
 8004c76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c7a:	2b3e      	cmp	r3, #62	; 0x3e
 8004c7c:	d817      	bhi.n	8004cae <USB_EPStartXfer+0x91a>
 8004c7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c82:	085b      	lsrs	r3, r3, #1
 8004c84:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004c88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c8c:	f003 0301 	and.w	r3, r3, #1
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d004      	beq.n	8004c9e <USB_EPStartXfer+0x90a>
 8004c94:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004c98:	3301      	adds	r3, #1
 8004c9a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004c9e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	029b      	lsls	r3, r3, #10
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004caa:	801a      	strh	r2, [r3, #0]
 8004cac:	e041      	b.n	8004d32 <USB_EPStartXfer+0x99e>
 8004cae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cb2:	095b      	lsrs	r3, r3, #5
 8004cb4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004cb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cbc:	f003 031f 	and.w	r3, r3, #31
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d104      	bne.n	8004cce <USB_EPStartXfer+0x93a>
 8004cc4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004cce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	029b      	lsls	r3, r3, #10
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ce0:	b29a      	uxth	r2, r3
 8004ce2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ce4:	801a      	strh	r2, [r3, #0]
 8004ce6:	e024      	b.n	8004d32 <USB_EPStartXfer+0x99e>
 8004ce8:	463b      	mov	r3, r7
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	785b      	ldrb	r3, [r3, #1]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d11f      	bne.n	8004d32 <USB_EPStartXfer+0x99e>
 8004cf2:	1d3b      	adds	r3, r7, #4
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004cfa:	1d3b      	adds	r3, r7, #4
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	461a      	mov	r2, r3
 8004d06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d0a:	4413      	add	r3, r2
 8004d0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d10:	463b      	mov	r3, r7
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	011a      	lsls	r2, r3, #4
 8004d18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d30:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004d32:	463b      	mov	r3, r7
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	891b      	ldrh	r3, [r3, #8]
 8004d38:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d3c:	463b      	mov	r3, r7
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	6959      	ldr	r1, [r3, #20]
 8004d42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004d4c:	1d38      	adds	r0, r7, #4
 8004d4e:	6800      	ldr	r0, [r0, #0]
 8004d50:	f000 fd7e 	bl	8005850 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004d54:	463b      	mov	r3, r7
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	785b      	ldrb	r3, [r3, #1]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d122      	bne.n	8004da4 <USB_EPStartXfer+0xa10>
 8004d5e:	1d3b      	adds	r3, r7, #4
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	463b      	mov	r3, r7
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	4413      	add	r3, r2
 8004d6c:	881b      	ldrh	r3, [r3, #0]
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d78:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8004d7c:	1d3b      	adds	r3, r7, #4
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	463b      	mov	r3, r7
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	441a      	add	r2, r3
 8004d8a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8004d8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	8013      	strh	r3, [r2, #0]
 8004da2:	e026      	b.n	8004df2 <USB_EPStartXfer+0xa5e>
 8004da4:	463b      	mov	r3, r7
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	785b      	ldrb	r3, [r3, #1]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d121      	bne.n	8004df2 <USB_EPStartXfer+0xa5e>
 8004dae:	1d3b      	adds	r3, r7, #4
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	463b      	mov	r3, r7
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	4413      	add	r3, r2
 8004dbc:	881b      	ldrh	r3, [r3, #0]
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dc8:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8004dcc:	1d3b      	adds	r3, r7, #4
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	463b      	mov	r3, r7
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	441a      	add	r2, r3
 8004dda:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8004dde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004de2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004de6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004dea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004df2:	1d3b      	adds	r3, r7, #4
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	463b      	mov	r3, r7
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	4413      	add	r3, r2
 8004e00:	881b      	ldrh	r3, [r3, #0]
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	f107 020e 	add.w	r2, r7, #14
 8004e08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e10:	8013      	strh	r3, [r2, #0]
 8004e12:	f107 030e 	add.w	r3, r7, #14
 8004e16:	f107 020e 	add.w	r2, r7, #14
 8004e1a:	8812      	ldrh	r2, [r2, #0]
 8004e1c:	f082 0210 	eor.w	r2, r2, #16
 8004e20:	801a      	strh	r2, [r3, #0]
 8004e22:	f107 030e 	add.w	r3, r7, #14
 8004e26:	f107 020e 	add.w	r2, r7, #14
 8004e2a:	8812      	ldrh	r2, [r2, #0]
 8004e2c:	f082 0220 	eor.w	r2, r2, #32
 8004e30:	801a      	strh	r2, [r3, #0]
 8004e32:	1d3b      	adds	r3, r7, #4
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	463b      	mov	r3, r7
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	441a      	add	r2, r3
 8004e40:	f107 030e 	add.w	r3, r7, #14
 8004e44:	881b      	ldrh	r3, [r3, #0]
 8004e46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	8013      	strh	r3, [r2, #0]
 8004e5a:	e3b5      	b.n	80055c8 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004e5c:	463b      	mov	r3, r7
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	7b1b      	ldrb	r3, [r3, #12]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f040 8090 	bne.w	8004f88 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004e68:	463b      	mov	r3, r7
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	699a      	ldr	r2, [r3, #24]
 8004e6e:	463b      	mov	r3, r7
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d90e      	bls.n	8004e96 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8004e78:	463b      	mov	r3, r7
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8004e82:	463b      	mov	r3, r7
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	699a      	ldr	r2, [r3, #24]
 8004e88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e8c:	1ad2      	subs	r2, r2, r3
 8004e8e:	463b      	mov	r3, r7
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	619a      	str	r2, [r3, #24]
 8004e94:	e008      	b.n	8004ea8 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8004e96:	463b      	mov	r3, r7
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8004ea0:	463b      	mov	r3, r7
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004ea8:	1d3b      	adds	r3, r7, #4
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004eb0:	1d3b      	adds	r3, r7, #4
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	461a      	mov	r2, r3
 8004ebc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004ec6:	463b      	mov	r3, r7
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	011a      	lsls	r2, r3, #4
 8004ece:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004ed2:	4413      	add	r3, r2
 8004ed4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ed8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004edc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d116      	bne.n	8004f12 <USB_EPStartXfer+0xb7e>
 8004ee4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ee8:	881b      	ldrh	r3, [r3, #0]
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ef6:	801a      	strh	r2, [r3, #0]
 8004ef8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004efc:	881b      	ldrh	r3, [r3, #0]
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f0e:	801a      	strh	r2, [r3, #0]
 8004f10:	e32c      	b.n	800556c <USB_EPStartXfer+0x11d8>
 8004f12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f16:	2b3e      	cmp	r3, #62	; 0x3e
 8004f18:	d818      	bhi.n	8004f4c <USB_EPStartXfer+0xbb8>
 8004f1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f1e:	085b      	lsrs	r3, r3, #1
 8004f20:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004f24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f28:	f003 0301 	and.w	r3, r3, #1
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d004      	beq.n	8004f3a <USB_EPStartXfer+0xba6>
 8004f30:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004f34:	3301      	adds	r3, #1
 8004f36:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004f3a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	029b      	lsls	r3, r3, #10
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f48:	801a      	strh	r2, [r3, #0]
 8004f4a:	e30f      	b.n	800556c <USB_EPStartXfer+0x11d8>
 8004f4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f50:	095b      	lsrs	r3, r3, #5
 8004f52:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004f56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f5a:	f003 031f 	and.w	r3, r3, #31
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d104      	bne.n	8004f6c <USB_EPStartXfer+0xbd8>
 8004f62:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004f66:	3b01      	subs	r3, #1
 8004f68:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004f6c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	029b      	lsls	r3, r3, #10
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f84:	801a      	strh	r2, [r3, #0]
 8004f86:	e2f1      	b.n	800556c <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004f88:	463b      	mov	r3, r7
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	78db      	ldrb	r3, [r3, #3]
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	f040 818f 	bne.w	80052b2 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004f94:	463b      	mov	r3, r7
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	785b      	ldrb	r3, [r3, #1]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d175      	bne.n	800508a <USB_EPStartXfer+0xcf6>
 8004f9e:	1d3b      	adds	r3, r7, #4
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004fa6:	1d3b      	adds	r3, r7, #4
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004fb6:	4413      	add	r3, r2
 8004fb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004fbc:	463b      	mov	r3, r7
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	011a      	lsls	r2, r3, #4
 8004fc4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004fc8:	4413      	add	r3, r2
 8004fca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004fd2:	463b      	mov	r3, r7
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d116      	bne.n	800500a <USB_EPStartXfer+0xc76>
 8004fdc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004fe0:	881b      	ldrh	r3, [r3, #0]
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004fee:	801a      	strh	r2, [r3, #0]
 8004ff0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ff4:	881b      	ldrh	r3, [r3, #0]
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ffc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005000:	b29a      	uxth	r2, r3
 8005002:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005006:	801a      	strh	r2, [r3, #0]
 8005008:	e065      	b.n	80050d6 <USB_EPStartXfer+0xd42>
 800500a:	463b      	mov	r3, r7
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	2b3e      	cmp	r3, #62	; 0x3e
 8005012:	d81a      	bhi.n	800504a <USB_EPStartXfer+0xcb6>
 8005014:	463b      	mov	r3, r7
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	085b      	lsrs	r3, r3, #1
 800501c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005020:	463b      	mov	r3, r7
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	2b00      	cmp	r3, #0
 800502c:	d004      	beq.n	8005038 <USB_EPStartXfer+0xca4>
 800502e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005032:	3301      	adds	r3, #1
 8005034:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005038:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800503c:	b29b      	uxth	r3, r3
 800503e:	029b      	lsls	r3, r3, #10
 8005040:	b29a      	uxth	r2, r3
 8005042:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005046:	801a      	strh	r2, [r3, #0]
 8005048:	e045      	b.n	80050d6 <USB_EPStartXfer+0xd42>
 800504a:	463b      	mov	r3, r7
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	095b      	lsrs	r3, r3, #5
 8005052:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005056:	463b      	mov	r3, r7
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	f003 031f 	and.w	r3, r3, #31
 8005060:	2b00      	cmp	r3, #0
 8005062:	d104      	bne.n	800506e <USB_EPStartXfer+0xcda>
 8005064:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005068:	3b01      	subs	r3, #1
 800506a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800506e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005072:	b29b      	uxth	r3, r3
 8005074:	029b      	lsls	r3, r3, #10
 8005076:	b29b      	uxth	r3, r3
 8005078:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800507c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005080:	b29a      	uxth	r2, r3
 8005082:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005086:	801a      	strh	r2, [r3, #0]
 8005088:	e025      	b.n	80050d6 <USB_EPStartXfer+0xd42>
 800508a:	463b      	mov	r3, r7
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	785b      	ldrb	r3, [r3, #1]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d120      	bne.n	80050d6 <USB_EPStartXfer+0xd42>
 8005094:	1d3b      	adds	r3, r7, #4
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800509c:	1d3b      	adds	r3, r7, #4
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	461a      	mov	r2, r3
 80050a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80050ac:	4413      	add	r3, r2
 80050ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050b2:	463b      	mov	r3, r7
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	011a      	lsls	r2, r3, #4
 80050ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80050be:	4413      	add	r3, r2
 80050c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80050c8:	463b      	mov	r3, r7
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80050d4:	801a      	strh	r2, [r3, #0]
 80050d6:	1d3b      	adds	r3, r7, #4
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80050de:	463b      	mov	r3, r7
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	785b      	ldrb	r3, [r3, #1]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d175      	bne.n	80051d4 <USB_EPStartXfer+0xe40>
 80050e8:	1d3b      	adds	r3, r7, #4
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80050f0:	1d3b      	adds	r3, r7, #4
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	461a      	mov	r2, r3
 80050fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005100:	4413      	add	r3, r2
 8005102:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005106:	463b      	mov	r3, r7
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	011a      	lsls	r2, r3, #4
 800510e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005112:	4413      	add	r3, r2
 8005114:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005118:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800511c:	463b      	mov	r3, r7
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d116      	bne.n	8005154 <USB_EPStartXfer+0xdc0>
 8005126:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800512a:	881b      	ldrh	r3, [r3, #0]
 800512c:	b29b      	uxth	r3, r3
 800512e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005132:	b29a      	uxth	r2, r3
 8005134:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005138:	801a      	strh	r2, [r3, #0]
 800513a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800513e:	881b      	ldrh	r3, [r3, #0]
 8005140:	b29b      	uxth	r3, r3
 8005142:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005146:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800514a:	b29a      	uxth	r2, r3
 800514c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005150:	801a      	strh	r2, [r3, #0]
 8005152:	e061      	b.n	8005218 <USB_EPStartXfer+0xe84>
 8005154:	463b      	mov	r3, r7
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	2b3e      	cmp	r3, #62	; 0x3e
 800515c:	d81a      	bhi.n	8005194 <USB_EPStartXfer+0xe00>
 800515e:	463b      	mov	r3, r7
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	085b      	lsrs	r3, r3, #1
 8005166:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800516a:	463b      	mov	r3, r7
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	f003 0301 	and.w	r3, r3, #1
 8005174:	2b00      	cmp	r3, #0
 8005176:	d004      	beq.n	8005182 <USB_EPStartXfer+0xdee>
 8005178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800517c:	3301      	adds	r3, #1
 800517e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005186:	b29b      	uxth	r3, r3
 8005188:	029b      	lsls	r3, r3, #10
 800518a:	b29a      	uxth	r2, r3
 800518c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005190:	801a      	strh	r2, [r3, #0]
 8005192:	e041      	b.n	8005218 <USB_EPStartXfer+0xe84>
 8005194:	463b      	mov	r3, r7
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	095b      	lsrs	r3, r3, #5
 800519c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80051a0:	463b      	mov	r3, r7
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	f003 031f 	and.w	r3, r3, #31
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d104      	bne.n	80051b8 <USB_EPStartXfer+0xe24>
 80051ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051b2:	3b01      	subs	r3, #1
 80051b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80051b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051bc:	b29b      	uxth	r3, r3
 80051be:	029b      	lsls	r3, r3, #10
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80051d0:	801a      	strh	r2, [r3, #0]
 80051d2:	e021      	b.n	8005218 <USB_EPStartXfer+0xe84>
 80051d4:	463b      	mov	r3, r7
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	785b      	ldrb	r3, [r3, #1]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d11c      	bne.n	8005218 <USB_EPStartXfer+0xe84>
 80051de:	1d3b      	adds	r3, r7, #4
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	461a      	mov	r2, r3
 80051ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80051ee:	4413      	add	r3, r2
 80051f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80051f4:	463b      	mov	r3, r7
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	011a      	lsls	r2, r3, #4
 80051fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005200:	4413      	add	r3, r2
 8005202:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005206:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800520a:	463b      	mov	r3, r7
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	b29a      	uxth	r2, r3
 8005212:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005216:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005218:	463b      	mov	r3, r7
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	2b00      	cmp	r3, #0
 8005220:	f000 81a4 	beq.w	800556c <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005224:	1d3b      	adds	r3, r7, #4
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	463b      	mov	r3, r7
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4413      	add	r3, r2
 8005232:	881b      	ldrh	r3, [r3, #0]
 8005234:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005238:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800523c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d005      	beq.n	8005250 <USB_EPStartXfer+0xebc>
 8005244:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10d      	bne.n	800526c <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005250:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005254:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005258:	2b00      	cmp	r3, #0
 800525a:	f040 8187 	bne.w	800556c <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800525e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005266:	2b00      	cmp	r3, #0
 8005268:	f040 8180 	bne.w	800556c <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800526c:	1d3b      	adds	r3, r7, #4
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	463b      	mov	r3, r7
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	4413      	add	r3, r2
 800527a:	881b      	ldrh	r3, [r3, #0]
 800527c:	b29b      	uxth	r3, r3
 800527e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005286:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800528a:	1d3b      	adds	r3, r7, #4
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	463b      	mov	r3, r7
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	441a      	add	r2, r3
 8005298:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800529c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	8013      	strh	r3, [r2, #0]
 80052b0:	e15c      	b.n	800556c <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80052b2:	463b      	mov	r3, r7
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	78db      	ldrb	r3, [r3, #3]
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	f040 8155 	bne.w	8005568 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80052be:	463b      	mov	r3, r7
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	699a      	ldr	r2, [r3, #24]
 80052c4:	463b      	mov	r3, r7
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d90e      	bls.n	80052ec <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 80052ce:	463b      	mov	r3, r7
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 80052d8:	463b      	mov	r3, r7
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	699a      	ldr	r2, [r3, #24]
 80052de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052e2:	1ad2      	subs	r2, r2, r3
 80052e4:	463b      	mov	r3, r7
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	619a      	str	r2, [r3, #24]
 80052ea:	e008      	b.n	80052fe <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 80052ec:	463b      	mov	r3, r7
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 80052f6:	463b      	mov	r3, r7
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2200      	movs	r2, #0
 80052fc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80052fe:	463b      	mov	r3, r7
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	785b      	ldrb	r3, [r3, #1]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d16f      	bne.n	80053e8 <USB_EPStartXfer+0x1054>
 8005308:	1d3b      	adds	r3, r7, #4
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005310:	1d3b      	adds	r3, r7, #4
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005318:	b29b      	uxth	r3, r3
 800531a:	461a      	mov	r2, r3
 800531c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005320:	4413      	add	r3, r2
 8005322:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005326:	463b      	mov	r3, r7
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	011a      	lsls	r2, r3, #4
 800532e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005332:	4413      	add	r3, r2
 8005334:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005338:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800533c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005340:	2b00      	cmp	r3, #0
 8005342:	d116      	bne.n	8005372 <USB_EPStartXfer+0xfde>
 8005344:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005348:	881b      	ldrh	r3, [r3, #0]
 800534a:	b29b      	uxth	r3, r3
 800534c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005350:	b29a      	uxth	r2, r3
 8005352:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005356:	801a      	strh	r2, [r3, #0]
 8005358:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800535c:	881b      	ldrh	r3, [r3, #0]
 800535e:	b29b      	uxth	r3, r3
 8005360:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005364:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005368:	b29a      	uxth	r2, r3
 800536a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800536e:	801a      	strh	r2, [r3, #0]
 8005370:	e05f      	b.n	8005432 <USB_EPStartXfer+0x109e>
 8005372:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005376:	2b3e      	cmp	r3, #62	; 0x3e
 8005378:	d818      	bhi.n	80053ac <USB_EPStartXfer+0x1018>
 800537a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800537e:	085b      	lsrs	r3, r3, #1
 8005380:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005384:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005388:	f003 0301 	and.w	r3, r3, #1
 800538c:	2b00      	cmp	r3, #0
 800538e:	d004      	beq.n	800539a <USB_EPStartXfer+0x1006>
 8005390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005394:	3301      	adds	r3, #1
 8005396:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800539a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800539e:	b29b      	uxth	r3, r3
 80053a0:	029b      	lsls	r3, r3, #10
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80053a8:	801a      	strh	r2, [r3, #0]
 80053aa:	e042      	b.n	8005432 <USB_EPStartXfer+0x109e>
 80053ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053b0:	095b      	lsrs	r3, r3, #5
 80053b2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80053b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053ba:	f003 031f 	and.w	r3, r3, #31
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d104      	bne.n	80053cc <USB_EPStartXfer+0x1038>
 80053c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053c6:	3b01      	subs	r3, #1
 80053c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80053cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	029b      	lsls	r3, r3, #10
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053de:	b29a      	uxth	r2, r3
 80053e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80053e4:	801a      	strh	r2, [r3, #0]
 80053e6:	e024      	b.n	8005432 <USB_EPStartXfer+0x109e>
 80053e8:	463b      	mov	r3, r7
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	785b      	ldrb	r3, [r3, #1]
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d11f      	bne.n	8005432 <USB_EPStartXfer+0x109e>
 80053f2:	1d3b      	adds	r3, r7, #4
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80053fa:	1d3b      	adds	r3, r7, #4
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005402:	b29b      	uxth	r3, r3
 8005404:	461a      	mov	r2, r3
 8005406:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800540a:	4413      	add	r3, r2
 800540c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005410:	463b      	mov	r3, r7
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	011a      	lsls	r2, r3, #4
 8005418:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800541c:	4413      	add	r3, r2
 800541e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005422:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005426:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800542a:	b29a      	uxth	r2, r3
 800542c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005430:	801a      	strh	r2, [r3, #0]
 8005432:	1d3b      	adds	r3, r7, #4
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800543a:	463b      	mov	r3, r7
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	785b      	ldrb	r3, [r3, #1]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d16f      	bne.n	8005524 <USB_EPStartXfer+0x1190>
 8005444:	1d3b      	adds	r3, r7, #4
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800544c:	1d3b      	adds	r3, r7, #4
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005454:	b29b      	uxth	r3, r3
 8005456:	461a      	mov	r2, r3
 8005458:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800545c:	4413      	add	r3, r2
 800545e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005462:	463b      	mov	r3, r7
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	011a      	lsls	r2, r3, #4
 800546a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800546e:	4413      	add	r3, r2
 8005470:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005474:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005478:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800547c:	2b00      	cmp	r3, #0
 800547e:	d116      	bne.n	80054ae <USB_EPStartXfer+0x111a>
 8005480:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005484:	881b      	ldrh	r3, [r3, #0]
 8005486:	b29b      	uxth	r3, r3
 8005488:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800548c:	b29a      	uxth	r2, r3
 800548e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005492:	801a      	strh	r2, [r3, #0]
 8005494:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005498:	881b      	ldrh	r3, [r3, #0]
 800549a:	b29b      	uxth	r3, r3
 800549c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80054aa:	801a      	strh	r2, [r3, #0]
 80054ac:	e05e      	b.n	800556c <USB_EPStartXfer+0x11d8>
 80054ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054b2:	2b3e      	cmp	r3, #62	; 0x3e
 80054b4:	d818      	bhi.n	80054e8 <USB_EPStartXfer+0x1154>
 80054b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054ba:	085b      	lsrs	r3, r3, #1
 80054bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80054c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054c4:	f003 0301 	and.w	r3, r3, #1
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d004      	beq.n	80054d6 <USB_EPStartXfer+0x1142>
 80054cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054d0:	3301      	adds	r3, #1
 80054d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80054d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054da:	b29b      	uxth	r3, r3
 80054dc:	029b      	lsls	r3, r3, #10
 80054de:	b29a      	uxth	r2, r3
 80054e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80054e4:	801a      	strh	r2, [r3, #0]
 80054e6:	e041      	b.n	800556c <USB_EPStartXfer+0x11d8>
 80054e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054ec:	095b      	lsrs	r3, r3, #5
 80054ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80054f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054f6:	f003 031f 	and.w	r3, r3, #31
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d104      	bne.n	8005508 <USB_EPStartXfer+0x1174>
 80054fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005502:	3b01      	subs	r3, #1
 8005504:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005508:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800550c:	b29b      	uxth	r3, r3
 800550e:	029b      	lsls	r3, r3, #10
 8005510:	b29b      	uxth	r3, r3
 8005512:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005516:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800551a:	b29a      	uxth	r2, r3
 800551c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005520:	801a      	strh	r2, [r3, #0]
 8005522:	e023      	b.n	800556c <USB_EPStartXfer+0x11d8>
 8005524:	463b      	mov	r3, r7
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	785b      	ldrb	r3, [r3, #1]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d11e      	bne.n	800556c <USB_EPStartXfer+0x11d8>
 800552e:	1d3b      	adds	r3, r7, #4
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005536:	b29b      	uxth	r3, r3
 8005538:	461a      	mov	r2, r3
 800553a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800553e:	4413      	add	r3, r2
 8005540:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005544:	463b      	mov	r3, r7
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	011a      	lsls	r2, r3, #4
 800554c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005550:	4413      	add	r3, r2
 8005552:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005556:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800555a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800555e:	b29a      	uxth	r2, r3
 8005560:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005564:	801a      	strh	r2, [r3, #0]
 8005566:	e001      	b.n	800556c <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e02e      	b.n	80055ca <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800556c:	1d3b      	adds	r3, r7, #4
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	463b      	mov	r3, r7
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	4413      	add	r3, r2
 800557a:	881b      	ldrh	r3, [r3, #0]
 800557c:	b29b      	uxth	r3, r3
 800557e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005586:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800558a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800558e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005592:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005596:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800559a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800559e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80055a2:	1d3b      	adds	r3, r7, #4
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	463b      	mov	r3, r7
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	441a      	add	r2, r3
 80055b0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80055b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	785b      	ldrb	r3, [r3, #1]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d020      	beq.n	8005628 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	4413      	add	r3, r2
 80055f0:	881b      	ldrh	r3, [r3, #0]
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055fc:	81bb      	strh	r3, [r7, #12]
 80055fe:	89bb      	ldrh	r3, [r7, #12]
 8005600:	f083 0310 	eor.w	r3, r3, #16
 8005604:	81bb      	strh	r3, [r7, #12]
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	441a      	add	r2, r3
 8005610:	89bb      	ldrh	r3, [r7, #12]
 8005612:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005616:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800561a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800561e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005622:	b29b      	uxth	r3, r3
 8005624:	8013      	strh	r3, [r2, #0]
 8005626:	e01f      	b.n	8005668 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	4413      	add	r3, r2
 8005632:	881b      	ldrh	r3, [r3, #0]
 8005634:	b29b      	uxth	r3, r3
 8005636:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800563a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800563e:	81fb      	strh	r3, [r7, #14]
 8005640:	89fb      	ldrh	r3, [r7, #14]
 8005642:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005646:	81fb      	strh	r3, [r7, #14]
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	441a      	add	r2, r3
 8005652:	89fb      	ldrh	r3, [r7, #14]
 8005654:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005658:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800565c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005664:	b29b      	uxth	r3, r3
 8005666:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3714      	adds	r7, #20
 800566e:	46bd      	mov	sp, r7
 8005670:	bc80      	pop	{r7}
 8005672:	4770      	bx	lr

08005674 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005674:	b480      	push	{r7}
 8005676:	b087      	sub	sp, #28
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	7b1b      	ldrb	r3, [r3, #12]
 8005682:	2b00      	cmp	r3, #0
 8005684:	f040 809d 	bne.w	80057c2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	785b      	ldrb	r3, [r3, #1]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d04c      	beq.n	800572a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4413      	add	r3, r2
 800569a:	881b      	ldrh	r3, [r3, #0]
 800569c:	823b      	strh	r3, [r7, #16]
 800569e:	8a3b      	ldrh	r3, [r7, #16]
 80056a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d01b      	beq.n	80056e0 <USB_EPClearStall+0x6c>
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4413      	add	r3, r2
 80056b2:	881b      	ldrh	r3, [r3, #0]
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056be:	81fb      	strh	r3, [r7, #14]
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	441a      	add	r2, r3
 80056ca:	89fb      	ldrh	r3, [r7, #14]
 80056cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80056dc:	b29b      	uxth	r3, r3
 80056de:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	78db      	ldrb	r3, [r3, #3]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d06c      	beq.n	80057c2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	4413      	add	r3, r2
 80056f2:	881b      	ldrh	r3, [r3, #0]
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056fe:	81bb      	strh	r3, [r7, #12]
 8005700:	89bb      	ldrh	r3, [r7, #12]
 8005702:	f083 0320 	eor.w	r3, r3, #32
 8005706:	81bb      	strh	r3, [r7, #12]
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	441a      	add	r2, r3
 8005712:	89bb      	ldrh	r3, [r7, #12]
 8005714:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005718:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800571c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005724:	b29b      	uxth	r3, r3
 8005726:	8013      	strh	r3, [r2, #0]
 8005728:	e04b      	b.n	80057c2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	4413      	add	r3, r2
 8005734:	881b      	ldrh	r3, [r3, #0]
 8005736:	82fb      	strh	r3, [r7, #22]
 8005738:	8afb      	ldrh	r3, [r7, #22]
 800573a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d01b      	beq.n	800577a <USB_EPClearStall+0x106>
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	4413      	add	r3, r2
 800574c:	881b      	ldrh	r3, [r3, #0]
 800574e:	b29b      	uxth	r3, r3
 8005750:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005754:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005758:	82bb      	strh	r3, [r7, #20]
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	441a      	add	r2, r3
 8005764:	8abb      	ldrh	r3, [r7, #20]
 8005766:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800576a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800576e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005776:	b29b      	uxth	r3, r3
 8005778:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	4413      	add	r3, r2
 8005784:	881b      	ldrh	r3, [r3, #0]
 8005786:	b29b      	uxth	r3, r3
 8005788:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800578c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005790:	827b      	strh	r3, [r7, #18]
 8005792:	8a7b      	ldrh	r3, [r7, #18]
 8005794:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005798:	827b      	strh	r3, [r7, #18]
 800579a:	8a7b      	ldrh	r3, [r7, #18]
 800579c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80057a0:	827b      	strh	r3, [r7, #18]
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	441a      	add	r2, r3
 80057ac:	8a7b      	ldrh	r3, [r7, #18]
 80057ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057be:	b29b      	uxth	r3, r3
 80057c0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80057c2:	2300      	movs	r3, #0
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	371c      	adds	r7, #28
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bc80      	pop	{r7}
 80057cc:	4770      	bx	lr

080057ce <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b083      	sub	sp, #12
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
 80057d6:	460b      	mov	r3, r1
 80057d8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80057da:	78fb      	ldrb	r3, [r7, #3]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d103      	bne.n	80057e8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2280      	movs	r2, #128	; 0x80
 80057e4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bc80      	pop	{r7}
 80057f2:	4770      	bx	lr

080057f4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	370c      	adds	r7, #12
 8005802:	46bd      	mov	sp, r7
 8005804:	bc80      	pop	{r7}
 8005806:	4770      	bx	lr

08005808 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	370c      	adds	r7, #12
 8005816:	46bd      	mov	sp, r7
 8005818:	bc80      	pop	{r7}
 800581a:	4770      	bx	lr

0800581c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800582a:	b29b      	uxth	r3, r3
 800582c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800582e:	68fb      	ldr	r3, [r7, #12]
}
 8005830:	4618      	mov	r0, r3
 8005832:	3714      	adds	r7, #20
 8005834:	46bd      	mov	sp, r7
 8005836:	bc80      	pop	{r7}
 8005838:	4770      	bx	lr

0800583a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800583a:	b480      	push	{r7}
 800583c:	b083      	sub	sp, #12
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
 8005842:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	bc80      	pop	{r7}
 800584e:	4770      	bx	lr

08005850 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005850:	b480      	push	{r7}
 8005852:	b08d      	sub	sp, #52	; 0x34
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	4611      	mov	r1, r2
 800585c:	461a      	mov	r2, r3
 800585e:	460b      	mov	r3, r1
 8005860:	80fb      	strh	r3, [r7, #6]
 8005862:	4613      	mov	r3, r2
 8005864:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005866:	88bb      	ldrh	r3, [r7, #4]
 8005868:	3301      	adds	r3, #1
 800586a:	085b      	lsrs	r3, r3, #1
 800586c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005876:	88fb      	ldrh	r3, [r7, #6]
 8005878:	005a      	lsls	r2, r3, #1
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	4413      	add	r3, r2
 800587e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005882:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005884:	6a3b      	ldr	r3, [r7, #32]
 8005886:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005888:	e01e      	b.n	80058c8 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800588a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005892:	3301      	adds	r3, #1
 8005894:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	b29b      	uxth	r3, r3
 800589c:	021b      	lsls	r3, r3, #8
 800589e:	b29b      	uxth	r3, r3
 80058a0:	461a      	mov	r2, r3
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ae:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80058b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b2:	3302      	adds	r3, #2
 80058b4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80058b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b8:	3302      	adds	r3, #2
 80058ba:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80058bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058be:	3301      	adds	r3, #1
 80058c0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80058c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c4:	3b01      	subs	r3, #1
 80058c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1dd      	bne.n	800588a <USB_WritePMA+0x3a>
  }
}
 80058ce:	bf00      	nop
 80058d0:	3734      	adds	r7, #52	; 0x34
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bc80      	pop	{r7}
 80058d6:	4770      	bx	lr

080058d8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80058d8:	b480      	push	{r7}
 80058da:	b08b      	sub	sp, #44	; 0x2c
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	4611      	mov	r1, r2
 80058e4:	461a      	mov	r2, r3
 80058e6:	460b      	mov	r3, r1
 80058e8:	80fb      	strh	r3, [r7, #6]
 80058ea:	4613      	mov	r3, r2
 80058ec:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80058ee:	88bb      	ldrh	r3, [r7, #4]
 80058f0:	085b      	lsrs	r3, r3, #1
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80058fe:	88fb      	ldrh	r3, [r7, #6]
 8005900:	005a      	lsls	r2, r3, #1
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	4413      	add	r3, r2
 8005906:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800590a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	627b      	str	r3, [r7, #36]	; 0x24
 8005910:	e01b      	b.n	800594a <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005912:	6a3b      	ldr	r3, [r7, #32]
 8005914:	881b      	ldrh	r3, [r3, #0]
 8005916:	b29b      	uxth	r3, r3
 8005918:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	3302      	adds	r3, #2
 800591e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	b2da      	uxtb	r2, r3
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	3301      	adds	r3, #1
 800592c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	0a1b      	lsrs	r3, r3, #8
 8005932:	b2da      	uxtb	r2, r3
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	3301      	adds	r3, #1
 800593c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800593e:	6a3b      	ldr	r3, [r7, #32]
 8005940:	3302      	adds	r3, #2
 8005942:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8005944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005946:	3b01      	subs	r3, #1
 8005948:	627b      	str	r3, [r7, #36]	; 0x24
 800594a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1e0      	bne.n	8005912 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005950:	88bb      	ldrh	r3, [r7, #4]
 8005952:	f003 0301 	and.w	r3, r3, #1
 8005956:	b29b      	uxth	r3, r3
 8005958:	2b00      	cmp	r3, #0
 800595a:	d007      	beq.n	800596c <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800595c:	6a3b      	ldr	r3, [r7, #32]
 800595e:	881b      	ldrh	r3, [r3, #0]
 8005960:	b29b      	uxth	r3, r3
 8005962:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	b2da      	uxtb	r2, r3
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	701a      	strb	r2, [r3, #0]
  }
}
 800596c:	bf00      	nop
 800596e:	372c      	adds	r7, #44	; 0x2c
 8005970:	46bd      	mov	sp, r7
 8005972:	bc80      	pop	{r7}
 8005974:	4770      	bx	lr

08005976 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005976:	b580      	push	{r7, lr}
 8005978:	b084      	sub	sp, #16
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
 800597e:	460b      	mov	r3, r1
 8005980:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005982:	2300      	movs	r3, #0
 8005984:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	7c1b      	ldrb	r3, [r3, #16]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d115      	bne.n	80059ba <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800598e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005992:	2202      	movs	r2, #2
 8005994:	2181      	movs	r1, #129	; 0x81
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f001 fedb 	bl	8007752 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80059a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059a6:	2202      	movs	r2, #2
 80059a8:	2101      	movs	r1, #1
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f001 fed1 	bl	8007752 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80059b8:	e012      	b.n	80059e0 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80059ba:	2340      	movs	r3, #64	; 0x40
 80059bc:	2202      	movs	r2, #2
 80059be:	2181      	movs	r1, #129	; 0x81
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f001 fec6 	bl	8007752 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80059cc:	2340      	movs	r3, #64	; 0x40
 80059ce:	2202      	movs	r2, #2
 80059d0:	2101      	movs	r1, #1
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f001 febd 	bl	8007752 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80059e0:	2308      	movs	r3, #8
 80059e2:	2203      	movs	r2, #3
 80059e4:	2182      	movs	r1, #130	; 0x82
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f001 feb3 	bl	8007752 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80059f2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80059f6:	f001 ffd3 	bl	80079a0 <USBD_static_malloc>
 80059fa:	4602      	mov	r2, r0
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d102      	bne.n	8005a12 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	73fb      	strb	r3, [r7, #15]
 8005a10:	e026      	b.n	8005a60 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a18:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	7c1b      	ldrb	r3, [r3, #16]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d109      	bne.n	8005a50 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a46:	2101      	movs	r1, #1
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f001 ff73 	bl	8007934 <USBD_LL_PrepareReceive>
 8005a4e:	e007      	b.n	8005a60 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a56:	2340      	movs	r3, #64	; 0x40
 8005a58:	2101      	movs	r1, #1
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f001 ff6a 	bl	8007934 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a6a:	b580      	push	{r7, lr}
 8005a6c:	b084      	sub	sp, #16
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
 8005a72:	460b      	mov	r3, r1
 8005a74:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005a76:	2300      	movs	r3, #0
 8005a78:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005a7a:	2181      	movs	r1, #129	; 0x81
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f001 fe8e 	bl	800779e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005a88:	2101      	movs	r1, #1
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f001 fe87 	bl	800779e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005a98:	2182      	movs	r1, #130	; 0x82
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f001 fe7f 	bl	800779e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00e      	beq.n	8005ace <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f001 ff79 	bl	80079b8 <USBD_static_free>
    pdev->pClassData = NULL;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3710      	adds	r7, #16
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b086      	sub	sp, #24
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ae8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005aea:	2300      	movs	r3, #0
 8005aec:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005aee:	2300      	movs	r3, #0
 8005af0:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005af2:	2300      	movs	r3, #0
 8005af4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d039      	beq.n	8005b76 <USBD_CDC_Setup+0x9e>
 8005b02:	2b20      	cmp	r3, #32
 8005b04:	d17c      	bne.n	8005c00 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	88db      	ldrh	r3, [r3, #6]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d029      	beq.n	8005b62 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	b25b      	sxtb	r3, r3
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	da11      	bge.n	8005b3c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	683a      	ldr	r2, [r7, #0]
 8005b22:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005b24:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b26:	683a      	ldr	r2, [r7, #0]
 8005b28:	88d2      	ldrh	r2, [r2, #6]
 8005b2a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005b2c:	6939      	ldr	r1, [r7, #16]
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	88db      	ldrh	r3, [r3, #6]
 8005b32:	461a      	mov	r2, r3
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f001 fa13 	bl	8006f60 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005b3a:	e068      	b.n	8005c0e <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	785a      	ldrb	r2, [r3, #1]
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	88db      	ldrh	r3, [r3, #6]
 8005b4a:	b2da      	uxtb	r2, r3
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005b52:	6939      	ldr	r1, [r7, #16]
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	88db      	ldrh	r3, [r3, #6]
 8005b58:	461a      	mov	r2, r3
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f001 fa2e 	bl	8006fbc <USBD_CtlPrepareRx>
      break;
 8005b60:	e055      	b.n	8005c0e <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	683a      	ldr	r2, [r7, #0]
 8005b6c:	7850      	ldrb	r0, [r2, #1]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	6839      	ldr	r1, [r7, #0]
 8005b72:	4798      	blx	r3
      break;
 8005b74:	e04b      	b.n	8005c0e <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	785b      	ldrb	r3, [r3, #1]
 8005b7a:	2b0a      	cmp	r3, #10
 8005b7c:	d017      	beq.n	8005bae <USBD_CDC_Setup+0xd6>
 8005b7e:	2b0b      	cmp	r3, #11
 8005b80:	d029      	beq.n	8005bd6 <USBD_CDC_Setup+0xfe>
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d133      	bne.n	8005bee <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b8c:	2b03      	cmp	r3, #3
 8005b8e:	d107      	bne.n	8005ba0 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005b90:	f107 030c 	add.w	r3, r7, #12
 8005b94:	2202      	movs	r2, #2
 8005b96:	4619      	mov	r1, r3
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f001 f9e1 	bl	8006f60 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005b9e:	e02e      	b.n	8005bfe <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005ba0:	6839      	ldr	r1, [r7, #0]
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f001 f972 	bl	8006e8c <USBD_CtlError>
            ret = USBD_FAIL;
 8005ba8:	2302      	movs	r3, #2
 8005baa:	75fb      	strb	r3, [r7, #23]
          break;
 8005bac:	e027      	b.n	8005bfe <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bb4:	2b03      	cmp	r3, #3
 8005bb6:	d107      	bne.n	8005bc8 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005bb8:	f107 030f 	add.w	r3, r7, #15
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f001 f9cd 	bl	8006f60 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005bc6:	e01a      	b.n	8005bfe <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005bc8:	6839      	ldr	r1, [r7, #0]
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f001 f95e 	bl	8006e8c <USBD_CtlError>
            ret = USBD_FAIL;
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	75fb      	strb	r3, [r7, #23]
          break;
 8005bd4:	e013      	b.n	8005bfe <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bdc:	2b03      	cmp	r3, #3
 8005bde:	d00d      	beq.n	8005bfc <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8005be0:	6839      	ldr	r1, [r7, #0]
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f001 f952 	bl	8006e8c <USBD_CtlError>
            ret = USBD_FAIL;
 8005be8:	2302      	movs	r3, #2
 8005bea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005bec:	e006      	b.n	8005bfc <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8005bee:	6839      	ldr	r1, [r7, #0]
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f001 f94b 	bl	8006e8c <USBD_CtlError>
          ret = USBD_FAIL;
 8005bf6:	2302      	movs	r3, #2
 8005bf8:	75fb      	strb	r3, [r7, #23]
          break;
 8005bfa:	e000      	b.n	8005bfe <USBD_CDC_Setup+0x126>
          break;
 8005bfc:	bf00      	nop
      }
      break;
 8005bfe:	e006      	b.n	8005c0e <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8005c00:	6839      	ldr	r1, [r7, #0]
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f001 f942 	bl	8006e8c <USBD_CtlError>
      ret = USBD_FAIL;
 8005c08:	2302      	movs	r3, #2
 8005c0a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c0c:	bf00      	nop
  }

  return ret;
 8005c0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3718      	adds	r7, #24
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	460b      	mov	r3, r1
 8005c22:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c2a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c32:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d03a      	beq.n	8005cb4 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005c3e:	78fa      	ldrb	r2, [r7, #3]
 8005c40:	6879      	ldr	r1, [r7, #4]
 8005c42:	4613      	mov	r3, r2
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	4413      	add	r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	440b      	add	r3, r1
 8005c4c:	331c      	adds	r3, #28
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d029      	beq.n	8005ca8 <USBD_CDC_DataIn+0x90>
 8005c54:	78fa      	ldrb	r2, [r7, #3]
 8005c56:	6879      	ldr	r1, [r7, #4]
 8005c58:	4613      	mov	r3, r2
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	4413      	add	r3, r2
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	440b      	add	r3, r1
 8005c62:	331c      	adds	r3, #28
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	78f9      	ldrb	r1, [r7, #3]
 8005c68:	68b8      	ldr	r0, [r7, #8]
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	440b      	add	r3, r1
 8005c70:	00db      	lsls	r3, r3, #3
 8005c72:	4403      	add	r3, r0
 8005c74:	3338      	adds	r3, #56	; 0x38
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	fbb2 f1f3 	udiv	r1, r2, r3
 8005c7c:	fb03 f301 	mul.w	r3, r3, r1
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d110      	bne.n	8005ca8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005c86:	78fa      	ldrb	r2, [r7, #3]
 8005c88:	6879      	ldr	r1, [r7, #4]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	4413      	add	r3, r2
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	440b      	add	r3, r1
 8005c94:	331c      	adds	r3, #28
 8005c96:	2200      	movs	r2, #0
 8005c98:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005c9a:	78f9      	ldrb	r1, [r7, #3]
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f001 fe24 	bl	80078ee <USBD_LL_Transmit>
 8005ca6:	e003      	b.n	8005cb0 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	e000      	b.n	8005cb6 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005cb4:	2302      	movs	r3, #2
  }
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b084      	sub	sp, #16
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cd0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005cd2:	78fb      	ldrb	r3, [r7, #3]
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f001 fe4f 	bl	800797a <USBD_LL_GetRxDataSize>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00d      	beq.n	8005d0a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005d02:	4611      	mov	r1, r2
 8005d04:	4798      	blx	r3

    return USBD_OK;
 8005d06:	2300      	movs	r3, #0
 8005d08:	e000      	b.n	8005d0c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005d0a:	2302      	movs	r3, #2
  }
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3710      	adds	r7, #16
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d22:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d015      	beq.n	8005d5a <USBD_CDC_EP0_RxReady+0x46>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005d34:	2bff      	cmp	r3, #255	; 0xff
 8005d36:	d010      	beq.n	8005d5a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005d46:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005d4e:	b292      	uxth	r2, r2
 8005d50:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	22ff      	movs	r2, #255	; 0xff
 8005d56:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2243      	movs	r2, #67	; 0x43
 8005d70:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005d72:	4b03      	ldr	r3, [pc, #12]	; (8005d80 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bc80      	pop	{r7}
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop
 8005d80:	20000094 	.word	0x20000094

08005d84 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2243      	movs	r2, #67	; 0x43
 8005d90:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005d92:	4b03      	ldr	r3, [pc, #12]	; (8005da0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bc80      	pop	{r7}
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	20000050 	.word	0x20000050

08005da4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2243      	movs	r2, #67	; 0x43
 8005db0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005db2:	4b03      	ldr	r3, [pc, #12]	; (8005dc0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bc80      	pop	{r7}
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	200000d8 	.word	0x200000d8

08005dc4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	220a      	movs	r2, #10
 8005dd0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005dd2:	4b03      	ldr	r3, [pc, #12]	; (8005de0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bc80      	pop	{r7}
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	2000000c 	.word	0x2000000c

08005de4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005dee:	2302      	movs	r3, #2
 8005df0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d005      	beq.n	8005e04 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	683a      	ldr	r2, [r7, #0]
 8005dfc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005e00:	2300      	movs	r3, #0
 8005e02:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3714      	adds	r7, #20
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bc80      	pop	{r7}
 8005e0e:	4770      	bx	lr

08005e10 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b087      	sub	sp, #28
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e24:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005e2e:	88fa      	ldrh	r2, [r7, #6]
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005e36:	2300      	movs	r3, #0
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	371c      	adds	r7, #28
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bc80      	pop	{r7}
 8005e40:	4770      	bx	lr

08005e42 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005e42:	b480      	push	{r7}
 8005e44:	b085      	sub	sp, #20
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
 8005e4a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e52:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	683a      	ldr	r2, [r7, #0]
 8005e58:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3714      	adds	r7, #20
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bc80      	pop	{r7}
 8005e66:	4770      	bx	lr

08005e68 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e76:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d01c      	beq.n	8005ebc <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d115      	bne.n	8005eb8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	2181      	movs	r1, #129	; 0x81
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f001 fd1d 	bl	80078ee <USBD_LL_Transmit>

      return USBD_OK;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	e002      	b.n	8005ebe <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e000      	b.n	8005ebe <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005ebc:	2302      	movs	r3, #2
  }
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b084      	sub	sp, #16
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ed4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d017      	beq.n	8005f10 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	7c1b      	ldrb	r3, [r3, #16]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d109      	bne.n	8005efc <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005eee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ef2:	2101      	movs	r1, #1
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f001 fd1d 	bl	8007934 <USBD_LL_PrepareReceive>
 8005efa:	e007      	b.n	8005f0c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f02:	2340      	movs	r3, #64	; 0x40
 8005f04:	2101      	movs	r1, #1
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f001 fd14 	bl	8007934 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	e000      	b.n	8005f12 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005f10:	2302      	movs	r3, #2
  }
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
	...

08005f1c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	4613      	mov	r3, r2
 8005f28:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d10a      	bne.n	8005f46 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8005f30:	4814      	ldr	r0, [pc, #80]	; (8005f84 <USBD_Init+0x68>)
 8005f32:	f001 fdad 	bl	8007a90 <iprintf>
 8005f36:	4814      	ldr	r0, [pc, #80]	; (8005f88 <USBD_Init+0x6c>)
 8005f38:	f001 fdaa 	bl	8007a90 <iprintf>
 8005f3c:	200a      	movs	r0, #10
 8005f3e:	f001 fdbf 	bl	8007ac0 <putchar>
#endif
    return USBD_FAIL;
 8005f42:	2302      	movs	r3, #2
 8005f44:	e01a      	b.n	8005f7c <USBD_Init+0x60>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d003      	beq.n	8005f58 <USBD_Init+0x3c>
  {
    pdev->pClass = NULL;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d003      	beq.n	8005f66 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	68ba      	ldr	r2, [r7, #8]
 8005f62:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	79fa      	ldrb	r2, [r7, #7]
 8005f72:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005f74:	68f8      	ldr	r0, [r7, #12]
 8005f76:	f001 fb77 	bl	8007668 <USBD_LL_Init>

  return USBD_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	080089a8 	.word	0x080089a8
 8005f88:	080089b0 	.word	0x080089b0

08005f8c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005f96:	2300      	movs	r3, #0
 8005f98:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d006      	beq.n	8005fae <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	683a      	ldr	r2, [r7, #0]
 8005fa4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	73fb      	strb	r3, [r7, #15]
 8005fac:	e00a      	b.n	8005fc4 <USBD_RegisterClass+0x38>
  }
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 8005fae:	4808      	ldr	r0, [pc, #32]	; (8005fd0 <USBD_RegisterClass+0x44>)
 8005fb0:	f001 fd6e 	bl	8007a90 <iprintf>
 8005fb4:	4807      	ldr	r0, [pc, #28]	; (8005fd4 <USBD_RegisterClass+0x48>)
 8005fb6:	f001 fd6b 	bl	8007a90 <iprintf>
 8005fba:	200a      	movs	r0, #10
 8005fbc:	f001 fd80 	bl	8007ac0 <putchar>
#endif
    status = USBD_FAIL;
 8005fc0:	2302      	movs	r3, #2
 8005fc2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3710      	adds	r7, #16
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	080089a8 	.word	0x080089a8
 8005fd4:	080089c8 	.word	0x080089c8

08005fd8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f001 fb9b 	bl	800771c <USBD_LL_Start>

  return USBD_OK;
 8005fe6:	2300      	movs	r3, #0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3708      	adds	r7, #8
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	370c      	adds	r7, #12
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bc80      	pop	{r7}
 8006002:	4770      	bx	lr

08006004 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	460b      	mov	r3, r1
 800600e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006010:	2302      	movs	r3, #2
 8006012:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00c      	beq.n	8006038 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	78fa      	ldrb	r2, [r7, #3]
 8006028:	4611      	mov	r1, r2
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	4798      	blx	r3
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d101      	bne.n	8006038 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006034:	2300      	movs	r3, #0
 8006036:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006038:	7bfb      	ldrb	r3, [r7, #15]
}
 800603a:	4618      	mov	r0, r3
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b082      	sub	sp, #8
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
 800604a:	460b      	mov	r3, r1
 800604c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	78fa      	ldrb	r2, [r7, #3]
 8006058:	4611      	mov	r1, r2
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	4798      	blx	r3

  return USBD_OK;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	3708      	adds	r7, #8
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006078:	6839      	ldr	r1, [r7, #0]
 800607a:	4618      	mov	r0, r3
 800607c:	f000 feca 	bl	8006e14 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800608e:	461a      	mov	r2, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800609c:	f003 031f 	and.w	r3, r3, #31
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d00c      	beq.n	80060be <USBD_LL_SetupStage+0x56>
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d302      	bcc.n	80060ae <USBD_LL_SetupStage+0x46>
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d010      	beq.n	80060ce <USBD_LL_SetupStage+0x66>
 80060ac:	e017      	b.n	80060de <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80060b4:	4619      	mov	r1, r3
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 f9ca 	bl	8006450 <USBD_StdDevReq>
      break;
 80060bc:	e01a      	b.n	80060f4 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80060c4:	4619      	mov	r1, r3
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 fa2c 	bl	8006524 <USBD_StdItfReq>
      break;
 80060cc:	e012      	b.n	80060f4 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80060d4:	4619      	mov	r1, r3
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 fa6a 	bl	80065b0 <USBD_StdEPReq>
      break;
 80060dc:	e00a      	b.n	80060f4 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80060e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	4619      	mov	r1, r3
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f001 fb75 	bl	80077dc <USBD_LL_StallEP>
      break;
 80060f2:	bf00      	nop
  }

  return USBD_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3708      	adds	r7, #8
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}

080060fe <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80060fe:	b580      	push	{r7, lr}
 8006100:	b086      	sub	sp, #24
 8006102:	af00      	add	r7, sp, #0
 8006104:	60f8      	str	r0, [r7, #12]
 8006106:	460b      	mov	r3, r1
 8006108:	607a      	str	r2, [r7, #4]
 800610a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800610c:	7afb      	ldrb	r3, [r7, #11]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d14b      	bne.n	80061aa <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006118:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006120:	2b03      	cmp	r3, #3
 8006122:	d134      	bne.n	800618e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	68da      	ldr	r2, [r3, #12]
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	429a      	cmp	r2, r3
 800612e:	d919      	bls.n	8006164 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	68da      	ldr	r2, [r3, #12]
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	1ad2      	subs	r2, r2, r3
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	68da      	ldr	r2, [r3, #12]
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006146:	429a      	cmp	r2, r3
 8006148:	d203      	bcs.n	8006152 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800614e:	b29b      	uxth	r3, r3
 8006150:	e002      	b.n	8006158 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006156:	b29b      	uxth	r3, r3
 8006158:	461a      	mov	r2, r3
 800615a:	6879      	ldr	r1, [r7, #4]
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f000 ff4b 	bl	8006ff8 <USBD_CtlContinueRx>
 8006162:	e038      	b.n	80061d6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d00a      	beq.n	8006186 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006176:	2b03      	cmp	r3, #3
 8006178:	d105      	bne.n	8006186 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f000 ff48 	bl	800701c <USBD_CtlSendStatus>
 800618c:	e023      	b.n	80061d6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006194:	2b05      	cmp	r3, #5
 8006196:	d11e      	bne.n	80061d6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80061a0:	2100      	movs	r1, #0
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f001 fb1a 	bl	80077dc <USBD_LL_StallEP>
 80061a8:	e015      	b.n	80061d6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061b0:	699b      	ldr	r3, [r3, #24]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d00d      	beq.n	80061d2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80061bc:	2b03      	cmp	r3, #3
 80061be:	d108      	bne.n	80061d2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061c6:	699b      	ldr	r3, [r3, #24]
 80061c8:	7afa      	ldrb	r2, [r7, #11]
 80061ca:	4611      	mov	r1, r2
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	4798      	blx	r3
 80061d0:	e001      	b.n	80061d6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80061d2:	2302      	movs	r3, #2
 80061d4:	e000      	b.n	80061d8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3718      	adds	r7, #24
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b086      	sub	sp, #24
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	460b      	mov	r3, r1
 80061ea:	607a      	str	r2, [r7, #4]
 80061ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80061ee:	7afb      	ldrb	r3, [r7, #11]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d17f      	bne.n	80062f4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	3314      	adds	r3, #20
 80061f8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006200:	2b02      	cmp	r3, #2
 8006202:	d15c      	bne.n	80062be <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	68da      	ldr	r2, [r3, #12]
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	429a      	cmp	r2, r3
 800620e:	d915      	bls.n	800623c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	68da      	ldr	r2, [r3, #12]
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	1ad2      	subs	r2, r2, r3
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	b29b      	uxth	r3, r3
 8006224:	461a      	mov	r2, r3
 8006226:	6879      	ldr	r1, [r7, #4]
 8006228:	68f8      	ldr	r0, [r7, #12]
 800622a:	f000 feb5 	bl	8006f98 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800622e:	2300      	movs	r3, #0
 8006230:	2200      	movs	r2, #0
 8006232:	2100      	movs	r1, #0
 8006234:	68f8      	ldr	r0, [r7, #12]
 8006236:	f001 fb7d 	bl	8007934 <USBD_LL_PrepareReceive>
 800623a:	e04e      	b.n	80062da <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	697a      	ldr	r2, [r7, #20]
 8006242:	6912      	ldr	r2, [r2, #16]
 8006244:	fbb3 f1f2 	udiv	r1, r3, r2
 8006248:	fb02 f201 	mul.w	r2, r2, r1
 800624c:	1a9b      	subs	r3, r3, r2
 800624e:	2b00      	cmp	r3, #0
 8006250:	d11c      	bne.n	800628c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	689a      	ldr	r2, [r3, #8]
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800625a:	429a      	cmp	r2, r3
 800625c:	d316      	bcc.n	800628c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	689a      	ldr	r2, [r3, #8]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006268:	429a      	cmp	r2, r3
 800626a:	d20f      	bcs.n	800628c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800626c:	2200      	movs	r2, #0
 800626e:	2100      	movs	r1, #0
 8006270:	68f8      	ldr	r0, [r7, #12]
 8006272:	f000 fe91 	bl	8006f98 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2200      	movs	r2, #0
 800627a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800627e:	2300      	movs	r3, #0
 8006280:	2200      	movs	r2, #0
 8006282:	2100      	movs	r1, #0
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f001 fb55 	bl	8007934 <USBD_LL_PrepareReceive>
 800628a:	e026      	b.n	80062da <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d00a      	beq.n	80062ae <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800629e:	2b03      	cmp	r3, #3
 80062a0:	d105      	bne.n	80062ae <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	68f8      	ldr	r0, [r7, #12]
 80062ac:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80062ae:	2180      	movs	r1, #128	; 0x80
 80062b0:	68f8      	ldr	r0, [r7, #12]
 80062b2:	f001 fa93 	bl	80077dc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f000 fec3 	bl	8007042 <USBD_CtlReceiveStatus>
 80062bc:	e00d      	b.n	80062da <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80062c4:	2b04      	cmp	r3, #4
 80062c6:	d004      	beq.n	80062d2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d103      	bne.n	80062da <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80062d2:	2180      	movs	r1, #128	; 0x80
 80062d4:	68f8      	ldr	r0, [r7, #12]
 80062d6:	f001 fa81 	bl	80077dc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d11d      	bne.n	8006320 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80062e4:	68f8      	ldr	r0, [r7, #12]
 80062e6:	f7ff fe83 	bl	8005ff0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80062f2:	e015      	b.n	8006320 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062fa:	695b      	ldr	r3, [r3, #20]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00d      	beq.n	800631c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006306:	2b03      	cmp	r3, #3
 8006308:	d108      	bne.n	800631c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	7afa      	ldrb	r2, [r7, #11]
 8006314:	4611      	mov	r1, r2
 8006316:	68f8      	ldr	r0, [r7, #12]
 8006318:	4798      	blx	r3
 800631a:	e001      	b.n	8006320 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800631c:	2302      	movs	r3, #2
 800631e:	e000      	b.n	8006322 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3718      	adds	r7, #24
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}

0800632a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800632a:	b580      	push	{r7, lr}
 800632c:	b082      	sub	sp, #8
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006332:	2340      	movs	r3, #64	; 0x40
 8006334:	2200      	movs	r2, #0
 8006336:	2100      	movs	r1, #0
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f001 fa0a 	bl	8007752 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2201      	movs	r2, #1
 8006342:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2240      	movs	r2, #64	; 0x40
 800634a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800634e:	2340      	movs	r3, #64	; 0x40
 8006350:	2200      	movs	r2, #0
 8006352:	2180      	movs	r1, #128	; 0x80
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f001 f9fc 	bl	8007752 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2201      	movs	r2, #1
 800635e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2240      	movs	r2, #64	; 0x40
 8006364:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2201      	movs	r2, #1
 800636a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800638a:	2b00      	cmp	r3, #0
 800638c:	d009      	beq.n	80063a2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	6852      	ldr	r2, [r2, #4]
 800639a:	b2d2      	uxtb	r2, r2
 800639c:	4611      	mov	r1, r2
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	4798      	blx	r3
  }

  return USBD_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3708      	adds	r7, #8
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	460b      	mov	r3, r1
 80063b6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	78fa      	ldrb	r2, [r7, #3]
 80063bc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bc80      	pop	{r7}
 80063c8:	4770      	bx	lr

080063ca <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80063ca:	b480      	push	{r7}
 80063cc:	b083      	sub	sp, #12
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2204      	movs	r2, #4
 80063e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80063e6:	2300      	movs	r3, #0
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bc80      	pop	{r7}
 80063f0:	4770      	bx	lr

080063f2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80063f2:	b480      	push	{r7}
 80063f4:	b083      	sub	sp, #12
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006400:	2b04      	cmp	r3, #4
 8006402:	d105      	bne.n	8006410 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	370c      	adds	r7, #12
 8006416:	46bd      	mov	sp, r7
 8006418:	bc80      	pop	{r7}
 800641a:	4770      	bx	lr

0800641c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800642a:	2b03      	cmp	r3, #3
 800642c:	d10b      	bne.n	8006446 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006434:	69db      	ldr	r3, [r3, #28]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d005      	beq.n	8006446 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006440:	69db      	ldr	r3, [r3, #28]
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3708      	adds	r7, #8
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800645a:	2300      	movs	r3, #0
 800645c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006466:	2b20      	cmp	r3, #32
 8006468:	d004      	beq.n	8006474 <USBD_StdDevReq+0x24>
 800646a:	2b40      	cmp	r3, #64	; 0x40
 800646c:	d002      	beq.n	8006474 <USBD_StdDevReq+0x24>
 800646e:	2b00      	cmp	r3, #0
 8006470:	d008      	beq.n	8006484 <USBD_StdDevReq+0x34>
 8006472:	e04c      	b.n	800650e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	6839      	ldr	r1, [r7, #0]
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	4798      	blx	r3
      break;
 8006482:	e049      	b.n	8006518 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	785b      	ldrb	r3, [r3, #1]
 8006488:	2b09      	cmp	r3, #9
 800648a:	d83a      	bhi.n	8006502 <USBD_StdDevReq+0xb2>
 800648c:	a201      	add	r2, pc, #4	; (adr r2, 8006494 <USBD_StdDevReq+0x44>)
 800648e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006492:	bf00      	nop
 8006494:	080064e5 	.word	0x080064e5
 8006498:	080064f9 	.word	0x080064f9
 800649c:	08006503 	.word	0x08006503
 80064a0:	080064ef 	.word	0x080064ef
 80064a4:	08006503 	.word	0x08006503
 80064a8:	080064c7 	.word	0x080064c7
 80064ac:	080064bd 	.word	0x080064bd
 80064b0:	08006503 	.word	0x08006503
 80064b4:	080064db 	.word	0x080064db
 80064b8:	080064d1 	.word	0x080064d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80064bc:	6839      	ldr	r1, [r7, #0]
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 f9d4 	bl	800686c <USBD_GetDescriptor>
          break;
 80064c4:	e022      	b.n	800650c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80064c6:	6839      	ldr	r1, [r7, #0]
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 fb37 	bl	8006b3c <USBD_SetAddress>
          break;
 80064ce:	e01d      	b.n	800650c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80064d0:	6839      	ldr	r1, [r7, #0]
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 fb74 	bl	8006bc0 <USBD_SetConfig>
          break;
 80064d8:	e018      	b.n	800650c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80064da:	6839      	ldr	r1, [r7, #0]
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 fbfd 	bl	8006cdc <USBD_GetConfig>
          break;
 80064e2:	e013      	b.n	800650c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80064e4:	6839      	ldr	r1, [r7, #0]
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 fc2c 	bl	8006d44 <USBD_GetStatus>
          break;
 80064ec:	e00e      	b.n	800650c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80064ee:	6839      	ldr	r1, [r7, #0]
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 fc5a 	bl	8006daa <USBD_SetFeature>
          break;
 80064f6:	e009      	b.n	800650c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80064f8:	6839      	ldr	r1, [r7, #0]
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 fc69 	bl	8006dd2 <USBD_ClrFeature>
          break;
 8006500:	e004      	b.n	800650c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006502:	6839      	ldr	r1, [r7, #0]
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 fcc1 	bl	8006e8c <USBD_CtlError>
          break;
 800650a:	bf00      	nop
      }
      break;
 800650c:	e004      	b.n	8006518 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800650e:	6839      	ldr	r1, [r7, #0]
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 fcbb 	bl	8006e8c <USBD_CtlError>
      break;
 8006516:	bf00      	nop
  }

  return ret;
 8006518:	7bfb      	ldrb	r3, [r7, #15]
}
 800651a:	4618      	mov	r0, r3
 800651c:	3710      	adds	r7, #16
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop

08006524 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800652e:	2300      	movs	r3, #0
 8006530:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800653a:	2b20      	cmp	r3, #32
 800653c:	d003      	beq.n	8006546 <USBD_StdItfReq+0x22>
 800653e:	2b40      	cmp	r3, #64	; 0x40
 8006540:	d001      	beq.n	8006546 <USBD_StdItfReq+0x22>
 8006542:	2b00      	cmp	r3, #0
 8006544:	d12a      	bne.n	800659c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800654c:	3b01      	subs	r3, #1
 800654e:	2b02      	cmp	r3, #2
 8006550:	d81d      	bhi.n	800658e <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	889b      	ldrh	r3, [r3, #4]
 8006556:	b2db      	uxtb	r3, r3
 8006558:	2b01      	cmp	r3, #1
 800655a:	d813      	bhi.n	8006584 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	6839      	ldr	r1, [r7, #0]
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	4798      	blx	r3
 800656a:	4603      	mov	r3, r0
 800656c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	88db      	ldrh	r3, [r3, #6]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d110      	bne.n	8006598 <USBD_StdItfReq+0x74>
 8006576:	7bfb      	ldrb	r3, [r7, #15]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d10d      	bne.n	8006598 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 fd4d 	bl	800701c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006582:	e009      	b.n	8006598 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006584:	6839      	ldr	r1, [r7, #0]
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 fc80 	bl	8006e8c <USBD_CtlError>
          break;
 800658c:	e004      	b.n	8006598 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800658e:	6839      	ldr	r1, [r7, #0]
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 fc7b 	bl	8006e8c <USBD_CtlError>
          break;
 8006596:	e000      	b.n	800659a <USBD_StdItfReq+0x76>
          break;
 8006598:	bf00      	nop
      }
      break;
 800659a:	e004      	b.n	80065a6 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800659c:	6839      	ldr	r1, [r7, #0]
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 fc74 	bl	8006e8c <USBD_CtlError>
      break;
 80065a4:	bf00      	nop
  }

  return USBD_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3710      	adds	r7, #16
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80065ba:	2300      	movs	r3, #0
 80065bc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	889b      	ldrh	r3, [r3, #4]
 80065c2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065cc:	2b20      	cmp	r3, #32
 80065ce:	d004      	beq.n	80065da <USBD_StdEPReq+0x2a>
 80065d0:	2b40      	cmp	r3, #64	; 0x40
 80065d2:	d002      	beq.n	80065da <USBD_StdEPReq+0x2a>
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d008      	beq.n	80065ea <USBD_StdEPReq+0x3a>
 80065d8:	e13d      	b.n	8006856 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	6839      	ldr	r1, [r7, #0]
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	4798      	blx	r3
      break;
 80065e8:	e13a      	b.n	8006860 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065f2:	2b20      	cmp	r3, #32
 80065f4:	d10a      	bne.n	800660c <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	6839      	ldr	r1, [r7, #0]
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	4798      	blx	r3
 8006604:	4603      	mov	r3, r0
 8006606:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006608:	7bfb      	ldrb	r3, [r7, #15]
 800660a:	e12a      	b.n	8006862 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	785b      	ldrb	r3, [r3, #1]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d03e      	beq.n	8006692 <USBD_StdEPReq+0xe2>
 8006614:	2b03      	cmp	r3, #3
 8006616:	d002      	beq.n	800661e <USBD_StdEPReq+0x6e>
 8006618:	2b00      	cmp	r3, #0
 800661a:	d070      	beq.n	80066fe <USBD_StdEPReq+0x14e>
 800661c:	e115      	b.n	800684a <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006624:	2b02      	cmp	r3, #2
 8006626:	d002      	beq.n	800662e <USBD_StdEPReq+0x7e>
 8006628:	2b03      	cmp	r3, #3
 800662a:	d015      	beq.n	8006658 <USBD_StdEPReq+0xa8>
 800662c:	e02b      	b.n	8006686 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800662e:	7bbb      	ldrb	r3, [r7, #14]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00c      	beq.n	800664e <USBD_StdEPReq+0x9e>
 8006634:	7bbb      	ldrb	r3, [r7, #14]
 8006636:	2b80      	cmp	r3, #128	; 0x80
 8006638:	d009      	beq.n	800664e <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800663a:	7bbb      	ldrb	r3, [r7, #14]
 800663c:	4619      	mov	r1, r3
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f001 f8cc 	bl	80077dc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006644:	2180      	movs	r1, #128	; 0x80
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f001 f8c8 	bl	80077dc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800664c:	e020      	b.n	8006690 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800664e:	6839      	ldr	r1, [r7, #0]
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 fc1b 	bl	8006e8c <USBD_CtlError>
              break;
 8006656:	e01b      	b.n	8006690 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	885b      	ldrh	r3, [r3, #2]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d10e      	bne.n	800667e <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8006660:	7bbb      	ldrb	r3, [r7, #14]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00b      	beq.n	800667e <USBD_StdEPReq+0xce>
 8006666:	7bbb      	ldrb	r3, [r7, #14]
 8006668:	2b80      	cmp	r3, #128	; 0x80
 800666a:	d008      	beq.n	800667e <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	88db      	ldrh	r3, [r3, #6]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d104      	bne.n	800667e <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006674:	7bbb      	ldrb	r3, [r7, #14]
 8006676:	4619      	mov	r1, r3
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f001 f8af 	bl	80077dc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 fccc 	bl	800701c <USBD_CtlSendStatus>

              break;
 8006684:	e004      	b.n	8006690 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8006686:	6839      	ldr	r1, [r7, #0]
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 fbff 	bl	8006e8c <USBD_CtlError>
              break;
 800668e:	bf00      	nop
          }
          break;
 8006690:	e0e0      	b.n	8006854 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006698:	2b02      	cmp	r3, #2
 800669a:	d002      	beq.n	80066a2 <USBD_StdEPReq+0xf2>
 800669c:	2b03      	cmp	r3, #3
 800669e:	d015      	beq.n	80066cc <USBD_StdEPReq+0x11c>
 80066a0:	e026      	b.n	80066f0 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066a2:	7bbb      	ldrb	r3, [r7, #14]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d00c      	beq.n	80066c2 <USBD_StdEPReq+0x112>
 80066a8:	7bbb      	ldrb	r3, [r7, #14]
 80066aa:	2b80      	cmp	r3, #128	; 0x80
 80066ac:	d009      	beq.n	80066c2 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80066ae:	7bbb      	ldrb	r3, [r7, #14]
 80066b0:	4619      	mov	r1, r3
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f001 f892 	bl	80077dc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80066b8:	2180      	movs	r1, #128	; 0x80
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f001 f88e 	bl	80077dc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80066c0:	e01c      	b.n	80066fc <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80066c2:	6839      	ldr	r1, [r7, #0]
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 fbe1 	bl	8006e8c <USBD_CtlError>
              break;
 80066ca:	e017      	b.n	80066fc <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	885b      	ldrh	r3, [r3, #2]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d112      	bne.n	80066fa <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80066d4:	7bbb      	ldrb	r3, [r7, #14]
 80066d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d004      	beq.n	80066e8 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80066de:	7bbb      	ldrb	r3, [r7, #14]
 80066e0:	4619      	mov	r1, r3
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f001 f899 	bl	800781a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 fc97 	bl	800701c <USBD_CtlSendStatus>
              }
              break;
 80066ee:	e004      	b.n	80066fa <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80066f0:	6839      	ldr	r1, [r7, #0]
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 fbca 	bl	8006e8c <USBD_CtlError>
              break;
 80066f8:	e000      	b.n	80066fc <USBD_StdEPReq+0x14c>
              break;
 80066fa:	bf00      	nop
          }
          break;
 80066fc:	e0aa      	b.n	8006854 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006704:	2b02      	cmp	r3, #2
 8006706:	d002      	beq.n	800670e <USBD_StdEPReq+0x15e>
 8006708:	2b03      	cmp	r3, #3
 800670a:	d032      	beq.n	8006772 <USBD_StdEPReq+0x1c2>
 800670c:	e097      	b.n	800683e <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800670e:	7bbb      	ldrb	r3, [r7, #14]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d007      	beq.n	8006724 <USBD_StdEPReq+0x174>
 8006714:	7bbb      	ldrb	r3, [r7, #14]
 8006716:	2b80      	cmp	r3, #128	; 0x80
 8006718:	d004      	beq.n	8006724 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800671a:	6839      	ldr	r1, [r7, #0]
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 fbb5 	bl	8006e8c <USBD_CtlError>
                break;
 8006722:	e091      	b.n	8006848 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006724:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006728:	2b00      	cmp	r3, #0
 800672a:	da0b      	bge.n	8006744 <USBD_StdEPReq+0x194>
 800672c:	7bbb      	ldrb	r3, [r7, #14]
 800672e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006732:	4613      	mov	r3, r2
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	4413      	add	r3, r2
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	3310      	adds	r3, #16
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	4413      	add	r3, r2
 8006740:	3304      	adds	r3, #4
 8006742:	e00b      	b.n	800675c <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006744:	7bbb      	ldrb	r3, [r7, #14]
 8006746:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800674a:	4613      	mov	r3, r2
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	4413      	add	r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	4413      	add	r3, r2
 800675a:	3304      	adds	r3, #4
 800675c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	2200      	movs	r2, #0
 8006762:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	2202      	movs	r2, #2
 8006768:	4619      	mov	r1, r3
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 fbf8 	bl	8006f60 <USBD_CtlSendData>
              break;
 8006770:	e06a      	b.n	8006848 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006772:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006776:	2b00      	cmp	r3, #0
 8006778:	da11      	bge.n	800679e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800677a:	7bbb      	ldrb	r3, [r7, #14]
 800677c:	f003 020f 	and.w	r2, r3, #15
 8006780:	6879      	ldr	r1, [r7, #4]
 8006782:	4613      	mov	r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	4413      	add	r3, r2
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	440b      	add	r3, r1
 800678c:	3318      	adds	r3, #24
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d117      	bne.n	80067c4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006794:	6839      	ldr	r1, [r7, #0]
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 fb78 	bl	8006e8c <USBD_CtlError>
                  break;
 800679c:	e054      	b.n	8006848 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800679e:	7bbb      	ldrb	r3, [r7, #14]
 80067a0:	f003 020f 	and.w	r2, r3, #15
 80067a4:	6879      	ldr	r1, [r7, #4]
 80067a6:	4613      	mov	r3, r2
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	4413      	add	r3, r2
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	440b      	add	r3, r1
 80067b0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d104      	bne.n	80067c4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80067ba:	6839      	ldr	r1, [r7, #0]
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 fb65 	bl	8006e8c <USBD_CtlError>
                  break;
 80067c2:	e041      	b.n	8006848 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	da0b      	bge.n	80067e4 <USBD_StdEPReq+0x234>
 80067cc:	7bbb      	ldrb	r3, [r7, #14]
 80067ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067d2:	4613      	mov	r3, r2
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	4413      	add	r3, r2
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	3310      	adds	r3, #16
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	4413      	add	r3, r2
 80067e0:	3304      	adds	r3, #4
 80067e2:	e00b      	b.n	80067fc <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80067e4:	7bbb      	ldrb	r3, [r7, #14]
 80067e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067ea:	4613      	mov	r3, r2
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	4413      	add	r3, r2
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	4413      	add	r3, r2
 80067fa:	3304      	adds	r3, #4
 80067fc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80067fe:	7bbb      	ldrb	r3, [r7, #14]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d002      	beq.n	800680a <USBD_StdEPReq+0x25a>
 8006804:	7bbb      	ldrb	r3, [r7, #14]
 8006806:	2b80      	cmp	r3, #128	; 0x80
 8006808:	d103      	bne.n	8006812 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	2200      	movs	r2, #0
 800680e:	601a      	str	r2, [r3, #0]
 8006810:	e00e      	b.n	8006830 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006812:	7bbb      	ldrb	r3, [r7, #14]
 8006814:	4619      	mov	r1, r3
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f001 f81e 	bl	8007858 <USBD_LL_IsStallEP>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d003      	beq.n	800682a <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	2201      	movs	r2, #1
 8006826:	601a      	str	r2, [r3, #0]
 8006828:	e002      	b.n	8006830 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	2200      	movs	r2, #0
 800682e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	2202      	movs	r2, #2
 8006834:	4619      	mov	r1, r3
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 fb92 	bl	8006f60 <USBD_CtlSendData>
              break;
 800683c:	e004      	b.n	8006848 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800683e:	6839      	ldr	r1, [r7, #0]
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 fb23 	bl	8006e8c <USBD_CtlError>
              break;
 8006846:	bf00      	nop
          }
          break;
 8006848:	e004      	b.n	8006854 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800684a:	6839      	ldr	r1, [r7, #0]
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 fb1d 	bl	8006e8c <USBD_CtlError>
          break;
 8006852:	bf00      	nop
      }
      break;
 8006854:	e004      	b.n	8006860 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8006856:	6839      	ldr	r1, [r7, #0]
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 fb17 	bl	8006e8c <USBD_CtlError>
      break;
 800685e:	bf00      	nop
  }

  return ret;
 8006860:	7bfb      	ldrb	r3, [r7, #15]
}
 8006862:	4618      	mov	r0, r3
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
	...

0800686c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006876:	2300      	movs	r3, #0
 8006878:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800687a:	2300      	movs	r3, #0
 800687c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800687e:	2300      	movs	r3, #0
 8006880:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	885b      	ldrh	r3, [r3, #2]
 8006886:	0a1b      	lsrs	r3, r3, #8
 8006888:	b29b      	uxth	r3, r3
 800688a:	3b01      	subs	r3, #1
 800688c:	2b06      	cmp	r3, #6
 800688e:	f200 8128 	bhi.w	8006ae2 <USBD_GetDescriptor+0x276>
 8006892:	a201      	add	r2, pc, #4	; (adr r2, 8006898 <USBD_GetDescriptor+0x2c>)
 8006894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006898:	080068b5 	.word	0x080068b5
 800689c:	080068cd 	.word	0x080068cd
 80068a0:	0800690d 	.word	0x0800690d
 80068a4:	08006ae3 	.word	0x08006ae3
 80068a8:	08006ae3 	.word	0x08006ae3
 80068ac:	08006a83 	.word	0x08006a83
 80068b0:	08006aaf 	.word	0x08006aaf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	7c12      	ldrb	r2, [r2, #16]
 80068c0:	f107 0108 	add.w	r1, r7, #8
 80068c4:	4610      	mov	r0, r2
 80068c6:	4798      	blx	r3
 80068c8:	60f8      	str	r0, [r7, #12]
      break;
 80068ca:	e112      	b.n	8006af2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	7c1b      	ldrb	r3, [r3, #16]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d10d      	bne.n	80068f0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068dc:	f107 0208 	add.w	r2, r7, #8
 80068e0:	4610      	mov	r0, r2
 80068e2:	4798      	blx	r3
 80068e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	3301      	adds	r3, #1
 80068ea:	2202      	movs	r2, #2
 80068ec:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80068ee:	e100      	b.n	8006af2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f8:	f107 0208 	add.w	r2, r7, #8
 80068fc:	4610      	mov	r0, r2
 80068fe:	4798      	blx	r3
 8006900:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	3301      	adds	r3, #1
 8006906:	2202      	movs	r2, #2
 8006908:	701a      	strb	r2, [r3, #0]
      break;
 800690a:	e0f2      	b.n	8006af2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	885b      	ldrh	r3, [r3, #2]
 8006910:	b2db      	uxtb	r3, r3
 8006912:	2b05      	cmp	r3, #5
 8006914:	f200 80ac 	bhi.w	8006a70 <USBD_GetDescriptor+0x204>
 8006918:	a201      	add	r2, pc, #4	; (adr r2, 8006920 <USBD_GetDescriptor+0xb4>)
 800691a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800691e:	bf00      	nop
 8006920:	08006939 	.word	0x08006939
 8006924:	0800696d 	.word	0x0800696d
 8006928:	080069a1 	.word	0x080069a1
 800692c:	080069d5 	.word	0x080069d5
 8006930:	08006a09 	.word	0x08006a09
 8006934:	08006a3d 	.word	0x08006a3d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00b      	beq.n	800695c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	7c12      	ldrb	r2, [r2, #16]
 8006950:	f107 0108 	add.w	r1, r7, #8
 8006954:	4610      	mov	r0, r2
 8006956:	4798      	blx	r3
 8006958:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800695a:	e091      	b.n	8006a80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800695c:	6839      	ldr	r1, [r7, #0]
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 fa94 	bl	8006e8c <USBD_CtlError>
            err++;
 8006964:	7afb      	ldrb	r3, [r7, #11]
 8006966:	3301      	adds	r3, #1
 8006968:	72fb      	strb	r3, [r7, #11]
          break;
 800696a:	e089      	b.n	8006a80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00b      	beq.n	8006990 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	7c12      	ldrb	r2, [r2, #16]
 8006984:	f107 0108 	add.w	r1, r7, #8
 8006988:	4610      	mov	r0, r2
 800698a:	4798      	blx	r3
 800698c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800698e:	e077      	b.n	8006a80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006990:	6839      	ldr	r1, [r7, #0]
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 fa7a 	bl	8006e8c <USBD_CtlError>
            err++;
 8006998:	7afb      	ldrb	r3, [r7, #11]
 800699a:	3301      	adds	r3, #1
 800699c:	72fb      	strb	r3, [r7, #11]
          break;
 800699e:	e06f      	b.n	8006a80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00b      	beq.n	80069c4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	7c12      	ldrb	r2, [r2, #16]
 80069b8:	f107 0108 	add.w	r1, r7, #8
 80069bc:	4610      	mov	r0, r2
 80069be:	4798      	blx	r3
 80069c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069c2:	e05d      	b.n	8006a80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069c4:	6839      	ldr	r1, [r7, #0]
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 fa60 	bl	8006e8c <USBD_CtlError>
            err++;
 80069cc:	7afb      	ldrb	r3, [r7, #11]
 80069ce:	3301      	adds	r3, #1
 80069d0:	72fb      	strb	r3, [r7, #11]
          break;
 80069d2:	e055      	b.n	8006a80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00b      	beq.n	80069f8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	7c12      	ldrb	r2, [r2, #16]
 80069ec:	f107 0108 	add.w	r1, r7, #8
 80069f0:	4610      	mov	r0, r2
 80069f2:	4798      	blx	r3
 80069f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069f6:	e043      	b.n	8006a80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069f8:	6839      	ldr	r1, [r7, #0]
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 fa46 	bl	8006e8c <USBD_CtlError>
            err++;
 8006a00:	7afb      	ldrb	r3, [r7, #11]
 8006a02:	3301      	adds	r3, #1
 8006a04:	72fb      	strb	r3, [r7, #11]
          break;
 8006a06:	e03b      	b.n	8006a80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a0e:	695b      	ldr	r3, [r3, #20]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00b      	beq.n	8006a2c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a1a:	695b      	ldr	r3, [r3, #20]
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	7c12      	ldrb	r2, [r2, #16]
 8006a20:	f107 0108 	add.w	r1, r7, #8
 8006a24:	4610      	mov	r0, r2
 8006a26:	4798      	blx	r3
 8006a28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a2a:	e029      	b.n	8006a80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a2c:	6839      	ldr	r1, [r7, #0]
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 fa2c 	bl	8006e8c <USBD_CtlError>
            err++;
 8006a34:	7afb      	ldrb	r3, [r7, #11]
 8006a36:	3301      	adds	r3, #1
 8006a38:	72fb      	strb	r3, [r7, #11]
          break;
 8006a3a:	e021      	b.n	8006a80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a42:	699b      	ldr	r3, [r3, #24]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d00b      	beq.n	8006a60 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a4e:	699b      	ldr	r3, [r3, #24]
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	7c12      	ldrb	r2, [r2, #16]
 8006a54:	f107 0108 	add.w	r1, r7, #8
 8006a58:	4610      	mov	r0, r2
 8006a5a:	4798      	blx	r3
 8006a5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a5e:	e00f      	b.n	8006a80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a60:	6839      	ldr	r1, [r7, #0]
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 fa12 	bl	8006e8c <USBD_CtlError>
            err++;
 8006a68:	7afb      	ldrb	r3, [r7, #11]
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	72fb      	strb	r3, [r7, #11]
          break;
 8006a6e:	e007      	b.n	8006a80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006a70:	6839      	ldr	r1, [r7, #0]
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 fa0a 	bl	8006e8c <USBD_CtlError>
          err++;
 8006a78:	7afb      	ldrb	r3, [r7, #11]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006a7e:	e038      	b.n	8006af2 <USBD_GetDescriptor+0x286>
 8006a80:	e037      	b.n	8006af2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	7c1b      	ldrb	r3, [r3, #16]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d109      	bne.n	8006a9e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a92:	f107 0208 	add.w	r2, r7, #8
 8006a96:	4610      	mov	r0, r2
 8006a98:	4798      	blx	r3
 8006a9a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a9c:	e029      	b.n	8006af2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006a9e:	6839      	ldr	r1, [r7, #0]
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 f9f3 	bl	8006e8c <USBD_CtlError>
        err++;
 8006aa6:	7afb      	ldrb	r3, [r7, #11]
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	72fb      	strb	r3, [r7, #11]
      break;
 8006aac:	e021      	b.n	8006af2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	7c1b      	ldrb	r3, [r3, #16]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d10d      	bne.n	8006ad2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006abe:	f107 0208 	add.w	r2, r7, #8
 8006ac2:	4610      	mov	r0, r2
 8006ac4:	4798      	blx	r3
 8006ac6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	3301      	adds	r3, #1
 8006acc:	2207      	movs	r2, #7
 8006ace:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ad0:	e00f      	b.n	8006af2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006ad2:	6839      	ldr	r1, [r7, #0]
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 f9d9 	bl	8006e8c <USBD_CtlError>
        err++;
 8006ada:	7afb      	ldrb	r3, [r7, #11]
 8006adc:	3301      	adds	r3, #1
 8006ade:	72fb      	strb	r3, [r7, #11]
      break;
 8006ae0:	e007      	b.n	8006af2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006ae2:	6839      	ldr	r1, [r7, #0]
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 f9d1 	bl	8006e8c <USBD_CtlError>
      err++;
 8006aea:	7afb      	ldrb	r3, [r7, #11]
 8006aec:	3301      	adds	r3, #1
 8006aee:	72fb      	strb	r3, [r7, #11]
      break;
 8006af0:	bf00      	nop
  }

  if (err != 0U)
 8006af2:	7afb      	ldrb	r3, [r7, #11]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d11c      	bne.n	8006b32 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006af8:	893b      	ldrh	r3, [r7, #8]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d011      	beq.n	8006b22 <USBD_GetDescriptor+0x2b6>
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	88db      	ldrh	r3, [r3, #6]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00d      	beq.n	8006b22 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	88da      	ldrh	r2, [r3, #6]
 8006b0a:	893b      	ldrh	r3, [r7, #8]
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	bf28      	it	cs
 8006b10:	4613      	movcs	r3, r2
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006b16:	893b      	ldrh	r3, [r7, #8]
 8006b18:	461a      	mov	r2, r3
 8006b1a:	68f9      	ldr	r1, [r7, #12]
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 fa1f 	bl	8006f60 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	88db      	ldrh	r3, [r3, #6]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d104      	bne.n	8006b34 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 fa76 	bl	800701c <USBD_CtlSendStatus>
 8006b30:	e000      	b.n	8006b34 <USBD_GetDescriptor+0x2c8>
    return;
 8006b32:	bf00      	nop
    }
  }
}
 8006b34:	3710      	adds	r7, #16
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop

08006b3c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	889b      	ldrh	r3, [r3, #4]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d130      	bne.n	8006bb0 <USBD_SetAddress+0x74>
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	88db      	ldrh	r3, [r3, #6]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d12c      	bne.n	8006bb0 <USBD_SetAddress+0x74>
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	885b      	ldrh	r3, [r3, #2]
 8006b5a:	2b7f      	cmp	r3, #127	; 0x7f
 8006b5c:	d828      	bhi.n	8006bb0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	885b      	ldrh	r3, [r3, #2]
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b68:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b70:	2b03      	cmp	r3, #3
 8006b72:	d104      	bne.n	8006b7e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006b74:	6839      	ldr	r1, [r7, #0]
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 f988 	bl	8006e8c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b7c:	e01c      	b.n	8006bb8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	7bfa      	ldrb	r2, [r7, #15]
 8006b82:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006b86:	7bfb      	ldrb	r3, [r7, #15]
 8006b88:	4619      	mov	r1, r3
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 fe90 	bl	80078b0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 fa43 	bl	800701c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006b96:	7bfb      	ldrb	r3, [r7, #15]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d004      	beq.n	8006ba6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2202      	movs	r2, #2
 8006ba0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ba4:	e008      	b.n	8006bb8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bae:	e003      	b.n	8006bb8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006bb0:	6839      	ldr	r1, [r7, #0]
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 f96a 	bl	8006e8c <USBD_CtlError>
  }
}
 8006bb8:	bf00      	nop
 8006bba:	3710      	adds	r7, #16
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b082      	sub	sp, #8
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	885b      	ldrh	r3, [r3, #2]
 8006bce:	b2da      	uxtb	r2, r3
 8006bd0:	4b41      	ldr	r3, [pc, #260]	; (8006cd8 <USBD_SetConfig+0x118>)
 8006bd2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006bd4:	4b40      	ldr	r3, [pc, #256]	; (8006cd8 <USBD_SetConfig+0x118>)
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d904      	bls.n	8006be6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006bdc:	6839      	ldr	r1, [r7, #0]
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 f954 	bl	8006e8c <USBD_CtlError>
 8006be4:	e075      	b.n	8006cd2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	d002      	beq.n	8006bf6 <USBD_SetConfig+0x36>
 8006bf0:	2b03      	cmp	r3, #3
 8006bf2:	d023      	beq.n	8006c3c <USBD_SetConfig+0x7c>
 8006bf4:	e062      	b.n	8006cbc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006bf6:	4b38      	ldr	r3, [pc, #224]	; (8006cd8 <USBD_SetConfig+0x118>)
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d01a      	beq.n	8006c34 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006bfe:	4b36      	ldr	r3, [pc, #216]	; (8006cd8 <USBD_SetConfig+0x118>)
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	461a      	mov	r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2203      	movs	r2, #3
 8006c0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006c10:	4b31      	ldr	r3, [pc, #196]	; (8006cd8 <USBD_SetConfig+0x118>)
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	4619      	mov	r1, r3
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f7ff f9f4 	bl	8006004 <USBD_SetClassConfig>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d104      	bne.n	8006c2c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006c22:	6839      	ldr	r1, [r7, #0]
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 f931 	bl	8006e8c <USBD_CtlError>
            return;
 8006c2a:	e052      	b.n	8006cd2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 f9f5 	bl	800701c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006c32:	e04e      	b.n	8006cd2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 f9f1 	bl	800701c <USBD_CtlSendStatus>
        break;
 8006c3a:	e04a      	b.n	8006cd2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006c3c:	4b26      	ldr	r3, [pc, #152]	; (8006cd8 <USBD_SetConfig+0x118>)
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d112      	bne.n	8006c6a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2202      	movs	r2, #2
 8006c48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006c4c:	4b22      	ldr	r3, [pc, #136]	; (8006cd8 <USBD_SetConfig+0x118>)
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	461a      	mov	r2, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006c56:	4b20      	ldr	r3, [pc, #128]	; (8006cd8 <USBD_SetConfig+0x118>)
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f7ff f9f0 	bl	8006042 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 f9da 	bl	800701c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006c68:	e033      	b.n	8006cd2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006c6a:	4b1b      	ldr	r3, [pc, #108]	; (8006cd8 <USBD_SetConfig+0x118>)
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	461a      	mov	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d01d      	beq.n	8006cb4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	4619      	mov	r1, r3
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f7ff f9de 	bl	8006042 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006c86:	4b14      	ldr	r3, [pc, #80]	; (8006cd8 <USBD_SetConfig+0x118>)
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006c90:	4b11      	ldr	r3, [pc, #68]	; (8006cd8 <USBD_SetConfig+0x118>)
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	4619      	mov	r1, r3
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f7ff f9b4 	bl	8006004 <USBD_SetClassConfig>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	d104      	bne.n	8006cac <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006ca2:	6839      	ldr	r1, [r7, #0]
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 f8f1 	bl	8006e8c <USBD_CtlError>
            return;
 8006caa:	e012      	b.n	8006cd2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 f9b5 	bl	800701c <USBD_CtlSendStatus>
        break;
 8006cb2:	e00e      	b.n	8006cd2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 f9b1 	bl	800701c <USBD_CtlSendStatus>
        break;
 8006cba:	e00a      	b.n	8006cd2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006cbc:	6839      	ldr	r1, [r7, #0]
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 f8e4 	bl	8006e8c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006cc4:	4b04      	ldr	r3, [pc, #16]	; (8006cd8 <USBD_SetConfig+0x118>)
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	4619      	mov	r1, r3
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f7ff f9b9 	bl	8006042 <USBD_ClrClassConfig>
        break;
 8006cd0:	bf00      	nop
    }
  }
}
 8006cd2:	3708      	adds	r7, #8
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	2000020c 	.word	0x2000020c

08006cdc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	88db      	ldrh	r3, [r3, #6]
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d004      	beq.n	8006cf8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006cee:	6839      	ldr	r1, [r7, #0]
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 f8cb 	bl	8006e8c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006cf6:	e021      	b.n	8006d3c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	db17      	blt.n	8006d32 <USBD_GetConfig+0x56>
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	dd02      	ble.n	8006d0c <USBD_GetConfig+0x30>
 8006d06:	2b03      	cmp	r3, #3
 8006d08:	d00b      	beq.n	8006d22 <USBD_GetConfig+0x46>
 8006d0a:	e012      	b.n	8006d32 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	3308      	adds	r3, #8
 8006d16:	2201      	movs	r2, #1
 8006d18:	4619      	mov	r1, r3
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 f920 	bl	8006f60 <USBD_CtlSendData>
        break;
 8006d20:	e00c      	b.n	8006d3c <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	3304      	adds	r3, #4
 8006d26:	2201      	movs	r2, #1
 8006d28:	4619      	mov	r1, r3
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 f918 	bl	8006f60 <USBD_CtlSendData>
        break;
 8006d30:	e004      	b.n	8006d3c <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8006d32:	6839      	ldr	r1, [r7, #0]
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 f8a9 	bl	8006e8c <USBD_CtlError>
        break;
 8006d3a:	bf00      	nop
}
 8006d3c:	bf00      	nop
 8006d3e:	3708      	adds	r7, #8
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d54:	3b01      	subs	r3, #1
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	d81e      	bhi.n	8006d98 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	88db      	ldrh	r3, [r3, #6]
 8006d5e:	2b02      	cmp	r3, #2
 8006d60:	d004      	beq.n	8006d6c <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006d62:	6839      	ldr	r1, [r7, #0]
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 f891 	bl	8006e8c <USBD_CtlError>
        break;
 8006d6a:	e01a      	b.n	8006da2 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	60da      	str	r2, [r3, #12]
#endif

      if (pdev->dev_remote_wakeup)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d005      	beq.n	8006d88 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	f043 0202 	orr.w	r2, r3, #2
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	330c      	adds	r3, #12
 8006d8c:	2202      	movs	r2, #2
 8006d8e:	4619      	mov	r1, r3
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 f8e5 	bl	8006f60 <USBD_CtlSendData>
      break;
 8006d96:	e004      	b.n	8006da2 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006d98:	6839      	ldr	r1, [r7, #0]
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 f876 	bl	8006e8c <USBD_CtlError>
      break;
 8006da0:	bf00      	nop
  }
}
 8006da2:	bf00      	nop
 8006da4:	3708      	adds	r7, #8
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b082      	sub	sp, #8
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
 8006db2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	885b      	ldrh	r3, [r3, #2]
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d106      	bne.n	8006dca <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 f929 	bl	800701c <USBD_CtlSendStatus>
  }
}
 8006dca:	bf00      	nop
 8006dcc:	3708      	adds	r7, #8
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b082      	sub	sp, #8
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
 8006dda:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006de2:	3b01      	subs	r3, #1
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d80b      	bhi.n	8006e00 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	885b      	ldrh	r3, [r3, #2]
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d10c      	bne.n	8006e0a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 f90f 	bl	800701c <USBD_CtlSendStatus>
      }
      break;
 8006dfe:	e004      	b.n	8006e0a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006e00:	6839      	ldr	r1, [r7, #0]
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 f842 	bl	8006e8c <USBD_CtlError>
      break;
 8006e08:	e000      	b.n	8006e0c <USBD_ClrFeature+0x3a>
      break;
 8006e0a:	bf00      	nop
  }
}
 8006e0c:	bf00      	nop
 8006e0e:	3708      	adds	r7, #8
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	781a      	ldrb	r2, [r3, #0]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	785a      	ldrb	r2, [r3, #1]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	3302      	adds	r3, #2
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	b29a      	uxth	r2, r3
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	3303      	adds	r3, #3
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	021b      	lsls	r3, r3, #8
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	4413      	add	r3, r2
 8006e44:	b29a      	uxth	r2, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	3304      	adds	r3, #4
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	b29a      	uxth	r2, r3
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	3305      	adds	r3, #5
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	021b      	lsls	r3, r3, #8
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	4413      	add	r3, r2
 8006e60:	b29a      	uxth	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	3306      	adds	r3, #6
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	b29a      	uxth	r2, r3
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	3307      	adds	r3, #7
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	021b      	lsls	r3, r3, #8
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	4413      	add	r3, r2
 8006e7c:	b29a      	uxth	r2, r3
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	80da      	strh	r2, [r3, #6]

}
 8006e82:	bf00      	nop
 8006e84:	370c      	adds	r7, #12
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bc80      	pop	{r7}
 8006e8a:	4770      	bx	lr

08006e8c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006e96:	2180      	movs	r1, #128	; 0x80
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 fc9f 	bl	80077dc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006e9e:	2100      	movs	r1, #0
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 fc9b 	bl	80077dc <USBD_LL_StallEP>
}
 8006ea6:	bf00      	nop
 8006ea8:	3708      	adds	r7, #8
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}

08006eae <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b086      	sub	sp, #24
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	60f8      	str	r0, [r7, #12]
 8006eb6:	60b9      	str	r1, [r7, #8]
 8006eb8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d032      	beq.n	8006f2a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006ec4:	68f8      	ldr	r0, [r7, #12]
 8006ec6:	f000 f834 	bl	8006f32 <USBD_GetLen>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	3301      	adds	r3, #1
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	005b      	lsls	r3, r3, #1
 8006ed2:	b29a      	uxth	r2, r3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006ed8:	7dfb      	ldrb	r3, [r7, #23]
 8006eda:	1c5a      	adds	r2, r3, #1
 8006edc:	75fa      	strb	r2, [r7, #23]
 8006ede:	461a      	mov	r2, r3
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	7812      	ldrb	r2, [r2, #0]
 8006ee8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006eea:	7dfb      	ldrb	r3, [r7, #23]
 8006eec:	1c5a      	adds	r2, r3, #1
 8006eee:	75fa      	strb	r2, [r7, #23]
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	2203      	movs	r2, #3
 8006ef8:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006efa:	e012      	b.n	8006f22 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	1c5a      	adds	r2, r3, #1
 8006f00:	60fa      	str	r2, [r7, #12]
 8006f02:	7dfa      	ldrb	r2, [r7, #23]
 8006f04:	1c51      	adds	r1, r2, #1
 8006f06:	75f9      	strb	r1, [r7, #23]
 8006f08:	4611      	mov	r1, r2
 8006f0a:	68ba      	ldr	r2, [r7, #8]
 8006f0c:	440a      	add	r2, r1
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006f12:	7dfb      	ldrb	r3, [r7, #23]
 8006f14:	1c5a      	adds	r2, r3, #1
 8006f16:	75fa      	strb	r2, [r7, #23]
 8006f18:	461a      	mov	r2, r3
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	2200      	movs	r2, #0
 8006f20:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d1e8      	bne.n	8006efc <USBD_GetString+0x4e>
    }
  }
}
 8006f2a:	bf00      	nop
 8006f2c:	3718      	adds	r7, #24
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006f32:	b480      	push	{r7}
 8006f34:	b085      	sub	sp, #20
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006f3e:	e005      	b.n	8006f4c <USBD_GetLen+0x1a>
  {
    len++;
 8006f40:	7bfb      	ldrb	r3, [r7, #15]
 8006f42:	3301      	adds	r3, #1
 8006f44:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	3301      	adds	r3, #1
 8006f4a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d1f5      	bne.n	8006f40 <USBD_GetLen+0xe>
  }

  return len;
 8006f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3714      	adds	r7, #20
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bc80      	pop	{r7}
 8006f5e:	4770      	bx	lr

08006f60 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2202      	movs	r2, #2
 8006f72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006f76:	88fa      	ldrh	r2, [r7, #6]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006f7c:	88fa      	ldrh	r2, [r7, #6]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f82:	88fb      	ldrh	r3, [r7, #6]
 8006f84:	68ba      	ldr	r2, [r7, #8]
 8006f86:	2100      	movs	r1, #0
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f000 fcb0 	bl	80078ee <USBD_LL_Transmit>

  return USBD_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3710      	adds	r7, #16
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	4613      	mov	r3, r2
 8006fa4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006fa6:	88fb      	ldrh	r3, [r7, #6]
 8006fa8:	68ba      	ldr	r2, [r7, #8]
 8006faa:	2100      	movs	r1, #0
 8006fac:	68f8      	ldr	r0, [r7, #12]
 8006fae:	f000 fc9e 	bl	80078ee <USBD_LL_Transmit>

  return USBD_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3710      	adds	r7, #16
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2203      	movs	r2, #3
 8006fce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006fd2:	88fa      	ldrh	r2, [r7, #6]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006fda:	88fa      	ldrh	r2, [r7, #6]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006fe2:	88fb      	ldrh	r3, [r7, #6]
 8006fe4:	68ba      	ldr	r2, [r7, #8]
 8006fe6:	2100      	movs	r1, #0
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f000 fca3 	bl	8007934 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3710      	adds	r7, #16
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	4613      	mov	r3, r2
 8007004:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007006:	88fb      	ldrh	r3, [r7, #6]
 8007008:	68ba      	ldr	r2, [r7, #8]
 800700a:	2100      	movs	r1, #0
 800700c:	68f8      	ldr	r0, [r7, #12]
 800700e:	f000 fc91 	bl	8007934 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007012:	2300      	movs	r3, #0
}
 8007014:	4618      	mov	r0, r3
 8007016:	3710      	adds	r7, #16
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2204      	movs	r2, #4
 8007028:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800702c:	2300      	movs	r3, #0
 800702e:	2200      	movs	r2, #0
 8007030:	2100      	movs	r1, #0
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 fc5b 	bl	80078ee <USBD_LL_Transmit>

  return USBD_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3708      	adds	r7, #8
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}

08007042 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007042:	b580      	push	{r7, lr}
 8007044:	b082      	sub	sp, #8
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2205      	movs	r2, #5
 800704e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007052:	2300      	movs	r3, #0
 8007054:	2200      	movs	r2, #0
 8007056:	2100      	movs	r1, #0
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 fc6b 	bl	8007934 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800705e:	2300      	movs	r3, #0
}
 8007060:	4618      	mov	r0, r3
 8007062:	3708      	adds	r7, #8
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800706c:	2200      	movs	r2, #0
 800706e:	4912      	ldr	r1, [pc, #72]	; (80070b8 <MX_USB_DEVICE_Init+0x50>)
 8007070:	4812      	ldr	r0, [pc, #72]	; (80070bc <MX_USB_DEVICE_Init+0x54>)
 8007072:	f7fe ff53 	bl	8005f1c <USBD_Init>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d001      	beq.n	8007080 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800707c:	f7f9 fad6 	bl	800062c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007080:	490f      	ldr	r1, [pc, #60]	; (80070c0 <MX_USB_DEVICE_Init+0x58>)
 8007082:	480e      	ldr	r0, [pc, #56]	; (80070bc <MX_USB_DEVICE_Init+0x54>)
 8007084:	f7fe ff82 	bl	8005f8c <USBD_RegisterClass>
 8007088:	4603      	mov	r3, r0
 800708a:	2b00      	cmp	r3, #0
 800708c:	d001      	beq.n	8007092 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800708e:	f7f9 facd 	bl	800062c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007092:	490c      	ldr	r1, [pc, #48]	; (80070c4 <MX_USB_DEVICE_Init+0x5c>)
 8007094:	4809      	ldr	r0, [pc, #36]	; (80070bc <MX_USB_DEVICE_Init+0x54>)
 8007096:	f7fe fea5 	bl	8005de4 <USBD_CDC_RegisterInterface>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d001      	beq.n	80070a4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80070a0:	f7f9 fac4 	bl	800062c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80070a4:	4805      	ldr	r0, [pc, #20]	; (80070bc <MX_USB_DEVICE_Init+0x54>)
 80070a6:	f7fe ff97 	bl	8005fd8 <USBD_Start>
 80070aa:	4603      	mov	r3, r0
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d001      	beq.n	80070b4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80070b0:	f7f9 fabc 	bl	800062c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80070b4:	bf00      	nop
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	2000013c 	.word	0x2000013c
 80070bc:	2000079c 	.word	0x2000079c
 80070c0:	20000018 	.word	0x20000018
 80070c4:	2000012c 	.word	0x2000012c

080070c8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80070cc:	2200      	movs	r2, #0
 80070ce:	4905      	ldr	r1, [pc, #20]	; (80070e4 <CDC_Init_FS+0x1c>)
 80070d0:	4805      	ldr	r0, [pc, #20]	; (80070e8 <CDC_Init_FS+0x20>)
 80070d2:	f7fe fe9d 	bl	8005e10 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80070d6:	4905      	ldr	r1, [pc, #20]	; (80070ec <CDC_Init_FS+0x24>)
 80070d8:	4803      	ldr	r0, [pc, #12]	; (80070e8 <CDC_Init_FS+0x20>)
 80070da:	f7fe feb2 	bl	8005e42 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80070de:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	20000e48 	.word	0x20000e48
 80070e8:	2000079c 	.word	0x2000079c
 80070ec:	20000a60 	.word	0x20000a60

080070f0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80070f0:	b480      	push	{r7}
 80070f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80070f4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bc80      	pop	{r7}
 80070fc:	4770      	bx	lr
	...

08007100 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	4603      	mov	r3, r0
 8007108:	6039      	str	r1, [r7, #0]
 800710a:	71fb      	strb	r3, [r7, #7]
 800710c:	4613      	mov	r3, r2
 800710e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007110:	79fb      	ldrb	r3, [r7, #7]
 8007112:	2b23      	cmp	r3, #35	; 0x23
 8007114:	d84a      	bhi.n	80071ac <CDC_Control_FS+0xac>
 8007116:	a201      	add	r2, pc, #4	; (adr r2, 800711c <CDC_Control_FS+0x1c>)
 8007118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800711c:	080071ad 	.word	0x080071ad
 8007120:	080071ad 	.word	0x080071ad
 8007124:	080071ad 	.word	0x080071ad
 8007128:	080071ad 	.word	0x080071ad
 800712c:	080071ad 	.word	0x080071ad
 8007130:	080071ad 	.word	0x080071ad
 8007134:	080071ad 	.word	0x080071ad
 8007138:	080071ad 	.word	0x080071ad
 800713c:	080071ad 	.word	0x080071ad
 8007140:	080071ad 	.word	0x080071ad
 8007144:	080071ad 	.word	0x080071ad
 8007148:	080071ad 	.word	0x080071ad
 800714c:	080071ad 	.word	0x080071ad
 8007150:	080071ad 	.word	0x080071ad
 8007154:	080071ad 	.word	0x080071ad
 8007158:	080071ad 	.word	0x080071ad
 800715c:	080071ad 	.word	0x080071ad
 8007160:	080071ad 	.word	0x080071ad
 8007164:	080071ad 	.word	0x080071ad
 8007168:	080071ad 	.word	0x080071ad
 800716c:	080071ad 	.word	0x080071ad
 8007170:	080071ad 	.word	0x080071ad
 8007174:	080071ad 	.word	0x080071ad
 8007178:	080071ad 	.word	0x080071ad
 800717c:	080071ad 	.word	0x080071ad
 8007180:	080071ad 	.word	0x080071ad
 8007184:	080071ad 	.word	0x080071ad
 8007188:	080071ad 	.word	0x080071ad
 800718c:	080071ad 	.word	0x080071ad
 8007190:	080071ad 	.word	0x080071ad
 8007194:	080071ad 	.word	0x080071ad
 8007198:	080071ad 	.word	0x080071ad
 800719c:	080071ad 	.word	0x080071ad
 80071a0:	080071ad 	.word	0x080071ad
 80071a4:	080071ad 	.word	0x080071ad
 80071a8:	080071ad 	.word	0x080071ad
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80071ac:	bf00      	nop
  }

  return (USBD_OK);
 80071ae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bc80      	pop	{r7}
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop

080071bc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b086      	sub	sp, #24
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80071c6:	6879      	ldr	r1, [r7, #4]
 80071c8:	4827      	ldr	r0, [pc, #156]	; (8007268 <CDC_Receive_FS+0xac>)
 80071ca:	f7fe fe3a 	bl	8005e42 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80071ce:	4826      	ldr	r0, [pc, #152]	; (8007268 <CDC_Receive_FS+0xac>)
 80071d0:	f7fe fe79 	bl	8005ec6 <USBD_CDC_ReceivePacket>
//  NewDataFromUsb = *Len;
  if(*Len == 61)
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2b3d      	cmp	r3, #61	; 0x3d
 80071da:	d13f      	bne.n	800725c <CDC_Receive_FS+0xa0>
  {
	  __HAL_RCC_TIM1_CLK_DISABLE();//stop clocking interrupt timer
 80071dc:	4b23      	ldr	r3, [pc, #140]	; (800726c <CDC_Receive_FS+0xb0>)
 80071de:	699b      	ldr	r3, [r3, #24]
 80071e0:	4a22      	ldr	r2, [pc, #136]	; (800726c <CDC_Receive_FS+0xb0>)
 80071e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071e6:	6193      	str	r3, [r2, #24]
	  // 8 bits buffer to 16 bits buffer transfer
	 for (int i = 0, j = 0; i < 30; ++i, j+= 2)
 80071e8:	2300      	movs	r3, #0
 80071ea:	617b      	str	r3, [r7, #20]
 80071ec:	2300      	movs	r3, #0
 80071ee:	613b      	str	r3, [r7, #16]
 80071f0:	e021      	b.n	8007236 <CDC_Receive_FS+0x7a>
	 {
		 aOutputWave[i+(UserRxBufferFS[60]*30)] =
				 (UserRxBufferFS[j] << 8) | UserRxBufferFS[j + 1];
 80071f2:	4a1f      	ldr	r2, [pc, #124]	; (8007270 <CDC_Receive_FS+0xb4>)
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	4413      	add	r3, r2
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	021b      	lsls	r3, r3, #8
 80071fc:	b21a      	sxth	r2, r3
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	3301      	adds	r3, #1
 8007202:	491b      	ldr	r1, [pc, #108]	; (8007270 <CDC_Receive_FS+0xb4>)
 8007204:	5ccb      	ldrb	r3, [r1, r3]
 8007206:	b21b      	sxth	r3, r3
 8007208:	4313      	orrs	r3, r2
 800720a:	b219      	sxth	r1, r3
		 aOutputWave[i+(UserRxBufferFS[60]*30)] =
 800720c:	4b18      	ldr	r3, [pc, #96]	; (8007270 <CDC_Receive_FS+0xb4>)
 800720e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007212:	461a      	mov	r2, r3
 8007214:	4613      	mov	r3, r2
 8007216:	011b      	lsls	r3, r3, #4
 8007218:	1a9b      	subs	r3, r3, r2
 800721a:	005b      	lsls	r3, r3, #1
 800721c:	461a      	mov	r2, r3
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	4413      	add	r3, r2
				 (UserRxBufferFS[j] << 8) | UserRxBufferFS[j + 1];
 8007222:	b289      	uxth	r1, r1
		 aOutputWave[i+(UserRxBufferFS[60]*30)] =
 8007224:	4a13      	ldr	r2, [pc, #76]	; (8007274 <CDC_Receive_FS+0xb8>)
 8007226:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	 for (int i = 0, j = 0; i < 30; ++i, j+= 2)
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	3301      	adds	r3, #1
 800722e:	617b      	str	r3, [r7, #20]
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	3302      	adds	r3, #2
 8007234:	613b      	str	r3, [r7, #16]
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	2b1d      	cmp	r3, #29
 800723a:	ddda      	ble.n	80071f2 <CDC_Receive_FS+0x36>
	 }
	  CDC_Transmit_FS(buffer, sizeof(buffer));
 800723c:	2110      	movs	r1, #16
 800723e:	480e      	ldr	r0, [pc, #56]	; (8007278 <CDC_Receive_FS+0xbc>)
 8007240:	f000 f81c 	bl	800727c <CDC_Transmit_FS>
//	  NewDataFromUsb = 0;
	  __HAL_RCC_TIM1_CLK_ENABLE();//start clocking interrupt timer
 8007244:	4b09      	ldr	r3, [pc, #36]	; (800726c <CDC_Receive_FS+0xb0>)
 8007246:	699b      	ldr	r3, [r3, #24]
 8007248:	4a08      	ldr	r2, [pc, #32]	; (800726c <CDC_Receive_FS+0xb0>)
 800724a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800724e:	6193      	str	r3, [r2, #24]
 8007250:	4b06      	ldr	r3, [pc, #24]	; (800726c <CDC_Receive_FS+0xb0>)
 8007252:	699b      	ldr	r3, [r3, #24]
 8007254:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007258:	60fb      	str	r3, [r7, #12]
 800725a:	68fb      	ldr	r3, [r7, #12]
  }
  return (USBD_OK);
 800725c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800725e:	4618      	mov	r0, r3
 8007260:	3718      	adds	r7, #24
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	2000079c 	.word	0x2000079c
 800726c:	40021000 	.word	0x40021000
 8007270:	20000a60 	.word	0x20000a60
 8007274:	20000210 	.word	0x20000210
 8007278:	2000011c 	.word	0x2000011c

0800727c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	460b      	mov	r3, r1
 8007286:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007288:	2300      	movs	r3, #0
 800728a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800728c:	4b0d      	ldr	r3, [pc, #52]	; (80072c4 <CDC_Transmit_FS+0x48>)
 800728e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007292:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800729a:	2b00      	cmp	r3, #0
 800729c:	d001      	beq.n	80072a2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800729e:	2301      	movs	r3, #1
 80072a0:	e00b      	b.n	80072ba <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80072a2:	887b      	ldrh	r3, [r7, #2]
 80072a4:	461a      	mov	r2, r3
 80072a6:	6879      	ldr	r1, [r7, #4]
 80072a8:	4806      	ldr	r0, [pc, #24]	; (80072c4 <CDC_Transmit_FS+0x48>)
 80072aa:	f7fe fdb1 	bl	8005e10 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80072ae:	4805      	ldr	r0, [pc, #20]	; (80072c4 <CDC_Transmit_FS+0x48>)
 80072b0:	f7fe fdda 	bl	8005e68 <USBD_CDC_TransmitPacket>
 80072b4:	4603      	mov	r3, r0
 80072b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80072b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3710      	adds	r7, #16
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	2000079c 	.word	0x2000079c

080072c8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	4603      	mov	r3, r0
 80072d0:	6039      	str	r1, [r7, #0]
 80072d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	2212      	movs	r2, #18
 80072d8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80072da:	4b03      	ldr	r3, [pc, #12]	; (80072e8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80072dc:	4618      	mov	r0, r3
 80072de:	370c      	adds	r7, #12
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bc80      	pop	{r7}
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop
 80072e8:	20000158 	.word	0x20000158

080072ec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	4603      	mov	r3, r0
 80072f4:	6039      	str	r1, [r7, #0]
 80072f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	2204      	movs	r2, #4
 80072fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80072fe:	4b03      	ldr	r3, [pc, #12]	; (800730c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007300:	4618      	mov	r0, r3
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	bc80      	pop	{r7}
 8007308:	4770      	bx	lr
 800730a:	bf00      	nop
 800730c:	2000016c 	.word	0x2000016c

08007310 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	4603      	mov	r3, r0
 8007318:	6039      	str	r1, [r7, #0]
 800731a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800731c:	79fb      	ldrb	r3, [r7, #7]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d105      	bne.n	800732e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007322:	683a      	ldr	r2, [r7, #0]
 8007324:	4907      	ldr	r1, [pc, #28]	; (8007344 <USBD_FS_ProductStrDescriptor+0x34>)
 8007326:	4808      	ldr	r0, [pc, #32]	; (8007348 <USBD_FS_ProductStrDescriptor+0x38>)
 8007328:	f7ff fdc1 	bl	8006eae <USBD_GetString>
 800732c:	e004      	b.n	8007338 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800732e:	683a      	ldr	r2, [r7, #0]
 8007330:	4904      	ldr	r1, [pc, #16]	; (8007344 <USBD_FS_ProductStrDescriptor+0x34>)
 8007332:	4805      	ldr	r0, [pc, #20]	; (8007348 <USBD_FS_ProductStrDescriptor+0x38>)
 8007334:	f7ff fdbb 	bl	8006eae <USBD_GetString>
  }
  return USBD_StrDesc;
 8007338:	4b02      	ldr	r3, [pc, #8]	; (8007344 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800733a:	4618      	mov	r0, r3
 800733c:	3708      	adds	r7, #8
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	20001230 	.word	0x20001230
 8007348:	080089e0 	.word	0x080089e0

0800734c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
 8007352:	4603      	mov	r3, r0
 8007354:	6039      	str	r1, [r7, #0]
 8007356:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007358:	683a      	ldr	r2, [r7, #0]
 800735a:	4904      	ldr	r1, [pc, #16]	; (800736c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800735c:	4804      	ldr	r0, [pc, #16]	; (8007370 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800735e:	f7ff fda6 	bl	8006eae <USBD_GetString>
  return USBD_StrDesc;
 8007362:	4b02      	ldr	r3, [pc, #8]	; (800736c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007364:	4618      	mov	r0, r3
 8007366:	3708      	adds	r7, #8
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}
 800736c:	20001230 	.word	0x20001230
 8007370:	080089f8 	.word	0x080089f8

08007374 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b082      	sub	sp, #8
 8007378:	af00      	add	r7, sp, #0
 800737a:	4603      	mov	r3, r0
 800737c:	6039      	str	r1, [r7, #0]
 800737e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	221a      	movs	r2, #26
 8007384:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007386:	f000 f843 	bl	8007410 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800738a:	4b02      	ldr	r3, [pc, #8]	; (8007394 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800738c:	4618      	mov	r0, r3
 800738e:	3708      	adds	r7, #8
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}
 8007394:	20000170 	.word	0x20000170

08007398 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
 800739e:	4603      	mov	r3, r0
 80073a0:	6039      	str	r1, [r7, #0]
 80073a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80073a4:	79fb      	ldrb	r3, [r7, #7]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d105      	bne.n	80073b6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80073aa:	683a      	ldr	r2, [r7, #0]
 80073ac:	4907      	ldr	r1, [pc, #28]	; (80073cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80073ae:	4808      	ldr	r0, [pc, #32]	; (80073d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80073b0:	f7ff fd7d 	bl	8006eae <USBD_GetString>
 80073b4:	e004      	b.n	80073c0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80073b6:	683a      	ldr	r2, [r7, #0]
 80073b8:	4904      	ldr	r1, [pc, #16]	; (80073cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80073ba:	4805      	ldr	r0, [pc, #20]	; (80073d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80073bc:	f7ff fd77 	bl	8006eae <USBD_GetString>
  }
  return USBD_StrDesc;
 80073c0:	4b02      	ldr	r3, [pc, #8]	; (80073cc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3708      	adds	r7, #8
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	20001230 	.word	0x20001230
 80073d0:	08008a0c 	.word	0x08008a0c

080073d4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	4603      	mov	r3, r0
 80073dc:	6039      	str	r1, [r7, #0]
 80073de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80073e0:	79fb      	ldrb	r3, [r7, #7]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d105      	bne.n	80073f2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80073e6:	683a      	ldr	r2, [r7, #0]
 80073e8:	4907      	ldr	r1, [pc, #28]	; (8007408 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80073ea:	4808      	ldr	r0, [pc, #32]	; (800740c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80073ec:	f7ff fd5f 	bl	8006eae <USBD_GetString>
 80073f0:	e004      	b.n	80073fc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80073f2:	683a      	ldr	r2, [r7, #0]
 80073f4:	4904      	ldr	r1, [pc, #16]	; (8007408 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80073f6:	4805      	ldr	r0, [pc, #20]	; (800740c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80073f8:	f7ff fd59 	bl	8006eae <USBD_GetString>
  }
  return USBD_StrDesc;
 80073fc:	4b02      	ldr	r3, [pc, #8]	; (8007408 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3708      	adds	r7, #8
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	20001230 	.word	0x20001230
 800740c:	08008a18 	.word	0x08008a18

08007410 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007416:	4b0f      	ldr	r3, [pc, #60]	; (8007454 <Get_SerialNum+0x44>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800741c:	4b0e      	ldr	r3, [pc, #56]	; (8007458 <Get_SerialNum+0x48>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007422:	4b0e      	ldr	r3, [pc, #56]	; (800745c <Get_SerialNum+0x4c>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4413      	add	r3, r2
 800742e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d009      	beq.n	800744a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007436:	2208      	movs	r2, #8
 8007438:	4909      	ldr	r1, [pc, #36]	; (8007460 <Get_SerialNum+0x50>)
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	f000 f814 	bl	8007468 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007440:	2204      	movs	r2, #4
 8007442:	4908      	ldr	r1, [pc, #32]	; (8007464 <Get_SerialNum+0x54>)
 8007444:	68b8      	ldr	r0, [r7, #8]
 8007446:	f000 f80f 	bl	8007468 <IntToUnicode>
  }
}
 800744a:	bf00      	nop
 800744c:	3710      	adds	r7, #16
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	1ffff7e8 	.word	0x1ffff7e8
 8007458:	1ffff7ec 	.word	0x1ffff7ec
 800745c:	1ffff7f0 	.word	0x1ffff7f0
 8007460:	20000172 	.word	0x20000172
 8007464:	20000182 	.word	0x20000182

08007468 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007468:	b480      	push	{r7}
 800746a:	b087      	sub	sp, #28
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	4613      	mov	r3, r2
 8007474:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007476:	2300      	movs	r3, #0
 8007478:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800747a:	2300      	movs	r3, #0
 800747c:	75fb      	strb	r3, [r7, #23]
 800747e:	e027      	b.n	80074d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	0f1b      	lsrs	r3, r3, #28
 8007484:	2b09      	cmp	r3, #9
 8007486:	d80b      	bhi.n	80074a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	0f1b      	lsrs	r3, r3, #28
 800748c:	b2da      	uxtb	r2, r3
 800748e:	7dfb      	ldrb	r3, [r7, #23]
 8007490:	005b      	lsls	r3, r3, #1
 8007492:	4619      	mov	r1, r3
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	440b      	add	r3, r1
 8007498:	3230      	adds	r2, #48	; 0x30
 800749a:	b2d2      	uxtb	r2, r2
 800749c:	701a      	strb	r2, [r3, #0]
 800749e:	e00a      	b.n	80074b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	0f1b      	lsrs	r3, r3, #28
 80074a4:	b2da      	uxtb	r2, r3
 80074a6:	7dfb      	ldrb	r3, [r7, #23]
 80074a8:	005b      	lsls	r3, r3, #1
 80074aa:	4619      	mov	r1, r3
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	440b      	add	r3, r1
 80074b0:	3237      	adds	r2, #55	; 0x37
 80074b2:	b2d2      	uxtb	r2, r2
 80074b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	011b      	lsls	r3, r3, #4
 80074ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80074bc:	7dfb      	ldrb	r3, [r7, #23]
 80074be:	005b      	lsls	r3, r3, #1
 80074c0:	3301      	adds	r3, #1
 80074c2:	68ba      	ldr	r2, [r7, #8]
 80074c4:	4413      	add	r3, r2
 80074c6:	2200      	movs	r2, #0
 80074c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80074ca:	7dfb      	ldrb	r3, [r7, #23]
 80074cc:	3301      	adds	r3, #1
 80074ce:	75fb      	strb	r3, [r7, #23]
 80074d0:	7dfa      	ldrb	r2, [r7, #23]
 80074d2:	79fb      	ldrb	r3, [r7, #7]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d3d3      	bcc.n	8007480 <IntToUnicode+0x18>
  }
}
 80074d8:	bf00      	nop
 80074da:	371c      	adds	r7, #28
 80074dc:	46bd      	mov	sp, r7
 80074de:	bc80      	pop	{r7}
 80074e0:	4770      	bx	lr
	...

080074e4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a0d      	ldr	r2, [pc, #52]	; (8007528 <HAL_PCD_MspInit+0x44>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d113      	bne.n	800751e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80074f6:	4b0d      	ldr	r3, [pc, #52]	; (800752c <HAL_PCD_MspInit+0x48>)
 80074f8:	69db      	ldr	r3, [r3, #28]
 80074fa:	4a0c      	ldr	r2, [pc, #48]	; (800752c <HAL_PCD_MspInit+0x48>)
 80074fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007500:	61d3      	str	r3, [r2, #28]
 8007502:	4b0a      	ldr	r3, [pc, #40]	; (800752c <HAL_PCD_MspInit+0x48>)
 8007504:	69db      	ldr	r3, [r3, #28]
 8007506:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800750a:	60fb      	str	r3, [r7, #12]
 800750c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800750e:	2200      	movs	r2, #0
 8007510:	2100      	movs	r1, #0
 8007512:	2014      	movs	r0, #20
 8007514:	f7f9 fae1 	bl	8000ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007518:	2014      	movs	r0, #20
 800751a:	f7f9 fafa 	bl	8000b12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800751e:	bf00      	nop
 8007520:	3710      	adds	r7, #16
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	40005c00 	.word	0x40005c00
 800752c:	40021000 	.word	0x40021000

08007530 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007544:	4619      	mov	r1, r3
 8007546:	4610      	mov	r0, r2
 8007548:	f7fe fd8e 	bl	8006068 <USBD_LL_SetupStage>
}
 800754c:	bf00      	nop
 800754e:	3708      	adds	r7, #8
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	460b      	mov	r3, r1
 800755e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007566:	78fa      	ldrb	r2, [r7, #3]
 8007568:	6879      	ldr	r1, [r7, #4]
 800756a:	4613      	mov	r3, r2
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	4413      	add	r3, r2
 8007570:	00db      	lsls	r3, r3, #3
 8007572:	440b      	add	r3, r1
 8007574:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	78fb      	ldrb	r3, [r7, #3]
 800757c:	4619      	mov	r1, r3
 800757e:	f7fe fdbe 	bl	80060fe <USBD_LL_DataOutStage>
}
 8007582:	bf00      	nop
 8007584:	3708      	adds	r7, #8
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}

0800758a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800758a:	b580      	push	{r7, lr}
 800758c:	b082      	sub	sp, #8
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
 8007592:	460b      	mov	r3, r1
 8007594:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800759c:	78fa      	ldrb	r2, [r7, #3]
 800759e:	6879      	ldr	r1, [r7, #4]
 80075a0:	4613      	mov	r3, r2
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	4413      	add	r3, r2
 80075a6:	00db      	lsls	r3, r3, #3
 80075a8:	440b      	add	r3, r1
 80075aa:	333c      	adds	r3, #60	; 0x3c
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	78fb      	ldrb	r3, [r7, #3]
 80075b0:	4619      	mov	r1, r3
 80075b2:	f7fe fe15 	bl	80061e0 <USBD_LL_DataInStage>
}
 80075b6:	bf00      	nop
 80075b8:	3708      	adds	r7, #8
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}

080075be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075be:	b580      	push	{r7, lr}
 80075c0:	b082      	sub	sp, #8
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7fe ff25 	bl	800641c <USBD_LL_SOF>
}
 80075d2:	bf00      	nop
 80075d4:	3708      	adds	r7, #8
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b084      	sub	sp, #16
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80075e2:	2301      	movs	r3, #1
 80075e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	d001      	beq.n	80075f2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80075ee:	f7f9 f81d 	bl	800062c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80075f8:	7bfa      	ldrb	r2, [r7, #15]
 80075fa:	4611      	mov	r1, r2
 80075fc:	4618      	mov	r0, r3
 80075fe:	f7fe fed5 	bl	80063ac <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007608:	4618      	mov	r0, r3
 800760a:	f7fe fe8e 	bl	800632a <USBD_LL_Reset>
}
 800760e:	bf00      	nop
 8007610:	3710      	adds	r7, #16
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
	...

08007618 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007626:	4618      	mov	r0, r3
 8007628:	f7fe fecf 	bl	80063ca <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	699b      	ldr	r3, [r3, #24]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d005      	beq.n	8007640 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007634:	4b04      	ldr	r3, [pc, #16]	; (8007648 <HAL_PCD_SuspendCallback+0x30>)
 8007636:	691b      	ldr	r3, [r3, #16]
 8007638:	4a03      	ldr	r2, [pc, #12]	; (8007648 <HAL_PCD_SuspendCallback+0x30>)
 800763a:	f043 0306 	orr.w	r3, r3, #6
 800763e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007640:	bf00      	nop
 8007642:	3708      	adds	r7, #8
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	e000ed00 	.word	0xe000ed00

0800764c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800765a:	4618      	mov	r0, r3
 800765c:	f7fe fec9 	bl	80063f2 <USBD_LL_Resume>
}
 8007660:	bf00      	nop
 8007662:	3708      	adds	r7, #8
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007670:	4a28      	ldr	r2, [pc, #160]	; (8007714 <USBD_LL_Init+0xac>)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4a26      	ldr	r2, [pc, #152]	; (8007714 <USBD_LL_Init+0xac>)
 800767c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007680:	4b24      	ldr	r3, [pc, #144]	; (8007714 <USBD_LL_Init+0xac>)
 8007682:	4a25      	ldr	r2, [pc, #148]	; (8007718 <USBD_LL_Init+0xb0>)
 8007684:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007686:	4b23      	ldr	r3, [pc, #140]	; (8007714 <USBD_LL_Init+0xac>)
 8007688:	2208      	movs	r2, #8
 800768a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800768c:	4b21      	ldr	r3, [pc, #132]	; (8007714 <USBD_LL_Init+0xac>)
 800768e:	2202      	movs	r2, #2
 8007690:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007692:	4b20      	ldr	r3, [pc, #128]	; (8007714 <USBD_LL_Init+0xac>)
 8007694:	2200      	movs	r2, #0
 8007696:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007698:	4b1e      	ldr	r3, [pc, #120]	; (8007714 <USBD_LL_Init+0xac>)
 800769a:	2200      	movs	r2, #0
 800769c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800769e:	4b1d      	ldr	r3, [pc, #116]	; (8007714 <USBD_LL_Init+0xac>)
 80076a0:	2200      	movs	r2, #0
 80076a2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80076a4:	481b      	ldr	r0, [pc, #108]	; (8007714 <USBD_LL_Init+0xac>)
 80076a6:	f7f9 fe33 	bl	8001310 <HAL_PCD_Init>
 80076aa:	4603      	mov	r3, r0
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d001      	beq.n	80076b4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80076b0:	f7f8 ffbc 	bl	800062c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80076ba:	2318      	movs	r3, #24
 80076bc:	2200      	movs	r2, #0
 80076be:	2100      	movs	r1, #0
 80076c0:	f7fb f967 	bl	8002992 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80076ca:	2358      	movs	r3, #88	; 0x58
 80076cc:	2200      	movs	r2, #0
 80076ce:	2180      	movs	r1, #128	; 0x80
 80076d0:	f7fb f95f 	bl	8002992 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80076da:	23c0      	movs	r3, #192	; 0xc0
 80076dc:	2200      	movs	r2, #0
 80076de:	2181      	movs	r1, #129	; 0x81
 80076e0:	f7fb f957 	bl	8002992 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80076ea:	f44f 7388 	mov.w	r3, #272	; 0x110
 80076ee:	2200      	movs	r2, #0
 80076f0:	2101      	movs	r1, #1
 80076f2:	f7fb f94e 	bl	8002992 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80076fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007700:	2200      	movs	r2, #0
 8007702:	2182      	movs	r1, #130	; 0x82
 8007704:	f7fb f945 	bl	8002992 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3708      	adds	r7, #8
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	20001430 	.word	0x20001430
 8007718:	40005c00 	.word	0x40005c00

0800771c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007724:	2300      	movs	r3, #0
 8007726:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007728:	2300      	movs	r3, #0
 800772a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007732:	4618      	mov	r0, r3
 8007734:	f7f9 fef7 	bl	8001526 <HAL_PCD_Start>
 8007738:	4603      	mov	r3, r0
 800773a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800773c:	7bfb      	ldrb	r3, [r7, #15]
 800773e:	4618      	mov	r0, r3
 8007740:	f000 f94e 	bl	80079e0 <USBD_Get_USB_Status>
 8007744:	4603      	mov	r3, r0
 8007746:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007748:	7bbb      	ldrb	r3, [r7, #14]
}
 800774a:	4618      	mov	r0, r3
 800774c:	3710      	adds	r7, #16
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}

08007752 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007752:	b580      	push	{r7, lr}
 8007754:	b084      	sub	sp, #16
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
 800775a:	4608      	mov	r0, r1
 800775c:	4611      	mov	r1, r2
 800775e:	461a      	mov	r2, r3
 8007760:	4603      	mov	r3, r0
 8007762:	70fb      	strb	r3, [r7, #3]
 8007764:	460b      	mov	r3, r1
 8007766:	70bb      	strb	r3, [r7, #2]
 8007768:	4613      	mov	r3, r2
 800776a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800776c:	2300      	movs	r3, #0
 800776e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007770:	2300      	movs	r3, #0
 8007772:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800777a:	78bb      	ldrb	r3, [r7, #2]
 800777c:	883a      	ldrh	r2, [r7, #0]
 800777e:	78f9      	ldrb	r1, [r7, #3]
 8007780:	f7fa f871 	bl	8001866 <HAL_PCD_EP_Open>
 8007784:	4603      	mov	r3, r0
 8007786:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007788:	7bfb      	ldrb	r3, [r7, #15]
 800778a:	4618      	mov	r0, r3
 800778c:	f000 f928 	bl	80079e0 <USBD_Get_USB_Status>
 8007790:	4603      	mov	r3, r0
 8007792:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007794:	7bbb      	ldrb	r3, [r7, #14]
}
 8007796:	4618      	mov	r0, r3
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}

0800779e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b084      	sub	sp, #16
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
 80077a6:	460b      	mov	r3, r1
 80077a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077aa:	2300      	movs	r3, #0
 80077ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077ae:	2300      	movs	r3, #0
 80077b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80077b8:	78fa      	ldrb	r2, [r7, #3]
 80077ba:	4611      	mov	r1, r2
 80077bc:	4618      	mov	r0, r3
 80077be:	f7fa f8b8 	bl	8001932 <HAL_PCD_EP_Close>
 80077c2:	4603      	mov	r3, r0
 80077c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077c6:	7bfb      	ldrb	r3, [r7, #15]
 80077c8:	4618      	mov	r0, r3
 80077ca:	f000 f909 	bl	80079e0 <USBD_Get_USB_Status>
 80077ce:	4603      	mov	r3, r0
 80077d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3710      	adds	r7, #16
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	460b      	mov	r3, r1
 80077e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077e8:	2300      	movs	r3, #0
 80077ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077ec:	2300      	movs	r3, #0
 80077ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80077f6:	78fa      	ldrb	r2, [r7, #3]
 80077f8:	4611      	mov	r1, r2
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7fa f978 	bl	8001af0 <HAL_PCD_EP_SetStall>
 8007800:	4603      	mov	r3, r0
 8007802:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007804:	7bfb      	ldrb	r3, [r7, #15]
 8007806:	4618      	mov	r0, r3
 8007808:	f000 f8ea 	bl	80079e0 <USBD_Get_USB_Status>
 800780c:	4603      	mov	r3, r0
 800780e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007810:	7bbb      	ldrb	r3, [r7, #14]
}
 8007812:	4618      	mov	r0, r3
 8007814:	3710      	adds	r7, #16
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800781a:	b580      	push	{r7, lr}
 800781c:	b084      	sub	sp, #16
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
 8007822:	460b      	mov	r3, r1
 8007824:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007826:	2300      	movs	r3, #0
 8007828:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800782a:	2300      	movs	r3, #0
 800782c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007834:	78fa      	ldrb	r2, [r7, #3]
 8007836:	4611      	mov	r1, r2
 8007838:	4618      	mov	r0, r3
 800783a:	f7fa f9b9 	bl	8001bb0 <HAL_PCD_EP_ClrStall>
 800783e:	4603      	mov	r3, r0
 8007840:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007842:	7bfb      	ldrb	r3, [r7, #15]
 8007844:	4618      	mov	r0, r3
 8007846:	f000 f8cb 	bl	80079e0 <USBD_Get_USB_Status>
 800784a:	4603      	mov	r3, r0
 800784c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800784e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007850:	4618      	mov	r0, r3
 8007852:	3710      	adds	r7, #16
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007858:	b480      	push	{r7}
 800785a:	b085      	sub	sp, #20
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	460b      	mov	r3, r1
 8007862:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800786a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800786c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007870:	2b00      	cmp	r3, #0
 8007872:	da0c      	bge.n	800788e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007874:	78fb      	ldrb	r3, [r7, #3]
 8007876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800787a:	68f9      	ldr	r1, [r7, #12]
 800787c:	1c5a      	adds	r2, r3, #1
 800787e:	4613      	mov	r3, r2
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	4413      	add	r3, r2
 8007884:	00db      	lsls	r3, r3, #3
 8007886:	440b      	add	r3, r1
 8007888:	3302      	adds	r3, #2
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	e00b      	b.n	80078a6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800788e:	78fb      	ldrb	r3, [r7, #3]
 8007890:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007894:	68f9      	ldr	r1, [r7, #12]
 8007896:	4613      	mov	r3, r2
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	4413      	add	r3, r2
 800789c:	00db      	lsls	r3, r3, #3
 800789e:	440b      	add	r3, r1
 80078a0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80078a4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3714      	adds	r7, #20
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bc80      	pop	{r7}
 80078ae:	4770      	bx	lr

080078b0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	460b      	mov	r3, r1
 80078ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078bc:	2300      	movs	r3, #0
 80078be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078c0:	2300      	movs	r3, #0
 80078c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078ca:	78fa      	ldrb	r2, [r7, #3]
 80078cc:	4611      	mov	r1, r2
 80078ce:	4618      	mov	r0, r3
 80078d0:	f7f9 ffa4 	bl	800181c <HAL_PCD_SetAddress>
 80078d4:	4603      	mov	r3, r0
 80078d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078d8:	7bfb      	ldrb	r3, [r7, #15]
 80078da:	4618      	mov	r0, r3
 80078dc:	f000 f880 	bl	80079e0 <USBD_Get_USB_Status>
 80078e0:	4603      	mov	r3, r0
 80078e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3710      	adds	r7, #16
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b086      	sub	sp, #24
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	60f8      	str	r0, [r7, #12]
 80078f6:	607a      	str	r2, [r7, #4]
 80078f8:	461a      	mov	r2, r3
 80078fa:	460b      	mov	r3, r1
 80078fc:	72fb      	strb	r3, [r7, #11]
 80078fe:	4613      	mov	r3, r2
 8007900:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007902:	2300      	movs	r3, #0
 8007904:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007906:	2300      	movs	r3, #0
 8007908:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007910:	893b      	ldrh	r3, [r7, #8]
 8007912:	7af9      	ldrb	r1, [r7, #11]
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	f7fa f8a8 	bl	8001a6a <HAL_PCD_EP_Transmit>
 800791a:	4603      	mov	r3, r0
 800791c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800791e:	7dfb      	ldrb	r3, [r7, #23]
 8007920:	4618      	mov	r0, r3
 8007922:	f000 f85d 	bl	80079e0 <USBD_Get_USB_Status>
 8007926:	4603      	mov	r3, r0
 8007928:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800792a:	7dbb      	ldrb	r3, [r7, #22]
}
 800792c:	4618      	mov	r0, r3
 800792e:	3718      	adds	r7, #24
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b086      	sub	sp, #24
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	607a      	str	r2, [r7, #4]
 800793e:	461a      	mov	r2, r3
 8007940:	460b      	mov	r3, r1
 8007942:	72fb      	strb	r3, [r7, #11]
 8007944:	4613      	mov	r3, r2
 8007946:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007948:	2300      	movs	r3, #0
 800794a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800794c:	2300      	movs	r3, #0
 800794e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007956:	893b      	ldrh	r3, [r7, #8]
 8007958:	7af9      	ldrb	r1, [r7, #11]
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	f7fa f831 	bl	80019c2 <HAL_PCD_EP_Receive>
 8007960:	4603      	mov	r3, r0
 8007962:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007964:	7dfb      	ldrb	r3, [r7, #23]
 8007966:	4618      	mov	r0, r3
 8007968:	f000 f83a 	bl	80079e0 <USBD_Get_USB_Status>
 800796c:	4603      	mov	r3, r0
 800796e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007970:	7dbb      	ldrb	r3, [r7, #22]
}
 8007972:	4618      	mov	r0, r3
 8007974:	3718      	adds	r7, #24
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800797a:	b580      	push	{r7, lr}
 800797c:	b082      	sub	sp, #8
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
 8007982:	460b      	mov	r3, r1
 8007984:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800798c:	78fa      	ldrb	r2, [r7, #3]
 800798e:	4611      	mov	r1, r2
 8007990:	4618      	mov	r0, r3
 8007992:	f7fa f853 	bl	8001a3c <HAL_PCD_EP_GetRxCount>
 8007996:	4603      	mov	r3, r0
}
 8007998:	4618      	mov	r0, r3
 800799a:	3708      	adds	r7, #8
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80079a8:	4b02      	ldr	r3, [pc, #8]	; (80079b4 <USBD_static_malloc+0x14>)
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	370c      	adds	r7, #12
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bc80      	pop	{r7}
 80079b2:	4770      	bx	lr
 80079b4:	200004e0 	.word	0x200004e0

080079b8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]

}
 80079c0:	bf00      	nop
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bc80      	pop	{r7}
 80079c8:	4770      	bx	lr

080079ca <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079ca:	b480      	push	{r7}
 80079cc:	b083      	sub	sp, #12
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
 80079d2:	460b      	mov	r3, r1
 80079d4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80079d6:	bf00      	nop
 80079d8:	370c      	adds	r7, #12
 80079da:	46bd      	mov	sp, r7
 80079dc:	bc80      	pop	{r7}
 80079de:	4770      	bx	lr

080079e0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b085      	sub	sp, #20
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	4603      	mov	r3, r0
 80079e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079ea:	2300      	movs	r3, #0
 80079ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80079ee:	79fb      	ldrb	r3, [r7, #7]
 80079f0:	2b03      	cmp	r3, #3
 80079f2:	d817      	bhi.n	8007a24 <USBD_Get_USB_Status+0x44>
 80079f4:	a201      	add	r2, pc, #4	; (adr r2, 80079fc <USBD_Get_USB_Status+0x1c>)
 80079f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079fa:	bf00      	nop
 80079fc:	08007a0d 	.word	0x08007a0d
 8007a00:	08007a13 	.word	0x08007a13
 8007a04:	08007a19 	.word	0x08007a19
 8007a08:	08007a1f 	.word	0x08007a1f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	73fb      	strb	r3, [r7, #15]
    break;
 8007a10:	e00b      	b.n	8007a2a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007a12:	2302      	movs	r3, #2
 8007a14:	73fb      	strb	r3, [r7, #15]
    break;
 8007a16:	e008      	b.n	8007a2a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	73fb      	strb	r3, [r7, #15]
    break;
 8007a1c:	e005      	b.n	8007a2a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007a1e:	2302      	movs	r3, #2
 8007a20:	73fb      	strb	r3, [r7, #15]
    break;
 8007a22:	e002      	b.n	8007a2a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007a24:	2302      	movs	r3, #2
 8007a26:	73fb      	strb	r3, [r7, #15]
    break;
 8007a28:	bf00      	nop
  }
  return usb_status;
 8007a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3714      	adds	r7, #20
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bc80      	pop	{r7}
 8007a34:	4770      	bx	lr
 8007a36:	bf00      	nop

08007a38 <__libc_init_array>:
 8007a38:	b570      	push	{r4, r5, r6, lr}
 8007a3a:	2500      	movs	r5, #0
 8007a3c:	4e0c      	ldr	r6, [pc, #48]	; (8007a70 <__libc_init_array+0x38>)
 8007a3e:	4c0d      	ldr	r4, [pc, #52]	; (8007a74 <__libc_init_array+0x3c>)
 8007a40:	1ba4      	subs	r4, r4, r6
 8007a42:	10a4      	asrs	r4, r4, #2
 8007a44:	42a5      	cmp	r5, r4
 8007a46:	d109      	bne.n	8007a5c <__libc_init_array+0x24>
 8007a48:	f000 ff98 	bl	800897c <_init>
 8007a4c:	2500      	movs	r5, #0
 8007a4e:	4e0a      	ldr	r6, [pc, #40]	; (8007a78 <__libc_init_array+0x40>)
 8007a50:	4c0a      	ldr	r4, [pc, #40]	; (8007a7c <__libc_init_array+0x44>)
 8007a52:	1ba4      	subs	r4, r4, r6
 8007a54:	10a4      	asrs	r4, r4, #2
 8007a56:	42a5      	cmp	r5, r4
 8007a58:	d105      	bne.n	8007a66 <__libc_init_array+0x2e>
 8007a5a:	bd70      	pop	{r4, r5, r6, pc}
 8007a5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a60:	4798      	blx	r3
 8007a62:	3501      	adds	r5, #1
 8007a64:	e7ee      	b.n	8007a44 <__libc_init_array+0xc>
 8007a66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a6a:	4798      	blx	r3
 8007a6c:	3501      	adds	r5, #1
 8007a6e:	e7f2      	b.n	8007a56 <__libc_init_array+0x1e>
 8007a70:	08008ad0 	.word	0x08008ad0
 8007a74:	08008ad0 	.word	0x08008ad0
 8007a78:	08008ad0 	.word	0x08008ad0
 8007a7c:	08008ad4 	.word	0x08008ad4

08007a80 <memset>:
 8007a80:	4603      	mov	r3, r0
 8007a82:	4402      	add	r2, r0
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d100      	bne.n	8007a8a <memset+0xa>
 8007a88:	4770      	bx	lr
 8007a8a:	f803 1b01 	strb.w	r1, [r3], #1
 8007a8e:	e7f9      	b.n	8007a84 <memset+0x4>

08007a90 <iprintf>:
 8007a90:	b40f      	push	{r0, r1, r2, r3}
 8007a92:	4b0a      	ldr	r3, [pc, #40]	; (8007abc <iprintf+0x2c>)
 8007a94:	b513      	push	{r0, r1, r4, lr}
 8007a96:	681c      	ldr	r4, [r3, #0]
 8007a98:	b124      	cbz	r4, 8007aa4 <iprintf+0x14>
 8007a9a:	69a3      	ldr	r3, [r4, #24]
 8007a9c:	b913      	cbnz	r3, 8007aa4 <iprintf+0x14>
 8007a9e:	4620      	mov	r0, r4
 8007aa0:	f000 f862 	bl	8007b68 <__sinit>
 8007aa4:	ab05      	add	r3, sp, #20
 8007aa6:	9a04      	ldr	r2, [sp, #16]
 8007aa8:	68a1      	ldr	r1, [r4, #8]
 8007aaa:	4620      	mov	r0, r4
 8007aac:	9301      	str	r3, [sp, #4]
 8007aae:	f000 f967 	bl	8007d80 <_vfiprintf_r>
 8007ab2:	b002      	add	sp, #8
 8007ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ab8:	b004      	add	sp, #16
 8007aba:	4770      	bx	lr
 8007abc:	2000018c 	.word	0x2000018c

08007ac0 <putchar>:
 8007ac0:	b538      	push	{r3, r4, r5, lr}
 8007ac2:	4b08      	ldr	r3, [pc, #32]	; (8007ae4 <putchar+0x24>)
 8007ac4:	4605      	mov	r5, r0
 8007ac6:	681c      	ldr	r4, [r3, #0]
 8007ac8:	b124      	cbz	r4, 8007ad4 <putchar+0x14>
 8007aca:	69a3      	ldr	r3, [r4, #24]
 8007acc:	b913      	cbnz	r3, 8007ad4 <putchar+0x14>
 8007ace:	4620      	mov	r0, r4
 8007ad0:	f000 f84a 	bl	8007b68 <__sinit>
 8007ad4:	68a2      	ldr	r2, [r4, #8]
 8007ad6:	4629      	mov	r1, r5
 8007ad8:	4620      	mov	r0, r4
 8007ada:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ade:	f000 bbed 	b.w	80082bc <_putc_r>
 8007ae2:	bf00      	nop
 8007ae4:	2000018c 	.word	0x2000018c

08007ae8 <std>:
 8007ae8:	2300      	movs	r3, #0
 8007aea:	b510      	push	{r4, lr}
 8007aec:	4604      	mov	r4, r0
 8007aee:	e9c0 3300 	strd	r3, r3, [r0]
 8007af2:	6083      	str	r3, [r0, #8]
 8007af4:	8181      	strh	r1, [r0, #12]
 8007af6:	6643      	str	r3, [r0, #100]	; 0x64
 8007af8:	81c2      	strh	r2, [r0, #14]
 8007afa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007afe:	6183      	str	r3, [r0, #24]
 8007b00:	4619      	mov	r1, r3
 8007b02:	2208      	movs	r2, #8
 8007b04:	305c      	adds	r0, #92	; 0x5c
 8007b06:	f7ff ffbb 	bl	8007a80 <memset>
 8007b0a:	4b05      	ldr	r3, [pc, #20]	; (8007b20 <std+0x38>)
 8007b0c:	6224      	str	r4, [r4, #32]
 8007b0e:	6263      	str	r3, [r4, #36]	; 0x24
 8007b10:	4b04      	ldr	r3, [pc, #16]	; (8007b24 <std+0x3c>)
 8007b12:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b14:	4b04      	ldr	r3, [pc, #16]	; (8007b28 <std+0x40>)
 8007b16:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b18:	4b04      	ldr	r3, [pc, #16]	; (8007b2c <std+0x44>)
 8007b1a:	6323      	str	r3, [r4, #48]	; 0x30
 8007b1c:	bd10      	pop	{r4, pc}
 8007b1e:	bf00      	nop
 8007b20:	08008349 	.word	0x08008349
 8007b24:	0800836b 	.word	0x0800836b
 8007b28:	080083a3 	.word	0x080083a3
 8007b2c:	080083c7 	.word	0x080083c7

08007b30 <_cleanup_r>:
 8007b30:	4901      	ldr	r1, [pc, #4]	; (8007b38 <_cleanup_r+0x8>)
 8007b32:	f000 b885 	b.w	8007c40 <_fwalk_reent>
 8007b36:	bf00      	nop
 8007b38:	080086a1 	.word	0x080086a1

08007b3c <__sfmoreglue>:
 8007b3c:	b570      	push	{r4, r5, r6, lr}
 8007b3e:	2568      	movs	r5, #104	; 0x68
 8007b40:	1e4a      	subs	r2, r1, #1
 8007b42:	4355      	muls	r5, r2
 8007b44:	460e      	mov	r6, r1
 8007b46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007b4a:	f000 f897 	bl	8007c7c <_malloc_r>
 8007b4e:	4604      	mov	r4, r0
 8007b50:	b140      	cbz	r0, 8007b64 <__sfmoreglue+0x28>
 8007b52:	2100      	movs	r1, #0
 8007b54:	e9c0 1600 	strd	r1, r6, [r0]
 8007b58:	300c      	adds	r0, #12
 8007b5a:	60a0      	str	r0, [r4, #8]
 8007b5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007b60:	f7ff ff8e 	bl	8007a80 <memset>
 8007b64:	4620      	mov	r0, r4
 8007b66:	bd70      	pop	{r4, r5, r6, pc}

08007b68 <__sinit>:
 8007b68:	6983      	ldr	r3, [r0, #24]
 8007b6a:	b510      	push	{r4, lr}
 8007b6c:	4604      	mov	r4, r0
 8007b6e:	bb33      	cbnz	r3, 8007bbe <__sinit+0x56>
 8007b70:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007b74:	6503      	str	r3, [r0, #80]	; 0x50
 8007b76:	4b12      	ldr	r3, [pc, #72]	; (8007bc0 <__sinit+0x58>)
 8007b78:	4a12      	ldr	r2, [pc, #72]	; (8007bc4 <__sinit+0x5c>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	6282      	str	r2, [r0, #40]	; 0x28
 8007b7e:	4298      	cmp	r0, r3
 8007b80:	bf04      	itt	eq
 8007b82:	2301      	moveq	r3, #1
 8007b84:	6183      	streq	r3, [r0, #24]
 8007b86:	f000 f81f 	bl	8007bc8 <__sfp>
 8007b8a:	6060      	str	r0, [r4, #4]
 8007b8c:	4620      	mov	r0, r4
 8007b8e:	f000 f81b 	bl	8007bc8 <__sfp>
 8007b92:	60a0      	str	r0, [r4, #8]
 8007b94:	4620      	mov	r0, r4
 8007b96:	f000 f817 	bl	8007bc8 <__sfp>
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	60e0      	str	r0, [r4, #12]
 8007b9e:	2104      	movs	r1, #4
 8007ba0:	6860      	ldr	r0, [r4, #4]
 8007ba2:	f7ff ffa1 	bl	8007ae8 <std>
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	2109      	movs	r1, #9
 8007baa:	68a0      	ldr	r0, [r4, #8]
 8007bac:	f7ff ff9c 	bl	8007ae8 <std>
 8007bb0:	2202      	movs	r2, #2
 8007bb2:	2112      	movs	r1, #18
 8007bb4:	68e0      	ldr	r0, [r4, #12]
 8007bb6:	f7ff ff97 	bl	8007ae8 <std>
 8007bba:	2301      	movs	r3, #1
 8007bbc:	61a3      	str	r3, [r4, #24]
 8007bbe:	bd10      	pop	{r4, pc}
 8007bc0:	08008a38 	.word	0x08008a38
 8007bc4:	08007b31 	.word	0x08007b31

08007bc8 <__sfp>:
 8007bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bca:	4b1b      	ldr	r3, [pc, #108]	; (8007c38 <__sfp+0x70>)
 8007bcc:	4607      	mov	r7, r0
 8007bce:	681e      	ldr	r6, [r3, #0]
 8007bd0:	69b3      	ldr	r3, [r6, #24]
 8007bd2:	b913      	cbnz	r3, 8007bda <__sfp+0x12>
 8007bd4:	4630      	mov	r0, r6
 8007bd6:	f7ff ffc7 	bl	8007b68 <__sinit>
 8007bda:	3648      	adds	r6, #72	; 0x48
 8007bdc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007be0:	3b01      	subs	r3, #1
 8007be2:	d503      	bpl.n	8007bec <__sfp+0x24>
 8007be4:	6833      	ldr	r3, [r6, #0]
 8007be6:	b133      	cbz	r3, 8007bf6 <__sfp+0x2e>
 8007be8:	6836      	ldr	r6, [r6, #0]
 8007bea:	e7f7      	b.n	8007bdc <__sfp+0x14>
 8007bec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007bf0:	b16d      	cbz	r5, 8007c0e <__sfp+0x46>
 8007bf2:	3468      	adds	r4, #104	; 0x68
 8007bf4:	e7f4      	b.n	8007be0 <__sfp+0x18>
 8007bf6:	2104      	movs	r1, #4
 8007bf8:	4638      	mov	r0, r7
 8007bfa:	f7ff ff9f 	bl	8007b3c <__sfmoreglue>
 8007bfe:	6030      	str	r0, [r6, #0]
 8007c00:	2800      	cmp	r0, #0
 8007c02:	d1f1      	bne.n	8007be8 <__sfp+0x20>
 8007c04:	230c      	movs	r3, #12
 8007c06:	4604      	mov	r4, r0
 8007c08:	603b      	str	r3, [r7, #0]
 8007c0a:	4620      	mov	r0, r4
 8007c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c0e:	4b0b      	ldr	r3, [pc, #44]	; (8007c3c <__sfp+0x74>)
 8007c10:	6665      	str	r5, [r4, #100]	; 0x64
 8007c12:	e9c4 5500 	strd	r5, r5, [r4]
 8007c16:	60a5      	str	r5, [r4, #8]
 8007c18:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007c1c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007c20:	2208      	movs	r2, #8
 8007c22:	4629      	mov	r1, r5
 8007c24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007c28:	f7ff ff2a 	bl	8007a80 <memset>
 8007c2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007c30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007c34:	e7e9      	b.n	8007c0a <__sfp+0x42>
 8007c36:	bf00      	nop
 8007c38:	08008a38 	.word	0x08008a38
 8007c3c:	ffff0001 	.word	0xffff0001

08007c40 <_fwalk_reent>:
 8007c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c44:	4680      	mov	r8, r0
 8007c46:	4689      	mov	r9, r1
 8007c48:	2600      	movs	r6, #0
 8007c4a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007c4e:	b914      	cbnz	r4, 8007c56 <_fwalk_reent+0x16>
 8007c50:	4630      	mov	r0, r6
 8007c52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c56:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007c5a:	3f01      	subs	r7, #1
 8007c5c:	d501      	bpl.n	8007c62 <_fwalk_reent+0x22>
 8007c5e:	6824      	ldr	r4, [r4, #0]
 8007c60:	e7f5      	b.n	8007c4e <_fwalk_reent+0xe>
 8007c62:	89ab      	ldrh	r3, [r5, #12]
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d907      	bls.n	8007c78 <_fwalk_reent+0x38>
 8007c68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	d003      	beq.n	8007c78 <_fwalk_reent+0x38>
 8007c70:	4629      	mov	r1, r5
 8007c72:	4640      	mov	r0, r8
 8007c74:	47c8      	blx	r9
 8007c76:	4306      	orrs	r6, r0
 8007c78:	3568      	adds	r5, #104	; 0x68
 8007c7a:	e7ee      	b.n	8007c5a <_fwalk_reent+0x1a>

08007c7c <_malloc_r>:
 8007c7c:	b570      	push	{r4, r5, r6, lr}
 8007c7e:	1ccd      	adds	r5, r1, #3
 8007c80:	f025 0503 	bic.w	r5, r5, #3
 8007c84:	3508      	adds	r5, #8
 8007c86:	2d0c      	cmp	r5, #12
 8007c88:	bf38      	it	cc
 8007c8a:	250c      	movcc	r5, #12
 8007c8c:	2d00      	cmp	r5, #0
 8007c8e:	4606      	mov	r6, r0
 8007c90:	db01      	blt.n	8007c96 <_malloc_r+0x1a>
 8007c92:	42a9      	cmp	r1, r5
 8007c94:	d903      	bls.n	8007c9e <_malloc_r+0x22>
 8007c96:	230c      	movs	r3, #12
 8007c98:	6033      	str	r3, [r6, #0]
 8007c9a:	2000      	movs	r0, #0
 8007c9c:	bd70      	pop	{r4, r5, r6, pc}
 8007c9e:	f000 fdad 	bl	80087fc <__malloc_lock>
 8007ca2:	4a21      	ldr	r2, [pc, #132]	; (8007d28 <_malloc_r+0xac>)
 8007ca4:	6814      	ldr	r4, [r2, #0]
 8007ca6:	4621      	mov	r1, r4
 8007ca8:	b991      	cbnz	r1, 8007cd0 <_malloc_r+0x54>
 8007caa:	4c20      	ldr	r4, [pc, #128]	; (8007d2c <_malloc_r+0xb0>)
 8007cac:	6823      	ldr	r3, [r4, #0]
 8007cae:	b91b      	cbnz	r3, 8007cb8 <_malloc_r+0x3c>
 8007cb0:	4630      	mov	r0, r6
 8007cb2:	f000 fb39 	bl	8008328 <_sbrk_r>
 8007cb6:	6020      	str	r0, [r4, #0]
 8007cb8:	4629      	mov	r1, r5
 8007cba:	4630      	mov	r0, r6
 8007cbc:	f000 fb34 	bl	8008328 <_sbrk_r>
 8007cc0:	1c43      	adds	r3, r0, #1
 8007cc2:	d124      	bne.n	8007d0e <_malloc_r+0x92>
 8007cc4:	230c      	movs	r3, #12
 8007cc6:	4630      	mov	r0, r6
 8007cc8:	6033      	str	r3, [r6, #0]
 8007cca:	f000 fd98 	bl	80087fe <__malloc_unlock>
 8007cce:	e7e4      	b.n	8007c9a <_malloc_r+0x1e>
 8007cd0:	680b      	ldr	r3, [r1, #0]
 8007cd2:	1b5b      	subs	r3, r3, r5
 8007cd4:	d418      	bmi.n	8007d08 <_malloc_r+0x8c>
 8007cd6:	2b0b      	cmp	r3, #11
 8007cd8:	d90f      	bls.n	8007cfa <_malloc_r+0x7e>
 8007cda:	600b      	str	r3, [r1, #0]
 8007cdc:	18cc      	adds	r4, r1, r3
 8007cde:	50cd      	str	r5, [r1, r3]
 8007ce0:	4630      	mov	r0, r6
 8007ce2:	f000 fd8c 	bl	80087fe <__malloc_unlock>
 8007ce6:	f104 000b 	add.w	r0, r4, #11
 8007cea:	1d23      	adds	r3, r4, #4
 8007cec:	f020 0007 	bic.w	r0, r0, #7
 8007cf0:	1ac3      	subs	r3, r0, r3
 8007cf2:	d0d3      	beq.n	8007c9c <_malloc_r+0x20>
 8007cf4:	425a      	negs	r2, r3
 8007cf6:	50e2      	str	r2, [r4, r3]
 8007cf8:	e7d0      	b.n	8007c9c <_malloc_r+0x20>
 8007cfa:	684b      	ldr	r3, [r1, #4]
 8007cfc:	428c      	cmp	r4, r1
 8007cfe:	bf16      	itet	ne
 8007d00:	6063      	strne	r3, [r4, #4]
 8007d02:	6013      	streq	r3, [r2, #0]
 8007d04:	460c      	movne	r4, r1
 8007d06:	e7eb      	b.n	8007ce0 <_malloc_r+0x64>
 8007d08:	460c      	mov	r4, r1
 8007d0a:	6849      	ldr	r1, [r1, #4]
 8007d0c:	e7cc      	b.n	8007ca8 <_malloc_r+0x2c>
 8007d0e:	1cc4      	adds	r4, r0, #3
 8007d10:	f024 0403 	bic.w	r4, r4, #3
 8007d14:	42a0      	cmp	r0, r4
 8007d16:	d005      	beq.n	8007d24 <_malloc_r+0xa8>
 8007d18:	1a21      	subs	r1, r4, r0
 8007d1a:	4630      	mov	r0, r6
 8007d1c:	f000 fb04 	bl	8008328 <_sbrk_r>
 8007d20:	3001      	adds	r0, #1
 8007d22:	d0cf      	beq.n	8007cc4 <_malloc_r+0x48>
 8007d24:	6025      	str	r5, [r4, #0]
 8007d26:	e7db      	b.n	8007ce0 <_malloc_r+0x64>
 8007d28:	20000700 	.word	0x20000700
 8007d2c:	20000704 	.word	0x20000704

08007d30 <__sfputc_r>:
 8007d30:	6893      	ldr	r3, [r2, #8]
 8007d32:	b410      	push	{r4}
 8007d34:	3b01      	subs	r3, #1
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	6093      	str	r3, [r2, #8]
 8007d3a:	da07      	bge.n	8007d4c <__sfputc_r+0x1c>
 8007d3c:	6994      	ldr	r4, [r2, #24]
 8007d3e:	42a3      	cmp	r3, r4
 8007d40:	db01      	blt.n	8007d46 <__sfputc_r+0x16>
 8007d42:	290a      	cmp	r1, #10
 8007d44:	d102      	bne.n	8007d4c <__sfputc_r+0x1c>
 8007d46:	bc10      	pop	{r4}
 8007d48:	f000 bb42 	b.w	80083d0 <__swbuf_r>
 8007d4c:	6813      	ldr	r3, [r2, #0]
 8007d4e:	1c58      	adds	r0, r3, #1
 8007d50:	6010      	str	r0, [r2, #0]
 8007d52:	7019      	strb	r1, [r3, #0]
 8007d54:	4608      	mov	r0, r1
 8007d56:	bc10      	pop	{r4}
 8007d58:	4770      	bx	lr

08007d5a <__sfputs_r>:
 8007d5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d5c:	4606      	mov	r6, r0
 8007d5e:	460f      	mov	r7, r1
 8007d60:	4614      	mov	r4, r2
 8007d62:	18d5      	adds	r5, r2, r3
 8007d64:	42ac      	cmp	r4, r5
 8007d66:	d101      	bne.n	8007d6c <__sfputs_r+0x12>
 8007d68:	2000      	movs	r0, #0
 8007d6a:	e007      	b.n	8007d7c <__sfputs_r+0x22>
 8007d6c:	463a      	mov	r2, r7
 8007d6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d72:	4630      	mov	r0, r6
 8007d74:	f7ff ffdc 	bl	8007d30 <__sfputc_r>
 8007d78:	1c43      	adds	r3, r0, #1
 8007d7a:	d1f3      	bne.n	8007d64 <__sfputs_r+0xa>
 8007d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007d80 <_vfiprintf_r>:
 8007d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d84:	460c      	mov	r4, r1
 8007d86:	b09d      	sub	sp, #116	; 0x74
 8007d88:	4617      	mov	r7, r2
 8007d8a:	461d      	mov	r5, r3
 8007d8c:	4606      	mov	r6, r0
 8007d8e:	b118      	cbz	r0, 8007d98 <_vfiprintf_r+0x18>
 8007d90:	6983      	ldr	r3, [r0, #24]
 8007d92:	b90b      	cbnz	r3, 8007d98 <_vfiprintf_r+0x18>
 8007d94:	f7ff fee8 	bl	8007b68 <__sinit>
 8007d98:	4b7c      	ldr	r3, [pc, #496]	; (8007f8c <_vfiprintf_r+0x20c>)
 8007d9a:	429c      	cmp	r4, r3
 8007d9c:	d158      	bne.n	8007e50 <_vfiprintf_r+0xd0>
 8007d9e:	6874      	ldr	r4, [r6, #4]
 8007da0:	89a3      	ldrh	r3, [r4, #12]
 8007da2:	0718      	lsls	r0, r3, #28
 8007da4:	d55e      	bpl.n	8007e64 <_vfiprintf_r+0xe4>
 8007da6:	6923      	ldr	r3, [r4, #16]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d05b      	beq.n	8007e64 <_vfiprintf_r+0xe4>
 8007dac:	2300      	movs	r3, #0
 8007dae:	9309      	str	r3, [sp, #36]	; 0x24
 8007db0:	2320      	movs	r3, #32
 8007db2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007db6:	2330      	movs	r3, #48	; 0x30
 8007db8:	f04f 0b01 	mov.w	fp, #1
 8007dbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007dc0:	9503      	str	r5, [sp, #12]
 8007dc2:	46b8      	mov	r8, r7
 8007dc4:	4645      	mov	r5, r8
 8007dc6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007dca:	b10b      	cbz	r3, 8007dd0 <_vfiprintf_r+0x50>
 8007dcc:	2b25      	cmp	r3, #37	; 0x25
 8007dce:	d154      	bne.n	8007e7a <_vfiprintf_r+0xfa>
 8007dd0:	ebb8 0a07 	subs.w	sl, r8, r7
 8007dd4:	d00b      	beq.n	8007dee <_vfiprintf_r+0x6e>
 8007dd6:	4653      	mov	r3, sl
 8007dd8:	463a      	mov	r2, r7
 8007dda:	4621      	mov	r1, r4
 8007ddc:	4630      	mov	r0, r6
 8007dde:	f7ff ffbc 	bl	8007d5a <__sfputs_r>
 8007de2:	3001      	adds	r0, #1
 8007de4:	f000 80c2 	beq.w	8007f6c <_vfiprintf_r+0x1ec>
 8007de8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dea:	4453      	add	r3, sl
 8007dec:	9309      	str	r3, [sp, #36]	; 0x24
 8007dee:	f898 3000 	ldrb.w	r3, [r8]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	f000 80ba 	beq.w	8007f6c <_vfiprintf_r+0x1ec>
 8007df8:	2300      	movs	r3, #0
 8007dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8007dfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e02:	9304      	str	r3, [sp, #16]
 8007e04:	9307      	str	r3, [sp, #28]
 8007e06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e0a:	931a      	str	r3, [sp, #104]	; 0x68
 8007e0c:	46a8      	mov	r8, r5
 8007e0e:	2205      	movs	r2, #5
 8007e10:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007e14:	485e      	ldr	r0, [pc, #376]	; (8007f90 <_vfiprintf_r+0x210>)
 8007e16:	f000 fce3 	bl	80087e0 <memchr>
 8007e1a:	9b04      	ldr	r3, [sp, #16]
 8007e1c:	bb78      	cbnz	r0, 8007e7e <_vfiprintf_r+0xfe>
 8007e1e:	06d9      	lsls	r1, r3, #27
 8007e20:	bf44      	itt	mi
 8007e22:	2220      	movmi	r2, #32
 8007e24:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007e28:	071a      	lsls	r2, r3, #28
 8007e2a:	bf44      	itt	mi
 8007e2c:	222b      	movmi	r2, #43	; 0x2b
 8007e2e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007e32:	782a      	ldrb	r2, [r5, #0]
 8007e34:	2a2a      	cmp	r2, #42	; 0x2a
 8007e36:	d02a      	beq.n	8007e8e <_vfiprintf_r+0x10e>
 8007e38:	46a8      	mov	r8, r5
 8007e3a:	2000      	movs	r0, #0
 8007e3c:	250a      	movs	r5, #10
 8007e3e:	9a07      	ldr	r2, [sp, #28]
 8007e40:	4641      	mov	r1, r8
 8007e42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e46:	3b30      	subs	r3, #48	; 0x30
 8007e48:	2b09      	cmp	r3, #9
 8007e4a:	d969      	bls.n	8007f20 <_vfiprintf_r+0x1a0>
 8007e4c:	b360      	cbz	r0, 8007ea8 <_vfiprintf_r+0x128>
 8007e4e:	e024      	b.n	8007e9a <_vfiprintf_r+0x11a>
 8007e50:	4b50      	ldr	r3, [pc, #320]	; (8007f94 <_vfiprintf_r+0x214>)
 8007e52:	429c      	cmp	r4, r3
 8007e54:	d101      	bne.n	8007e5a <_vfiprintf_r+0xda>
 8007e56:	68b4      	ldr	r4, [r6, #8]
 8007e58:	e7a2      	b.n	8007da0 <_vfiprintf_r+0x20>
 8007e5a:	4b4f      	ldr	r3, [pc, #316]	; (8007f98 <_vfiprintf_r+0x218>)
 8007e5c:	429c      	cmp	r4, r3
 8007e5e:	bf08      	it	eq
 8007e60:	68f4      	ldreq	r4, [r6, #12]
 8007e62:	e79d      	b.n	8007da0 <_vfiprintf_r+0x20>
 8007e64:	4621      	mov	r1, r4
 8007e66:	4630      	mov	r0, r6
 8007e68:	f000 fb16 	bl	8008498 <__swsetup_r>
 8007e6c:	2800      	cmp	r0, #0
 8007e6e:	d09d      	beq.n	8007dac <_vfiprintf_r+0x2c>
 8007e70:	f04f 30ff 	mov.w	r0, #4294967295
 8007e74:	b01d      	add	sp, #116	; 0x74
 8007e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e7a:	46a8      	mov	r8, r5
 8007e7c:	e7a2      	b.n	8007dc4 <_vfiprintf_r+0x44>
 8007e7e:	4a44      	ldr	r2, [pc, #272]	; (8007f90 <_vfiprintf_r+0x210>)
 8007e80:	4645      	mov	r5, r8
 8007e82:	1a80      	subs	r0, r0, r2
 8007e84:	fa0b f000 	lsl.w	r0, fp, r0
 8007e88:	4318      	orrs	r0, r3
 8007e8a:	9004      	str	r0, [sp, #16]
 8007e8c:	e7be      	b.n	8007e0c <_vfiprintf_r+0x8c>
 8007e8e:	9a03      	ldr	r2, [sp, #12]
 8007e90:	1d11      	adds	r1, r2, #4
 8007e92:	6812      	ldr	r2, [r2, #0]
 8007e94:	9103      	str	r1, [sp, #12]
 8007e96:	2a00      	cmp	r2, #0
 8007e98:	db01      	blt.n	8007e9e <_vfiprintf_r+0x11e>
 8007e9a:	9207      	str	r2, [sp, #28]
 8007e9c:	e004      	b.n	8007ea8 <_vfiprintf_r+0x128>
 8007e9e:	4252      	negs	r2, r2
 8007ea0:	f043 0302 	orr.w	r3, r3, #2
 8007ea4:	9207      	str	r2, [sp, #28]
 8007ea6:	9304      	str	r3, [sp, #16]
 8007ea8:	f898 3000 	ldrb.w	r3, [r8]
 8007eac:	2b2e      	cmp	r3, #46	; 0x2e
 8007eae:	d10e      	bne.n	8007ece <_vfiprintf_r+0x14e>
 8007eb0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007eb4:	2b2a      	cmp	r3, #42	; 0x2a
 8007eb6:	d138      	bne.n	8007f2a <_vfiprintf_r+0x1aa>
 8007eb8:	9b03      	ldr	r3, [sp, #12]
 8007eba:	f108 0802 	add.w	r8, r8, #2
 8007ebe:	1d1a      	adds	r2, r3, #4
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	9203      	str	r2, [sp, #12]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	bfb8      	it	lt
 8007ec8:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ecc:	9305      	str	r3, [sp, #20]
 8007ece:	4d33      	ldr	r5, [pc, #204]	; (8007f9c <_vfiprintf_r+0x21c>)
 8007ed0:	2203      	movs	r2, #3
 8007ed2:	f898 1000 	ldrb.w	r1, [r8]
 8007ed6:	4628      	mov	r0, r5
 8007ed8:	f000 fc82 	bl	80087e0 <memchr>
 8007edc:	b140      	cbz	r0, 8007ef0 <_vfiprintf_r+0x170>
 8007ede:	2340      	movs	r3, #64	; 0x40
 8007ee0:	1b40      	subs	r0, r0, r5
 8007ee2:	fa03 f000 	lsl.w	r0, r3, r0
 8007ee6:	9b04      	ldr	r3, [sp, #16]
 8007ee8:	f108 0801 	add.w	r8, r8, #1
 8007eec:	4303      	orrs	r3, r0
 8007eee:	9304      	str	r3, [sp, #16]
 8007ef0:	f898 1000 	ldrb.w	r1, [r8]
 8007ef4:	2206      	movs	r2, #6
 8007ef6:	482a      	ldr	r0, [pc, #168]	; (8007fa0 <_vfiprintf_r+0x220>)
 8007ef8:	f108 0701 	add.w	r7, r8, #1
 8007efc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f00:	f000 fc6e 	bl	80087e0 <memchr>
 8007f04:	2800      	cmp	r0, #0
 8007f06:	d037      	beq.n	8007f78 <_vfiprintf_r+0x1f8>
 8007f08:	4b26      	ldr	r3, [pc, #152]	; (8007fa4 <_vfiprintf_r+0x224>)
 8007f0a:	bb1b      	cbnz	r3, 8007f54 <_vfiprintf_r+0x1d4>
 8007f0c:	9b03      	ldr	r3, [sp, #12]
 8007f0e:	3307      	adds	r3, #7
 8007f10:	f023 0307 	bic.w	r3, r3, #7
 8007f14:	3308      	adds	r3, #8
 8007f16:	9303      	str	r3, [sp, #12]
 8007f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f1a:	444b      	add	r3, r9
 8007f1c:	9309      	str	r3, [sp, #36]	; 0x24
 8007f1e:	e750      	b.n	8007dc2 <_vfiprintf_r+0x42>
 8007f20:	fb05 3202 	mla	r2, r5, r2, r3
 8007f24:	2001      	movs	r0, #1
 8007f26:	4688      	mov	r8, r1
 8007f28:	e78a      	b.n	8007e40 <_vfiprintf_r+0xc0>
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	250a      	movs	r5, #10
 8007f2e:	4619      	mov	r1, r3
 8007f30:	f108 0801 	add.w	r8, r8, #1
 8007f34:	9305      	str	r3, [sp, #20]
 8007f36:	4640      	mov	r0, r8
 8007f38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f3c:	3a30      	subs	r2, #48	; 0x30
 8007f3e:	2a09      	cmp	r2, #9
 8007f40:	d903      	bls.n	8007f4a <_vfiprintf_r+0x1ca>
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d0c3      	beq.n	8007ece <_vfiprintf_r+0x14e>
 8007f46:	9105      	str	r1, [sp, #20]
 8007f48:	e7c1      	b.n	8007ece <_vfiprintf_r+0x14e>
 8007f4a:	fb05 2101 	mla	r1, r5, r1, r2
 8007f4e:	2301      	movs	r3, #1
 8007f50:	4680      	mov	r8, r0
 8007f52:	e7f0      	b.n	8007f36 <_vfiprintf_r+0x1b6>
 8007f54:	ab03      	add	r3, sp, #12
 8007f56:	9300      	str	r3, [sp, #0]
 8007f58:	4622      	mov	r2, r4
 8007f5a:	4b13      	ldr	r3, [pc, #76]	; (8007fa8 <_vfiprintf_r+0x228>)
 8007f5c:	a904      	add	r1, sp, #16
 8007f5e:	4630      	mov	r0, r6
 8007f60:	f3af 8000 	nop.w
 8007f64:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007f68:	4681      	mov	r9, r0
 8007f6a:	d1d5      	bne.n	8007f18 <_vfiprintf_r+0x198>
 8007f6c:	89a3      	ldrh	r3, [r4, #12]
 8007f6e:	065b      	lsls	r3, r3, #25
 8007f70:	f53f af7e 	bmi.w	8007e70 <_vfiprintf_r+0xf0>
 8007f74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f76:	e77d      	b.n	8007e74 <_vfiprintf_r+0xf4>
 8007f78:	ab03      	add	r3, sp, #12
 8007f7a:	9300      	str	r3, [sp, #0]
 8007f7c:	4622      	mov	r2, r4
 8007f7e:	4b0a      	ldr	r3, [pc, #40]	; (8007fa8 <_vfiprintf_r+0x228>)
 8007f80:	a904      	add	r1, sp, #16
 8007f82:	4630      	mov	r0, r6
 8007f84:	f000 f888 	bl	8008098 <_printf_i>
 8007f88:	e7ec      	b.n	8007f64 <_vfiprintf_r+0x1e4>
 8007f8a:	bf00      	nop
 8007f8c:	08008a5c 	.word	0x08008a5c
 8007f90:	08008a9c 	.word	0x08008a9c
 8007f94:	08008a7c 	.word	0x08008a7c
 8007f98:	08008a3c 	.word	0x08008a3c
 8007f9c:	08008aa2 	.word	0x08008aa2
 8007fa0:	08008aa6 	.word	0x08008aa6
 8007fa4:	00000000 	.word	0x00000000
 8007fa8:	08007d5b 	.word	0x08007d5b

08007fac <_printf_common>:
 8007fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fb0:	4691      	mov	r9, r2
 8007fb2:	461f      	mov	r7, r3
 8007fb4:	688a      	ldr	r2, [r1, #8]
 8007fb6:	690b      	ldr	r3, [r1, #16]
 8007fb8:	4606      	mov	r6, r0
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	bfb8      	it	lt
 8007fbe:	4613      	movlt	r3, r2
 8007fc0:	f8c9 3000 	str.w	r3, [r9]
 8007fc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007fc8:	460c      	mov	r4, r1
 8007fca:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007fce:	b112      	cbz	r2, 8007fd6 <_printf_common+0x2a>
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	f8c9 3000 	str.w	r3, [r9]
 8007fd6:	6823      	ldr	r3, [r4, #0]
 8007fd8:	0699      	lsls	r1, r3, #26
 8007fda:	bf42      	ittt	mi
 8007fdc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007fe0:	3302      	addmi	r3, #2
 8007fe2:	f8c9 3000 	strmi.w	r3, [r9]
 8007fe6:	6825      	ldr	r5, [r4, #0]
 8007fe8:	f015 0506 	ands.w	r5, r5, #6
 8007fec:	d107      	bne.n	8007ffe <_printf_common+0x52>
 8007fee:	f104 0a19 	add.w	sl, r4, #25
 8007ff2:	68e3      	ldr	r3, [r4, #12]
 8007ff4:	f8d9 2000 	ldr.w	r2, [r9]
 8007ff8:	1a9b      	subs	r3, r3, r2
 8007ffa:	42ab      	cmp	r3, r5
 8007ffc:	dc29      	bgt.n	8008052 <_printf_common+0xa6>
 8007ffe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008002:	6822      	ldr	r2, [r4, #0]
 8008004:	3300      	adds	r3, #0
 8008006:	bf18      	it	ne
 8008008:	2301      	movne	r3, #1
 800800a:	0692      	lsls	r2, r2, #26
 800800c:	d42e      	bmi.n	800806c <_printf_common+0xc0>
 800800e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008012:	4639      	mov	r1, r7
 8008014:	4630      	mov	r0, r6
 8008016:	47c0      	blx	r8
 8008018:	3001      	adds	r0, #1
 800801a:	d021      	beq.n	8008060 <_printf_common+0xb4>
 800801c:	6823      	ldr	r3, [r4, #0]
 800801e:	68e5      	ldr	r5, [r4, #12]
 8008020:	f003 0306 	and.w	r3, r3, #6
 8008024:	2b04      	cmp	r3, #4
 8008026:	bf18      	it	ne
 8008028:	2500      	movne	r5, #0
 800802a:	f8d9 2000 	ldr.w	r2, [r9]
 800802e:	f04f 0900 	mov.w	r9, #0
 8008032:	bf08      	it	eq
 8008034:	1aad      	subeq	r5, r5, r2
 8008036:	68a3      	ldr	r3, [r4, #8]
 8008038:	6922      	ldr	r2, [r4, #16]
 800803a:	bf08      	it	eq
 800803c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008040:	4293      	cmp	r3, r2
 8008042:	bfc4      	itt	gt
 8008044:	1a9b      	subgt	r3, r3, r2
 8008046:	18ed      	addgt	r5, r5, r3
 8008048:	341a      	adds	r4, #26
 800804a:	454d      	cmp	r5, r9
 800804c:	d11a      	bne.n	8008084 <_printf_common+0xd8>
 800804e:	2000      	movs	r0, #0
 8008050:	e008      	b.n	8008064 <_printf_common+0xb8>
 8008052:	2301      	movs	r3, #1
 8008054:	4652      	mov	r2, sl
 8008056:	4639      	mov	r1, r7
 8008058:	4630      	mov	r0, r6
 800805a:	47c0      	blx	r8
 800805c:	3001      	adds	r0, #1
 800805e:	d103      	bne.n	8008068 <_printf_common+0xbc>
 8008060:	f04f 30ff 	mov.w	r0, #4294967295
 8008064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008068:	3501      	adds	r5, #1
 800806a:	e7c2      	b.n	8007ff2 <_printf_common+0x46>
 800806c:	2030      	movs	r0, #48	; 0x30
 800806e:	18e1      	adds	r1, r4, r3
 8008070:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008074:	1c5a      	adds	r2, r3, #1
 8008076:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800807a:	4422      	add	r2, r4
 800807c:	3302      	adds	r3, #2
 800807e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008082:	e7c4      	b.n	800800e <_printf_common+0x62>
 8008084:	2301      	movs	r3, #1
 8008086:	4622      	mov	r2, r4
 8008088:	4639      	mov	r1, r7
 800808a:	4630      	mov	r0, r6
 800808c:	47c0      	blx	r8
 800808e:	3001      	adds	r0, #1
 8008090:	d0e6      	beq.n	8008060 <_printf_common+0xb4>
 8008092:	f109 0901 	add.w	r9, r9, #1
 8008096:	e7d8      	b.n	800804a <_printf_common+0x9e>

08008098 <_printf_i>:
 8008098:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800809c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80080a0:	460c      	mov	r4, r1
 80080a2:	7e09      	ldrb	r1, [r1, #24]
 80080a4:	b085      	sub	sp, #20
 80080a6:	296e      	cmp	r1, #110	; 0x6e
 80080a8:	4617      	mov	r7, r2
 80080aa:	4606      	mov	r6, r0
 80080ac:	4698      	mov	r8, r3
 80080ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80080b0:	f000 80b3 	beq.w	800821a <_printf_i+0x182>
 80080b4:	d822      	bhi.n	80080fc <_printf_i+0x64>
 80080b6:	2963      	cmp	r1, #99	; 0x63
 80080b8:	d036      	beq.n	8008128 <_printf_i+0x90>
 80080ba:	d80a      	bhi.n	80080d2 <_printf_i+0x3a>
 80080bc:	2900      	cmp	r1, #0
 80080be:	f000 80b9 	beq.w	8008234 <_printf_i+0x19c>
 80080c2:	2958      	cmp	r1, #88	; 0x58
 80080c4:	f000 8083 	beq.w	80081ce <_printf_i+0x136>
 80080c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080cc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80080d0:	e032      	b.n	8008138 <_printf_i+0xa0>
 80080d2:	2964      	cmp	r1, #100	; 0x64
 80080d4:	d001      	beq.n	80080da <_printf_i+0x42>
 80080d6:	2969      	cmp	r1, #105	; 0x69
 80080d8:	d1f6      	bne.n	80080c8 <_printf_i+0x30>
 80080da:	6820      	ldr	r0, [r4, #0]
 80080dc:	6813      	ldr	r3, [r2, #0]
 80080de:	0605      	lsls	r5, r0, #24
 80080e0:	f103 0104 	add.w	r1, r3, #4
 80080e4:	d52a      	bpl.n	800813c <_printf_i+0xa4>
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	6011      	str	r1, [r2, #0]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	da03      	bge.n	80080f6 <_printf_i+0x5e>
 80080ee:	222d      	movs	r2, #45	; 0x2d
 80080f0:	425b      	negs	r3, r3
 80080f2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80080f6:	486f      	ldr	r0, [pc, #444]	; (80082b4 <_printf_i+0x21c>)
 80080f8:	220a      	movs	r2, #10
 80080fa:	e039      	b.n	8008170 <_printf_i+0xd8>
 80080fc:	2973      	cmp	r1, #115	; 0x73
 80080fe:	f000 809d 	beq.w	800823c <_printf_i+0x1a4>
 8008102:	d808      	bhi.n	8008116 <_printf_i+0x7e>
 8008104:	296f      	cmp	r1, #111	; 0x6f
 8008106:	d020      	beq.n	800814a <_printf_i+0xb2>
 8008108:	2970      	cmp	r1, #112	; 0x70
 800810a:	d1dd      	bne.n	80080c8 <_printf_i+0x30>
 800810c:	6823      	ldr	r3, [r4, #0]
 800810e:	f043 0320 	orr.w	r3, r3, #32
 8008112:	6023      	str	r3, [r4, #0]
 8008114:	e003      	b.n	800811e <_printf_i+0x86>
 8008116:	2975      	cmp	r1, #117	; 0x75
 8008118:	d017      	beq.n	800814a <_printf_i+0xb2>
 800811a:	2978      	cmp	r1, #120	; 0x78
 800811c:	d1d4      	bne.n	80080c8 <_printf_i+0x30>
 800811e:	2378      	movs	r3, #120	; 0x78
 8008120:	4865      	ldr	r0, [pc, #404]	; (80082b8 <_printf_i+0x220>)
 8008122:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008126:	e055      	b.n	80081d4 <_printf_i+0x13c>
 8008128:	6813      	ldr	r3, [r2, #0]
 800812a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800812e:	1d19      	adds	r1, r3, #4
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	6011      	str	r1, [r2, #0]
 8008134:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008138:	2301      	movs	r3, #1
 800813a:	e08c      	b.n	8008256 <_printf_i+0x1be>
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008142:	6011      	str	r1, [r2, #0]
 8008144:	bf18      	it	ne
 8008146:	b21b      	sxthne	r3, r3
 8008148:	e7cf      	b.n	80080ea <_printf_i+0x52>
 800814a:	6813      	ldr	r3, [r2, #0]
 800814c:	6825      	ldr	r5, [r4, #0]
 800814e:	1d18      	adds	r0, r3, #4
 8008150:	6010      	str	r0, [r2, #0]
 8008152:	0628      	lsls	r0, r5, #24
 8008154:	d501      	bpl.n	800815a <_printf_i+0xc2>
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	e002      	b.n	8008160 <_printf_i+0xc8>
 800815a:	0668      	lsls	r0, r5, #25
 800815c:	d5fb      	bpl.n	8008156 <_printf_i+0xbe>
 800815e:	881b      	ldrh	r3, [r3, #0]
 8008160:	296f      	cmp	r1, #111	; 0x6f
 8008162:	bf14      	ite	ne
 8008164:	220a      	movne	r2, #10
 8008166:	2208      	moveq	r2, #8
 8008168:	4852      	ldr	r0, [pc, #328]	; (80082b4 <_printf_i+0x21c>)
 800816a:	2100      	movs	r1, #0
 800816c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008170:	6865      	ldr	r5, [r4, #4]
 8008172:	2d00      	cmp	r5, #0
 8008174:	60a5      	str	r5, [r4, #8]
 8008176:	f2c0 8095 	blt.w	80082a4 <_printf_i+0x20c>
 800817a:	6821      	ldr	r1, [r4, #0]
 800817c:	f021 0104 	bic.w	r1, r1, #4
 8008180:	6021      	str	r1, [r4, #0]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d13d      	bne.n	8008202 <_printf_i+0x16a>
 8008186:	2d00      	cmp	r5, #0
 8008188:	f040 808e 	bne.w	80082a8 <_printf_i+0x210>
 800818c:	4665      	mov	r5, ip
 800818e:	2a08      	cmp	r2, #8
 8008190:	d10b      	bne.n	80081aa <_printf_i+0x112>
 8008192:	6823      	ldr	r3, [r4, #0]
 8008194:	07db      	lsls	r3, r3, #31
 8008196:	d508      	bpl.n	80081aa <_printf_i+0x112>
 8008198:	6923      	ldr	r3, [r4, #16]
 800819a:	6862      	ldr	r2, [r4, #4]
 800819c:	429a      	cmp	r2, r3
 800819e:	bfde      	ittt	le
 80081a0:	2330      	movle	r3, #48	; 0x30
 80081a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80081a6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80081aa:	ebac 0305 	sub.w	r3, ip, r5
 80081ae:	6123      	str	r3, [r4, #16]
 80081b0:	f8cd 8000 	str.w	r8, [sp]
 80081b4:	463b      	mov	r3, r7
 80081b6:	aa03      	add	r2, sp, #12
 80081b8:	4621      	mov	r1, r4
 80081ba:	4630      	mov	r0, r6
 80081bc:	f7ff fef6 	bl	8007fac <_printf_common>
 80081c0:	3001      	adds	r0, #1
 80081c2:	d14d      	bne.n	8008260 <_printf_i+0x1c8>
 80081c4:	f04f 30ff 	mov.w	r0, #4294967295
 80081c8:	b005      	add	sp, #20
 80081ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081ce:	4839      	ldr	r0, [pc, #228]	; (80082b4 <_printf_i+0x21c>)
 80081d0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80081d4:	6813      	ldr	r3, [r2, #0]
 80081d6:	6821      	ldr	r1, [r4, #0]
 80081d8:	1d1d      	adds	r5, r3, #4
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	6015      	str	r5, [r2, #0]
 80081de:	060a      	lsls	r2, r1, #24
 80081e0:	d50b      	bpl.n	80081fa <_printf_i+0x162>
 80081e2:	07ca      	lsls	r2, r1, #31
 80081e4:	bf44      	itt	mi
 80081e6:	f041 0120 	orrmi.w	r1, r1, #32
 80081ea:	6021      	strmi	r1, [r4, #0]
 80081ec:	b91b      	cbnz	r3, 80081f6 <_printf_i+0x15e>
 80081ee:	6822      	ldr	r2, [r4, #0]
 80081f0:	f022 0220 	bic.w	r2, r2, #32
 80081f4:	6022      	str	r2, [r4, #0]
 80081f6:	2210      	movs	r2, #16
 80081f8:	e7b7      	b.n	800816a <_printf_i+0xd2>
 80081fa:	064d      	lsls	r5, r1, #25
 80081fc:	bf48      	it	mi
 80081fe:	b29b      	uxthmi	r3, r3
 8008200:	e7ef      	b.n	80081e2 <_printf_i+0x14a>
 8008202:	4665      	mov	r5, ip
 8008204:	fbb3 f1f2 	udiv	r1, r3, r2
 8008208:	fb02 3311 	mls	r3, r2, r1, r3
 800820c:	5cc3      	ldrb	r3, [r0, r3]
 800820e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008212:	460b      	mov	r3, r1
 8008214:	2900      	cmp	r1, #0
 8008216:	d1f5      	bne.n	8008204 <_printf_i+0x16c>
 8008218:	e7b9      	b.n	800818e <_printf_i+0xf6>
 800821a:	6813      	ldr	r3, [r2, #0]
 800821c:	6825      	ldr	r5, [r4, #0]
 800821e:	1d18      	adds	r0, r3, #4
 8008220:	6961      	ldr	r1, [r4, #20]
 8008222:	6010      	str	r0, [r2, #0]
 8008224:	0628      	lsls	r0, r5, #24
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	d501      	bpl.n	800822e <_printf_i+0x196>
 800822a:	6019      	str	r1, [r3, #0]
 800822c:	e002      	b.n	8008234 <_printf_i+0x19c>
 800822e:	066a      	lsls	r2, r5, #25
 8008230:	d5fb      	bpl.n	800822a <_printf_i+0x192>
 8008232:	8019      	strh	r1, [r3, #0]
 8008234:	2300      	movs	r3, #0
 8008236:	4665      	mov	r5, ip
 8008238:	6123      	str	r3, [r4, #16]
 800823a:	e7b9      	b.n	80081b0 <_printf_i+0x118>
 800823c:	6813      	ldr	r3, [r2, #0]
 800823e:	1d19      	adds	r1, r3, #4
 8008240:	6011      	str	r1, [r2, #0]
 8008242:	681d      	ldr	r5, [r3, #0]
 8008244:	6862      	ldr	r2, [r4, #4]
 8008246:	2100      	movs	r1, #0
 8008248:	4628      	mov	r0, r5
 800824a:	f000 fac9 	bl	80087e0 <memchr>
 800824e:	b108      	cbz	r0, 8008254 <_printf_i+0x1bc>
 8008250:	1b40      	subs	r0, r0, r5
 8008252:	6060      	str	r0, [r4, #4]
 8008254:	6863      	ldr	r3, [r4, #4]
 8008256:	6123      	str	r3, [r4, #16]
 8008258:	2300      	movs	r3, #0
 800825a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800825e:	e7a7      	b.n	80081b0 <_printf_i+0x118>
 8008260:	6923      	ldr	r3, [r4, #16]
 8008262:	462a      	mov	r2, r5
 8008264:	4639      	mov	r1, r7
 8008266:	4630      	mov	r0, r6
 8008268:	47c0      	blx	r8
 800826a:	3001      	adds	r0, #1
 800826c:	d0aa      	beq.n	80081c4 <_printf_i+0x12c>
 800826e:	6823      	ldr	r3, [r4, #0]
 8008270:	079b      	lsls	r3, r3, #30
 8008272:	d413      	bmi.n	800829c <_printf_i+0x204>
 8008274:	68e0      	ldr	r0, [r4, #12]
 8008276:	9b03      	ldr	r3, [sp, #12]
 8008278:	4298      	cmp	r0, r3
 800827a:	bfb8      	it	lt
 800827c:	4618      	movlt	r0, r3
 800827e:	e7a3      	b.n	80081c8 <_printf_i+0x130>
 8008280:	2301      	movs	r3, #1
 8008282:	464a      	mov	r2, r9
 8008284:	4639      	mov	r1, r7
 8008286:	4630      	mov	r0, r6
 8008288:	47c0      	blx	r8
 800828a:	3001      	adds	r0, #1
 800828c:	d09a      	beq.n	80081c4 <_printf_i+0x12c>
 800828e:	3501      	adds	r5, #1
 8008290:	68e3      	ldr	r3, [r4, #12]
 8008292:	9a03      	ldr	r2, [sp, #12]
 8008294:	1a9b      	subs	r3, r3, r2
 8008296:	42ab      	cmp	r3, r5
 8008298:	dcf2      	bgt.n	8008280 <_printf_i+0x1e8>
 800829a:	e7eb      	b.n	8008274 <_printf_i+0x1dc>
 800829c:	2500      	movs	r5, #0
 800829e:	f104 0919 	add.w	r9, r4, #25
 80082a2:	e7f5      	b.n	8008290 <_printf_i+0x1f8>
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d1ac      	bne.n	8008202 <_printf_i+0x16a>
 80082a8:	7803      	ldrb	r3, [r0, #0]
 80082aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80082b2:	e76c      	b.n	800818e <_printf_i+0xf6>
 80082b4:	08008aad 	.word	0x08008aad
 80082b8:	08008abe 	.word	0x08008abe

080082bc <_putc_r>:
 80082bc:	b570      	push	{r4, r5, r6, lr}
 80082be:	460d      	mov	r5, r1
 80082c0:	4614      	mov	r4, r2
 80082c2:	4606      	mov	r6, r0
 80082c4:	b118      	cbz	r0, 80082ce <_putc_r+0x12>
 80082c6:	6983      	ldr	r3, [r0, #24]
 80082c8:	b90b      	cbnz	r3, 80082ce <_putc_r+0x12>
 80082ca:	f7ff fc4d 	bl	8007b68 <__sinit>
 80082ce:	4b13      	ldr	r3, [pc, #76]	; (800831c <_putc_r+0x60>)
 80082d0:	429c      	cmp	r4, r3
 80082d2:	d112      	bne.n	80082fa <_putc_r+0x3e>
 80082d4:	6874      	ldr	r4, [r6, #4]
 80082d6:	68a3      	ldr	r3, [r4, #8]
 80082d8:	3b01      	subs	r3, #1
 80082da:	2b00      	cmp	r3, #0
 80082dc:	60a3      	str	r3, [r4, #8]
 80082de:	da16      	bge.n	800830e <_putc_r+0x52>
 80082e0:	69a2      	ldr	r2, [r4, #24]
 80082e2:	4293      	cmp	r3, r2
 80082e4:	db02      	blt.n	80082ec <_putc_r+0x30>
 80082e6:	b2eb      	uxtb	r3, r5
 80082e8:	2b0a      	cmp	r3, #10
 80082ea:	d110      	bne.n	800830e <_putc_r+0x52>
 80082ec:	4622      	mov	r2, r4
 80082ee:	4629      	mov	r1, r5
 80082f0:	4630      	mov	r0, r6
 80082f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80082f6:	f000 b86b 	b.w	80083d0 <__swbuf_r>
 80082fa:	4b09      	ldr	r3, [pc, #36]	; (8008320 <_putc_r+0x64>)
 80082fc:	429c      	cmp	r4, r3
 80082fe:	d101      	bne.n	8008304 <_putc_r+0x48>
 8008300:	68b4      	ldr	r4, [r6, #8]
 8008302:	e7e8      	b.n	80082d6 <_putc_r+0x1a>
 8008304:	4b07      	ldr	r3, [pc, #28]	; (8008324 <_putc_r+0x68>)
 8008306:	429c      	cmp	r4, r3
 8008308:	bf08      	it	eq
 800830a:	68f4      	ldreq	r4, [r6, #12]
 800830c:	e7e3      	b.n	80082d6 <_putc_r+0x1a>
 800830e:	6823      	ldr	r3, [r4, #0]
 8008310:	b2e8      	uxtb	r0, r5
 8008312:	1c5a      	adds	r2, r3, #1
 8008314:	6022      	str	r2, [r4, #0]
 8008316:	701d      	strb	r5, [r3, #0]
 8008318:	bd70      	pop	{r4, r5, r6, pc}
 800831a:	bf00      	nop
 800831c:	08008a5c 	.word	0x08008a5c
 8008320:	08008a7c 	.word	0x08008a7c
 8008324:	08008a3c 	.word	0x08008a3c

08008328 <_sbrk_r>:
 8008328:	b538      	push	{r3, r4, r5, lr}
 800832a:	2300      	movs	r3, #0
 800832c:	4c05      	ldr	r4, [pc, #20]	; (8008344 <_sbrk_r+0x1c>)
 800832e:	4605      	mov	r5, r0
 8008330:	4608      	mov	r0, r1
 8008332:	6023      	str	r3, [r4, #0]
 8008334:	f000 fb0c 	bl	8008950 <_sbrk>
 8008338:	1c43      	adds	r3, r0, #1
 800833a:	d102      	bne.n	8008342 <_sbrk_r+0x1a>
 800833c:	6823      	ldr	r3, [r4, #0]
 800833e:	b103      	cbz	r3, 8008342 <_sbrk_r+0x1a>
 8008340:	602b      	str	r3, [r5, #0]
 8008342:	bd38      	pop	{r3, r4, r5, pc}
 8008344:	2000171c 	.word	0x2000171c

08008348 <__sread>:
 8008348:	b510      	push	{r4, lr}
 800834a:	460c      	mov	r4, r1
 800834c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008350:	f000 faa2 	bl	8008898 <_read_r>
 8008354:	2800      	cmp	r0, #0
 8008356:	bfab      	itete	ge
 8008358:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800835a:	89a3      	ldrhlt	r3, [r4, #12]
 800835c:	181b      	addge	r3, r3, r0
 800835e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008362:	bfac      	ite	ge
 8008364:	6563      	strge	r3, [r4, #84]	; 0x54
 8008366:	81a3      	strhlt	r3, [r4, #12]
 8008368:	bd10      	pop	{r4, pc}

0800836a <__swrite>:
 800836a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800836e:	461f      	mov	r7, r3
 8008370:	898b      	ldrh	r3, [r1, #12]
 8008372:	4605      	mov	r5, r0
 8008374:	05db      	lsls	r3, r3, #23
 8008376:	460c      	mov	r4, r1
 8008378:	4616      	mov	r6, r2
 800837a:	d505      	bpl.n	8008388 <__swrite+0x1e>
 800837c:	2302      	movs	r3, #2
 800837e:	2200      	movs	r2, #0
 8008380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008384:	f000 f9b6 	bl	80086f4 <_lseek_r>
 8008388:	89a3      	ldrh	r3, [r4, #12]
 800838a:	4632      	mov	r2, r6
 800838c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008390:	81a3      	strh	r3, [r4, #12]
 8008392:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008396:	463b      	mov	r3, r7
 8008398:	4628      	mov	r0, r5
 800839a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800839e:	f000 b869 	b.w	8008474 <_write_r>

080083a2 <__sseek>:
 80083a2:	b510      	push	{r4, lr}
 80083a4:	460c      	mov	r4, r1
 80083a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083aa:	f000 f9a3 	bl	80086f4 <_lseek_r>
 80083ae:	1c43      	adds	r3, r0, #1
 80083b0:	89a3      	ldrh	r3, [r4, #12]
 80083b2:	bf15      	itete	ne
 80083b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80083b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80083ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80083be:	81a3      	strheq	r3, [r4, #12]
 80083c0:	bf18      	it	ne
 80083c2:	81a3      	strhne	r3, [r4, #12]
 80083c4:	bd10      	pop	{r4, pc}

080083c6 <__sclose>:
 80083c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083ca:	f000 b8d3 	b.w	8008574 <_close_r>
	...

080083d0 <__swbuf_r>:
 80083d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083d2:	460e      	mov	r6, r1
 80083d4:	4614      	mov	r4, r2
 80083d6:	4605      	mov	r5, r0
 80083d8:	b118      	cbz	r0, 80083e2 <__swbuf_r+0x12>
 80083da:	6983      	ldr	r3, [r0, #24]
 80083dc:	b90b      	cbnz	r3, 80083e2 <__swbuf_r+0x12>
 80083de:	f7ff fbc3 	bl	8007b68 <__sinit>
 80083e2:	4b21      	ldr	r3, [pc, #132]	; (8008468 <__swbuf_r+0x98>)
 80083e4:	429c      	cmp	r4, r3
 80083e6:	d12a      	bne.n	800843e <__swbuf_r+0x6e>
 80083e8:	686c      	ldr	r4, [r5, #4]
 80083ea:	69a3      	ldr	r3, [r4, #24]
 80083ec:	60a3      	str	r3, [r4, #8]
 80083ee:	89a3      	ldrh	r3, [r4, #12]
 80083f0:	071a      	lsls	r2, r3, #28
 80083f2:	d52e      	bpl.n	8008452 <__swbuf_r+0x82>
 80083f4:	6923      	ldr	r3, [r4, #16]
 80083f6:	b363      	cbz	r3, 8008452 <__swbuf_r+0x82>
 80083f8:	6923      	ldr	r3, [r4, #16]
 80083fa:	6820      	ldr	r0, [r4, #0]
 80083fc:	b2f6      	uxtb	r6, r6
 80083fe:	1ac0      	subs	r0, r0, r3
 8008400:	6963      	ldr	r3, [r4, #20]
 8008402:	4637      	mov	r7, r6
 8008404:	4283      	cmp	r3, r0
 8008406:	dc04      	bgt.n	8008412 <__swbuf_r+0x42>
 8008408:	4621      	mov	r1, r4
 800840a:	4628      	mov	r0, r5
 800840c:	f000 f948 	bl	80086a0 <_fflush_r>
 8008410:	bb28      	cbnz	r0, 800845e <__swbuf_r+0x8e>
 8008412:	68a3      	ldr	r3, [r4, #8]
 8008414:	3001      	adds	r0, #1
 8008416:	3b01      	subs	r3, #1
 8008418:	60a3      	str	r3, [r4, #8]
 800841a:	6823      	ldr	r3, [r4, #0]
 800841c:	1c5a      	adds	r2, r3, #1
 800841e:	6022      	str	r2, [r4, #0]
 8008420:	701e      	strb	r6, [r3, #0]
 8008422:	6963      	ldr	r3, [r4, #20]
 8008424:	4283      	cmp	r3, r0
 8008426:	d004      	beq.n	8008432 <__swbuf_r+0x62>
 8008428:	89a3      	ldrh	r3, [r4, #12]
 800842a:	07db      	lsls	r3, r3, #31
 800842c:	d519      	bpl.n	8008462 <__swbuf_r+0x92>
 800842e:	2e0a      	cmp	r6, #10
 8008430:	d117      	bne.n	8008462 <__swbuf_r+0x92>
 8008432:	4621      	mov	r1, r4
 8008434:	4628      	mov	r0, r5
 8008436:	f000 f933 	bl	80086a0 <_fflush_r>
 800843a:	b190      	cbz	r0, 8008462 <__swbuf_r+0x92>
 800843c:	e00f      	b.n	800845e <__swbuf_r+0x8e>
 800843e:	4b0b      	ldr	r3, [pc, #44]	; (800846c <__swbuf_r+0x9c>)
 8008440:	429c      	cmp	r4, r3
 8008442:	d101      	bne.n	8008448 <__swbuf_r+0x78>
 8008444:	68ac      	ldr	r4, [r5, #8]
 8008446:	e7d0      	b.n	80083ea <__swbuf_r+0x1a>
 8008448:	4b09      	ldr	r3, [pc, #36]	; (8008470 <__swbuf_r+0xa0>)
 800844a:	429c      	cmp	r4, r3
 800844c:	bf08      	it	eq
 800844e:	68ec      	ldreq	r4, [r5, #12]
 8008450:	e7cb      	b.n	80083ea <__swbuf_r+0x1a>
 8008452:	4621      	mov	r1, r4
 8008454:	4628      	mov	r0, r5
 8008456:	f000 f81f 	bl	8008498 <__swsetup_r>
 800845a:	2800      	cmp	r0, #0
 800845c:	d0cc      	beq.n	80083f8 <__swbuf_r+0x28>
 800845e:	f04f 37ff 	mov.w	r7, #4294967295
 8008462:	4638      	mov	r0, r7
 8008464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008466:	bf00      	nop
 8008468:	08008a5c 	.word	0x08008a5c
 800846c:	08008a7c 	.word	0x08008a7c
 8008470:	08008a3c 	.word	0x08008a3c

08008474 <_write_r>:
 8008474:	b538      	push	{r3, r4, r5, lr}
 8008476:	4605      	mov	r5, r0
 8008478:	4608      	mov	r0, r1
 800847a:	4611      	mov	r1, r2
 800847c:	2200      	movs	r2, #0
 800847e:	4c05      	ldr	r4, [pc, #20]	; (8008494 <_write_r+0x20>)
 8008480:	6022      	str	r2, [r4, #0]
 8008482:	461a      	mov	r2, r3
 8008484:	f000 fa72 	bl	800896c <_write>
 8008488:	1c43      	adds	r3, r0, #1
 800848a:	d102      	bne.n	8008492 <_write_r+0x1e>
 800848c:	6823      	ldr	r3, [r4, #0]
 800848e:	b103      	cbz	r3, 8008492 <_write_r+0x1e>
 8008490:	602b      	str	r3, [r5, #0]
 8008492:	bd38      	pop	{r3, r4, r5, pc}
 8008494:	2000171c 	.word	0x2000171c

08008498 <__swsetup_r>:
 8008498:	4b32      	ldr	r3, [pc, #200]	; (8008564 <__swsetup_r+0xcc>)
 800849a:	b570      	push	{r4, r5, r6, lr}
 800849c:	681d      	ldr	r5, [r3, #0]
 800849e:	4606      	mov	r6, r0
 80084a0:	460c      	mov	r4, r1
 80084a2:	b125      	cbz	r5, 80084ae <__swsetup_r+0x16>
 80084a4:	69ab      	ldr	r3, [r5, #24]
 80084a6:	b913      	cbnz	r3, 80084ae <__swsetup_r+0x16>
 80084a8:	4628      	mov	r0, r5
 80084aa:	f7ff fb5d 	bl	8007b68 <__sinit>
 80084ae:	4b2e      	ldr	r3, [pc, #184]	; (8008568 <__swsetup_r+0xd0>)
 80084b0:	429c      	cmp	r4, r3
 80084b2:	d10f      	bne.n	80084d4 <__swsetup_r+0x3c>
 80084b4:	686c      	ldr	r4, [r5, #4]
 80084b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084ba:	b29a      	uxth	r2, r3
 80084bc:	0715      	lsls	r5, r2, #28
 80084be:	d42c      	bmi.n	800851a <__swsetup_r+0x82>
 80084c0:	06d0      	lsls	r0, r2, #27
 80084c2:	d411      	bmi.n	80084e8 <__swsetup_r+0x50>
 80084c4:	2209      	movs	r2, #9
 80084c6:	6032      	str	r2, [r6, #0]
 80084c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084cc:	81a3      	strh	r3, [r4, #12]
 80084ce:	f04f 30ff 	mov.w	r0, #4294967295
 80084d2:	e03e      	b.n	8008552 <__swsetup_r+0xba>
 80084d4:	4b25      	ldr	r3, [pc, #148]	; (800856c <__swsetup_r+0xd4>)
 80084d6:	429c      	cmp	r4, r3
 80084d8:	d101      	bne.n	80084de <__swsetup_r+0x46>
 80084da:	68ac      	ldr	r4, [r5, #8]
 80084dc:	e7eb      	b.n	80084b6 <__swsetup_r+0x1e>
 80084de:	4b24      	ldr	r3, [pc, #144]	; (8008570 <__swsetup_r+0xd8>)
 80084e0:	429c      	cmp	r4, r3
 80084e2:	bf08      	it	eq
 80084e4:	68ec      	ldreq	r4, [r5, #12]
 80084e6:	e7e6      	b.n	80084b6 <__swsetup_r+0x1e>
 80084e8:	0751      	lsls	r1, r2, #29
 80084ea:	d512      	bpl.n	8008512 <__swsetup_r+0x7a>
 80084ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084ee:	b141      	cbz	r1, 8008502 <__swsetup_r+0x6a>
 80084f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80084f4:	4299      	cmp	r1, r3
 80084f6:	d002      	beq.n	80084fe <__swsetup_r+0x66>
 80084f8:	4630      	mov	r0, r6
 80084fa:	f000 f981 	bl	8008800 <_free_r>
 80084fe:	2300      	movs	r3, #0
 8008500:	6363      	str	r3, [r4, #52]	; 0x34
 8008502:	89a3      	ldrh	r3, [r4, #12]
 8008504:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008508:	81a3      	strh	r3, [r4, #12]
 800850a:	2300      	movs	r3, #0
 800850c:	6063      	str	r3, [r4, #4]
 800850e:	6923      	ldr	r3, [r4, #16]
 8008510:	6023      	str	r3, [r4, #0]
 8008512:	89a3      	ldrh	r3, [r4, #12]
 8008514:	f043 0308 	orr.w	r3, r3, #8
 8008518:	81a3      	strh	r3, [r4, #12]
 800851a:	6923      	ldr	r3, [r4, #16]
 800851c:	b94b      	cbnz	r3, 8008532 <__swsetup_r+0x9a>
 800851e:	89a3      	ldrh	r3, [r4, #12]
 8008520:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008528:	d003      	beq.n	8008532 <__swsetup_r+0x9a>
 800852a:	4621      	mov	r1, r4
 800852c:	4630      	mov	r0, r6
 800852e:	f000 f917 	bl	8008760 <__smakebuf_r>
 8008532:	89a2      	ldrh	r2, [r4, #12]
 8008534:	f012 0301 	ands.w	r3, r2, #1
 8008538:	d00c      	beq.n	8008554 <__swsetup_r+0xbc>
 800853a:	2300      	movs	r3, #0
 800853c:	60a3      	str	r3, [r4, #8]
 800853e:	6963      	ldr	r3, [r4, #20]
 8008540:	425b      	negs	r3, r3
 8008542:	61a3      	str	r3, [r4, #24]
 8008544:	6923      	ldr	r3, [r4, #16]
 8008546:	b953      	cbnz	r3, 800855e <__swsetup_r+0xc6>
 8008548:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800854c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008550:	d1ba      	bne.n	80084c8 <__swsetup_r+0x30>
 8008552:	bd70      	pop	{r4, r5, r6, pc}
 8008554:	0792      	lsls	r2, r2, #30
 8008556:	bf58      	it	pl
 8008558:	6963      	ldrpl	r3, [r4, #20]
 800855a:	60a3      	str	r3, [r4, #8]
 800855c:	e7f2      	b.n	8008544 <__swsetup_r+0xac>
 800855e:	2000      	movs	r0, #0
 8008560:	e7f7      	b.n	8008552 <__swsetup_r+0xba>
 8008562:	bf00      	nop
 8008564:	2000018c 	.word	0x2000018c
 8008568:	08008a5c 	.word	0x08008a5c
 800856c:	08008a7c 	.word	0x08008a7c
 8008570:	08008a3c 	.word	0x08008a3c

08008574 <_close_r>:
 8008574:	b538      	push	{r3, r4, r5, lr}
 8008576:	2300      	movs	r3, #0
 8008578:	4c05      	ldr	r4, [pc, #20]	; (8008590 <_close_r+0x1c>)
 800857a:	4605      	mov	r5, r0
 800857c:	4608      	mov	r0, r1
 800857e:	6023      	str	r3, [r4, #0]
 8008580:	f000 f9be 	bl	8008900 <_close>
 8008584:	1c43      	adds	r3, r0, #1
 8008586:	d102      	bne.n	800858e <_close_r+0x1a>
 8008588:	6823      	ldr	r3, [r4, #0]
 800858a:	b103      	cbz	r3, 800858e <_close_r+0x1a>
 800858c:	602b      	str	r3, [r5, #0]
 800858e:	bd38      	pop	{r3, r4, r5, pc}
 8008590:	2000171c 	.word	0x2000171c

08008594 <__sflush_r>:
 8008594:	898a      	ldrh	r2, [r1, #12]
 8008596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800859a:	4605      	mov	r5, r0
 800859c:	0710      	lsls	r0, r2, #28
 800859e:	460c      	mov	r4, r1
 80085a0:	d458      	bmi.n	8008654 <__sflush_r+0xc0>
 80085a2:	684b      	ldr	r3, [r1, #4]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	dc05      	bgt.n	80085b4 <__sflush_r+0x20>
 80085a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	dc02      	bgt.n	80085b4 <__sflush_r+0x20>
 80085ae:	2000      	movs	r0, #0
 80085b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80085b6:	2e00      	cmp	r6, #0
 80085b8:	d0f9      	beq.n	80085ae <__sflush_r+0x1a>
 80085ba:	2300      	movs	r3, #0
 80085bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80085c0:	682f      	ldr	r7, [r5, #0]
 80085c2:	6a21      	ldr	r1, [r4, #32]
 80085c4:	602b      	str	r3, [r5, #0]
 80085c6:	d032      	beq.n	800862e <__sflush_r+0x9a>
 80085c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80085ca:	89a3      	ldrh	r3, [r4, #12]
 80085cc:	075a      	lsls	r2, r3, #29
 80085ce:	d505      	bpl.n	80085dc <__sflush_r+0x48>
 80085d0:	6863      	ldr	r3, [r4, #4]
 80085d2:	1ac0      	subs	r0, r0, r3
 80085d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80085d6:	b10b      	cbz	r3, 80085dc <__sflush_r+0x48>
 80085d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80085da:	1ac0      	subs	r0, r0, r3
 80085dc:	2300      	movs	r3, #0
 80085de:	4602      	mov	r2, r0
 80085e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80085e2:	6a21      	ldr	r1, [r4, #32]
 80085e4:	4628      	mov	r0, r5
 80085e6:	47b0      	blx	r6
 80085e8:	1c43      	adds	r3, r0, #1
 80085ea:	89a3      	ldrh	r3, [r4, #12]
 80085ec:	d106      	bne.n	80085fc <__sflush_r+0x68>
 80085ee:	6829      	ldr	r1, [r5, #0]
 80085f0:	291d      	cmp	r1, #29
 80085f2:	d848      	bhi.n	8008686 <__sflush_r+0xf2>
 80085f4:	4a29      	ldr	r2, [pc, #164]	; (800869c <__sflush_r+0x108>)
 80085f6:	40ca      	lsrs	r2, r1
 80085f8:	07d6      	lsls	r6, r2, #31
 80085fa:	d544      	bpl.n	8008686 <__sflush_r+0xf2>
 80085fc:	2200      	movs	r2, #0
 80085fe:	6062      	str	r2, [r4, #4]
 8008600:	6922      	ldr	r2, [r4, #16]
 8008602:	04d9      	lsls	r1, r3, #19
 8008604:	6022      	str	r2, [r4, #0]
 8008606:	d504      	bpl.n	8008612 <__sflush_r+0x7e>
 8008608:	1c42      	adds	r2, r0, #1
 800860a:	d101      	bne.n	8008610 <__sflush_r+0x7c>
 800860c:	682b      	ldr	r3, [r5, #0]
 800860e:	b903      	cbnz	r3, 8008612 <__sflush_r+0x7e>
 8008610:	6560      	str	r0, [r4, #84]	; 0x54
 8008612:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008614:	602f      	str	r7, [r5, #0]
 8008616:	2900      	cmp	r1, #0
 8008618:	d0c9      	beq.n	80085ae <__sflush_r+0x1a>
 800861a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800861e:	4299      	cmp	r1, r3
 8008620:	d002      	beq.n	8008628 <__sflush_r+0x94>
 8008622:	4628      	mov	r0, r5
 8008624:	f000 f8ec 	bl	8008800 <_free_r>
 8008628:	2000      	movs	r0, #0
 800862a:	6360      	str	r0, [r4, #52]	; 0x34
 800862c:	e7c0      	b.n	80085b0 <__sflush_r+0x1c>
 800862e:	2301      	movs	r3, #1
 8008630:	4628      	mov	r0, r5
 8008632:	47b0      	blx	r6
 8008634:	1c41      	adds	r1, r0, #1
 8008636:	d1c8      	bne.n	80085ca <__sflush_r+0x36>
 8008638:	682b      	ldr	r3, [r5, #0]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d0c5      	beq.n	80085ca <__sflush_r+0x36>
 800863e:	2b1d      	cmp	r3, #29
 8008640:	d001      	beq.n	8008646 <__sflush_r+0xb2>
 8008642:	2b16      	cmp	r3, #22
 8008644:	d101      	bne.n	800864a <__sflush_r+0xb6>
 8008646:	602f      	str	r7, [r5, #0]
 8008648:	e7b1      	b.n	80085ae <__sflush_r+0x1a>
 800864a:	89a3      	ldrh	r3, [r4, #12]
 800864c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008650:	81a3      	strh	r3, [r4, #12]
 8008652:	e7ad      	b.n	80085b0 <__sflush_r+0x1c>
 8008654:	690f      	ldr	r7, [r1, #16]
 8008656:	2f00      	cmp	r7, #0
 8008658:	d0a9      	beq.n	80085ae <__sflush_r+0x1a>
 800865a:	0793      	lsls	r3, r2, #30
 800865c:	bf18      	it	ne
 800865e:	2300      	movne	r3, #0
 8008660:	680e      	ldr	r6, [r1, #0]
 8008662:	bf08      	it	eq
 8008664:	694b      	ldreq	r3, [r1, #20]
 8008666:	eba6 0807 	sub.w	r8, r6, r7
 800866a:	600f      	str	r7, [r1, #0]
 800866c:	608b      	str	r3, [r1, #8]
 800866e:	f1b8 0f00 	cmp.w	r8, #0
 8008672:	dd9c      	ble.n	80085ae <__sflush_r+0x1a>
 8008674:	4643      	mov	r3, r8
 8008676:	463a      	mov	r2, r7
 8008678:	6a21      	ldr	r1, [r4, #32]
 800867a:	4628      	mov	r0, r5
 800867c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800867e:	47b0      	blx	r6
 8008680:	2800      	cmp	r0, #0
 8008682:	dc06      	bgt.n	8008692 <__sflush_r+0xfe>
 8008684:	89a3      	ldrh	r3, [r4, #12]
 8008686:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800868a:	81a3      	strh	r3, [r4, #12]
 800868c:	f04f 30ff 	mov.w	r0, #4294967295
 8008690:	e78e      	b.n	80085b0 <__sflush_r+0x1c>
 8008692:	4407      	add	r7, r0
 8008694:	eba8 0800 	sub.w	r8, r8, r0
 8008698:	e7e9      	b.n	800866e <__sflush_r+0xda>
 800869a:	bf00      	nop
 800869c:	20400001 	.word	0x20400001

080086a0 <_fflush_r>:
 80086a0:	b538      	push	{r3, r4, r5, lr}
 80086a2:	690b      	ldr	r3, [r1, #16]
 80086a4:	4605      	mov	r5, r0
 80086a6:	460c      	mov	r4, r1
 80086a8:	b1db      	cbz	r3, 80086e2 <_fflush_r+0x42>
 80086aa:	b118      	cbz	r0, 80086b4 <_fflush_r+0x14>
 80086ac:	6983      	ldr	r3, [r0, #24]
 80086ae:	b90b      	cbnz	r3, 80086b4 <_fflush_r+0x14>
 80086b0:	f7ff fa5a 	bl	8007b68 <__sinit>
 80086b4:	4b0c      	ldr	r3, [pc, #48]	; (80086e8 <_fflush_r+0x48>)
 80086b6:	429c      	cmp	r4, r3
 80086b8:	d109      	bne.n	80086ce <_fflush_r+0x2e>
 80086ba:	686c      	ldr	r4, [r5, #4]
 80086bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086c0:	b17b      	cbz	r3, 80086e2 <_fflush_r+0x42>
 80086c2:	4621      	mov	r1, r4
 80086c4:	4628      	mov	r0, r5
 80086c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086ca:	f7ff bf63 	b.w	8008594 <__sflush_r>
 80086ce:	4b07      	ldr	r3, [pc, #28]	; (80086ec <_fflush_r+0x4c>)
 80086d0:	429c      	cmp	r4, r3
 80086d2:	d101      	bne.n	80086d8 <_fflush_r+0x38>
 80086d4:	68ac      	ldr	r4, [r5, #8]
 80086d6:	e7f1      	b.n	80086bc <_fflush_r+0x1c>
 80086d8:	4b05      	ldr	r3, [pc, #20]	; (80086f0 <_fflush_r+0x50>)
 80086da:	429c      	cmp	r4, r3
 80086dc:	bf08      	it	eq
 80086de:	68ec      	ldreq	r4, [r5, #12]
 80086e0:	e7ec      	b.n	80086bc <_fflush_r+0x1c>
 80086e2:	2000      	movs	r0, #0
 80086e4:	bd38      	pop	{r3, r4, r5, pc}
 80086e6:	bf00      	nop
 80086e8:	08008a5c 	.word	0x08008a5c
 80086ec:	08008a7c 	.word	0x08008a7c
 80086f0:	08008a3c 	.word	0x08008a3c

080086f4 <_lseek_r>:
 80086f4:	b538      	push	{r3, r4, r5, lr}
 80086f6:	4605      	mov	r5, r0
 80086f8:	4608      	mov	r0, r1
 80086fa:	4611      	mov	r1, r2
 80086fc:	2200      	movs	r2, #0
 80086fe:	4c05      	ldr	r4, [pc, #20]	; (8008714 <_lseek_r+0x20>)
 8008700:	6022      	str	r2, [r4, #0]
 8008702:	461a      	mov	r2, r3
 8008704:	f000 f914 	bl	8008930 <_lseek>
 8008708:	1c43      	adds	r3, r0, #1
 800870a:	d102      	bne.n	8008712 <_lseek_r+0x1e>
 800870c:	6823      	ldr	r3, [r4, #0]
 800870e:	b103      	cbz	r3, 8008712 <_lseek_r+0x1e>
 8008710:	602b      	str	r3, [r5, #0]
 8008712:	bd38      	pop	{r3, r4, r5, pc}
 8008714:	2000171c 	.word	0x2000171c

08008718 <__swhatbuf_r>:
 8008718:	b570      	push	{r4, r5, r6, lr}
 800871a:	460e      	mov	r6, r1
 800871c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008720:	b096      	sub	sp, #88	; 0x58
 8008722:	2900      	cmp	r1, #0
 8008724:	4614      	mov	r4, r2
 8008726:	461d      	mov	r5, r3
 8008728:	da07      	bge.n	800873a <__swhatbuf_r+0x22>
 800872a:	2300      	movs	r3, #0
 800872c:	602b      	str	r3, [r5, #0]
 800872e:	89b3      	ldrh	r3, [r6, #12]
 8008730:	061a      	lsls	r2, r3, #24
 8008732:	d410      	bmi.n	8008756 <__swhatbuf_r+0x3e>
 8008734:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008738:	e00e      	b.n	8008758 <__swhatbuf_r+0x40>
 800873a:	466a      	mov	r2, sp
 800873c:	f000 f8be 	bl	80088bc <_fstat_r>
 8008740:	2800      	cmp	r0, #0
 8008742:	dbf2      	blt.n	800872a <__swhatbuf_r+0x12>
 8008744:	9a01      	ldr	r2, [sp, #4]
 8008746:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800874a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800874e:	425a      	negs	r2, r3
 8008750:	415a      	adcs	r2, r3
 8008752:	602a      	str	r2, [r5, #0]
 8008754:	e7ee      	b.n	8008734 <__swhatbuf_r+0x1c>
 8008756:	2340      	movs	r3, #64	; 0x40
 8008758:	2000      	movs	r0, #0
 800875a:	6023      	str	r3, [r4, #0]
 800875c:	b016      	add	sp, #88	; 0x58
 800875e:	bd70      	pop	{r4, r5, r6, pc}

08008760 <__smakebuf_r>:
 8008760:	898b      	ldrh	r3, [r1, #12]
 8008762:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008764:	079d      	lsls	r5, r3, #30
 8008766:	4606      	mov	r6, r0
 8008768:	460c      	mov	r4, r1
 800876a:	d507      	bpl.n	800877c <__smakebuf_r+0x1c>
 800876c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008770:	6023      	str	r3, [r4, #0]
 8008772:	6123      	str	r3, [r4, #16]
 8008774:	2301      	movs	r3, #1
 8008776:	6163      	str	r3, [r4, #20]
 8008778:	b002      	add	sp, #8
 800877a:	bd70      	pop	{r4, r5, r6, pc}
 800877c:	ab01      	add	r3, sp, #4
 800877e:	466a      	mov	r2, sp
 8008780:	f7ff ffca 	bl	8008718 <__swhatbuf_r>
 8008784:	9900      	ldr	r1, [sp, #0]
 8008786:	4605      	mov	r5, r0
 8008788:	4630      	mov	r0, r6
 800878a:	f7ff fa77 	bl	8007c7c <_malloc_r>
 800878e:	b948      	cbnz	r0, 80087a4 <__smakebuf_r+0x44>
 8008790:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008794:	059a      	lsls	r2, r3, #22
 8008796:	d4ef      	bmi.n	8008778 <__smakebuf_r+0x18>
 8008798:	f023 0303 	bic.w	r3, r3, #3
 800879c:	f043 0302 	orr.w	r3, r3, #2
 80087a0:	81a3      	strh	r3, [r4, #12]
 80087a2:	e7e3      	b.n	800876c <__smakebuf_r+0xc>
 80087a4:	4b0d      	ldr	r3, [pc, #52]	; (80087dc <__smakebuf_r+0x7c>)
 80087a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80087a8:	89a3      	ldrh	r3, [r4, #12]
 80087aa:	6020      	str	r0, [r4, #0]
 80087ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087b0:	81a3      	strh	r3, [r4, #12]
 80087b2:	9b00      	ldr	r3, [sp, #0]
 80087b4:	6120      	str	r0, [r4, #16]
 80087b6:	6163      	str	r3, [r4, #20]
 80087b8:	9b01      	ldr	r3, [sp, #4]
 80087ba:	b15b      	cbz	r3, 80087d4 <__smakebuf_r+0x74>
 80087bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087c0:	4630      	mov	r0, r6
 80087c2:	f000 f88d 	bl	80088e0 <_isatty_r>
 80087c6:	b128      	cbz	r0, 80087d4 <__smakebuf_r+0x74>
 80087c8:	89a3      	ldrh	r3, [r4, #12]
 80087ca:	f023 0303 	bic.w	r3, r3, #3
 80087ce:	f043 0301 	orr.w	r3, r3, #1
 80087d2:	81a3      	strh	r3, [r4, #12]
 80087d4:	89a3      	ldrh	r3, [r4, #12]
 80087d6:	431d      	orrs	r5, r3
 80087d8:	81a5      	strh	r5, [r4, #12]
 80087da:	e7cd      	b.n	8008778 <__smakebuf_r+0x18>
 80087dc:	08007b31 	.word	0x08007b31

080087e0 <memchr>:
 80087e0:	b510      	push	{r4, lr}
 80087e2:	b2c9      	uxtb	r1, r1
 80087e4:	4402      	add	r2, r0
 80087e6:	4290      	cmp	r0, r2
 80087e8:	4603      	mov	r3, r0
 80087ea:	d101      	bne.n	80087f0 <memchr+0x10>
 80087ec:	2300      	movs	r3, #0
 80087ee:	e003      	b.n	80087f8 <memchr+0x18>
 80087f0:	781c      	ldrb	r4, [r3, #0]
 80087f2:	3001      	adds	r0, #1
 80087f4:	428c      	cmp	r4, r1
 80087f6:	d1f6      	bne.n	80087e6 <memchr+0x6>
 80087f8:	4618      	mov	r0, r3
 80087fa:	bd10      	pop	{r4, pc}

080087fc <__malloc_lock>:
 80087fc:	4770      	bx	lr

080087fe <__malloc_unlock>:
 80087fe:	4770      	bx	lr

08008800 <_free_r>:
 8008800:	b538      	push	{r3, r4, r5, lr}
 8008802:	4605      	mov	r5, r0
 8008804:	2900      	cmp	r1, #0
 8008806:	d043      	beq.n	8008890 <_free_r+0x90>
 8008808:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800880c:	1f0c      	subs	r4, r1, #4
 800880e:	2b00      	cmp	r3, #0
 8008810:	bfb8      	it	lt
 8008812:	18e4      	addlt	r4, r4, r3
 8008814:	f7ff fff2 	bl	80087fc <__malloc_lock>
 8008818:	4a1e      	ldr	r2, [pc, #120]	; (8008894 <_free_r+0x94>)
 800881a:	6813      	ldr	r3, [r2, #0]
 800881c:	4610      	mov	r0, r2
 800881e:	b933      	cbnz	r3, 800882e <_free_r+0x2e>
 8008820:	6063      	str	r3, [r4, #4]
 8008822:	6014      	str	r4, [r2, #0]
 8008824:	4628      	mov	r0, r5
 8008826:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800882a:	f7ff bfe8 	b.w	80087fe <__malloc_unlock>
 800882e:	42a3      	cmp	r3, r4
 8008830:	d90b      	bls.n	800884a <_free_r+0x4a>
 8008832:	6821      	ldr	r1, [r4, #0]
 8008834:	1862      	adds	r2, r4, r1
 8008836:	4293      	cmp	r3, r2
 8008838:	bf01      	itttt	eq
 800883a:	681a      	ldreq	r2, [r3, #0]
 800883c:	685b      	ldreq	r3, [r3, #4]
 800883e:	1852      	addeq	r2, r2, r1
 8008840:	6022      	streq	r2, [r4, #0]
 8008842:	6063      	str	r3, [r4, #4]
 8008844:	6004      	str	r4, [r0, #0]
 8008846:	e7ed      	b.n	8008824 <_free_r+0x24>
 8008848:	4613      	mov	r3, r2
 800884a:	685a      	ldr	r2, [r3, #4]
 800884c:	b10a      	cbz	r2, 8008852 <_free_r+0x52>
 800884e:	42a2      	cmp	r2, r4
 8008850:	d9fa      	bls.n	8008848 <_free_r+0x48>
 8008852:	6819      	ldr	r1, [r3, #0]
 8008854:	1858      	adds	r0, r3, r1
 8008856:	42a0      	cmp	r0, r4
 8008858:	d10b      	bne.n	8008872 <_free_r+0x72>
 800885a:	6820      	ldr	r0, [r4, #0]
 800885c:	4401      	add	r1, r0
 800885e:	1858      	adds	r0, r3, r1
 8008860:	4282      	cmp	r2, r0
 8008862:	6019      	str	r1, [r3, #0]
 8008864:	d1de      	bne.n	8008824 <_free_r+0x24>
 8008866:	6810      	ldr	r0, [r2, #0]
 8008868:	6852      	ldr	r2, [r2, #4]
 800886a:	4401      	add	r1, r0
 800886c:	6019      	str	r1, [r3, #0]
 800886e:	605a      	str	r2, [r3, #4]
 8008870:	e7d8      	b.n	8008824 <_free_r+0x24>
 8008872:	d902      	bls.n	800887a <_free_r+0x7a>
 8008874:	230c      	movs	r3, #12
 8008876:	602b      	str	r3, [r5, #0]
 8008878:	e7d4      	b.n	8008824 <_free_r+0x24>
 800887a:	6820      	ldr	r0, [r4, #0]
 800887c:	1821      	adds	r1, r4, r0
 800887e:	428a      	cmp	r2, r1
 8008880:	bf01      	itttt	eq
 8008882:	6811      	ldreq	r1, [r2, #0]
 8008884:	6852      	ldreq	r2, [r2, #4]
 8008886:	1809      	addeq	r1, r1, r0
 8008888:	6021      	streq	r1, [r4, #0]
 800888a:	6062      	str	r2, [r4, #4]
 800888c:	605c      	str	r4, [r3, #4]
 800888e:	e7c9      	b.n	8008824 <_free_r+0x24>
 8008890:	bd38      	pop	{r3, r4, r5, pc}
 8008892:	bf00      	nop
 8008894:	20000700 	.word	0x20000700

08008898 <_read_r>:
 8008898:	b538      	push	{r3, r4, r5, lr}
 800889a:	4605      	mov	r5, r0
 800889c:	4608      	mov	r0, r1
 800889e:	4611      	mov	r1, r2
 80088a0:	2200      	movs	r2, #0
 80088a2:	4c05      	ldr	r4, [pc, #20]	; (80088b8 <_read_r+0x20>)
 80088a4:	6022      	str	r2, [r4, #0]
 80088a6:	461a      	mov	r2, r3
 80088a8:	f000 f84a 	bl	8008940 <_read>
 80088ac:	1c43      	adds	r3, r0, #1
 80088ae:	d102      	bne.n	80088b6 <_read_r+0x1e>
 80088b0:	6823      	ldr	r3, [r4, #0]
 80088b2:	b103      	cbz	r3, 80088b6 <_read_r+0x1e>
 80088b4:	602b      	str	r3, [r5, #0]
 80088b6:	bd38      	pop	{r3, r4, r5, pc}
 80088b8:	2000171c 	.word	0x2000171c

080088bc <_fstat_r>:
 80088bc:	b538      	push	{r3, r4, r5, lr}
 80088be:	2300      	movs	r3, #0
 80088c0:	4c06      	ldr	r4, [pc, #24]	; (80088dc <_fstat_r+0x20>)
 80088c2:	4605      	mov	r5, r0
 80088c4:	4608      	mov	r0, r1
 80088c6:	4611      	mov	r1, r2
 80088c8:	6023      	str	r3, [r4, #0]
 80088ca:	f000 f821 	bl	8008910 <_fstat>
 80088ce:	1c43      	adds	r3, r0, #1
 80088d0:	d102      	bne.n	80088d8 <_fstat_r+0x1c>
 80088d2:	6823      	ldr	r3, [r4, #0]
 80088d4:	b103      	cbz	r3, 80088d8 <_fstat_r+0x1c>
 80088d6:	602b      	str	r3, [r5, #0]
 80088d8:	bd38      	pop	{r3, r4, r5, pc}
 80088da:	bf00      	nop
 80088dc:	2000171c 	.word	0x2000171c

080088e0 <_isatty_r>:
 80088e0:	b538      	push	{r3, r4, r5, lr}
 80088e2:	2300      	movs	r3, #0
 80088e4:	4c05      	ldr	r4, [pc, #20]	; (80088fc <_isatty_r+0x1c>)
 80088e6:	4605      	mov	r5, r0
 80088e8:	4608      	mov	r0, r1
 80088ea:	6023      	str	r3, [r4, #0]
 80088ec:	f000 f818 	bl	8008920 <_isatty>
 80088f0:	1c43      	adds	r3, r0, #1
 80088f2:	d102      	bne.n	80088fa <_isatty_r+0x1a>
 80088f4:	6823      	ldr	r3, [r4, #0]
 80088f6:	b103      	cbz	r3, 80088fa <_isatty_r+0x1a>
 80088f8:	602b      	str	r3, [r5, #0]
 80088fa:	bd38      	pop	{r3, r4, r5, pc}
 80088fc:	2000171c 	.word	0x2000171c

08008900 <_close>:
 8008900:	2258      	movs	r2, #88	; 0x58
 8008902:	4b02      	ldr	r3, [pc, #8]	; (800890c <_close+0xc>)
 8008904:	f04f 30ff 	mov.w	r0, #4294967295
 8008908:	601a      	str	r2, [r3, #0]
 800890a:	4770      	bx	lr
 800890c:	2000171c 	.word	0x2000171c

08008910 <_fstat>:
 8008910:	2258      	movs	r2, #88	; 0x58
 8008912:	4b02      	ldr	r3, [pc, #8]	; (800891c <_fstat+0xc>)
 8008914:	f04f 30ff 	mov.w	r0, #4294967295
 8008918:	601a      	str	r2, [r3, #0]
 800891a:	4770      	bx	lr
 800891c:	2000171c 	.word	0x2000171c

08008920 <_isatty>:
 8008920:	2258      	movs	r2, #88	; 0x58
 8008922:	4b02      	ldr	r3, [pc, #8]	; (800892c <_isatty+0xc>)
 8008924:	2000      	movs	r0, #0
 8008926:	601a      	str	r2, [r3, #0]
 8008928:	4770      	bx	lr
 800892a:	bf00      	nop
 800892c:	2000171c 	.word	0x2000171c

08008930 <_lseek>:
 8008930:	2258      	movs	r2, #88	; 0x58
 8008932:	4b02      	ldr	r3, [pc, #8]	; (800893c <_lseek+0xc>)
 8008934:	f04f 30ff 	mov.w	r0, #4294967295
 8008938:	601a      	str	r2, [r3, #0]
 800893a:	4770      	bx	lr
 800893c:	2000171c 	.word	0x2000171c

08008940 <_read>:
 8008940:	2258      	movs	r2, #88	; 0x58
 8008942:	4b02      	ldr	r3, [pc, #8]	; (800894c <_read+0xc>)
 8008944:	f04f 30ff 	mov.w	r0, #4294967295
 8008948:	601a      	str	r2, [r3, #0]
 800894a:	4770      	bx	lr
 800894c:	2000171c 	.word	0x2000171c

08008950 <_sbrk>:
 8008950:	4b04      	ldr	r3, [pc, #16]	; (8008964 <_sbrk+0x14>)
 8008952:	4602      	mov	r2, r0
 8008954:	6819      	ldr	r1, [r3, #0]
 8008956:	b909      	cbnz	r1, 800895c <_sbrk+0xc>
 8008958:	4903      	ldr	r1, [pc, #12]	; (8008968 <_sbrk+0x18>)
 800895a:	6019      	str	r1, [r3, #0]
 800895c:	6818      	ldr	r0, [r3, #0]
 800895e:	4402      	add	r2, r0
 8008960:	601a      	str	r2, [r3, #0]
 8008962:	4770      	bx	lr
 8008964:	20000708 	.word	0x20000708
 8008968:	20001720 	.word	0x20001720

0800896c <_write>:
 800896c:	2258      	movs	r2, #88	; 0x58
 800896e:	4b02      	ldr	r3, [pc, #8]	; (8008978 <_write+0xc>)
 8008970:	f04f 30ff 	mov.w	r0, #4294967295
 8008974:	601a      	str	r2, [r3, #0]
 8008976:	4770      	bx	lr
 8008978:	2000171c 	.word	0x2000171c

0800897c <_init>:
 800897c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800897e:	bf00      	nop
 8008980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008982:	bc08      	pop	{r3}
 8008984:	469e      	mov	lr, r3
 8008986:	4770      	bx	lr

08008988 <_fini>:
 8008988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800898a:	bf00      	nop
 800898c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800898e:	bc08      	pop	{r3}
 8008990:	469e      	mov	lr, r3
 8008992:	4770      	bx	lr


iSTM32DDSLite.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000960c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08009718  08009718  00019718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800984c  0800984c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800984c  0800984c  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800984c  0800984c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800984c  0800984c  0001984c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009850  08009850  00019850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009854  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015a0  200001e4  08009a38  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001784  08009a38  00021784  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001759f  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003546  00000000  00000000  000377ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001080  00000000  00000000  0003acf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f08  00000000  00000000  0003bd78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001adce  00000000  00000000  0003cc80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014087  00000000  00000000  00057a4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d592  00000000  00000000  0006bad5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f9067  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c84  00000000  00000000  000f90bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000009c  00000000  00000000  000fdd40  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000014d  00000000  00000000  000fdddc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e4 	.word	0x200001e4
 8000128:	00000000 	.word	0x00000000
 800012c:	08009700 	.word	0x08009700

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e8 	.word	0x200001e8
 8000148:	08009700 	.word	0x08009700

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fd35 	bl	8000bc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f905 	bl	8000364 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 faab 	bl	80006b4 <MX_GPIO_Init>
  MX_TIM1_Init();
 800015e:	f000 f95b 	bl	8000418 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000162:	f000 f9b9 	bl	80004d8 <MX_TIM2_Init>
  MX_DMA_Init();
 8000166:	f000 fa2f 	bl	80005c8 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 800016a:	f007 fd7d 	bl	8007c68 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  /*Square wave generation and put it into aOutputWave */
  // as default wave on power up
  for (int i = 0; i < BUFFER_SIZE; ++i)
 800016e:	2300      	movs	r3, #0
 8000170:	617b      	str	r3, [r7, #20]
 8000172:	e011      	b.n	8000198 <main+0x4c>
  {
	  if (i < BUFFER_SIZE/2) aOutputWave[i]=0;
 8000174:	697b      	ldr	r3, [r7, #20]
 8000176:	2bb3      	cmp	r3, #179	; 0xb3
 8000178:	dc05      	bgt.n	8000186 <main+0x3a>
 800017a:	4a6c      	ldr	r2, [pc, #432]	; (800032c <main+0x1e0>)
 800017c:	697b      	ldr	r3, [r7, #20]
 800017e:	2100      	movs	r1, #0
 8000180:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000184:	e005      	b.n	8000192 <main+0x46>
	  else aOutputWave[i]=0xFFFF;
 8000186:	4a69      	ldr	r2, [pc, #420]	; (800032c <main+0x1e0>)
 8000188:	697b      	ldr	r3, [r7, #20]
 800018a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800018e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0; i < BUFFER_SIZE; ++i)
 8000192:	697b      	ldr	r3, [r7, #20]
 8000194:	3301      	adds	r3, #1
 8000196:	617b      	str	r3, [r7, #20]
 8000198:	697b      	ldr	r3, [r7, #20]
 800019a:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800019e:	dbe9      	blt.n	8000174 <main+0x28>
  }
// Hardware LED1 flash, to not use SYS_CLK in future
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80001a0:	2100      	movs	r1, #0
 80001a2:	4863      	ldr	r0, [pc, #396]	; (8000330 <main+0x1e4>)
 80001a4:	f003 fbfc 	bl	80039a0 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80001a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001ac:	4861      	ldr	r0, [pc, #388]	; (8000334 <main+0x1e8>)
 80001ae:	f001 fae3 	bl	8001778 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80001b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001b6:	f000 fd65 	bl	8000c84 <HAL_Delay>
	  //  uint8_t HiMsg[] = "hello\r\n";
	    if(retWave==1)
 80001ba:	4b5f      	ldr	r3, [pc, #380]	; (8000338 <main+0x1ec>)
 80001bc:	781b      	ldrb	r3, [r3, #0]
 80001be:	2b01      	cmp	r3, #1
 80001c0:	f040 80af 	bne.w	8000322 <main+0x1d6>
	    {
	    	// b[i] = (a[j] << 8) | a[j + 1];
	        // set point for Frequency
	    	uFrqSP = (aConfig[0] << 8) | aConfig[1];
 80001c4:	4b5d      	ldr	r3, [pc, #372]	; (800033c <main+0x1f0>)
 80001c6:	781b      	ldrb	r3, [r3, #0]
 80001c8:	021b      	lsls	r3, r3, #8
 80001ca:	b21a      	sxth	r2, r3
 80001cc:	4b5b      	ldr	r3, [pc, #364]	; (800033c <main+0x1f0>)
 80001ce:	785b      	ldrb	r3, [r3, #1]
 80001d0:	b21b      	sxth	r3, r3
 80001d2:	4313      	orrs	r3, r2
 80001d4:	b21b      	sxth	r3, r3
 80001d6:	b29a      	uxth	r2, r3
 80001d8:	4b59      	ldr	r3, [pc, #356]	; (8000340 <main+0x1f4>)
 80001da:	801a      	strh	r2, [r3, #0]
	        // set point for Amplitude
	    	VppSP = (aConfig[2] << 8) | aConfig[3];
 80001dc:	4b57      	ldr	r3, [pc, #348]	; (800033c <main+0x1f0>)
 80001de:	789b      	ldrb	r3, [r3, #2]
 80001e0:	021b      	lsls	r3, r3, #8
 80001e2:	b21a      	sxth	r2, r3
 80001e4:	4b55      	ldr	r3, [pc, #340]	; (800033c <main+0x1f0>)
 80001e6:	78db      	ldrb	r3, [r3, #3]
 80001e8:	b21b      	sxth	r3, r3
 80001ea:	4313      	orrs	r3, r2
 80001ec:	b21b      	sxth	r3, r3
 80001ee:	b29a      	uxth	r2, r3
 80001f0:	4b54      	ldr	r3, [pc, #336]	; (8000344 <main+0x1f8>)
 80001f2:	801a      	strh	r2, [r3, #0]
	        // set point for Offset
	    	uOffsSP = aConfig[4];
 80001f4:	4b51      	ldr	r3, [pc, #324]	; (800033c <main+0x1f0>)
 80001f6:	791a      	ldrb	r2, [r3, #4]
 80001f8:	4b53      	ldr	r3, [pc, #332]	; (8000348 <main+0x1fc>)
 80001fa:	701a      	strb	r2, [r3, #0]
	        // set point for PWM on SQUARE Wave
	    	uPwmSP = aConfig[5];
 80001fc:	4b4f      	ldr	r3, [pc, #316]	; (800033c <main+0x1f0>)
 80001fe:	795a      	ldrb	r2, [r3, #5]
 8000200:	4b52      	ldr	r3, [pc, #328]	; (800034c <main+0x200>)
 8000202:	701a      	strb	r2, [r3, #0]
	        // Samples per wave
	    	if (eSPW != aConfig[6])
 8000204:	4b4d      	ldr	r3, [pc, #308]	; (800033c <main+0x1f0>)
 8000206:	799a      	ldrb	r2, [r3, #6]
 8000208:	4b51      	ldr	r3, [pc, #324]	; (8000350 <main+0x204>)
 800020a:	781b      	ldrb	r3, [r3, #0]
 800020c:	429a      	cmp	r2, r3
 800020e:	d078      	beq.n	8000302 <main+0x1b6>
	    	{
	    		uint32_t BufLnght;
	    		HAL_DMA_Abort_IT(htim1.hdma[TIM_DMA_ID_UPDATE]);
 8000210:	4b50      	ldr	r3, [pc, #320]	; (8000354 <main+0x208>)
 8000212:	6a1b      	ldr	r3, [r3, #32]
 8000214:	4618      	mov	r0, r3
 8000216:	f000 ff21 	bl	800105c <HAL_DMA_Abort_IT>
	    		eSPW = aConfig[6];
 800021a:	4b48      	ldr	r3, [pc, #288]	; (800033c <main+0x1f0>)
 800021c:	799a      	ldrb	r2, [r3, #6]
 800021e:	4b4c      	ldr	r3, [pc, #304]	; (8000350 <main+0x204>)
 8000220:	701a      	strb	r2, [r3, #0]
	    		if (eSPW == SPW360) BufLnght = 360;
 8000222:	4b4b      	ldr	r3, [pc, #300]	; (8000350 <main+0x204>)
 8000224:	781b      	ldrb	r3, [r3, #0]
 8000226:	2b00      	cmp	r3, #0
 8000228:	d102      	bne.n	8000230 <main+0xe4>
 800022a:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800022e:	613b      	str	r3, [r7, #16]

	    		if (eSPW == SPW180)
 8000230:	4b47      	ldr	r3, [pc, #284]	; (8000350 <main+0x204>)
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	2b01      	cmp	r3, #1
 8000236:	d113      	bne.n	8000260 <main+0x114>
	    		{
	    			for(int i =0;i<180; ++i)
 8000238:	2300      	movs	r3, #0
 800023a:	60fb      	str	r3, [r7, #12]
 800023c:	e00b      	b.n	8000256 <main+0x10a>
	    				aOutputWave[i] = aOutputWave[2*i];
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	005b      	lsls	r3, r3, #1
 8000242:	4a3a      	ldr	r2, [pc, #232]	; (800032c <main+0x1e0>)
 8000244:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000248:	4a38      	ldr	r2, [pc, #224]	; (800032c <main+0x1e0>)
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	    			for(int i =0;i<180; ++i)
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	3301      	adds	r3, #1
 8000254:	60fb      	str	r3, [r7, #12]
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	2bb3      	cmp	r3, #179	; 0xb3
 800025a:	ddf0      	ble.n	800023e <main+0xf2>
	    			BufLnght = 180;
 800025c:	23b4      	movs	r3, #180	; 0xb4
 800025e:	613b      	str	r3, [r7, #16]
	    		}

	    		if (eSPW == SPW90)
 8000260:	4b3b      	ldr	r3, [pc, #236]	; (8000350 <main+0x204>)
 8000262:	781b      	ldrb	r3, [r3, #0]
 8000264:	2b02      	cmp	r3, #2
 8000266:	d113      	bne.n	8000290 <main+0x144>
	    		{
	    			 for(int i =0;i<90; ++i)
 8000268:	2300      	movs	r3, #0
 800026a:	60bb      	str	r3, [r7, #8]
 800026c:	e00b      	b.n	8000286 <main+0x13a>
	    			    aOutputWave[i] = aOutputWave[4*i];
 800026e:	68bb      	ldr	r3, [r7, #8]
 8000270:	009b      	lsls	r3, r3, #2
 8000272:	4a2e      	ldr	r2, [pc, #184]	; (800032c <main+0x1e0>)
 8000274:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000278:	4a2c      	ldr	r2, [pc, #176]	; (800032c <main+0x1e0>)
 800027a:	68bb      	ldr	r3, [r7, #8]
 800027c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	    			 for(int i =0;i<90; ++i)
 8000280:	68bb      	ldr	r3, [r7, #8]
 8000282:	3301      	adds	r3, #1
 8000284:	60bb      	str	r3, [r7, #8]
 8000286:	68bb      	ldr	r3, [r7, #8]
 8000288:	2b59      	cmp	r3, #89	; 0x59
 800028a:	ddf0      	ble.n	800026e <main+0x122>
	    			 BufLnght = 90;
 800028c:	235a      	movs	r3, #90	; 0x5a
 800028e:	613b      	str	r3, [r7, #16]
	    		}

	    		if (eSPW == SPW45)
 8000290:	4b2f      	ldr	r3, [pc, #188]	; (8000350 <main+0x204>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	2b03      	cmp	r3, #3
 8000296:	d113      	bne.n	80002c0 <main+0x174>
	    		{
	    			 for(int i =0;i<45; ++i)
 8000298:	2300      	movs	r3, #0
 800029a:	607b      	str	r3, [r7, #4]
 800029c:	e00b      	b.n	80002b6 <main+0x16a>
	    			    aOutputWave[i] = aOutputWave[8*i];
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	00db      	lsls	r3, r3, #3
 80002a2:	4a22      	ldr	r2, [pc, #136]	; (800032c <main+0x1e0>)
 80002a4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80002a8:	4a20      	ldr	r2, [pc, #128]	; (800032c <main+0x1e0>)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	    			 for(int i =0;i<45; ++i)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	3301      	adds	r3, #1
 80002b4:	607b      	str	r3, [r7, #4]
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	2b2c      	cmp	r3, #44	; 0x2c
 80002ba:	ddf0      	ble.n	800029e <main+0x152>
	    			 BufLnght = 45;
 80002bc:	232d      	movs	r3, #45	; 0x2d
 80002be:	613b      	str	r3, [r7, #16]
	    		}

	    		if (eSPW == SPW24)
 80002c0:	4b23      	ldr	r3, [pc, #140]	; (8000350 <main+0x204>)
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	2b04      	cmp	r3, #4
 80002c6:	d115      	bne.n	80002f4 <main+0x1a8>
	    		{
	    			 for(int i =0;i<24; ++i)
 80002c8:	2300      	movs	r3, #0
 80002ca:	603b      	str	r3, [r7, #0]
 80002cc:	e00d      	b.n	80002ea <main+0x19e>
	    			    aOutputWave[i] = aOutputWave[15*i];
 80002ce:	683a      	ldr	r2, [r7, #0]
 80002d0:	4613      	mov	r3, r2
 80002d2:	011b      	lsls	r3, r3, #4
 80002d4:	1a9b      	subs	r3, r3, r2
 80002d6:	4a15      	ldr	r2, [pc, #84]	; (800032c <main+0x1e0>)
 80002d8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80002dc:	4a13      	ldr	r2, [pc, #76]	; (800032c <main+0x1e0>)
 80002de:	683b      	ldr	r3, [r7, #0]
 80002e0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	    			 for(int i =0;i<24; ++i)
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	3301      	adds	r3, #1
 80002e8:	603b      	str	r3, [r7, #0]
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	2b17      	cmp	r3, #23
 80002ee:	ddee      	ble.n	80002ce <main+0x182>
	    			 BufLnght = 24;
 80002f0:	2318      	movs	r3, #24
 80002f2:	613b      	str	r3, [r7, #16]
	    		}

	    		HAL_DMA_Start_IT(htim1.hdma[TIM_DMA_ID_UPDATE],(uint32_t)&aOutputWave,
 80002f4:	4b17      	ldr	r3, [pc, #92]	; (8000354 <main+0x208>)
 80002f6:	6a18      	ldr	r0, [r3, #32]
 80002f8:	490c      	ldr	r1, [pc, #48]	; (800032c <main+0x1e0>)
 80002fa:	693b      	ldr	r3, [r7, #16]
 80002fc:	4a16      	ldr	r2, [pc, #88]	; (8000358 <main+0x20c>)
 80002fe:	f000 fe4d 	bl	8000f9c <HAL_DMA_Start_IT>
	    		  		(uint32_t)&GPIOB->ODR, BufLnght);

	    	}
	        // Amplification
	    	eAmpPow = aConfig[7];
 8000302:	4b0e      	ldr	r3, [pc, #56]	; (800033c <main+0x1f0>)
 8000304:	79da      	ldrb	r2, [r3, #7]
 8000306:	4b15      	ldr	r3, [pc, #84]	; (800035c <main+0x210>)
 8000308:	701a      	strb	r2, [r3, #0]

	    	TIM1->ARR = uFrqSP;
 800030a:	4b0d      	ldr	r3, [pc, #52]	; (8000340 <main+0x1f4>)
 800030c:	881a      	ldrh	r2, [r3, #0]
 800030e:	4b14      	ldr	r3, [pc, #80]	; (8000360 <main+0x214>)
 8000310:	62da      	str	r2, [r3, #44]	; 0x2c
	    	//htim1.Init.Period = uFrqSP;
//	    	CDC_Transmit_FS(HiMsg, sizeof(HiMsg));
	    	CDC_Transmit_FS((uint8_t*)aOutputWave, 720);
 8000312:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8000316:	4805      	ldr	r0, [pc, #20]	; (800032c <main+0x1e0>)
 8000318:	f007 fdee 	bl	8007ef8 <CDC_Transmit_FS>
	    	retWave =0;
 800031c:	4b06      	ldr	r3, [pc, #24]	; (8000338 <main+0x1ec>)
 800031e:	2200      	movs	r2, #0
 8000320:	701a      	strb	r2, [r3, #0]
	    }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_Delay(1000);
 8000322:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000326:	f000 fcad 	bl	8000c84 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800032a:	e73d      	b.n	80001a8 <main+0x5c>
 800032c:	20000204 	.word	0x20000204
 8000330:	20000798 	.word	0x20000798
 8000334:	40011000 	.word	0x40011000
 8000338:	200004d4 	.word	0x200004d4
 800033c:	20000aac 	.word	0x20000aac
 8000340:	200007e0 	.word	0x200007e0
 8000344:	20000704 	.word	0x20000704
 8000348:	200007e2 	.word	0x200007e2
 800034c:	20000000 	.word	0x20000000
 8000350:	20000200 	.word	0x20000200
 8000354:	20000708 	.word	0x20000708
 8000358:	40010c0c 	.word	0x40010c0c
 800035c:	20000750 	.word	0x20000750
 8000360:	40012c00 	.word	0x40012c00

08000364 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b094      	sub	sp, #80	; 0x50
 8000368:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800036a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800036e:	2228      	movs	r2, #40	; 0x28
 8000370:	2100      	movs	r1, #0
 8000372:	4618      	mov	r0, r3
 8000374:	f008 f9c2 	bl	80086fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000378:	f107 0314 	add.w	r3, r7, #20
 800037c:	2200      	movs	r2, #0
 800037e:	601a      	str	r2, [r3, #0]
 8000380:	605a      	str	r2, [r3, #4]
 8000382:	609a      	str	r2, [r3, #8]
 8000384:	60da      	str	r2, [r3, #12]
 8000386:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000388:	1d3b      	adds	r3, r7, #4
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000394:	2301      	movs	r3, #1
 8000396:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000398:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800039c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800039e:	2300      	movs	r3, #0
 80003a0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003a2:	2301      	movs	r3, #1
 80003a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003a6:	2302      	movs	r3, #2
 80003a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003b0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003ba:	4618      	mov	r0, r3
 80003bc:	f002 fdaa 	bl	8002f14 <HAL_RCC_OscConfig>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <SystemClock_Config+0x66>
  {
    Error_Handler();
 80003c6:	f000 fa9d 	bl	8000904 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ca:	230f      	movs	r3, #15
 80003cc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ce:	2302      	movs	r3, #2
 80003d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d2:	2300      	movs	r3, #0
 80003d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003da:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003dc:	2300      	movs	r3, #0
 80003de:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003e0:	f107 0314 	add.w	r3, r7, #20
 80003e4:	2102      	movs	r1, #2
 80003e6:	4618      	mov	r0, r3
 80003e8:	f003 f814 	bl	8003414 <HAL_RCC_ClockConfig>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80003f2:	f000 fa87 	bl	8000904 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80003f6:	2310      	movs	r3, #16
 80003f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80003fa:	2300      	movs	r3, #0
 80003fc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	4618      	mov	r0, r3
 8000402:	f003 f96f 	bl	80036e4 <HAL_RCCEx_PeriphCLKConfig>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800040c:	f000 fa7a 	bl	8000904 <Error_Handler>
  }
}
 8000410:	bf00      	nop
 8000412:	3750      	adds	r7, #80	; 0x50
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}

08000418 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b088      	sub	sp, #32
 800041c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800041e:	f107 0310 	add.w	r3, r7, #16
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
 8000426:	605a      	str	r2, [r3, #4]
 8000428:	609a      	str	r2, [r3, #8]
 800042a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800042c:	f107 0308 	add.w	r3, r7, #8
 8000430:	2200      	movs	r2, #0
 8000432:	601a      	str	r2, [r3, #0]
 8000434:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */
	__HAL_RCC_TIM1_CLK_ENABLE();
 8000436:	4b25      	ldr	r3, [pc, #148]	; (80004cc <MX_TIM1_Init+0xb4>)
 8000438:	699b      	ldr	r3, [r3, #24]
 800043a:	4a24      	ldr	r2, [pc, #144]	; (80004cc <MX_TIM1_Init+0xb4>)
 800043c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000440:	6193      	str	r3, [r2, #24]
 8000442:	4b22      	ldr	r3, [pc, #136]	; (80004cc <MX_TIM1_Init+0xb4>)
 8000444:	699b      	ldr	r3, [r3, #24]
 8000446:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800044a:	607b      	str	r3, [r7, #4]
 800044c:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800044e:	4b20      	ldr	r3, [pc, #128]	; (80004d0 <MX_TIM1_Init+0xb8>)
 8000450:	4a20      	ldr	r2, [pc, #128]	; (80004d4 <MX_TIM1_Init+0xbc>)
 8000452:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0; // 1000;
 8000454:	4b1e      	ldr	r3, [pc, #120]	; (80004d0 <MX_TIM1_Init+0xb8>)
 8000456:	2200      	movs	r2, #0
 8000458:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800045a:	4b1d      	ldr	r3, [pc, #116]	; (80004d0 <MX_TIM1_Init+0xb8>)
 800045c:	2200      	movs	r2, #0
 800045e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100; //7-65535;
 8000460:	4b1b      	ldr	r3, [pc, #108]	; (80004d0 <MX_TIM1_Init+0xb8>)
 8000462:	2264      	movs	r2, #100	; 0x64
 8000464:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000466:	4b1a      	ldr	r3, [pc, #104]	; (80004d0 <MX_TIM1_Init+0xb8>)
 8000468:	2200      	movs	r2, #0
 800046a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800046c:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <MX_TIM1_Init+0xb8>)
 800046e:	2200      	movs	r2, #0
 8000470:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000472:	4b17      	ldr	r3, [pc, #92]	; (80004d0 <MX_TIM1_Init+0xb8>)
 8000474:	2200      	movs	r2, #0
 8000476:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000478:	4815      	ldr	r0, [pc, #84]	; (80004d0 <MX_TIM1_Init+0xb8>)
 800047a:	f003 f9e9 	bl	8003850 <HAL_TIM_Base_Init>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8000484:	f000 fa3e 	bl	8000904 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000488:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800048c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800048e:	f107 0310 	add.w	r3, r7, #16
 8000492:	4619      	mov	r1, r3
 8000494:	480e      	ldr	r0, [pc, #56]	; (80004d0 <MX_TIM1_Init+0xb8>)
 8000496:	f003 fbe3 	bl	8003c60 <HAL_TIM_ConfigClockSource>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 80004a0:	f000 fa30 	bl	8000904 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004a4:	2300      	movs	r3, #0
 80004a6:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004a8:	2300      	movs	r3, #0
 80004aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004ac:	f107 0308 	add.w	r3, r7, #8
 80004b0:	4619      	mov	r1, r3
 80004b2:	4807      	ldr	r0, [pc, #28]	; (80004d0 <MX_TIM1_Init+0xb8>)
 80004b4:	f003 ff3c 	bl	8004330 <HAL_TIMEx_MasterConfigSynchronization>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 80004be:	f000 fa21 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80004c2:	bf00      	nop
 80004c4:	3720      	adds	r7, #32
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	40021000 	.word	0x40021000
 80004d0:	20000708 	.word	0x20000708
 80004d4:	40012c00 	.word	0x40012c00

080004d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b08e      	sub	sp, #56	; 0x38
 80004dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004ec:	f107 0320 	add.w	r3, r7, #32
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
 80004fc:	605a      	str	r2, [r3, #4]
 80004fe:	609a      	str	r2, [r3, #8]
 8000500:	60da      	str	r2, [r3, #12]
 8000502:	611a      	str	r2, [r3, #16]
 8000504:	615a      	str	r2, [r3, #20]
 8000506:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000508:	4b2e      	ldr	r3, [pc, #184]	; (80005c4 <MX_TIM2_Init+0xec>)
 800050a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800050e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8000510:	4b2c      	ldr	r3, [pc, #176]	; (80005c4 <MX_TIM2_Init+0xec>)
 8000512:	f242 720f 	movw	r2, #9999	; 0x270f
 8000516:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000518:	4b2a      	ldr	r3, [pc, #168]	; (80005c4 <MX_TIM2_Init+0xec>)
 800051a:	2200      	movs	r2, #0
 800051c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3600;//7199;
 800051e:	4b29      	ldr	r3, [pc, #164]	; (80005c4 <MX_TIM2_Init+0xec>)
 8000520:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000524:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000526:	4b27      	ldr	r3, [pc, #156]	; (80005c4 <MX_TIM2_Init+0xec>)
 8000528:	2200      	movs	r2, #0
 800052a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800052c:	4b25      	ldr	r3, [pc, #148]	; (80005c4 <MX_TIM2_Init+0xec>)
 800052e:	2200      	movs	r2, #0
 8000530:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000532:	4824      	ldr	r0, [pc, #144]	; (80005c4 <MX_TIM2_Init+0xec>)
 8000534:	f003 f98c 	bl	8003850 <HAL_TIM_Base_Init>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800053e:	f000 f9e1 	bl	8000904 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000542:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000546:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000548:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800054c:	4619      	mov	r1, r3
 800054e:	481d      	ldr	r0, [pc, #116]	; (80005c4 <MX_TIM2_Init+0xec>)
 8000550:	f003 fb86 	bl	8003c60 <HAL_TIM_ConfigClockSource>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800055a:	f000 f9d3 	bl	8000904 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800055e:	4819      	ldr	r0, [pc, #100]	; (80005c4 <MX_TIM2_Init+0xec>)
 8000560:	f003 f9c5 	bl	80038ee <HAL_TIM_PWM_Init>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800056a:	f000 f9cb 	bl	8000904 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800056e:	2300      	movs	r3, #0
 8000570:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000572:	2300      	movs	r3, #0
 8000574:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000576:	f107 0320 	add.w	r3, r7, #32
 800057a:	4619      	mov	r1, r3
 800057c:	4811      	ldr	r0, [pc, #68]	; (80005c4 <MX_TIM2_Init+0xec>)
 800057e:	f003 fed7 	bl	8004330 <HAL_TIMEx_MasterConfigSynchronization>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000588:	f000 f9bc 	bl	8000904 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800058c:	2360      	movs	r3, #96	; 0x60
 800058e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse =1800;// 4000;
 8000590:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8000594:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800059a:	2300      	movs	r3, #0
 800059c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	2200      	movs	r2, #0
 80005a2:	4619      	mov	r1, r3
 80005a4:	4807      	ldr	r0, [pc, #28]	; (80005c4 <MX_TIM2_Init+0xec>)
 80005a6:	f003 fa9d 	bl	8003ae4 <HAL_TIM_PWM_ConfigChannel>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80005b0:	f000 f9a8 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80005b4:	4803      	ldr	r0, [pc, #12]	; (80005c4 <MX_TIM2_Init+0xec>)
 80005b6:	f000 fa39 	bl	8000a2c <HAL_TIM_MspPostInit>

}
 80005ba:	bf00      	nop
 80005bc:	3738      	adds	r7, #56	; 0x38
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20000798 	.word	0x20000798

080005c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005ce:	4b31      	ldr	r3, [pc, #196]	; (8000694 <MX_DMA_Init+0xcc>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	4a30      	ldr	r2, [pc, #192]	; (8000694 <MX_DMA_Init+0xcc>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6153      	str	r3, [r2, #20]
 80005da:	4b2e      	ldr	r3, [pc, #184]	; (8000694 <MX_DMA_Init+0xcc>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]
  /* DMA configuration */
  hdma_tim1_up.Instance = DMA1_Channel5;
 80005e6:	4b2c      	ldr	r3, [pc, #176]	; (8000698 <MX_DMA_Init+0xd0>)
 80005e8:	4a2c      	ldr	r2, [pc, #176]	; (800069c <MX_DMA_Init+0xd4>)
 80005ea:	601a      	str	r2, [r3, #0]
  hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80005ec:	4b2a      	ldr	r3, [pc, #168]	; (8000698 <MX_DMA_Init+0xd0>)
 80005ee:	2210      	movs	r2, #16
 80005f0:	605a      	str	r2, [r3, #4]
  hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80005f2:	4b29      	ldr	r3, [pc, #164]	; (8000698 <MX_DMA_Init+0xd0>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	609a      	str	r2, [r3, #8]
  hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 80005f8:	4b27      	ldr	r3, [pc, #156]	; (8000698 <MX_DMA_Init+0xd0>)
 80005fa:	2280      	movs	r2, #128	; 0x80
 80005fc:	60da      	str	r2, [r3, #12]
  hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD; // 16 bits
 80005fe:	4b26      	ldr	r3, [pc, #152]	; (8000698 <MX_DMA_Init+0xd0>)
 8000600:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000604:	611a      	str	r2, [r3, #16]
  hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000606:	4b24      	ldr	r3, [pc, #144]	; (8000698 <MX_DMA_Init+0xd0>)
 8000608:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800060c:	615a      	str	r2, [r3, #20]
  hdma_tim1_up.Init.Mode = DMA_CIRCULAR;//DMA_NORMAL;
 800060e:	4b22      	ldr	r3, [pc, #136]	; (8000698 <MX_DMA_Init+0xd0>)
 8000610:	2220      	movs	r2, #32
 8000612:	619a      	str	r2, [r3, #24]
  hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 8000614:	4b20      	ldr	r3, [pc, #128]	; (8000698 <MX_DMA_Init+0xd0>)
 8000616:	2200      	movs	r2, #0
 8000618:	61da      	str	r2, [r3, #28]
  HAL_DMA_Init(&hdma_tim1_up);
 800061a:	481f      	ldr	r0, [pc, #124]	; (8000698 <MX_DMA_Init+0xd0>)
 800061c:	f000 fc64 	bl	8000ee8 <HAL_DMA_Init>
//  __HAL_DMA1_REMAP(HAL_DMA1_CH3_TIM6_UP);
  __HAL_LINKDMA(&htim1,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8000620:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <MX_DMA_Init+0xd8>)
 8000622:	4a1d      	ldr	r2, [pc, #116]	; (8000698 <MX_DMA_Init+0xd0>)
 8000624:	621a      	str	r2, [r3, #32]
 8000626:	4b1c      	ldr	r3, [pc, #112]	; (8000698 <MX_DMA_Init+0xd0>)
 8000628:	4a1d      	ldr	r2, [pc, #116]	; (80006a0 <MX_DMA_Init+0xd8>)
 800062a:	625a      	str	r2, [r3, #36]	; 0x24
  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800062c:	2200      	movs	r2, #0
 800062e:	2100      	movs	r1, #0
 8000630:	200f      	movs	r0, #15
 8000632:	f000 fc22 	bl	8000e7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000636:	200f      	movs	r0, #15
 8000638:	f000 fc3b 	bl	8000eb2 <HAL_NVIC_EnableIRQ>
  /* Select Callbacks functions called after Transfer complete and Transfer error */
  HAL_DMA_RegisterCallback(&hdma_tim1_up, HAL_DMA_XFER_CPLT_CB_ID, TransferComplete);
 800063c:	4a19      	ldr	r2, [pc, #100]	; (80006a4 <MX_DMA_Init+0xdc>)
 800063e:	2100      	movs	r1, #0
 8000640:	4815      	ldr	r0, [pc, #84]	; (8000698 <MX_DMA_Init+0xd0>)
 8000642:	f000 fe87 	bl	8001354 <HAL_DMA_RegisterCallback>
  HAL_DMA_RegisterCallback(&hdma_tim1_up, HAL_DMA_XFER_ERROR_CB_ID, TransferError);
 8000646:	4a18      	ldr	r2, [pc, #96]	; (80006a8 <MX_DMA_Init+0xe0>)
 8000648:	2102      	movs	r1, #2
 800064a:	4813      	ldr	r0, [pc, #76]	; (8000698 <MX_DMA_Init+0xd0>)
 800064c:	f000 fe82 	bl	8001354 <HAL_DMA_RegisterCallback>
  /* (Callbacks for DMA IRQs) */
//  htim1->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = data_tramsmitted_handler;
//  htim1->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = transmit_error_handler;
  /*  (Enable DMA) */
  HAL_DMA_Start_IT(htim1.hdma[TIM_DMA_ID_UPDATE],(uint32_t)&aOutputWave,
 8000650:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <MX_DMA_Init+0xd8>)
 8000652:	6a18      	ldr	r0, [r3, #32]
 8000654:	4915      	ldr	r1, [pc, #84]	; (80006ac <MX_DMA_Init+0xe4>)
 8000656:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800065a:	4a15      	ldr	r2, [pc, #84]	; (80006b0 <MX_DMA_Init+0xe8>)
 800065c:	f000 fc9e 	bl	8000f9c <HAL_DMA_Start_IT>
  		(uint32_t)&GPIOB->ODR, BUFFER_SIZE);
  /*  (Enable TIM for DMA events) */
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8000660:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <MX_DMA_Init+0xd8>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	68da      	ldr	r2, [r3, #12]
 8000666:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <MX_DMA_Init+0xd8>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800066e:	60da      	str	r2, [r3, #12]

  /*  (Run TIM) */
  __HAL_TIM_ENABLE(&htim1);
 8000670:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <MX_DMA_Init+0xd8>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <MX_DMA_Init+0xd8>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f042 0201 	orr.w	r2, r2, #1
 800067e:	601a      	str	r2, [r3, #0]
  __HAL_RCC_TIM1_CLK_DISABLE();//stop clocking interrupt timer
 8000680:	4b04      	ldr	r3, [pc, #16]	; (8000694 <MX_DMA_Init+0xcc>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	4a03      	ldr	r2, [pc, #12]	; (8000694 <MX_DMA_Init+0xcc>)
 8000686:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800068a:	6193      	str	r3, [r2, #24]
}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40021000 	.word	0x40021000
 8000698:	20000754 	.word	0x20000754
 800069c:	40020058 	.word	0x40020058
 80006a0:	20000708 	.word	0x20000708
 80006a4:	08000851 	.word	0x08000851
 80006a8:	080008bd 	.word	0x080008bd
 80006ac:	20000204 	.word	0x20000204
 80006b0:	40010c0c 	.word	0x40010c0c

080006b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b088      	sub	sp, #32
 80006b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ba:	f107 0310 	add.w	r3, r7, #16
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c8:	4b5c      	ldr	r3, [pc, #368]	; (800083c <MX_GPIO_Init+0x188>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	4a5b      	ldr	r2, [pc, #364]	; (800083c <MX_GPIO_Init+0x188>)
 80006ce:	f043 0310 	orr.w	r3, r3, #16
 80006d2:	6193      	str	r3, [r2, #24]
 80006d4:	4b59      	ldr	r3, [pc, #356]	; (800083c <MX_GPIO_Init+0x188>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	f003 0310 	and.w	r3, r3, #16
 80006dc:	60fb      	str	r3, [r7, #12]
 80006de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006e0:	4b56      	ldr	r3, [pc, #344]	; (800083c <MX_GPIO_Init+0x188>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	4a55      	ldr	r2, [pc, #340]	; (800083c <MX_GPIO_Init+0x188>)
 80006e6:	f043 0320 	orr.w	r3, r3, #32
 80006ea:	6193      	str	r3, [r2, #24]
 80006ec:	4b53      	ldr	r3, [pc, #332]	; (800083c <MX_GPIO_Init+0x188>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	f003 0320 	and.w	r3, r3, #32
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f8:	4b50      	ldr	r3, [pc, #320]	; (800083c <MX_GPIO_Init+0x188>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	4a4f      	ldr	r2, [pc, #316]	; (800083c <MX_GPIO_Init+0x188>)
 80006fe:	f043 0304 	orr.w	r3, r3, #4
 8000702:	6193      	str	r3, [r2, #24]
 8000704:	4b4d      	ldr	r3, [pc, #308]	; (800083c <MX_GPIO_Init+0x188>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	f003 0304 	and.w	r3, r3, #4
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000710:	4b4a      	ldr	r3, [pc, #296]	; (800083c <MX_GPIO_Init+0x188>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	4a49      	ldr	r2, [pc, #292]	; (800083c <MX_GPIO_Init+0x188>)
 8000716:	f043 0308 	orr.w	r3, r3, #8
 800071a:	6193      	str	r3, [r2, #24]
 800071c:	4b47      	ldr	r3, [pc, #284]	; (800083c <MX_GPIO_Init+0x188>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	f003 0308 	and.w	r3, r3, #8
 8000724:	603b      	str	r3, [r7, #0]
 8000726:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800072e:	4844      	ldr	r0, [pc, #272]	; (8000840 <MX_GPIO_Init+0x18c>)
 8000730:	f001 f80a 	bl	8001748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DACA_0_Pin|DACA_1_Pin|DACA_2_Pin|DACA_3_Pin
 8000734:	2201      	movs	r2, #1
 8000736:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 800073a:	4842      	ldr	r0, [pc, #264]	; (8000844 <MX_GPIO_Init+0x190>)
 800073c:	f001 f804 	bl	8001748 <HAL_GPIO_WritePin>
                          |DACA_4_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DACB_0_Pin|DACB_1_Pin|DACB_2_Pin|DACB_10_Pin
 8000740:	2201      	movs	r2, #1
 8000742:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8000746:	4840      	ldr	r0, [pc, #256]	; (8000848 <MX_GPIO_Init+0x194>)
 8000748:	f000 fffe 	bl	8001748 <HAL_GPIO_WritePin>
                          |DACB_11_Pin|DACB_12_Pin|DACB_13_Pin|DACB_14_Pin
                          |DACB_3_Pin|DACB_4_Pin|DACB_5_Pin|DACB_6_Pin
                          |DACB_7_Pin|DACB_8_Pin|DACB_9_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DACB_15_GPIO_Port, DACB_15_Pin, GPIO_PIN_RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000752:	483d      	ldr	r0, [pc, #244]	; (8000848 <MX_GPIO_Init+0x194>)
 8000754:	f000 fff8 	bl	8001748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DACA_5_Pin|LED_2_Pin, GPIO_PIN_RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800075e:	4839      	ldr	r0, [pc, #228]	; (8000844 <MX_GPIO_Init+0x190>)
 8000760:	f000 fff2 	bl	8001748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_0_Pin */
  GPIO_InitStruct.Pin = LED_0_Pin;
 8000764:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000768:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800076a:	2311      	movs	r3, #17
 800076c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000772:	2302      	movs	r3, #2
 8000774:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_0_GPIO_Port, &GPIO_InitStruct);
 8000776:	f107 0310 	add.w	r3, r7, #16
 800077a:	4619      	mov	r1, r3
 800077c:	4830      	ldr	r0, [pc, #192]	; (8000840 <MX_GPIO_Init+0x18c>)
 800077e:	f000 fe5f 	bl	8001440 <HAL_GPIO_Init>

  /*Configure GPIO pins : EX0_START_Pin EX1_UP_Pin EX2_DOWN_Pin EX3_SEL_Pin */
  GPIO_InitStruct.Pin = EX0_START_Pin|EX1_UP_Pin|EX2_DOWN_Pin|EX3_SEL_Pin;
 8000782:	230f      	movs	r3, #15
 8000784:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000786:	4b31      	ldr	r3, [pc, #196]	; (800084c <MX_GPIO_Init+0x198>)
 8000788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800078a:	2302      	movs	r3, #2
 800078c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078e:	f107 0310 	add.w	r3, r7, #16
 8000792:	4619      	mov	r1, r3
 8000794:	482b      	ldr	r0, [pc, #172]	; (8000844 <MX_GPIO_Init+0x190>)
 8000796:	f000 fe53 	bl	8001440 <HAL_GPIO_Init>

  /*Configure GPIO pins : DACA_0_Pin DACA_1_Pin DACA_2_Pin DACA_3_Pin
                           DACA_4_Pin DACA_5_Pin */
  GPIO_InitStruct.Pin = DACA_0_Pin|DACA_1_Pin|DACA_2_Pin|DACA_3_Pin
 800079a:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 800079e:	613b      	str	r3, [r7, #16]
                          |DACA_4_Pin|DACA_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a0:	2301      	movs	r3, #1
 80007a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a8:	2302      	movs	r3, #2
 80007aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ac:	f107 0310 	add.w	r3, r7, #16
 80007b0:	4619      	mov	r1, r3
 80007b2:	4824      	ldr	r0, [pc, #144]	; (8000844 <MX_GPIO_Init+0x190>)
 80007b4:	f000 fe44 	bl	8001440 <HAL_GPIO_Init>

  /*Configure GPIO pins : DACB_0_Pin DACB_1_Pin DACB_2_Pin DACB_10_Pin
                           DACB_11_Pin DACB_12_Pin DACB_13_Pin DACB_14_Pin
                           DACB_15_Pin DACB_3_Pin DACB_4_Pin DACB_5_Pin
                           DACB_6_Pin DACB_7_Pin DACB_8_Pin DACB_9_Pin */
  GPIO_InitStruct.Pin = DACB_0_Pin|DACB_1_Pin|DACB_2_Pin|DACB_10_Pin
 80007b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007bc:	613b      	str	r3, [r7, #16]
                          |DACB_11_Pin|DACB_12_Pin|DACB_13_Pin|DACB_14_Pin
                          |DACB_15_Pin|DACB_3_Pin|DACB_4_Pin|DACB_5_Pin
                          |DACB_6_Pin|DACB_7_Pin|DACB_8_Pin|DACB_9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007be:	2301      	movs	r3, #1
 80007c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007c6:	2303      	movs	r3, #3
 80007c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ca:	f107 0310 	add.w	r3, r7, #16
 80007ce:	4619      	mov	r1, r3
 80007d0:	481d      	ldr	r0, [pc, #116]	; (8000848 <MX_GPIO_Init+0x194>)
 80007d2:	f000 fe35 	bl	8001440 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_2_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin;
 80007d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80007dc:	2311      	movs	r3, #17
 80007de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	2302      	movs	r3, #2
 80007e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_2_GPIO_Port, &GPIO_InitStruct);
 80007e8:	f107 0310 	add.w	r3, r7, #16
 80007ec:	4619      	mov	r1, r3
 80007ee:	4815      	ldr	r0, [pc, #84]	; (8000844 <MX_GPIO_Init+0x190>)
 80007f0:	f000 fe26 	bl	8001440 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2100      	movs	r1, #0
 80007f8:	2006      	movs	r0, #6
 80007fa:	f000 fb3e 	bl	8000e7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007fe:	2006      	movs	r0, #6
 8000800:	f000 fb57 	bl	8000eb2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000804:	2200      	movs	r2, #0
 8000806:	2100      	movs	r1, #0
 8000808:	2007      	movs	r0, #7
 800080a:	f000 fb36 	bl	8000e7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800080e:	2007      	movs	r0, #7
 8000810:	f000 fb4f 	bl	8000eb2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000814:	2200      	movs	r2, #0
 8000816:	2100      	movs	r1, #0
 8000818:	2008      	movs	r0, #8
 800081a:	f000 fb2e 	bl	8000e7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800081e:	2008      	movs	r0, #8
 8000820:	f000 fb47 	bl	8000eb2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000824:	2200      	movs	r2, #0
 8000826:	2100      	movs	r1, #0
 8000828:	2009      	movs	r0, #9
 800082a:	f000 fb26 	bl	8000e7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800082e:	2009      	movs	r0, #9
 8000830:	f000 fb3f 	bl	8000eb2 <HAL_NVIC_EnableIRQ>

}
 8000834:	bf00      	nop
 8000836:	3720      	adds	r7, #32
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40021000 	.word	0x40021000
 8000840:	40011000 	.word	0x40011000
 8000844:	40010800 	.word	0x40010800
 8000848:	40010c00 	.word	0x40010c00
 800084c:	10210000 	.word	0x10210000

08000850 <TransferComplete>:

/* USER CODE BEGIN 4 */
/*  (DMA IRQ callbacks) */
void TransferComplete(DMA_HandleTypeDef *hdma)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
    /* Stop timer */
    __HAL_TIM_DISABLE(&htim1);
 8000858:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <TransferComplete+0x60>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	6a1a      	ldr	r2, [r3, #32]
 800085e:	f241 1311 	movw	r3, #4369	; 0x1111
 8000862:	4013      	ands	r3, r2
 8000864:	2b00      	cmp	r3, #0
 8000866:	d10f      	bne.n	8000888 <TransferComplete+0x38>
 8000868:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <TransferComplete+0x60>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	6a1a      	ldr	r2, [r3, #32]
 800086e:	f240 4344 	movw	r3, #1092	; 0x444
 8000872:	4013      	ands	r3, r2
 8000874:	2b00      	cmp	r3, #0
 8000876:	d107      	bne.n	8000888 <TransferComplete+0x38>
 8000878:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <TransferComplete+0x60>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <TransferComplete+0x60>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f022 0201 	bic.w	r2, r2, #1
 8000886:	601a      	str	r2, [r3, #0]
    /* Reconfigure DMA */
    HAL_DMA_Start_IT(htim1.hdma[TIM_DMA_ID_UPDATE],(uint32_t)&aOutputWave,
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <TransferComplete+0x60>)
 800088a:	6a18      	ldr	r0, [r3, #32]
 800088c:	4909      	ldr	r1, [pc, #36]	; (80008b4 <TransferComplete+0x64>)
 800088e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000892:	4a09      	ldr	r2, [pc, #36]	; (80008b8 <TransferComplete+0x68>)
 8000894:	f000 fb82 	bl	8000f9c <HAL_DMA_Start_IT>
    		(uint32_t)&GPIOB->ODR, BUFFER_SIZE);
    /* Start timer for new data transmit */
    __HAL_TIM_ENABLE(&htim1);
 8000898:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <TransferComplete+0x60>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	4b04      	ldr	r3, [pc, #16]	; (80008b0 <TransferComplete+0x60>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f042 0201 	orr.w	r2, r2, #1
 80008a6:	601a      	str	r2, [r3, #0]
}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000708 	.word	0x20000708
 80008b4:	20000204 	.word	0x20000204
 80008b8:	40010c0c 	.word	0x40010c0c

080008bc <TransferError>:

void TransferError(DMA_HandleTypeDef *hdma)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
    /* Stop timer */
    __HAL_TIM_DISABLE(&htim1);
 80008c4:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <TransferError+0x44>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	6a1a      	ldr	r2, [r3, #32]
 80008ca:	f241 1311 	movw	r3, #4369	; 0x1111
 80008ce:	4013      	ands	r3, r2
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d10f      	bne.n	80008f4 <TransferError+0x38>
 80008d4:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <TransferError+0x44>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	6a1a      	ldr	r2, [r3, #32]
 80008da:	f240 4344 	movw	r3, #1092	; 0x444
 80008de:	4013      	ands	r3, r2
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d107      	bne.n	80008f4 <TransferError+0x38>
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <TransferError+0x44>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	4b05      	ldr	r3, [pc, #20]	; (8000900 <TransferError+0x44>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f022 0201 	bic.w	r2, r2, #1
 80008f2:	601a      	str	r2, [r3, #0]
    /* !!! Some error handle for future implementation */
}
 80008f4:	bf00      	nop
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bc80      	pop	{r7}
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	20000708 	.word	0x20000708

08000904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000908:	b672      	cpsid	i
}
 800090a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800090c:	e7fe      	b.n	800090c <Error_Handler+0x8>
	...

08000910 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000916:	4b15      	ldr	r3, [pc, #84]	; (800096c <HAL_MspInit+0x5c>)
 8000918:	699b      	ldr	r3, [r3, #24]
 800091a:	4a14      	ldr	r2, [pc, #80]	; (800096c <HAL_MspInit+0x5c>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6193      	str	r3, [r2, #24]
 8000922:	4b12      	ldr	r3, [pc, #72]	; (800096c <HAL_MspInit+0x5c>)
 8000924:	699b      	ldr	r3, [r3, #24]
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <HAL_MspInit+0x5c>)
 8000930:	69db      	ldr	r3, [r3, #28]
 8000932:	4a0e      	ldr	r2, [pc, #56]	; (800096c <HAL_MspInit+0x5c>)
 8000934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000938:	61d3      	str	r3, [r2, #28]
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <HAL_MspInit+0x5c>)
 800093c:	69db      	ldr	r3, [r3, #28]
 800093e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000946:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <HAL_MspInit+0x60>)
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	4a04      	ldr	r2, [pc, #16]	; (8000970 <HAL_MspInit+0x60>)
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000962:	bf00      	nop
 8000964:	3714      	adds	r7, #20
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr
 800096c:	40021000 	.word	0x40021000
 8000970:	40010000 	.word	0x40010000

08000974 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a26      	ldr	r2, [pc, #152]	; (8000a1c <HAL_TIM_Base_MspInit+0xa8>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d135      	bne.n	80009f2 <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000986:	4b26      	ldr	r3, [pc, #152]	; (8000a20 <HAL_TIM_Base_MspInit+0xac>)
 8000988:	699b      	ldr	r3, [r3, #24]
 800098a:	4a25      	ldr	r2, [pc, #148]	; (8000a20 <HAL_TIM_Base_MspInit+0xac>)
 800098c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000990:	6193      	str	r3, [r2, #24]
 8000992:	4b23      	ldr	r3, [pc, #140]	; (8000a20 <HAL_TIM_Base_MspInit+0xac>)
 8000994:	699b      	ldr	r3, [r3, #24]
 8000996:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA1_Channel5;
 800099e:	4b21      	ldr	r3, [pc, #132]	; (8000a24 <HAL_TIM_Base_MspInit+0xb0>)
 80009a0:	4a21      	ldr	r2, [pc, #132]	; (8000a28 <HAL_TIM_Base_MspInit+0xb4>)
 80009a2:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009a4:	4b1f      	ldr	r3, [pc, #124]	; (8000a24 <HAL_TIM_Base_MspInit+0xb0>)
 80009a6:	2210      	movs	r2, #16
 80009a8:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80009aa:	4b1e      	ldr	r3, [pc, #120]	; (8000a24 <HAL_TIM_Base_MspInit+0xb0>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 80009b0:	4b1c      	ldr	r3, [pc, #112]	; (8000a24 <HAL_TIM_Base_MspInit+0xb0>)
 80009b2:	2280      	movs	r2, #128	; 0x80
 80009b4:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009b6:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <HAL_TIM_Base_MspInit+0xb0>)
 80009b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009bc:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009be:	4b19      	ldr	r3, [pc, #100]	; (8000a24 <HAL_TIM_Base_MspInit+0xb0>)
 80009c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009c4:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 80009c6:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <HAL_TIM_Base_MspInit+0xb0>)
 80009c8:	2220      	movs	r2, #32
 80009ca:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80009cc:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <HAL_TIM_Base_MspInit+0xb0>)
 80009ce:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80009d2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 80009d4:	4813      	ldr	r0, [pc, #76]	; (8000a24 <HAL_TIM_Base_MspInit+0xb0>)
 80009d6:	f000 fa87 	bl	8000ee8 <HAL_DMA_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <HAL_TIM_Base_MspInit+0x70>
    {
      Error_Handler();
 80009e0:	f7ff ff90 	bl	8000904 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4a0f      	ldr	r2, [pc, #60]	; (8000a24 <HAL_TIM_Base_MspInit+0xb0>)
 80009e8:	621a      	str	r2, [r3, #32]
 80009ea:	4a0e      	ldr	r2, [pc, #56]	; (8000a24 <HAL_TIM_Base_MspInit+0xb0>)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80009f0:	e010      	b.n	8000a14 <HAL_TIM_Base_MspInit+0xa0>
  else if(htim_base->Instance==TIM2)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009fa:	d10b      	bne.n	8000a14 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <HAL_TIM_Base_MspInit+0xac>)
 80009fe:	69db      	ldr	r3, [r3, #28]
 8000a00:	4a07      	ldr	r2, [pc, #28]	; (8000a20 <HAL_TIM_Base_MspInit+0xac>)
 8000a02:	f043 0301 	orr.w	r3, r3, #1
 8000a06:	61d3      	str	r3, [r2, #28]
 8000a08:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <HAL_TIM_Base_MspInit+0xac>)
 8000a0a:	69db      	ldr	r3, [r3, #28]
 8000a0c:	f003 0301 	and.w	r3, r3, #1
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	68bb      	ldr	r3, [r7, #8]
}
 8000a14:	bf00      	nop
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40012c00 	.word	0x40012c00
 8000a20:	40021000 	.word	0x40021000
 8000a24:	20000754 	.word	0x20000754
 8000a28:	40020058 	.word	0x40020058

08000a2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b088      	sub	sp, #32
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 030c 	add.w	r3, r7, #12
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a4a:	d12a      	bne.n	8000aa2 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4c:	4b17      	ldr	r3, [pc, #92]	; (8000aac <HAL_TIM_MspPostInit+0x80>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	4a16      	ldr	r2, [pc, #88]	; (8000aac <HAL_TIM_MspPostInit+0x80>)
 8000a52:	f043 0304 	orr.w	r3, r3, #4
 8000a56:	6193      	str	r3, [r2, #24]
 8000a58:	4b14      	ldr	r3, [pc, #80]	; (8000aac <HAL_TIM_MspPostInit+0x80>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	f003 0304 	and.w	r3, r3, #4
 8000a60:	60bb      	str	r3, [r7, #8]
 8000a62:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a68:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a72:	f107 030c 	add.w	r3, r7, #12
 8000a76:	4619      	mov	r1, r3
 8000a78:	480d      	ldr	r0, [pc, #52]	; (8000ab0 <HAL_TIM_MspPostInit+0x84>)
 8000a7a:	f000 fce1 	bl	8001440 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	; (8000ab4 <HAL_TIM_MspPostInit+0x88>)
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	61fb      	str	r3, [r7, #28]
 8000a84:	69fb      	ldr	r3, [r7, #28]
 8000a86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a8a:	61fb      	str	r3, [r7, #28]
 8000a8c:	69fb      	ldr	r3, [r7, #28]
 8000a8e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000a92:	61fb      	str	r3, [r7, #28]
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a9a:	61fb      	str	r3, [r7, #28]
 8000a9c:	4a05      	ldr	r2, [pc, #20]	; (8000ab4 <HAL_TIM_MspPostInit+0x88>)
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000aa2:	bf00      	nop
 8000aa4:	3720      	adds	r7, #32
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	40010800 	.word	0x40010800
 8000ab4:	40010000 	.word	0x40010000

08000ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <NMI_Handler+0x4>

08000abe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <HardFault_Handler+0x4>

08000ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <MemManage_Handler+0x4>

08000aca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ace:	e7fe      	b.n	8000ace <BusFault_Handler+0x4>

08000ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <UsageFault_Handler+0x4>

08000ad6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bc80      	pop	{r7}
 8000ae0:	4770      	bx	lr

08000ae2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bc80      	pop	{r7}
 8000aec:	4770      	bx	lr

08000aee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bc80      	pop	{r7}
 8000af8:	4770      	bx	lr

08000afa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000afe:	f000 f8a5 	bl	8000c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	f000 fe4e 	bl	80017ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000b18:	2002      	movs	r0, #2
 8000b1a:	f000 fe47 	bl	80017ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000b26:	2004      	movs	r0, #4
 8000b28:	f000 fe40 	bl	80017ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000b34:	2008      	movs	r0, #8
 8000b36:	f000 fe39 	bl	80017ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8000b44:	4802      	ldr	r0, [pc, #8]	; (8000b50 <DMA1_Channel5_IRQHandler+0x10>)
 8000b46:	f000 faff 	bl	8001148 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000754 	.word	0x20000754

08000b54 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000b58:	4802      	ldr	r0, [pc, #8]	; (8000b64 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000b5a:	f000 ff7a 	bl	8001a52 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20001488 	.word	0x20001488

08000b68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr

08000b74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b74:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b76:	e003      	b.n	8000b80 <LoopCopyDataInit>

08000b78 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b78:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000b7a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b7c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b7e:	3104      	adds	r1, #4

08000b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b80:	480a      	ldr	r0, [pc, #40]	; (8000bac <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000b82:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000b84:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b86:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b88:	d3f6      	bcc.n	8000b78 <CopyDataInit>
  ldr r2, =_sbss
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000b8c:	e002      	b.n	8000b94 <LoopFillZerobss>

08000b8e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000b8e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000b90:	f842 3b04 	str.w	r3, [r2], #4

08000b94 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000b94:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000b96:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b98:	d3f9      	bcc.n	8000b8e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b9a:	f7ff ffe5 	bl	8000b68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b9e:	f007 fd89 	bl	80086b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ba2:	f7ff fad3 	bl	800014c <main>
  bx lr
 8000ba6:	4770      	bx	lr
  ldr r3, =_sidata
 8000ba8:	08009854 	.word	0x08009854
  ldr r0, =_sdata
 8000bac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000bb0:	200001e4 	.word	0x200001e4
  ldr r2, =_sbss
 8000bb4:	200001e4 	.word	0x200001e4
  ldr r3, = _ebss
 8000bb8:	20001784 	.word	0x20001784

08000bbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bbc:	e7fe      	b.n	8000bbc <ADC1_2_IRQHandler>
	...

08000bc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <HAL_Init+0x28>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a07      	ldr	r2, [pc, #28]	; (8000be8 <HAL_Init+0x28>)
 8000bca:	f043 0310 	orr.w	r3, r3, #16
 8000bce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd0:	2003      	movs	r0, #3
 8000bd2:	f000 f947 	bl	8000e64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f000 f808 	bl	8000bec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bdc:	f7ff fe98 	bl	8000910 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40022000 	.word	0x40022000

08000bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bf4:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <HAL_InitTick+0x54>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <HAL_InitTick+0x58>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f000 f95f 	bl	8000ece <HAL_SYSTICK_Config>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	e00e      	b.n	8000c38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2b0f      	cmp	r3, #15
 8000c1e:	d80a      	bhi.n	8000c36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c20:	2200      	movs	r2, #0
 8000c22:	6879      	ldr	r1, [r7, #4]
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	f000 f927 	bl	8000e7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c2c:	4a06      	ldr	r2, [pc, #24]	; (8000c48 <HAL_InitTick+0x5c>)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c32:	2300      	movs	r3, #0
 8000c34:	e000      	b.n	8000c38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000004 	.word	0x20000004
 8000c44:	2000000c 	.word	0x2000000c
 8000c48:	20000008 	.word	0x20000008

08000c4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <HAL_IncTick+0x1c>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	461a      	mov	r2, r3
 8000c56:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <HAL_IncTick+0x20>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	4a03      	ldr	r2, [pc, #12]	; (8000c6c <HAL_IncTick+0x20>)
 8000c5e:	6013      	str	r3, [r2, #0]
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr
 8000c68:	2000000c 	.word	0x2000000c
 8000c6c:	200007e4 	.word	0x200007e4

08000c70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return uwTick;
 8000c74:	4b02      	ldr	r3, [pc, #8]	; (8000c80 <HAL_GetTick+0x10>)
 8000c76:	681b      	ldr	r3, [r3, #0]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr
 8000c80:	200007e4 	.word	0x200007e4

08000c84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c8c:	f7ff fff0 	bl	8000c70 <HAL_GetTick>
 8000c90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c9c:	d005      	beq.n	8000caa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <HAL_Delay+0x44>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000caa:	bf00      	nop
 8000cac:	f7ff ffe0 	bl	8000c70 <HAL_GetTick>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	68fa      	ldr	r2, [r7, #12]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d8f7      	bhi.n	8000cac <HAL_Delay+0x28>
  {
  }
}
 8000cbc:	bf00      	nop
 8000cbe:	bf00      	nop
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	2000000c 	.word	0x2000000c

08000ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <__NVIC_SetPriorityGrouping+0x44>)
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ce2:	68ba      	ldr	r2, [r7, #8]
 8000ce4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ce8:	4013      	ands	r3, r2
 8000cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cfe:	4a04      	ldr	r2, [pc, #16]	; (8000d10 <__NVIC_SetPriorityGrouping+0x44>)
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	60d3      	str	r3, [r2, #12]
}
 8000d04:	bf00      	nop
 8000d06:	3714      	adds	r7, #20
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bc80      	pop	{r7}
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d18:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <__NVIC_GetPriorityGrouping+0x18>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	0a1b      	lsrs	r3, r3, #8
 8000d1e:	f003 0307 	and.w	r3, r3, #7
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc80      	pop	{r7}
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	db0b      	blt.n	8000d5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	f003 021f 	and.w	r2, r3, #31
 8000d48:	4906      	ldr	r1, [pc, #24]	; (8000d64 <__NVIC_EnableIRQ+0x34>)
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	095b      	lsrs	r3, r3, #5
 8000d50:	2001      	movs	r0, #1
 8000d52:	fa00 f202 	lsl.w	r2, r0, r2
 8000d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr
 8000d64:	e000e100 	.word	0xe000e100

08000d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	6039      	str	r1, [r7, #0]
 8000d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	db0a      	blt.n	8000d92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	490c      	ldr	r1, [pc, #48]	; (8000db4 <__NVIC_SetPriority+0x4c>)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	0112      	lsls	r2, r2, #4
 8000d88:	b2d2      	uxtb	r2, r2
 8000d8a:	440b      	add	r3, r1
 8000d8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d90:	e00a      	b.n	8000da8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	4908      	ldr	r1, [pc, #32]	; (8000db8 <__NVIC_SetPriority+0x50>)
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	f003 030f 	and.w	r3, r3, #15
 8000d9e:	3b04      	subs	r3, #4
 8000da0:	0112      	lsls	r2, r2, #4
 8000da2:	b2d2      	uxtb	r2, r2
 8000da4:	440b      	add	r3, r1
 8000da6:	761a      	strb	r2, [r3, #24]
}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bc80      	pop	{r7}
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000e100 	.word	0xe000e100
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b089      	sub	sp, #36	; 0x24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	f1c3 0307 	rsb	r3, r3, #7
 8000dd6:	2b04      	cmp	r3, #4
 8000dd8:	bf28      	it	cs
 8000dda:	2304      	movcs	r3, #4
 8000ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3304      	adds	r3, #4
 8000de2:	2b06      	cmp	r3, #6
 8000de4:	d902      	bls.n	8000dec <NVIC_EncodePriority+0x30>
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	3b03      	subs	r3, #3
 8000dea:	e000      	b.n	8000dee <NVIC_EncodePriority+0x32>
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df0:	f04f 32ff 	mov.w	r2, #4294967295
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43da      	mvns	r2, r3
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	401a      	ands	r2, r3
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e04:	f04f 31ff 	mov.w	r1, #4294967295
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0e:	43d9      	mvns	r1, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e14:	4313      	orrs	r3, r2
         );
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3724      	adds	r7, #36	; 0x24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr

08000e20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e30:	d301      	bcc.n	8000e36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e32:	2301      	movs	r3, #1
 8000e34:	e00f      	b.n	8000e56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e36:	4a0a      	ldr	r2, [pc, #40]	; (8000e60 <SysTick_Config+0x40>)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e3e:	210f      	movs	r1, #15
 8000e40:	f04f 30ff 	mov.w	r0, #4294967295
 8000e44:	f7ff ff90 	bl	8000d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e48:	4b05      	ldr	r3, [pc, #20]	; (8000e60 <SysTick_Config+0x40>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e4e:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <SysTick_Config+0x40>)
 8000e50:	2207      	movs	r2, #7
 8000e52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	e000e010 	.word	0xe000e010

08000e64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f7ff ff2d 	bl	8000ccc <__NVIC_SetPriorityGrouping>
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b086      	sub	sp, #24
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	4603      	mov	r3, r0
 8000e82:	60b9      	str	r1, [r7, #8]
 8000e84:	607a      	str	r2, [r7, #4]
 8000e86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e8c:	f7ff ff42 	bl	8000d14 <__NVIC_GetPriorityGrouping>
 8000e90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	68b9      	ldr	r1, [r7, #8]
 8000e96:	6978      	ldr	r0, [r7, #20]
 8000e98:	f7ff ff90 	bl	8000dbc <NVIC_EncodePriority>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea2:	4611      	mov	r1, r2
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff5f 	bl	8000d68 <__NVIC_SetPriority>
}
 8000eaa:	bf00      	nop
 8000eac:	3718      	adds	r7, #24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	4603      	mov	r3, r0
 8000eba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff ff35 	bl	8000d30 <__NVIC_EnableIRQ>
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b082      	sub	sp, #8
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f7ff ffa2 	bl	8000e20 <SysTick_Config>
 8000edc:	4603      	mov	r3, r0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
	...

08000ee8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d101      	bne.n	8000efe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e043      	b.n	8000f86 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	461a      	mov	r2, r3
 8000f04:	4b22      	ldr	r3, [pc, #136]	; (8000f90 <HAL_DMA_Init+0xa8>)
 8000f06:	4413      	add	r3, r2
 8000f08:	4a22      	ldr	r2, [pc, #136]	; (8000f94 <HAL_DMA_Init+0xac>)
 8000f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f0e:	091b      	lsrs	r3, r3, #4
 8000f10:	009a      	lsls	r2, r3, #2
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a1f      	ldr	r2, [pc, #124]	; (8000f98 <HAL_DMA_Init+0xb0>)
 8000f1a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2202      	movs	r2, #2
 8000f20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000f32:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000f36:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000f40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f60:	68fa      	ldr	r2, [r7, #12]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	68fa      	ldr	r2, [r7, #12]
 8000f6c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2200      	movs	r2, #0
 8000f72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2201      	movs	r2, #1
 8000f78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3714      	adds	r7, #20
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr
 8000f90:	bffdfff8 	.word	0xbffdfff8
 8000f94:	cccccccd 	.word	0xcccccccd
 8000f98:	40020000 	.word	0x40020000

08000f9c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
 8000fa8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000faa:	2300      	movs	r3, #0
 8000fac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d101      	bne.n	8000fbc <HAL_DMA_Start_IT+0x20>
 8000fb8:	2302      	movs	r3, #2
 8000fba:	e04a      	b.n	8001052 <HAL_DMA_Start_IT+0xb6>
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d13a      	bne.n	8001044 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	2202      	movs	r2, #2
 8000fd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f022 0201 	bic.w	r2, r2, #1
 8000fea:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	68b9      	ldr	r1, [r7, #8]
 8000ff2:	68f8      	ldr	r0, [r7, #12]
 8000ff4:	f000 f9f6 	bl	80013e4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d008      	beq.n	8001012 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f042 020e 	orr.w	r2, r2, #14
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	e00f      	b.n	8001032 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f022 0204 	bic.w	r2, r2, #4
 8001020:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f042 020a 	orr.w	r2, r2, #10
 8001030:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f042 0201 	orr.w	r2, r2, #1
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	e005      	b.n	8001050 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2200      	movs	r2, #0
 8001048:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800104c:	2302      	movs	r3, #2
 800104e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001050:	7dfb      	ldrb	r3, [r7, #23]
}
 8001052:	4618      	mov	r0, r3
 8001054:	3718      	adds	r7, #24
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001064:	2300      	movs	r3, #0
 8001066:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800106e:	2b02      	cmp	r3, #2
 8001070:	d005      	beq.n	800107e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2204      	movs	r2, #4
 8001076:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	73fb      	strb	r3, [r7, #15]
 800107c:	e051      	b.n	8001122 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f022 020e 	bic.w	r2, r2, #14
 800108c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f022 0201 	bic.w	r2, r2, #1
 800109c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a22      	ldr	r2, [pc, #136]	; (800112c <HAL_DMA_Abort_IT+0xd0>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d029      	beq.n	80010fc <HAL_DMA_Abort_IT+0xa0>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a20      	ldr	r2, [pc, #128]	; (8001130 <HAL_DMA_Abort_IT+0xd4>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d022      	beq.n	80010f8 <HAL_DMA_Abort_IT+0x9c>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a1f      	ldr	r2, [pc, #124]	; (8001134 <HAL_DMA_Abort_IT+0xd8>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d01a      	beq.n	80010f2 <HAL_DMA_Abort_IT+0x96>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a1d      	ldr	r2, [pc, #116]	; (8001138 <HAL_DMA_Abort_IT+0xdc>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d012      	beq.n	80010ec <HAL_DMA_Abort_IT+0x90>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a1c      	ldr	r2, [pc, #112]	; (800113c <HAL_DMA_Abort_IT+0xe0>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d00a      	beq.n	80010e6 <HAL_DMA_Abort_IT+0x8a>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a1a      	ldr	r2, [pc, #104]	; (8001140 <HAL_DMA_Abort_IT+0xe4>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d102      	bne.n	80010e0 <HAL_DMA_Abort_IT+0x84>
 80010da:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80010de:	e00e      	b.n	80010fe <HAL_DMA_Abort_IT+0xa2>
 80010e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010e4:	e00b      	b.n	80010fe <HAL_DMA_Abort_IT+0xa2>
 80010e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010ea:	e008      	b.n	80010fe <HAL_DMA_Abort_IT+0xa2>
 80010ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f0:	e005      	b.n	80010fe <HAL_DMA_Abort_IT+0xa2>
 80010f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010f6:	e002      	b.n	80010fe <HAL_DMA_Abort_IT+0xa2>
 80010f8:	2310      	movs	r3, #16
 80010fa:	e000      	b.n	80010fe <HAL_DMA_Abort_IT+0xa2>
 80010fc:	2301      	movs	r3, #1
 80010fe:	4a11      	ldr	r2, [pc, #68]	; (8001144 <HAL_DMA_Abort_IT+0xe8>)
 8001100:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2201      	movs	r2, #1
 8001106:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001116:	2b00      	cmp	r3, #0
 8001118:	d003      	beq.n	8001122 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	4798      	blx	r3
    } 
  }
  return status;
 8001122:	7bfb      	ldrb	r3, [r7, #15]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40020008 	.word	0x40020008
 8001130:	4002001c 	.word	0x4002001c
 8001134:	40020030 	.word	0x40020030
 8001138:	40020044 	.word	0x40020044
 800113c:	40020058 	.word	0x40020058
 8001140:	4002006c 	.word	0x4002006c
 8001144:	40020000 	.word	0x40020000

08001148 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001164:	2204      	movs	r2, #4
 8001166:	409a      	lsls	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4013      	ands	r3, r2
 800116c:	2b00      	cmp	r3, #0
 800116e:	d04f      	beq.n	8001210 <HAL_DMA_IRQHandler+0xc8>
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	f003 0304 	and.w	r3, r3, #4
 8001176:	2b00      	cmp	r3, #0
 8001178:	d04a      	beq.n	8001210 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0320 	and.w	r3, r3, #32
 8001184:	2b00      	cmp	r3, #0
 8001186:	d107      	bne.n	8001198 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f022 0204 	bic.w	r2, r2, #4
 8001196:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a66      	ldr	r2, [pc, #408]	; (8001338 <HAL_DMA_IRQHandler+0x1f0>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d029      	beq.n	80011f6 <HAL_DMA_IRQHandler+0xae>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a65      	ldr	r2, [pc, #404]	; (800133c <HAL_DMA_IRQHandler+0x1f4>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d022      	beq.n	80011f2 <HAL_DMA_IRQHandler+0xaa>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a63      	ldr	r2, [pc, #396]	; (8001340 <HAL_DMA_IRQHandler+0x1f8>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d01a      	beq.n	80011ec <HAL_DMA_IRQHandler+0xa4>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a62      	ldr	r2, [pc, #392]	; (8001344 <HAL_DMA_IRQHandler+0x1fc>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d012      	beq.n	80011e6 <HAL_DMA_IRQHandler+0x9e>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a60      	ldr	r2, [pc, #384]	; (8001348 <HAL_DMA_IRQHandler+0x200>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d00a      	beq.n	80011e0 <HAL_DMA_IRQHandler+0x98>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a5f      	ldr	r2, [pc, #380]	; (800134c <HAL_DMA_IRQHandler+0x204>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d102      	bne.n	80011da <HAL_DMA_IRQHandler+0x92>
 80011d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011d8:	e00e      	b.n	80011f8 <HAL_DMA_IRQHandler+0xb0>
 80011da:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80011de:	e00b      	b.n	80011f8 <HAL_DMA_IRQHandler+0xb0>
 80011e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80011e4:	e008      	b.n	80011f8 <HAL_DMA_IRQHandler+0xb0>
 80011e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011ea:	e005      	b.n	80011f8 <HAL_DMA_IRQHandler+0xb0>
 80011ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011f0:	e002      	b.n	80011f8 <HAL_DMA_IRQHandler+0xb0>
 80011f2:	2340      	movs	r3, #64	; 0x40
 80011f4:	e000      	b.n	80011f8 <HAL_DMA_IRQHandler+0xb0>
 80011f6:	2304      	movs	r3, #4
 80011f8:	4a55      	ldr	r2, [pc, #340]	; (8001350 <HAL_DMA_IRQHandler+0x208>)
 80011fa:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001200:	2b00      	cmp	r3, #0
 8001202:	f000 8094 	beq.w	800132e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800120e:	e08e      	b.n	800132e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001214:	2202      	movs	r2, #2
 8001216:	409a      	lsls	r2, r3
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4013      	ands	r3, r2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d056      	beq.n	80012ce <HAL_DMA_IRQHandler+0x186>
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	2b00      	cmp	r3, #0
 8001228:	d051      	beq.n	80012ce <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0320 	and.w	r3, r3, #32
 8001234:	2b00      	cmp	r3, #0
 8001236:	d10b      	bne.n	8001250 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f022 020a 	bic.w	r2, r2, #10
 8001246:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2201      	movs	r2, #1
 800124c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a38      	ldr	r2, [pc, #224]	; (8001338 <HAL_DMA_IRQHandler+0x1f0>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d029      	beq.n	80012ae <HAL_DMA_IRQHandler+0x166>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a37      	ldr	r2, [pc, #220]	; (800133c <HAL_DMA_IRQHandler+0x1f4>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d022      	beq.n	80012aa <HAL_DMA_IRQHandler+0x162>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a35      	ldr	r2, [pc, #212]	; (8001340 <HAL_DMA_IRQHandler+0x1f8>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d01a      	beq.n	80012a4 <HAL_DMA_IRQHandler+0x15c>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a34      	ldr	r2, [pc, #208]	; (8001344 <HAL_DMA_IRQHandler+0x1fc>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d012      	beq.n	800129e <HAL_DMA_IRQHandler+0x156>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a32      	ldr	r2, [pc, #200]	; (8001348 <HAL_DMA_IRQHandler+0x200>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d00a      	beq.n	8001298 <HAL_DMA_IRQHandler+0x150>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a31      	ldr	r2, [pc, #196]	; (800134c <HAL_DMA_IRQHandler+0x204>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d102      	bne.n	8001292 <HAL_DMA_IRQHandler+0x14a>
 800128c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001290:	e00e      	b.n	80012b0 <HAL_DMA_IRQHandler+0x168>
 8001292:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001296:	e00b      	b.n	80012b0 <HAL_DMA_IRQHandler+0x168>
 8001298:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800129c:	e008      	b.n	80012b0 <HAL_DMA_IRQHandler+0x168>
 800129e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012a2:	e005      	b.n	80012b0 <HAL_DMA_IRQHandler+0x168>
 80012a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012a8:	e002      	b.n	80012b0 <HAL_DMA_IRQHandler+0x168>
 80012aa:	2320      	movs	r3, #32
 80012ac:	e000      	b.n	80012b0 <HAL_DMA_IRQHandler+0x168>
 80012ae:	2302      	movs	r3, #2
 80012b0:	4a27      	ldr	r2, [pc, #156]	; (8001350 <HAL_DMA_IRQHandler+0x208>)
 80012b2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d034      	beq.n	800132e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80012cc:	e02f      	b.n	800132e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	2208      	movs	r2, #8
 80012d4:	409a      	lsls	r2, r3
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	4013      	ands	r3, r2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d028      	beq.n	8001330 <HAL_DMA_IRQHandler+0x1e8>
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	f003 0308 	and.w	r3, r3, #8
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d023      	beq.n	8001330 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f022 020e 	bic.w	r2, r2, #14
 80012f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001300:	2101      	movs	r1, #1
 8001302:	fa01 f202 	lsl.w	r2, r1, r2
 8001306:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2201      	movs	r2, #1
 800130c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2201      	movs	r2, #1
 8001312:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	2b00      	cmp	r3, #0
 8001324:	d004      	beq.n	8001330 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	4798      	blx	r3
    }
  }
  return;
 800132e:	bf00      	nop
 8001330:	bf00      	nop
}
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40020008 	.word	0x40020008
 800133c:	4002001c 	.word	0x4002001c
 8001340:	40020030 	.word	0x40020030
 8001344:	40020044 	.word	0x40020044
 8001348:	40020058 	.word	0x40020058
 800134c:	4002006c 	.word	0x4002006c
 8001350:	40020000 	.word	0x40020000

08001354 <HAL_DMA_RegisterCallback>:
  * @param pCallback: pointer to private callbacsk function which has pointer to 
  *                   a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                          
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 8001354:	b480      	push	{r7}
 8001356:	b087      	sub	sp, #28
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	460b      	mov	r3, r1
 800135e:	607a      	str	r2, [r7, #4]
 8001360:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001362:	2300      	movs	r3, #0
 8001364:	75fb      	strb	r3, [r7, #23]
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	f893 3020 	ldrb.w	r3, [r3, #32]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d101      	bne.n	8001374 <HAL_DMA_RegisterCallback+0x20>
 8001370:	2302      	movs	r3, #2
 8001372:	e031      	b.n	80013d8 <HAL_DMA_RegisterCallback+0x84>
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2201      	movs	r2, #1
 8001378:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001382:	2b01      	cmp	r3, #1
 8001384:	d121      	bne.n	80013ca <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 8001386:	7afb      	ldrb	r3, [r7, #11]
 8001388:	2b03      	cmp	r3, #3
 800138a:	d81b      	bhi.n	80013c4 <HAL_DMA_RegisterCallback+0x70>
 800138c:	a201      	add	r2, pc, #4	; (adr r2, 8001394 <HAL_DMA_RegisterCallback+0x40>)
 800138e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001392:	bf00      	nop
 8001394:	080013a5 	.word	0x080013a5
 8001398:	080013ad 	.word	0x080013ad
 800139c:	080013b5 	.word	0x080013b5
 80013a0:	080013bd 	.word	0x080013bd
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80013aa:	e010      	b.n	80013ce <HAL_DMA_RegisterCallback+0x7a>
      
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	62da      	str	r2, [r3, #44]	; 0x2c
      break;         
 80013b2:	e00c      	b.n	80013ce <HAL_DMA_RegisterCallback+0x7a>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	631a      	str	r2, [r3, #48]	; 0x30
      break;         
 80013ba:	e008      	b.n	80013ce <HAL_DMA_RegisterCallback+0x7a>
      
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	635a      	str	r2, [r3, #52]	; 0x34
      break; 
 80013c2:	e004      	b.n	80013ce <HAL_DMA_RegisterCallback+0x7a>
      
    default:
      status = HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	75fb      	strb	r3, [r7, #23]
      break;                                                            
 80013c8:	e001      	b.n	80013ce <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	75fb      	strb	r3, [r7, #23]
  } 
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2200      	movs	r2, #0
 80013d2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status;
 80013d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	371c      	adds	r7, #28
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc80      	pop	{r7}
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop

080013e4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
 80013f0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013fa:	2101      	movs	r1, #1
 80013fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001400:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	2b10      	cmp	r3, #16
 8001410:	d108      	bne.n	8001424 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	68ba      	ldr	r2, [r7, #8]
 8001420:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001422:	e007      	b.n	8001434 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	68ba      	ldr	r2, [r7, #8]
 800142a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	60da      	str	r2, [r3, #12]
}
 8001434:	bf00      	nop
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr
	...

08001440 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001440:	b480      	push	{r7}
 8001442:	b08b      	sub	sp, #44	; 0x2c
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800144a:	2300      	movs	r3, #0
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800144e:	2300      	movs	r3, #0
 8001450:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001452:	e169      	b.n	8001728 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001454:	2201      	movs	r2, #1
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	69fa      	ldr	r2, [r7, #28]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	429a      	cmp	r2, r3
 800146e:	f040 8158 	bne.w	8001722 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	4a9a      	ldr	r2, [pc, #616]	; (80016e0 <HAL_GPIO_Init+0x2a0>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d05e      	beq.n	800153a <HAL_GPIO_Init+0xfa>
 800147c:	4a98      	ldr	r2, [pc, #608]	; (80016e0 <HAL_GPIO_Init+0x2a0>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d875      	bhi.n	800156e <HAL_GPIO_Init+0x12e>
 8001482:	4a98      	ldr	r2, [pc, #608]	; (80016e4 <HAL_GPIO_Init+0x2a4>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d058      	beq.n	800153a <HAL_GPIO_Init+0xfa>
 8001488:	4a96      	ldr	r2, [pc, #600]	; (80016e4 <HAL_GPIO_Init+0x2a4>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d86f      	bhi.n	800156e <HAL_GPIO_Init+0x12e>
 800148e:	4a96      	ldr	r2, [pc, #600]	; (80016e8 <HAL_GPIO_Init+0x2a8>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d052      	beq.n	800153a <HAL_GPIO_Init+0xfa>
 8001494:	4a94      	ldr	r2, [pc, #592]	; (80016e8 <HAL_GPIO_Init+0x2a8>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d869      	bhi.n	800156e <HAL_GPIO_Init+0x12e>
 800149a:	4a94      	ldr	r2, [pc, #592]	; (80016ec <HAL_GPIO_Init+0x2ac>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d04c      	beq.n	800153a <HAL_GPIO_Init+0xfa>
 80014a0:	4a92      	ldr	r2, [pc, #584]	; (80016ec <HAL_GPIO_Init+0x2ac>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d863      	bhi.n	800156e <HAL_GPIO_Init+0x12e>
 80014a6:	4a92      	ldr	r2, [pc, #584]	; (80016f0 <HAL_GPIO_Init+0x2b0>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d046      	beq.n	800153a <HAL_GPIO_Init+0xfa>
 80014ac:	4a90      	ldr	r2, [pc, #576]	; (80016f0 <HAL_GPIO_Init+0x2b0>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d85d      	bhi.n	800156e <HAL_GPIO_Init+0x12e>
 80014b2:	2b12      	cmp	r3, #18
 80014b4:	d82a      	bhi.n	800150c <HAL_GPIO_Init+0xcc>
 80014b6:	2b12      	cmp	r3, #18
 80014b8:	d859      	bhi.n	800156e <HAL_GPIO_Init+0x12e>
 80014ba:	a201      	add	r2, pc, #4	; (adr r2, 80014c0 <HAL_GPIO_Init+0x80>)
 80014bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c0:	0800153b 	.word	0x0800153b
 80014c4:	08001515 	.word	0x08001515
 80014c8:	08001527 	.word	0x08001527
 80014cc:	08001569 	.word	0x08001569
 80014d0:	0800156f 	.word	0x0800156f
 80014d4:	0800156f 	.word	0x0800156f
 80014d8:	0800156f 	.word	0x0800156f
 80014dc:	0800156f 	.word	0x0800156f
 80014e0:	0800156f 	.word	0x0800156f
 80014e4:	0800156f 	.word	0x0800156f
 80014e8:	0800156f 	.word	0x0800156f
 80014ec:	0800156f 	.word	0x0800156f
 80014f0:	0800156f 	.word	0x0800156f
 80014f4:	0800156f 	.word	0x0800156f
 80014f8:	0800156f 	.word	0x0800156f
 80014fc:	0800156f 	.word	0x0800156f
 8001500:	0800156f 	.word	0x0800156f
 8001504:	0800151d 	.word	0x0800151d
 8001508:	08001531 	.word	0x08001531
 800150c:	4a79      	ldr	r2, [pc, #484]	; (80016f4 <HAL_GPIO_Init+0x2b4>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d013      	beq.n	800153a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001512:	e02c      	b.n	800156e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	623b      	str	r3, [r7, #32]
          break;
 800151a:	e029      	b.n	8001570 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	3304      	adds	r3, #4
 8001522:	623b      	str	r3, [r7, #32]
          break;
 8001524:	e024      	b.n	8001570 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	3308      	adds	r3, #8
 800152c:	623b      	str	r3, [r7, #32]
          break;
 800152e:	e01f      	b.n	8001570 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	330c      	adds	r3, #12
 8001536:	623b      	str	r3, [r7, #32]
          break;
 8001538:	e01a      	b.n	8001570 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d102      	bne.n	8001548 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001542:	2304      	movs	r3, #4
 8001544:	623b      	str	r3, [r7, #32]
          break;
 8001546:	e013      	b.n	8001570 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d105      	bne.n	800155c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001550:	2308      	movs	r3, #8
 8001552:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69fa      	ldr	r2, [r7, #28]
 8001558:	611a      	str	r2, [r3, #16]
          break;
 800155a:	e009      	b.n	8001570 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800155c:	2308      	movs	r3, #8
 800155e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	69fa      	ldr	r2, [r7, #28]
 8001564:	615a      	str	r2, [r3, #20]
          break;
 8001566:	e003      	b.n	8001570 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001568:	2300      	movs	r3, #0
 800156a:	623b      	str	r3, [r7, #32]
          break;
 800156c:	e000      	b.n	8001570 <HAL_GPIO_Init+0x130>
          break;
 800156e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	2bff      	cmp	r3, #255	; 0xff
 8001574:	d801      	bhi.n	800157a <HAL_GPIO_Init+0x13a>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	e001      	b.n	800157e <HAL_GPIO_Init+0x13e>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	3304      	adds	r3, #4
 800157e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	2bff      	cmp	r3, #255	; 0xff
 8001584:	d802      	bhi.n	800158c <HAL_GPIO_Init+0x14c>
 8001586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	e002      	b.n	8001592 <HAL_GPIO_Init+0x152>
 800158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158e:	3b08      	subs	r3, #8
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	210f      	movs	r1, #15
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	fa01 f303 	lsl.w	r3, r1, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	401a      	ands	r2, r3
 80015a4:	6a39      	ldr	r1, [r7, #32]
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	fa01 f303 	lsl.w	r3, r1, r3
 80015ac:	431a      	orrs	r2, r3
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f000 80b1 	beq.w	8001722 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015c0:	4b4d      	ldr	r3, [pc, #308]	; (80016f8 <HAL_GPIO_Init+0x2b8>)
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	4a4c      	ldr	r2, [pc, #304]	; (80016f8 <HAL_GPIO_Init+0x2b8>)
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	6193      	str	r3, [r2, #24]
 80015cc:	4b4a      	ldr	r3, [pc, #296]	; (80016f8 <HAL_GPIO_Init+0x2b8>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015d8:	4a48      	ldr	r2, [pc, #288]	; (80016fc <HAL_GPIO_Init+0x2bc>)
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	089b      	lsrs	r3, r3, #2
 80015de:	3302      	adds	r3, #2
 80015e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e8:	f003 0303 	and.w	r3, r3, #3
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	220f      	movs	r2, #15
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	4013      	ands	r3, r2
 80015fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a40      	ldr	r2, [pc, #256]	; (8001700 <HAL_GPIO_Init+0x2c0>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d013      	beq.n	800162c <HAL_GPIO_Init+0x1ec>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a3f      	ldr	r2, [pc, #252]	; (8001704 <HAL_GPIO_Init+0x2c4>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d00d      	beq.n	8001628 <HAL_GPIO_Init+0x1e8>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a3e      	ldr	r2, [pc, #248]	; (8001708 <HAL_GPIO_Init+0x2c8>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d007      	beq.n	8001624 <HAL_GPIO_Init+0x1e4>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a3d      	ldr	r2, [pc, #244]	; (800170c <HAL_GPIO_Init+0x2cc>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d101      	bne.n	8001620 <HAL_GPIO_Init+0x1e0>
 800161c:	2303      	movs	r3, #3
 800161e:	e006      	b.n	800162e <HAL_GPIO_Init+0x1ee>
 8001620:	2304      	movs	r3, #4
 8001622:	e004      	b.n	800162e <HAL_GPIO_Init+0x1ee>
 8001624:	2302      	movs	r3, #2
 8001626:	e002      	b.n	800162e <HAL_GPIO_Init+0x1ee>
 8001628:	2301      	movs	r3, #1
 800162a:	e000      	b.n	800162e <HAL_GPIO_Init+0x1ee>
 800162c:	2300      	movs	r3, #0
 800162e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001630:	f002 0203 	and.w	r2, r2, #3
 8001634:	0092      	lsls	r2, r2, #2
 8001636:	4093      	lsls	r3, r2
 8001638:	68fa      	ldr	r2, [r7, #12]
 800163a:	4313      	orrs	r3, r2
 800163c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800163e:	492f      	ldr	r1, [pc, #188]	; (80016fc <HAL_GPIO_Init+0x2bc>)
 8001640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001642:	089b      	lsrs	r3, r3, #2
 8001644:	3302      	adds	r3, #2
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d006      	beq.n	8001666 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001658:	4b2d      	ldr	r3, [pc, #180]	; (8001710 <HAL_GPIO_Init+0x2d0>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	492c      	ldr	r1, [pc, #176]	; (8001710 <HAL_GPIO_Init+0x2d0>)
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	4313      	orrs	r3, r2
 8001662:	600b      	str	r3, [r1, #0]
 8001664:	e006      	b.n	8001674 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001666:	4b2a      	ldr	r3, [pc, #168]	; (8001710 <HAL_GPIO_Init+0x2d0>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	43db      	mvns	r3, r3
 800166e:	4928      	ldr	r1, [pc, #160]	; (8001710 <HAL_GPIO_Init+0x2d0>)
 8001670:	4013      	ands	r3, r2
 8001672:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d006      	beq.n	800168e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001680:	4b23      	ldr	r3, [pc, #140]	; (8001710 <HAL_GPIO_Init+0x2d0>)
 8001682:	685a      	ldr	r2, [r3, #4]
 8001684:	4922      	ldr	r1, [pc, #136]	; (8001710 <HAL_GPIO_Init+0x2d0>)
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	4313      	orrs	r3, r2
 800168a:	604b      	str	r3, [r1, #4]
 800168c:	e006      	b.n	800169c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800168e:	4b20      	ldr	r3, [pc, #128]	; (8001710 <HAL_GPIO_Init+0x2d0>)
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	43db      	mvns	r3, r3
 8001696:	491e      	ldr	r1, [pc, #120]	; (8001710 <HAL_GPIO_Init+0x2d0>)
 8001698:	4013      	ands	r3, r2
 800169a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d006      	beq.n	80016b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016a8:	4b19      	ldr	r3, [pc, #100]	; (8001710 <HAL_GPIO_Init+0x2d0>)
 80016aa:	689a      	ldr	r2, [r3, #8]
 80016ac:	4918      	ldr	r1, [pc, #96]	; (8001710 <HAL_GPIO_Init+0x2d0>)
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	608b      	str	r3, [r1, #8]
 80016b4:	e006      	b.n	80016c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016b6:	4b16      	ldr	r3, [pc, #88]	; (8001710 <HAL_GPIO_Init+0x2d0>)
 80016b8:	689a      	ldr	r2, [r3, #8]
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	43db      	mvns	r3, r3
 80016be:	4914      	ldr	r1, [pc, #80]	; (8001710 <HAL_GPIO_Init+0x2d0>)
 80016c0:	4013      	ands	r3, r2
 80016c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d021      	beq.n	8001714 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016d0:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <HAL_GPIO_Init+0x2d0>)
 80016d2:	68da      	ldr	r2, [r3, #12]
 80016d4:	490e      	ldr	r1, [pc, #56]	; (8001710 <HAL_GPIO_Init+0x2d0>)
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	4313      	orrs	r3, r2
 80016da:	60cb      	str	r3, [r1, #12]
 80016dc:	e021      	b.n	8001722 <HAL_GPIO_Init+0x2e2>
 80016de:	bf00      	nop
 80016e0:	10320000 	.word	0x10320000
 80016e4:	10310000 	.word	0x10310000
 80016e8:	10220000 	.word	0x10220000
 80016ec:	10210000 	.word	0x10210000
 80016f0:	10120000 	.word	0x10120000
 80016f4:	10110000 	.word	0x10110000
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40010000 	.word	0x40010000
 8001700:	40010800 	.word	0x40010800
 8001704:	40010c00 	.word	0x40010c00
 8001708:	40011000 	.word	0x40011000
 800170c:	40011400 	.word	0x40011400
 8001710:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001714:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <HAL_GPIO_Init+0x304>)
 8001716:	68da      	ldr	r2, [r3, #12]
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	43db      	mvns	r3, r3
 800171c:	4909      	ldr	r1, [pc, #36]	; (8001744 <HAL_GPIO_Init+0x304>)
 800171e:	4013      	ands	r3, r2
 8001720:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	3301      	adds	r3, #1
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172e:	fa22 f303 	lsr.w	r3, r2, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	f47f ae8e 	bne.w	8001454 <HAL_GPIO_Init+0x14>
  }
}
 8001738:	bf00      	nop
 800173a:	bf00      	nop
 800173c:	372c      	adds	r7, #44	; 0x2c
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr
 8001744:	40010400 	.word	0x40010400

08001748 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	460b      	mov	r3, r1
 8001752:	807b      	strh	r3, [r7, #2]
 8001754:	4613      	mov	r3, r2
 8001756:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001758:	787b      	ldrb	r3, [r7, #1]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800175e:	887a      	ldrh	r2, [r7, #2]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001764:	e003      	b.n	800176e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001766:	887b      	ldrh	r3, [r7, #2]
 8001768:	041a      	lsls	r2, r3, #16
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	611a      	str	r2, [r3, #16]
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr

08001778 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	460b      	mov	r3, r1
 8001782:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800178a:	887a      	ldrh	r2, [r7, #2]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	4013      	ands	r3, r2
 8001790:	041a      	lsls	r2, r3, #16
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	43d9      	mvns	r1, r3
 8001796:	887b      	ldrh	r3, [r7, #2]
 8001798:	400b      	ands	r3, r1
 800179a:	431a      	orrs	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	611a      	str	r2, [r3, #16]
}
 80017a0:	bf00      	nop
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr
	...

080017ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017b6:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017b8:	695a      	ldr	r2, [r3, #20]
 80017ba:	88fb      	ldrh	r3, [r7, #6]
 80017bc:	4013      	ands	r3, r2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d006      	beq.n	80017d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017c2:	4a05      	ldr	r2, [pc, #20]	; (80017d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017c4:	88fb      	ldrh	r3, [r7, #6]
 80017c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017c8:	88fb      	ldrh	r3, [r7, #6]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f000 f806 	bl	80017dc <HAL_GPIO_EXTI_Callback>
  }
}
 80017d0:	bf00      	nop
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40010400 	.word	0x40010400

080017dc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr

080017f0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017f2:	b08b      	sub	sp, #44	; 0x2c
 80017f4:	af06      	add	r7, sp, #24
 80017f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e0fd      	b.n	80019fe <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	d106      	bne.n	800181c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f006 fca2 	bl	8008160 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2203      	movs	r2, #3
 8001820:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f002 fe05 	bl	8004438 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	603b      	str	r3, [r7, #0]
 8001834:	687e      	ldr	r6, [r7, #4]
 8001836:	466d      	mov	r5, sp
 8001838:	f106 0410 	add.w	r4, r6, #16
 800183c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800183e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001840:	6823      	ldr	r3, [r4, #0]
 8001842:	602b      	str	r3, [r5, #0]
 8001844:	1d33      	adds	r3, r6, #4
 8001846:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001848:	6838      	ldr	r0, [r7, #0]
 800184a:	f002 fdcf 	bl	80043ec <USB_CoreInit>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d005      	beq.n	8001860 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2202      	movs	r2, #2
 8001858:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e0ce      	b.n	80019fe <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2100      	movs	r1, #0
 8001866:	4618      	mov	r0, r3
 8001868:	f002 fe00 	bl	800446c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800186c:	2300      	movs	r3, #0
 800186e:	73fb      	strb	r3, [r7, #15]
 8001870:	e04c      	b.n	800190c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001872:	7bfb      	ldrb	r3, [r7, #15]
 8001874:	6879      	ldr	r1, [r7, #4]
 8001876:	1c5a      	adds	r2, r3, #1
 8001878:	4613      	mov	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	440b      	add	r3, r1
 8001882:	3301      	adds	r3, #1
 8001884:	2201      	movs	r2, #1
 8001886:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001888:	7bfb      	ldrb	r3, [r7, #15]
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	1c5a      	adds	r2, r3, #1
 800188e:	4613      	mov	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	440b      	add	r3, r1
 8001898:	7bfa      	ldrb	r2, [r7, #15]
 800189a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800189c:	7bfa      	ldrb	r2, [r7, #15]
 800189e:	7bfb      	ldrb	r3, [r7, #15]
 80018a0:	b298      	uxth	r0, r3
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	4613      	mov	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	440b      	add	r3, r1
 80018ae:	3336      	adds	r3, #54	; 0x36
 80018b0:	4602      	mov	r2, r0
 80018b2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018b4:	7bfb      	ldrb	r3, [r7, #15]
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	1c5a      	adds	r2, r3, #1
 80018ba:	4613      	mov	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4413      	add	r3, r2
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	440b      	add	r3, r1
 80018c4:	3303      	adds	r3, #3
 80018c6:	2200      	movs	r2, #0
 80018c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80018ca:	7bfa      	ldrb	r2, [r7, #15]
 80018cc:	6879      	ldr	r1, [r7, #4]
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	440b      	add	r3, r1
 80018d8:	3338      	adds	r3, #56	; 0x38
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80018de:	7bfa      	ldrb	r2, [r7, #15]
 80018e0:	6879      	ldr	r1, [r7, #4]
 80018e2:	4613      	mov	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	440b      	add	r3, r1
 80018ec:	333c      	adds	r3, #60	; 0x3c
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80018f2:	7bfa      	ldrb	r2, [r7, #15]
 80018f4:	6879      	ldr	r1, [r7, #4]
 80018f6:	4613      	mov	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	440b      	add	r3, r1
 8001900:	3340      	adds	r3, #64	; 0x40
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001906:	7bfb      	ldrb	r3, [r7, #15]
 8001908:	3301      	adds	r3, #1
 800190a:	73fb      	strb	r3, [r7, #15]
 800190c:	7bfa      	ldrb	r2, [r7, #15]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	429a      	cmp	r2, r3
 8001914:	d3ad      	bcc.n	8001872 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001916:	2300      	movs	r3, #0
 8001918:	73fb      	strb	r3, [r7, #15]
 800191a:	e044      	b.n	80019a6 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800191c:	7bfa      	ldrb	r2, [r7, #15]
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	4613      	mov	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	440b      	add	r3, r1
 800192a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800192e:	2200      	movs	r2, #0
 8001930:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001932:	7bfa      	ldrb	r2, [r7, #15]
 8001934:	6879      	ldr	r1, [r7, #4]
 8001936:	4613      	mov	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	440b      	add	r3, r1
 8001940:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001944:	7bfa      	ldrb	r2, [r7, #15]
 8001946:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001948:	7bfa      	ldrb	r2, [r7, #15]
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	440b      	add	r3, r1
 8001956:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800195e:	7bfa      	ldrb	r2, [r7, #15]
 8001960:	6879      	ldr	r1, [r7, #4]
 8001962:	4613      	mov	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	440b      	add	r3, r1
 800196c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001974:	7bfa      	ldrb	r2, [r7, #15]
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	4613      	mov	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4413      	add	r3, r2
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	440b      	add	r3, r1
 8001982:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800198a:	7bfa      	ldrb	r2, [r7, #15]
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	4613      	mov	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4413      	add	r3, r2
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	440b      	add	r3, r1
 8001998:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019a0:	7bfb      	ldrb	r3, [r7, #15]
 80019a2:	3301      	adds	r3, #1
 80019a4:	73fb      	strb	r3, [r7, #15]
 80019a6:	7bfa      	ldrb	r2, [r7, #15]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d3b5      	bcc.n	800191c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	603b      	str	r3, [r7, #0]
 80019b6:	687e      	ldr	r6, [r7, #4]
 80019b8:	466d      	mov	r5, sp
 80019ba:	f106 0410 	add.w	r4, r6, #16
 80019be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019c2:	6823      	ldr	r3, [r4, #0]
 80019c4:	602b      	str	r3, [r5, #0]
 80019c6:	1d33      	adds	r3, r6, #4
 80019c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019ca:	6838      	ldr	r0, [r7, #0]
 80019cc:	f002 fd5a 	bl	8004484 <USB_DevInit>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d005      	beq.n	80019e2 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2202      	movs	r2, #2
 80019da:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e00d      	b.n	80019fe <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f004 fcf4 	bl	80063e4 <USB_DevDisconnect>

  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a06 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d101      	bne.n	8001a1c <HAL_PCD_Start+0x16>
 8001a18:	2302      	movs	r3, #2
 8001a1a:	e016      	b.n	8001a4a <HAL_PCD_Start+0x44>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f002 fcef 	bl	800440c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001a2e:	2101      	movs	r1, #1
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f006 fe08 	bl	8008646 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f004 fcc8 	bl	80063d0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b088      	sub	sp, #32
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f004 fcca 	bl	80063f8 <USB_ReadInterrupts>
 8001a64:	4603      	mov	r3, r0
 8001a66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a6e:	d102      	bne.n	8001a76 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 fb61 	bl	8002138 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f004 fcbc 	bl	80063f8 <USB_ReadInterrupts>
 8001a80:	4603      	mov	r3, r0
 8001a82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a8a:	d112      	bne.n	8001ab2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a9e:	b292      	uxth	r2, r2
 8001aa0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f006 fbd6 	bl	8008256 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001aaa:	2100      	movs	r1, #0
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f000 f925 	bl	8001cfc <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f004 fc9e 	bl	80063f8 <USB_ReadInterrupts>
 8001abc:	4603      	mov	r3, r0
 8001abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ac2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ac6:	d10b      	bne.n	8001ae0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001ada:	b292      	uxth	r2, r2
 8001adc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f004 fc87 	bl	80063f8 <USB_ReadInterrupts>
 8001aea:	4603      	mov	r3, r0
 8001aec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001af0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001af4:	d10b      	bne.n	8001b0e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b08:	b292      	uxth	r2, r2
 8001b0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f004 fc70 	bl	80063f8 <USB_ReadInterrupts>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b22:	d126      	bne.n	8001b72 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f022 0204 	bic.w	r2, r2, #4
 8001b36:	b292      	uxth	r2, r2
 8001b38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 0208 	bic.w	r2, r2, #8
 8001b4e:	b292      	uxth	r2, r2
 8001b50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f006 fbb7 	bl	80082c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b6c:	b292      	uxth	r2, r2
 8001b6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f004 fc3e 	bl	80063f8 <USB_ReadInterrupts>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b86:	f040 8084 	bne.w	8001c92 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	77fb      	strb	r3, [r7, #31]
 8001b8e:	e011      	b.n	8001bb4 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	461a      	mov	r2, r3
 8001b96:	7ffb      	ldrb	r3, [r7, #31]
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	441a      	add	r2, r3
 8001b9c:	7ffb      	ldrb	r3, [r7, #31]
 8001b9e:	8812      	ldrh	r2, [r2, #0]
 8001ba0:	b292      	uxth	r2, r2
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	f107 0120 	add.w	r1, r7, #32
 8001ba8:	440b      	add	r3, r1
 8001baa:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001bae:	7ffb      	ldrb	r3, [r7, #31]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	77fb      	strb	r3, [r7, #31]
 8001bb4:	7ffb      	ldrb	r3, [r7, #31]
 8001bb6:	2b07      	cmp	r3, #7
 8001bb8:	d9ea      	bls.n	8001b90 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f042 0201 	orr.w	r2, r2, #1
 8001bcc:	b292      	uxth	r2, r2
 8001bce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 0201 	bic.w	r2, r2, #1
 8001be4:	b292      	uxth	r2, r2
 8001be6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001bea:	bf00      	nop
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d0f6      	beq.n	8001bec <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c10:	b292      	uxth	r2, r2
 8001c12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001c16:	2300      	movs	r3, #0
 8001c18:	77fb      	strb	r3, [r7, #31]
 8001c1a:	e010      	b.n	8001c3e <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001c1c:	7ffb      	ldrb	r3, [r7, #31]
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	6812      	ldr	r2, [r2, #0]
 8001c22:	4611      	mov	r1, r2
 8001c24:	7ffa      	ldrb	r2, [r7, #31]
 8001c26:	0092      	lsls	r2, r2, #2
 8001c28:	440a      	add	r2, r1
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	f107 0120 	add.w	r1, r7, #32
 8001c30:	440b      	add	r3, r1
 8001c32:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001c36:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001c38:	7ffb      	ldrb	r3, [r7, #31]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	77fb      	strb	r3, [r7, #31]
 8001c3e:	7ffb      	ldrb	r3, [r7, #31]
 8001c40:	2b07      	cmp	r3, #7
 8001c42:	d9eb      	bls.n	8001c1c <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f042 0208 	orr.w	r2, r2, #8
 8001c56:	b292      	uxth	r2, r2
 8001c58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c6e:	b292      	uxth	r2, r2
 8001c70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f042 0204 	orr.w	r2, r2, #4
 8001c86:	b292      	uxth	r2, r2
 8001c88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f006 fb01 	bl	8008294 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f004 fbae 	bl	80063f8 <USB_ReadInterrupts>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ca2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ca6:	d10e      	bne.n	8001cc6 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001cba:	b292      	uxth	r2, r2
 8001cbc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f006 faba 	bl	800823a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f004 fb94 	bl	80063f8 <USB_ReadInterrupts>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cda:	d10b      	bne.n	8001cf4 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cee:	b292      	uxth	r2, r2
 8001cf0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001cf4:	bf00      	nop
 8001cf6:	3720      	adds	r7, #32
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	460b      	mov	r3, r1
 8001d06:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d101      	bne.n	8001d16 <HAL_PCD_SetAddress+0x1a>
 8001d12:	2302      	movs	r3, #2
 8001d14:	e013      	b.n	8001d3e <HAL_PCD_SetAddress+0x42>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	78fa      	ldrb	r2, [r7, #3]
 8001d22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	78fa      	ldrb	r2, [r7, #3]
 8001d2c:	4611      	mov	r1, r2
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f004 fb3b 	bl	80063aa <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b084      	sub	sp, #16
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
 8001d4e:	4608      	mov	r0, r1
 8001d50:	4611      	mov	r1, r2
 8001d52:	461a      	mov	r2, r3
 8001d54:	4603      	mov	r3, r0
 8001d56:	70fb      	strb	r3, [r7, #3]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	803b      	strh	r3, [r7, #0]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d60:	2300      	movs	r3, #0
 8001d62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	da0e      	bge.n	8001d8a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d6c:	78fb      	ldrb	r3, [r7, #3]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	1c5a      	adds	r2, r3, #1
 8001d74:	4613      	mov	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	4413      	add	r3, r2
 8001d80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2201      	movs	r2, #1
 8001d86:	705a      	strb	r2, [r3, #1]
 8001d88:	e00e      	b.n	8001da8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d8a:	78fb      	ldrb	r3, [r7, #3]
 8001d8c:	f003 0207 	and.w	r2, r3, #7
 8001d90:	4613      	mov	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	4413      	add	r3, r2
 8001da0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001da8:	78fb      	ldrb	r3, [r7, #3]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001db4:	883a      	ldrh	r2, [r7, #0]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	78ba      	ldrb	r2, [r7, #2]
 8001dbe:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	785b      	ldrb	r3, [r3, #1]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d004      	beq.n	8001dd2 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001dd2:	78bb      	ldrb	r3, [r7, #2]
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d102      	bne.n	8001dde <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d101      	bne.n	8001dec <HAL_PCD_EP_Open+0xa6>
 8001de8:	2302      	movs	r3, #2
 8001dea:	e00e      	b.n	8001e0a <HAL_PCD_EP_Open+0xc4>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68f9      	ldr	r1, [r7, #12]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f002 fb62 	bl	80044c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001e08:	7afb      	ldrb	r3, [r7, #11]
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b084      	sub	sp, #16
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	da0e      	bge.n	8001e44 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e26:	78fb      	ldrb	r3, [r7, #3]
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	1c5a      	adds	r2, r3, #1
 8001e2e:	4613      	mov	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4413      	add	r3, r2
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	4413      	add	r3, r2
 8001e3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	705a      	strb	r2, [r3, #1]
 8001e42:	e00e      	b.n	8001e62 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e44:	78fb      	ldrb	r3, [r7, #3]
 8001e46:	f003 0207 	and.w	r2, r3, #7
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4413      	add	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	4413      	add	r3, r2
 8001e5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e62:	78fb      	ldrb	r3, [r7, #3]
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d101      	bne.n	8001e7c <HAL_PCD_EP_Close+0x6a>
 8001e78:	2302      	movs	r3, #2
 8001e7a:	e00e      	b.n	8001e9a <HAL_PCD_EP_Close+0x88>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68f9      	ldr	r1, [r7, #12]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f002 fe84 	bl	8004b98 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b086      	sub	sp, #24
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60f8      	str	r0, [r7, #12]
 8001eaa:	607a      	str	r2, [r7, #4]
 8001eac:	603b      	str	r3, [r7, #0]
 8001eae:	460b      	mov	r3, r1
 8001eb0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001eb2:	7afb      	ldrb	r3, [r7, #11]
 8001eb4:	f003 0207 	and.w	r2, r3, #7
 8001eb8:	4613      	mov	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4413      	add	r3, r2
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ee2:	7afb      	ldrb	r3, [r7, #11]
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001eee:	7afb      	ldrb	r3, [r7, #11]
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d106      	bne.n	8001f06 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6979      	ldr	r1, [r7, #20]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f003 f836 	bl	8004f70 <USB_EPStartXfer>
 8001f04:	e005      	b.n	8001f12 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	6979      	ldr	r1, [r7, #20]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f003 f82f 	bl	8004f70 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3718      	adds	r7, #24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f28:	78fb      	ldrb	r3, [r7, #3]
 8001f2a:	f003 0207 	and.w	r2, r3, #7
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	4613      	mov	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	440b      	add	r3, r1
 8001f3a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001f3e:	681b      	ldr	r3, [r3, #0]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bc80      	pop	{r7}
 8001f48:	4770      	bx	lr

08001f4a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b086      	sub	sp, #24
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	60f8      	str	r0, [r7, #12]
 8001f52:	607a      	str	r2, [r7, #4]
 8001f54:	603b      	str	r3, [r7, #0]
 8001f56:	460b      	mov	r3, r1
 8001f58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f5a:	7afb      	ldrb	r3, [r7, #11]
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	1c5a      	adds	r2, r3, #1
 8001f62:	4613      	mov	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4413      	add	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	2201      	movs	r2, #1
 8001f94:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f96:	7afb      	ldrb	r3, [r7, #11]
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fa2:	7afb      	ldrb	r3, [r7, #11]
 8001fa4:	f003 0307 	and.w	r3, r3, #7
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d106      	bne.n	8001fba <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6979      	ldr	r1, [r7, #20]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f002 ffdc 	bl	8004f70 <USB_EPStartXfer>
 8001fb8:	e005      	b.n	8001fc6 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6979      	ldr	r1, [r7, #20]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f002 ffd5 	bl	8004f70 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001fdc:	78fb      	ldrb	r3, [r7, #3]
 8001fde:	f003 0207 	and.w	r2, r3, #7
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d901      	bls.n	8001fee <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e04c      	b.n	8002088 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	da0e      	bge.n	8002014 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ff6:	78fb      	ldrb	r3, [r7, #3]
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	1c5a      	adds	r2, r3, #1
 8001ffe:	4613      	mov	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	4413      	add	r3, r2
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	4413      	add	r3, r2
 800200a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2201      	movs	r2, #1
 8002010:	705a      	strb	r2, [r3, #1]
 8002012:	e00c      	b.n	800202e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002014:	78fa      	ldrb	r2, [r7, #3]
 8002016:	4613      	mov	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	4413      	add	r3, r2
 8002026:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2201      	movs	r2, #1
 8002032:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002034:	78fb      	ldrb	r3, [r7, #3]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	b2da      	uxtb	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002046:	2b01      	cmp	r3, #1
 8002048:	d101      	bne.n	800204e <HAL_PCD_EP_SetStall+0x7e>
 800204a:	2302      	movs	r3, #2
 800204c:	e01c      	b.n	8002088 <HAL_PCD_EP_SetStall+0xb8>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68f9      	ldr	r1, [r7, #12]
 800205c:	4618      	mov	r0, r3
 800205e:	f004 f8a7 	bl	80061b0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002062:	78fb      	ldrb	r3, [r7, #3]
 8002064:	f003 0307 	and.w	r3, r3, #7
 8002068:	2b00      	cmp	r3, #0
 800206a:	d108      	bne.n	800207e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002076:	4619      	mov	r1, r3
 8002078:	4610      	mov	r0, r2
 800207a:	f004 f9cc 	bl	8006416 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	460b      	mov	r3, r1
 800209a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800209c:	78fb      	ldrb	r3, [r7, #3]
 800209e:	f003 020f 	and.w	r2, r3, #15
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d901      	bls.n	80020ae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e040      	b.n	8002130 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	da0e      	bge.n	80020d4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020b6:	78fb      	ldrb	r3, [r7, #3]
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	1c5a      	adds	r2, r3, #1
 80020be:	4613      	mov	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	4413      	add	r3, r2
 80020ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2201      	movs	r2, #1
 80020d0:	705a      	strb	r2, [r3, #1]
 80020d2:	e00e      	b.n	80020f2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020d4:	78fb      	ldrb	r3, [r7, #3]
 80020d6:	f003 0207 	and.w	r2, r3, #7
 80020da:	4613      	mov	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	4413      	add	r3, r2
 80020ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2200      	movs	r2, #0
 80020f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020f8:	78fb      	ldrb	r3, [r7, #3]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800210a:	2b01      	cmp	r3, #1
 800210c:	d101      	bne.n	8002112 <HAL_PCD_EP_ClrStall+0x82>
 800210e:	2302      	movs	r3, #2
 8002110:	e00e      	b.n	8002130 <HAL_PCD_EP_ClrStall+0xa0>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68f9      	ldr	r1, [r7, #12]
 8002120:	4618      	mov	r0, r3
 8002122:	f004 f895 	bl	8006250 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3710      	adds	r7, #16
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b08e      	sub	sp, #56	; 0x38
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002140:	e2df      	b.n	8002702 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800214a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800214c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800214e:	b2db      	uxtb	r3, r3
 8002150:	f003 030f 	and.w	r3, r3, #15
 8002154:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002158:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800215c:	2b00      	cmp	r3, #0
 800215e:	f040 8158 	bne.w	8002412 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002162:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002164:	f003 0310 	and.w	r3, r3, #16
 8002168:	2b00      	cmp	r3, #0
 800216a:	d152      	bne.n	8002212 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	881b      	ldrh	r3, [r3, #0]
 8002172:	b29b      	uxth	r3, r3
 8002174:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002178:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800217c:	81fb      	strh	r3, [r7, #14]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	89fb      	ldrh	r3, [r7, #14]
 8002184:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002188:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800218c:	b29b      	uxth	r3, r3
 800218e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3328      	adds	r3, #40	; 0x28
 8002194:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800219e:	b29b      	uxth	r3, r3
 80021a0:	461a      	mov	r2, r3
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	4413      	add	r3, r2
 80021aa:	3302      	adds	r3, #2
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6812      	ldr	r2, [r2, #0]
 80021b2:	4413      	add	r3, r2
 80021b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021b8:	881b      	ldrh	r3, [r3, #0]
 80021ba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	695a      	ldr	r2, [r3, #20]
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	441a      	add	r2, r3
 80021cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ce:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80021d0:	2100      	movs	r1, #0
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f006 f817 	bl	8008206 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f000 828e 	beq.w	8002702 <PCD_EP_ISR_Handler+0x5ca>
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f040 8289 	bne.w	8002702 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80021fc:	b2da      	uxtb	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	b292      	uxth	r2, r2
 8002204:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002210:	e277      	b.n	8002702 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	881b      	ldrh	r3, [r3, #0]
 8002220:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002222:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002224:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002228:	2b00      	cmp	r3, #0
 800222a:	d034      	beq.n	8002296 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002234:	b29b      	uxth	r3, r3
 8002236:	461a      	mov	r2, r3
 8002238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	4413      	add	r3, r2
 8002240:	3306      	adds	r3, #6
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6812      	ldr	r2, [r2, #0]
 8002248:	4413      	add	r3, r2
 800224a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800224e:	881b      	ldrh	r3, [r3, #0]
 8002250:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6818      	ldr	r0, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800226a:	b29b      	uxth	r3, r3
 800226c:	f004 f923 	bl	80064b6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	881b      	ldrh	r3, [r3, #0]
 8002276:	b29a      	uxth	r2, r3
 8002278:	f640 738f 	movw	r3, #3983	; 0xf8f
 800227c:	4013      	ands	r3, r2
 800227e:	823b      	strh	r3, [r7, #16]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	8a3a      	ldrh	r2, [r7, #16]
 8002286:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800228a:	b292      	uxth	r2, r2
 800228c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f005 ff8c 	bl	80081ac <HAL_PCD_SetupStageCallback>
 8002294:	e235      	b.n	8002702 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002296:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800229a:	2b00      	cmp	r3, #0
 800229c:	f280 8231 	bge.w	8002702 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	881b      	ldrh	r3, [r3, #0]
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80022ac:	4013      	ands	r3, r2
 80022ae:	83bb      	strh	r3, [r7, #28]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	8bba      	ldrh	r2, [r7, #28]
 80022b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022ba:	b292      	uxth	r2, r2
 80022bc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	461a      	mov	r2, r3
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	4413      	add	r3, r2
 80022d2:	3306      	adds	r3, #6
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	6812      	ldr	r2, [r2, #0]
 80022da:	4413      	add	r3, r2
 80022dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022e0:	881b      	ldrh	r3, [r3, #0]
 80022e2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d019      	beq.n	8002326 <PCD_EP_ISR_Handler+0x1ee>
 80022f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d015      	beq.n	8002326 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6818      	ldr	r0, [r3, #0]
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	6959      	ldr	r1, [r3, #20]
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800230a:	b29b      	uxth	r3, r3
 800230c:	f004 f8d3 	bl	80064b6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	695a      	ldr	r2, [r3, #20]
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	69db      	ldr	r3, [r3, #28]
 8002318:	441a      	add	r2, r3
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800231e:	2100      	movs	r1, #0
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f005 ff55 	bl	80081d0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	61bb      	str	r3, [r7, #24]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002334:	b29b      	uxth	r3, r3
 8002336:	461a      	mov	r2, r3
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	4413      	add	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002344:	617b      	str	r3, [r7, #20]
 8002346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d112      	bne.n	8002374 <PCD_EP_ISR_Handler+0x23c>
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	b29b      	uxth	r3, r3
 8002354:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002358:	b29a      	uxth	r2, r3
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	801a      	strh	r2, [r3, #0]
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	881b      	ldrh	r3, [r3, #0]
 8002362:	b29b      	uxth	r3, r3
 8002364:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002368:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800236c:	b29a      	uxth	r2, r3
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	801a      	strh	r2, [r3, #0]
 8002372:	e02f      	b.n	80023d4 <PCD_EP_ISR_Handler+0x29c>
 8002374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	2b3e      	cmp	r3, #62	; 0x3e
 800237a:	d813      	bhi.n	80023a4 <PCD_EP_ISR_Handler+0x26c>
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	085b      	lsrs	r3, r3, #1
 8002382:	633b      	str	r3, [r7, #48]	; 0x30
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b00      	cmp	r3, #0
 800238e:	d002      	beq.n	8002396 <PCD_EP_ISR_Handler+0x25e>
 8002390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002392:	3301      	adds	r3, #1
 8002394:	633b      	str	r3, [r7, #48]	; 0x30
 8002396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002398:	b29b      	uxth	r3, r3
 800239a:	029b      	lsls	r3, r3, #10
 800239c:	b29a      	uxth	r2, r3
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	801a      	strh	r2, [r3, #0]
 80023a2:	e017      	b.n	80023d4 <PCD_EP_ISR_Handler+0x29c>
 80023a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	095b      	lsrs	r3, r3, #5
 80023aa:	633b      	str	r3, [r7, #48]	; 0x30
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	f003 031f 	and.w	r3, r3, #31
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d102      	bne.n	80023be <PCD_EP_ISR_Handler+0x286>
 80023b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ba:	3b01      	subs	r3, #1
 80023bc:	633b      	str	r3, [r7, #48]	; 0x30
 80023be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	029b      	lsls	r3, r3, #10
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	881b      	ldrh	r3, [r3, #0]
 80023da:	b29b      	uxth	r3, r3
 80023dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023e4:	827b      	strh	r3, [r7, #18]
 80023e6:	8a7b      	ldrh	r3, [r7, #18]
 80023e8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80023ec:	827b      	strh	r3, [r7, #18]
 80023ee:	8a7b      	ldrh	r3, [r7, #18]
 80023f0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80023f4:	827b      	strh	r3, [r7, #18]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	8a7b      	ldrh	r3, [r7, #18]
 80023fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002400:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002404:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800240c:	b29b      	uxth	r3, r3
 800240e:	8013      	strh	r3, [r2, #0]
 8002410:	e177      	b.n	8002702 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	461a      	mov	r2, r3
 8002418:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	881b      	ldrh	r3, [r3, #0]
 8002422:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002424:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002428:	2b00      	cmp	r3, #0
 800242a:	f280 80ea 	bge.w	8002602 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	461a      	mov	r2, r3
 8002434:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	881b      	ldrh	r3, [r3, #0]
 800243e:	b29a      	uxth	r2, r3
 8002440:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002444:	4013      	ands	r3, r2
 8002446:	853b      	strh	r3, [r7, #40]	; 0x28
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	461a      	mov	r2, r3
 800244e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	4413      	add	r3, r2
 8002456:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002458:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800245c:	b292      	uxth	r2, r2
 800245e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002460:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002464:	4613      	mov	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4413      	add	r3, r2
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	4413      	add	r3, r2
 8002474:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	7b1b      	ldrb	r3, [r3, #12]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d122      	bne.n	80024c4 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002486:	b29b      	uxth	r3, r3
 8002488:	461a      	mov	r2, r3
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	4413      	add	r3, r2
 8002492:	3306      	adds	r3, #6
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	6812      	ldr	r2, [r2, #0]
 800249a:	4413      	add	r3, r2
 800249c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024a0:	881b      	ldrh	r3, [r3, #0]
 80024a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024a6:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80024a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 8087 	beq.w	80025be <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6818      	ldr	r0, [r3, #0]
 80024b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b6:	6959      	ldr	r1, [r3, #20]
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	88da      	ldrh	r2, [r3, #6]
 80024bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024be:	f003 fffa 	bl	80064b6 <USB_ReadPMA>
 80024c2:	e07c      	b.n	80025be <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	78db      	ldrb	r3, [r3, #3]
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d108      	bne.n	80024de <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80024cc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80024ce:	461a      	mov	r2, r3
 80024d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f923 	bl	800271e <HAL_PCD_EP_DB_Receive>
 80024d8:	4603      	mov	r3, r0
 80024da:	86fb      	strh	r3, [r7, #54]	; 0x36
 80024dc:	e06f      	b.n	80025be <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	461a      	mov	r2, r3
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4413      	add	r3, r2
 80024ec:	881b      	ldrh	r3, [r3, #0]
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024f8:	847b      	strh	r3, [r7, #34]	; 0x22
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	461a      	mov	r2, r3
 8002500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	441a      	add	r2, r3
 8002508:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800250a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800250e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002512:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002516:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800251a:	b29b      	uxth	r3, r3
 800251c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	461a      	mov	r2, r3
 8002524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4413      	add	r3, r2
 800252c:	881b      	ldrh	r3, [r3, #0]
 800252e:	b29b      	uxth	r3, r3
 8002530:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d021      	beq.n	800257c <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002540:	b29b      	uxth	r3, r3
 8002542:	461a      	mov	r2, r3
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	4413      	add	r3, r2
 800254c:	3302      	adds	r3, #2
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6812      	ldr	r2, [r2, #0]
 8002554:	4413      	add	r3, r2
 8002556:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800255a:	881b      	ldrh	r3, [r3, #0]
 800255c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002560:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002562:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002564:	2b00      	cmp	r3, #0
 8002566:	d02a      	beq.n	80025be <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6818      	ldr	r0, [r3, #0]
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	6959      	ldr	r1, [r3, #20]
 8002570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002572:	891a      	ldrh	r2, [r3, #8]
 8002574:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002576:	f003 ff9e 	bl	80064b6 <USB_ReadPMA>
 800257a:	e020      	b.n	80025be <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002584:	b29b      	uxth	r3, r3
 8002586:	461a      	mov	r2, r3
 8002588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	4413      	add	r3, r2
 8002590:	3306      	adds	r3, #6
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	6812      	ldr	r2, [r2, #0]
 8002598:	4413      	add	r3, r2
 800259a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025a4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80025a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d008      	beq.n	80025be <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6818      	ldr	r0, [r3, #0]
 80025b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b2:	6959      	ldr	r1, [r3, #20]
 80025b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b6:	895a      	ldrh	r2, [r3, #10]
 80025b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025ba:	f003 ff7c 	bl	80064b6 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	69da      	ldr	r2, [r3, #28]
 80025c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025c4:	441a      	add	r2, r3
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	695a      	ldr	r2, [r3, #20]
 80025ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025d0:	441a      	add	r2, r3
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d004      	beq.n	80025e8 <PCD_EP_ISR_Handler+0x4b0>
 80025de:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d206      	bcs.n	80025f6 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	4619      	mov	r1, r3
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f005 fdee 	bl	80081d0 <HAL_PCD_DataOutStageCallback>
 80025f4:	e005      	b.n	8002602 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025fc:	4618      	mov	r0, r3
 80025fe:	f002 fcb7 	bl	8004f70 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002602:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002608:	2b00      	cmp	r3, #0
 800260a:	d07a      	beq.n	8002702 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 800260c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002610:	1c5a      	adds	r2, r3, #1
 8002612:	4613      	mov	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	4413      	add	r3, r2
 800261e:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	461a      	mov	r2, r3
 8002626:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4413      	add	r3, r2
 800262e:	881b      	ldrh	r3, [r3, #0]
 8002630:	b29b      	uxth	r3, r3
 8002632:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800263a:	843b      	strh	r3, [r7, #32]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	461a      	mov	r2, r3
 8002642:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	441a      	add	r2, r3
 800264a:	8c3b      	ldrh	r3, [r7, #32]
 800264c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002650:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002654:	b29b      	uxth	r3, r3
 8002656:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	78db      	ldrb	r3, [r3, #3]
 800265c:	2b02      	cmp	r3, #2
 800265e:	d108      	bne.n	8002672 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002664:	2b02      	cmp	r3, #2
 8002666:	d146      	bne.n	80026f6 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002668:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800266a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266e:	2b00      	cmp	r3, #0
 8002670:	d141      	bne.n	80026f6 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800267a:	b29b      	uxth	r3, r3
 800267c:	461a      	mov	r2, r3
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	4413      	add	r3, r2
 8002686:	3302      	adds	r3, #2
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6812      	ldr	r2, [r2, #0]
 800268e:	4413      	add	r3, r2
 8002690:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800269a:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	699a      	ldr	r2, [r3, #24]
 80026a0:	8bfb      	ldrh	r3, [r7, #30]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d906      	bls.n	80026b4 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	699a      	ldr	r2, [r3, #24]
 80026aa:	8bfb      	ldrh	r3, [r7, #30]
 80026ac:	1ad2      	subs	r2, r2, r3
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	619a      	str	r2, [r3, #24]
 80026b2:	e002      	b.n	80026ba <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	2200      	movs	r2, #0
 80026b8:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80026ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d106      	bne.n	80026d0 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	4619      	mov	r1, r3
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f005 fd9c 	bl	8008206 <HAL_PCD_DataInStageCallback>
 80026ce:	e018      	b.n	8002702 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	695a      	ldr	r2, [r3, #20]
 80026d4:	8bfb      	ldrh	r3, [r7, #30]
 80026d6:	441a      	add	r2, r3
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	69da      	ldr	r2, [r3, #28]
 80026e0:	8bfb      	ldrh	r3, [r7, #30]
 80026e2:	441a      	add	r2, r3
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026ee:	4618      	mov	r0, r3
 80026f0:	f002 fc3e 	bl	8004f70 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80026f4:	e005      	b.n	8002702 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80026f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026f8:	461a      	mov	r2, r3
 80026fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 f91b 	bl	8002938 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800270a:	b29b      	uxth	r3, r3
 800270c:	b21b      	sxth	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	f6ff ad17 	blt.w	8002142 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3738      	adds	r7, #56	; 0x38
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b088      	sub	sp, #32
 8002722:	af00      	add	r7, sp, #0
 8002724:	60f8      	str	r0, [r7, #12]
 8002726:	60b9      	str	r1, [r7, #8]
 8002728:	4613      	mov	r3, r2
 800272a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800272c:	88fb      	ldrh	r3, [r7, #6]
 800272e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d07e      	beq.n	8002834 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800273e:	b29b      	uxth	r3, r3
 8002740:	461a      	mov	r2, r3
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	4413      	add	r3, r2
 800274a:	3302      	adds	r3, #2
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	6812      	ldr	r2, [r2, #0]
 8002752:	4413      	add	r3, r2
 8002754:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002758:	881b      	ldrh	r3, [r3, #0]
 800275a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800275e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	699a      	ldr	r2, [r3, #24]
 8002764:	8b7b      	ldrh	r3, [r7, #26]
 8002766:	429a      	cmp	r2, r3
 8002768:	d306      	bcc.n	8002778 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	699a      	ldr	r2, [r3, #24]
 800276e:	8b7b      	ldrh	r3, [r7, #26]
 8002770:	1ad2      	subs	r2, r2, r3
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	619a      	str	r2, [r3, #24]
 8002776:	e002      	b.n	800277e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	2200      	movs	r2, #0
 800277c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d123      	bne.n	80027ce <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	461a      	mov	r2, r3
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	4413      	add	r3, r2
 8002794:	881b      	ldrh	r3, [r3, #0]
 8002796:	b29b      	uxth	r3, r3
 8002798:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800279c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027a0:	833b      	strh	r3, [r7, #24]
 80027a2:	8b3b      	ldrh	r3, [r7, #24]
 80027a4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80027a8:	833b      	strh	r3, [r7, #24]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	461a      	mov	r2, r3
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	441a      	add	r2, r3
 80027b8:	8b3b      	ldrh	r3, [r7, #24]
 80027ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80027ce:	88fb      	ldrh	r3, [r7, #6]
 80027d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d01f      	beq.n	8002818 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	461a      	mov	r2, r3
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	881b      	ldrh	r3, [r3, #0]
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027f2:	82fb      	strh	r3, [r7, #22]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	461a      	mov	r2, r3
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	441a      	add	r2, r3
 8002802:	8afb      	ldrh	r3, [r7, #22]
 8002804:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002808:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800280c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002810:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002814:	b29b      	uxth	r3, r3
 8002816:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002818:	8b7b      	ldrh	r3, [r7, #26]
 800281a:	2b00      	cmp	r3, #0
 800281c:	f000 8087 	beq.w	800292e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6818      	ldr	r0, [r3, #0]
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	6959      	ldr	r1, [r3, #20]
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	891a      	ldrh	r2, [r3, #8]
 800282c:	8b7b      	ldrh	r3, [r7, #26]
 800282e:	f003 fe42 	bl	80064b6 <USB_ReadPMA>
 8002832:	e07c      	b.n	800292e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800283c:	b29b      	uxth	r3, r3
 800283e:	461a      	mov	r2, r3
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	4413      	add	r3, r2
 8002848:	3306      	adds	r3, #6
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	6812      	ldr	r2, [r2, #0]
 8002850:	4413      	add	r3, r2
 8002852:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002856:	881b      	ldrh	r3, [r3, #0]
 8002858:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800285c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	699a      	ldr	r2, [r3, #24]
 8002862:	8b7b      	ldrh	r3, [r7, #26]
 8002864:	429a      	cmp	r2, r3
 8002866:	d306      	bcc.n	8002876 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	699a      	ldr	r2, [r3, #24]
 800286c:	8b7b      	ldrh	r3, [r7, #26]
 800286e:	1ad2      	subs	r2, r2, r3
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	619a      	str	r2, [r3, #24]
 8002874:	e002      	b.n	800287c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	2200      	movs	r2, #0
 800287a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d123      	bne.n	80028cc <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	461a      	mov	r2, r3
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	881b      	ldrh	r3, [r3, #0]
 8002894:	b29b      	uxth	r3, r3
 8002896:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800289a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800289e:	83fb      	strh	r3, [r7, #30]
 80028a0:	8bfb      	ldrh	r3, [r7, #30]
 80028a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80028a6:	83fb      	strh	r3, [r7, #30]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	461a      	mov	r2, r3
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	441a      	add	r2, r3
 80028b6:	8bfb      	ldrh	r3, [r7, #30]
 80028b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80028cc:	88fb      	ldrh	r3, [r7, #6]
 80028ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d11f      	bne.n	8002916 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	461a      	mov	r2, r3
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	881b      	ldrh	r3, [r3, #0]
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028f0:	83bb      	strh	r3, [r7, #28]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	461a      	mov	r2, r3
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	441a      	add	r2, r3
 8002900:	8bbb      	ldrh	r3, [r7, #28]
 8002902:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002906:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800290a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800290e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002912:	b29b      	uxth	r3, r3
 8002914:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002916:	8b7b      	ldrh	r3, [r7, #26]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d008      	beq.n	800292e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6818      	ldr	r0, [r3, #0]
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	6959      	ldr	r1, [r3, #20]
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	895a      	ldrh	r2, [r3, #10]
 8002928:	8b7b      	ldrh	r3, [r7, #26]
 800292a:	f003 fdc4 	bl	80064b6 <USB_ReadPMA>
    }
  }

  return count;
 800292e:	8b7b      	ldrh	r3, [r7, #26]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3720      	adds	r7, #32
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b094      	sub	sp, #80	; 0x50
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	4613      	mov	r3, r2
 8002944:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002946:	88fb      	ldrh	r3, [r7, #6]
 8002948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 8138 	beq.w	8002bc2 <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800295a:	b29b      	uxth	r3, r3
 800295c:	461a      	mov	r2, r3
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	4413      	add	r3, r2
 8002966:	3302      	adds	r3, #2
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	6812      	ldr	r2, [r2, #0]
 800296e:	4413      	add	r3, r2
 8002970:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002974:	881b      	ldrh	r3, [r3, #0]
 8002976:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800297a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	699a      	ldr	r2, [r3, #24]
 8002982:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002986:	429a      	cmp	r2, r3
 8002988:	d907      	bls.n	800299a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	699a      	ldr	r2, [r3, #24]
 800298e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002992:	1ad2      	subs	r2, r2, r3
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	619a      	str	r2, [r3, #24]
 8002998:	e002      	b.n	80029a0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	2200      	movs	r2, #0
 800299e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d12c      	bne.n	8002a02 <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	4619      	mov	r1, r3
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f005 fc29 	bl	8008206 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029b4:	88fb      	ldrh	r3, [r7, #6]
 80029b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 823a 	beq.w	8002e34 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	461a      	mov	r2, r3
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	881b      	ldrh	r3, [r3, #0]
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029da:	82fb      	strh	r3, [r7, #22]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	461a      	mov	r2, r3
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	441a      	add	r2, r3
 80029ea:	8afb      	ldrh	r3, [r7, #22]
 80029ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	8013      	strh	r3, [r2, #0]
 8002a00:	e218      	b.n	8002e34 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a02:	88fb      	ldrh	r3, [r7, #6]
 8002a04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d01f      	beq.n	8002a4c <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	461a      	mov	r2, r3
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	881b      	ldrh	r3, [r3, #0]
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a26:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	441a      	add	r2, r3
 8002a36:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	f040 81ee 	bne.w	8002e34 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	695a      	ldr	r2, [r3, #20]
 8002a5c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002a60:	441a      	add	r2, r3
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	69da      	ldr	r2, [r3, #28]
 8002a6a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002a6e:	441a      	add	r2, r3
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	6a1a      	ldr	r2, [r3, #32]
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d309      	bcc.n	8002a94 <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	6a1a      	ldr	r2, [r3, #32]
 8002a8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a8c:	1ad2      	subs	r2, r2, r3
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	621a      	str	r2, [r3, #32]
 8002a92:	e015      	b.n	8002ac0 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d107      	bne.n	8002aac <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 8002a9c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002aa0:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002aaa:	e009      	b.n	8002ac0 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2200      	movs	r2, #0
 8002abe:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	785b      	ldrb	r3, [r3, #1]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d155      	bne.n	8002b74 <HAL_PCD_EP_DB_Transmit+0x23c>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	61fb      	str	r3, [r7, #28]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	461a      	mov	r2, r3
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	4413      	add	r3, r2
 8002ade:	61fb      	str	r3, [r7, #28]
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	011a      	lsls	r2, r3, #4
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	4413      	add	r3, r2
 8002aea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002aee:	61bb      	str	r3, [r7, #24]
 8002af0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d112      	bne.n	8002b1c <HAL_PCD_EP_DB_Transmit+0x1e4>
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	881b      	ldrh	r3, [r3, #0]
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	801a      	strh	r2, [r3, #0]
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	881b      	ldrh	r3, [r3, #0]
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	801a      	strh	r2, [r3, #0]
 8002b1a:	e047      	b.n	8002bac <HAL_PCD_EP_DB_Transmit+0x274>
 8002b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b1e:	2b3e      	cmp	r3, #62	; 0x3e
 8002b20:	d811      	bhi.n	8002b46 <HAL_PCD_EP_DB_Transmit+0x20e>
 8002b22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b24:	085b      	lsrs	r3, r3, #1
 8002b26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d002      	beq.n	8002b38 <HAL_PCD_EP_DB_Transmit+0x200>
 8002b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b34:	3301      	adds	r3, #1
 8002b36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	029b      	lsls	r3, r3, #10
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	801a      	strh	r2, [r3, #0]
 8002b44:	e032      	b.n	8002bac <HAL_PCD_EP_DB_Transmit+0x274>
 8002b46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b48:	095b      	lsrs	r3, r3, #5
 8002b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b4e:	f003 031f 	and.w	r3, r3, #31
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d102      	bne.n	8002b5c <HAL_PCD_EP_DB_Transmit+0x224>
 8002b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	029b      	lsls	r3, r3, #10
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	801a      	strh	r2, [r3, #0]
 8002b72:	e01b      	b.n	8002bac <HAL_PCD_EP_DB_Transmit+0x274>
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	785b      	ldrb	r3, [r3, #1]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d117      	bne.n	8002bac <HAL_PCD_EP_DB_Transmit+0x274>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	627b      	str	r3, [r7, #36]	; 0x24
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b90:	4413      	add	r3, r2
 8002b92:	627b      	str	r3, [r7, #36]	; 0x24
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	011a      	lsls	r2, r3, #4
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ba2:	623b      	str	r3, [r7, #32]
 8002ba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	6a3b      	ldr	r3, [r7, #32]
 8002baa:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6818      	ldr	r0, [r3, #0]
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	6959      	ldr	r1, [r3, #20]
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	891a      	ldrh	r2, [r3, #8]
 8002bb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	f003 fc36 	bl	800642c <USB_WritePMA>
 8002bc0:	e138      	b.n	8002e34 <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	461a      	mov	r2, r3
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	4413      	add	r3, r2
 8002bd6:	3306      	adds	r3, #6
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	6812      	ldr	r2, [r2, #0]
 8002bde:	4413      	add	r3, r2
 8002be0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002be4:	881b      	ldrh	r3, [r3, #0]
 8002be6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bea:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	699a      	ldr	r2, [r3, #24]
 8002bf2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d307      	bcc.n	8002c0a <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	699a      	ldr	r2, [r3, #24]
 8002bfe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002c02:	1ad2      	subs	r2, r2, r3
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	619a      	str	r2, [r3, #24]
 8002c08:	e002      	b.n	8002c10 <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d12e      	bne.n	8002c76 <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f005 faf1 	bl	8008206 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c24:	88fb      	ldrh	r3, [r7, #6]
 8002c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f040 8102 	bne.w	8002e34 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	461a      	mov	r2, r3
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4413      	add	r3, r2
 8002c3e:	881b      	ldrh	r3, [r3, #0]
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c4a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	461a      	mov	r2, r3
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	441a      	add	r2, r3
 8002c5c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002c60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	8013      	strh	r3, [r2, #0]
 8002c74:	e0de      	b.n	8002e34 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c76:	88fb      	ldrh	r3, [r7, #6]
 8002c78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d11f      	bne.n	8002cc0 <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	461a      	mov	r2, r3
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	881b      	ldrh	r3, [r3, #0]
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c9a:	867b      	strh	r3, [r7, #50]	; 0x32
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	441a      	add	r2, r3
 8002caa:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002cac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	f040 80b4 	bne.w	8002e34 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	695a      	ldr	r2, [r3, #20]
 8002cd0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002cd4:	441a      	add	r2, r3
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	69da      	ldr	r2, [r3, #28]
 8002cde:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002ce2:	441a      	add	r2, r3
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	6a1a      	ldr	r2, [r3, #32]
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d309      	bcc.n	8002d08 <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	6a1a      	ldr	r2, [r3, #32]
 8002cfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d00:	1ad2      	subs	r2, r2, r3
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	621a      	str	r2, [r3, #32]
 8002d06:	e015      	b.n	8002d34 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d107      	bne.n	8002d20 <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 8002d10:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002d14:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002d1e:	e009      	b.n	8002d34 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	643b      	str	r3, [r7, #64]	; 0x40
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	785b      	ldrb	r3, [r3, #1]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d155      	bne.n	8002dee <HAL_PCD_EP_DB_Transmit+0x4b6>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	461a      	mov	r2, r3
 8002d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d56:	4413      	add	r3, r2
 8002d58:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	011a      	lsls	r2, r3, #4
 8002d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d62:	4413      	add	r3, r2
 8002d64:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d68:	637b      	str	r3, [r7, #52]	; 0x34
 8002d6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d112      	bne.n	8002d96 <HAL_PCD_EP_DB_Transmit+0x45e>
 8002d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d72:	881b      	ldrh	r3, [r3, #0]
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d7e:	801a      	strh	r2, [r3, #0]
 8002d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d82:	881b      	ldrh	r3, [r3, #0]
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d92:	801a      	strh	r2, [r3, #0]
 8002d94:	e044      	b.n	8002e20 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002d96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d98:	2b3e      	cmp	r3, #62	; 0x3e
 8002d9a:	d811      	bhi.n	8002dc0 <HAL_PCD_EP_DB_Transmit+0x488>
 8002d9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d9e:	085b      	lsrs	r3, r3, #1
 8002da0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002da2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d002      	beq.n	8002db2 <HAL_PCD_EP_DB_Transmit+0x47a>
 8002dac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dae:	3301      	adds	r3, #1
 8002db0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002db2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	029b      	lsls	r3, r3, #10
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dbc:	801a      	strh	r2, [r3, #0]
 8002dbe:	e02f      	b.n	8002e20 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dc2:	095b      	lsrs	r3, r3, #5
 8002dc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dc8:	f003 031f 	and.w	r3, r3, #31
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d102      	bne.n	8002dd6 <HAL_PCD_EP_DB_Transmit+0x49e>
 8002dd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	029b      	lsls	r3, r3, #10
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002de2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dea:	801a      	strh	r2, [r3, #0]
 8002dec:	e018      	b.n	8002e20 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	785b      	ldrb	r3, [r3, #1]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d114      	bne.n	8002e20 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	461a      	mov	r2, r3
 8002e02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e04:	4413      	add	r3, r2
 8002e06:	643b      	str	r3, [r7, #64]	; 0x40
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	011a      	lsls	r2, r3, #4
 8002e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e10:	4413      	add	r3, r2
 8002e12:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e1e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6818      	ldr	r0, [r3, #0]
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	6959      	ldr	r1, [r3, #20]
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	895a      	ldrh	r2, [r3, #10]
 8002e2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	f003 fafc 	bl	800642c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	461a      	mov	r2, r3
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4413      	add	r3, r2
 8002e42:	881b      	ldrh	r3, [r3, #0]
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e4e:	82bb      	strh	r3, [r7, #20]
 8002e50:	8abb      	ldrh	r3, [r7, #20]
 8002e52:	f083 0310 	eor.w	r3, r3, #16
 8002e56:	82bb      	strh	r3, [r7, #20]
 8002e58:	8abb      	ldrh	r3, [r7, #20]
 8002e5a:	f083 0320 	eor.w	r3, r3, #32
 8002e5e:	82bb      	strh	r3, [r7, #20]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	461a      	mov	r2, r3
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	441a      	add	r2, r3
 8002e6e:	8abb      	ldrh	r3, [r7, #20]
 8002e70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3750      	adds	r7, #80	; 0x50
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b087      	sub	sp, #28
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	60f8      	str	r0, [r7, #12]
 8002e96:	607b      	str	r3, [r7, #4]
 8002e98:	460b      	mov	r3, r1
 8002e9a:	817b      	strh	r3, [r7, #10]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002ea0:	897b      	ldrh	r3, [r7, #10]
 8002ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00b      	beq.n	8002ec4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002eac:	897b      	ldrh	r3, [r7, #10]
 8002eae:	f003 0307 	and.w	r3, r3, #7
 8002eb2:	1c5a      	adds	r2, r3, #1
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	4413      	add	r3, r2
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	617b      	str	r3, [r7, #20]
 8002ec2:	e009      	b.n	8002ed8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ec4:	897a      	ldrh	r2, [r7, #10]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4413      	add	r3, r2
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002ed8:	893b      	ldrh	r3, [r7, #8]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d107      	bne.n	8002eee <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	80da      	strh	r2, [r3, #6]
 8002eec:	e00b      	b.n	8002f06 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	0c1b      	lsrs	r3, r3, #16
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	371c      	adds	r7, #28
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bc80      	pop	{r7}
 8002f10:	4770      	bx	lr
	...

08002f14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e26c      	b.n	8003400 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f000 8087 	beq.w	8003042 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f34:	4b92      	ldr	r3, [pc, #584]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f003 030c 	and.w	r3, r3, #12
 8002f3c:	2b04      	cmp	r3, #4
 8002f3e:	d00c      	beq.n	8002f5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f40:	4b8f      	ldr	r3, [pc, #572]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f003 030c 	and.w	r3, r3, #12
 8002f48:	2b08      	cmp	r3, #8
 8002f4a:	d112      	bne.n	8002f72 <HAL_RCC_OscConfig+0x5e>
 8002f4c:	4b8c      	ldr	r3, [pc, #560]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f58:	d10b      	bne.n	8002f72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f5a:	4b89      	ldr	r3, [pc, #548]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d06c      	beq.n	8003040 <HAL_RCC_OscConfig+0x12c>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d168      	bne.n	8003040 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e246      	b.n	8003400 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f7a:	d106      	bne.n	8002f8a <HAL_RCC_OscConfig+0x76>
 8002f7c:	4b80      	ldr	r3, [pc, #512]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a7f      	ldr	r2, [pc, #508]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f86:	6013      	str	r3, [r2, #0]
 8002f88:	e02e      	b.n	8002fe8 <HAL_RCC_OscConfig+0xd4>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10c      	bne.n	8002fac <HAL_RCC_OscConfig+0x98>
 8002f92:	4b7b      	ldr	r3, [pc, #492]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a7a      	ldr	r2, [pc, #488]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002f98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f9c:	6013      	str	r3, [r2, #0]
 8002f9e:	4b78      	ldr	r3, [pc, #480]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a77      	ldr	r2, [pc, #476]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002fa4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	e01d      	b.n	8002fe8 <HAL_RCC_OscConfig+0xd4>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fb4:	d10c      	bne.n	8002fd0 <HAL_RCC_OscConfig+0xbc>
 8002fb6:	4b72      	ldr	r3, [pc, #456]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a71      	ldr	r2, [pc, #452]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002fbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fc0:	6013      	str	r3, [r2, #0]
 8002fc2:	4b6f      	ldr	r3, [pc, #444]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a6e      	ldr	r2, [pc, #440]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fcc:	6013      	str	r3, [r2, #0]
 8002fce:	e00b      	b.n	8002fe8 <HAL_RCC_OscConfig+0xd4>
 8002fd0:	4b6b      	ldr	r3, [pc, #428]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a6a      	ldr	r2, [pc, #424]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fda:	6013      	str	r3, [r2, #0]
 8002fdc:	4b68      	ldr	r3, [pc, #416]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a67      	ldr	r2, [pc, #412]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002fe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fe6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d013      	beq.n	8003018 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff0:	f7fd fe3e 	bl	8000c70 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ff8:	f7fd fe3a 	bl	8000c70 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b64      	cmp	r3, #100	; 0x64
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e1fa      	b.n	8003400 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800300a:	4b5d      	ldr	r3, [pc, #372]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0f0      	beq.n	8002ff8 <HAL_RCC_OscConfig+0xe4>
 8003016:	e014      	b.n	8003042 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003018:	f7fd fe2a 	bl	8000c70 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003020:	f7fd fe26 	bl	8000c70 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b64      	cmp	r3, #100	; 0x64
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e1e6      	b.n	8003400 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003032:	4b53      	ldr	r3, [pc, #332]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1f0      	bne.n	8003020 <HAL_RCC_OscConfig+0x10c>
 800303e:	e000      	b.n	8003042 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003040:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d063      	beq.n	8003116 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800304e:	4b4c      	ldr	r3, [pc, #304]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f003 030c 	and.w	r3, r3, #12
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00b      	beq.n	8003072 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800305a:	4b49      	ldr	r3, [pc, #292]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f003 030c 	and.w	r3, r3, #12
 8003062:	2b08      	cmp	r3, #8
 8003064:	d11c      	bne.n	80030a0 <HAL_RCC_OscConfig+0x18c>
 8003066:	4b46      	ldr	r3, [pc, #280]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d116      	bne.n	80030a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003072:	4b43      	ldr	r3, [pc, #268]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d005      	beq.n	800308a <HAL_RCC_OscConfig+0x176>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d001      	beq.n	800308a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e1ba      	b.n	8003400 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800308a:	4b3d      	ldr	r3, [pc, #244]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	4939      	ldr	r1, [pc, #228]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 800309a:	4313      	orrs	r3, r2
 800309c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800309e:	e03a      	b.n	8003116 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d020      	beq.n	80030ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030a8:	4b36      	ldr	r3, [pc, #216]	; (8003184 <HAL_RCC_OscConfig+0x270>)
 80030aa:	2201      	movs	r2, #1
 80030ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ae:	f7fd fddf 	bl	8000c70 <HAL_GetTick>
 80030b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b4:	e008      	b.n	80030c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030b6:	f7fd fddb 	bl	8000c70 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e19b      	b.n	8003400 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030c8:	4b2d      	ldr	r3, [pc, #180]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0f0      	beq.n	80030b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d4:	4b2a      	ldr	r3, [pc, #168]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	695b      	ldr	r3, [r3, #20]
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	4927      	ldr	r1, [pc, #156]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	600b      	str	r3, [r1, #0]
 80030e8:	e015      	b.n	8003116 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ea:	4b26      	ldr	r3, [pc, #152]	; (8003184 <HAL_RCC_OscConfig+0x270>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f0:	f7fd fdbe 	bl	8000c70 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030f8:	f7fd fdba 	bl	8000c70 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e17a      	b.n	8003400 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800310a:	4b1d      	ldr	r3, [pc, #116]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f0      	bne.n	80030f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0308 	and.w	r3, r3, #8
 800311e:	2b00      	cmp	r3, #0
 8003120:	d03a      	beq.n	8003198 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d019      	beq.n	800315e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800312a:	4b17      	ldr	r3, [pc, #92]	; (8003188 <HAL_RCC_OscConfig+0x274>)
 800312c:	2201      	movs	r2, #1
 800312e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003130:	f7fd fd9e 	bl	8000c70 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003138:	f7fd fd9a 	bl	8000c70 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e15a      	b.n	8003400 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800314a:	4b0d      	ldr	r3, [pc, #52]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0f0      	beq.n	8003138 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003156:	2001      	movs	r0, #1
 8003158:	f000 faa6 	bl	80036a8 <RCC_Delay>
 800315c:	e01c      	b.n	8003198 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800315e:	4b0a      	ldr	r3, [pc, #40]	; (8003188 <HAL_RCC_OscConfig+0x274>)
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003164:	f7fd fd84 	bl	8000c70 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800316a:	e00f      	b.n	800318c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800316c:	f7fd fd80 	bl	8000c70 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d908      	bls.n	800318c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e140      	b.n	8003400 <HAL_RCC_OscConfig+0x4ec>
 800317e:	bf00      	nop
 8003180:	40021000 	.word	0x40021000
 8003184:	42420000 	.word	0x42420000
 8003188:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800318c:	4b9e      	ldr	r3, [pc, #632]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 800318e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003190:	f003 0302 	and.w	r3, r3, #2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d1e9      	bne.n	800316c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0304 	and.w	r3, r3, #4
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 80a6 	beq.w	80032f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031a6:	2300      	movs	r3, #0
 80031a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031aa:	4b97      	ldr	r3, [pc, #604]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10d      	bne.n	80031d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031b6:	4b94      	ldr	r3, [pc, #592]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 80031b8:	69db      	ldr	r3, [r3, #28]
 80031ba:	4a93      	ldr	r2, [pc, #588]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 80031bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031c0:	61d3      	str	r3, [r2, #28]
 80031c2:	4b91      	ldr	r3, [pc, #580]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ca:	60bb      	str	r3, [r7, #8]
 80031cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ce:	2301      	movs	r3, #1
 80031d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d2:	4b8e      	ldr	r3, [pc, #568]	; (800340c <HAL_RCC_OscConfig+0x4f8>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d118      	bne.n	8003210 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031de:	4b8b      	ldr	r3, [pc, #556]	; (800340c <HAL_RCC_OscConfig+0x4f8>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a8a      	ldr	r2, [pc, #552]	; (800340c <HAL_RCC_OscConfig+0x4f8>)
 80031e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ea:	f7fd fd41 	bl	8000c70 <HAL_GetTick>
 80031ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f0:	e008      	b.n	8003204 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031f2:	f7fd fd3d 	bl	8000c70 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b64      	cmp	r3, #100	; 0x64
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e0fd      	b.n	8003400 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003204:	4b81      	ldr	r3, [pc, #516]	; (800340c <HAL_RCC_OscConfig+0x4f8>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0f0      	beq.n	80031f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d106      	bne.n	8003226 <HAL_RCC_OscConfig+0x312>
 8003218:	4b7b      	ldr	r3, [pc, #492]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	4a7a      	ldr	r2, [pc, #488]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 800321e:	f043 0301 	orr.w	r3, r3, #1
 8003222:	6213      	str	r3, [r2, #32]
 8003224:	e02d      	b.n	8003282 <HAL_RCC_OscConfig+0x36e>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10c      	bne.n	8003248 <HAL_RCC_OscConfig+0x334>
 800322e:	4b76      	ldr	r3, [pc, #472]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	4a75      	ldr	r2, [pc, #468]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 8003234:	f023 0301 	bic.w	r3, r3, #1
 8003238:	6213      	str	r3, [r2, #32]
 800323a:	4b73      	ldr	r3, [pc, #460]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	4a72      	ldr	r2, [pc, #456]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 8003240:	f023 0304 	bic.w	r3, r3, #4
 8003244:	6213      	str	r3, [r2, #32]
 8003246:	e01c      	b.n	8003282 <HAL_RCC_OscConfig+0x36e>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	2b05      	cmp	r3, #5
 800324e:	d10c      	bne.n	800326a <HAL_RCC_OscConfig+0x356>
 8003250:	4b6d      	ldr	r3, [pc, #436]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	4a6c      	ldr	r2, [pc, #432]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 8003256:	f043 0304 	orr.w	r3, r3, #4
 800325a:	6213      	str	r3, [r2, #32]
 800325c:	4b6a      	ldr	r3, [pc, #424]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 800325e:	6a1b      	ldr	r3, [r3, #32]
 8003260:	4a69      	ldr	r2, [pc, #420]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 8003262:	f043 0301 	orr.w	r3, r3, #1
 8003266:	6213      	str	r3, [r2, #32]
 8003268:	e00b      	b.n	8003282 <HAL_RCC_OscConfig+0x36e>
 800326a:	4b67      	ldr	r3, [pc, #412]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	4a66      	ldr	r2, [pc, #408]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 8003270:	f023 0301 	bic.w	r3, r3, #1
 8003274:	6213      	str	r3, [r2, #32]
 8003276:	4b64      	ldr	r3, [pc, #400]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	4a63      	ldr	r2, [pc, #396]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 800327c:	f023 0304 	bic.w	r3, r3, #4
 8003280:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d015      	beq.n	80032b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800328a:	f7fd fcf1 	bl	8000c70 <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003290:	e00a      	b.n	80032a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003292:	f7fd fced 	bl	8000c70 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e0ab      	b.n	8003400 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a8:	4b57      	ldr	r3, [pc, #348]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d0ee      	beq.n	8003292 <HAL_RCC_OscConfig+0x37e>
 80032b4:	e014      	b.n	80032e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032b6:	f7fd fcdb 	bl	8000c70 <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032bc:	e00a      	b.n	80032d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032be:	f7fd fcd7 	bl	8000c70 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e095      	b.n	8003400 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032d4:	4b4c      	ldr	r3, [pc, #304]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1ee      	bne.n	80032be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032e0:	7dfb      	ldrb	r3, [r7, #23]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d105      	bne.n	80032f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032e6:	4b48      	ldr	r3, [pc, #288]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	4a47      	ldr	r2, [pc, #284]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 80032ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f000 8081 	beq.w	80033fe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032fc:	4b42      	ldr	r3, [pc, #264]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f003 030c 	and.w	r3, r3, #12
 8003304:	2b08      	cmp	r3, #8
 8003306:	d061      	beq.n	80033cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	69db      	ldr	r3, [r3, #28]
 800330c:	2b02      	cmp	r3, #2
 800330e:	d146      	bne.n	800339e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003310:	4b3f      	ldr	r3, [pc, #252]	; (8003410 <HAL_RCC_OscConfig+0x4fc>)
 8003312:	2200      	movs	r2, #0
 8003314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003316:	f7fd fcab 	bl	8000c70 <HAL_GetTick>
 800331a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800331c:	e008      	b.n	8003330 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800331e:	f7fd fca7 	bl	8000c70 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b02      	cmp	r3, #2
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e067      	b.n	8003400 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003330:	4b35      	ldr	r3, [pc, #212]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1f0      	bne.n	800331e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003344:	d108      	bne.n	8003358 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003346:	4b30      	ldr	r3, [pc, #192]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	492d      	ldr	r1, [pc, #180]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 8003354:	4313      	orrs	r3, r2
 8003356:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003358:	4b2b      	ldr	r3, [pc, #172]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a19      	ldr	r1, [r3, #32]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003368:	430b      	orrs	r3, r1
 800336a:	4927      	ldr	r1, [pc, #156]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 800336c:	4313      	orrs	r3, r2
 800336e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003370:	4b27      	ldr	r3, [pc, #156]	; (8003410 <HAL_RCC_OscConfig+0x4fc>)
 8003372:	2201      	movs	r2, #1
 8003374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003376:	f7fd fc7b 	bl	8000c70 <HAL_GetTick>
 800337a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800337c:	e008      	b.n	8003390 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800337e:	f7fd fc77 	bl	8000c70 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e037      	b.n	8003400 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003390:	4b1d      	ldr	r3, [pc, #116]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0f0      	beq.n	800337e <HAL_RCC_OscConfig+0x46a>
 800339c:	e02f      	b.n	80033fe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800339e:	4b1c      	ldr	r3, [pc, #112]	; (8003410 <HAL_RCC_OscConfig+0x4fc>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a4:	f7fd fc64 	bl	8000c70 <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ac:	f7fd fc60 	bl	8000c70 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e020      	b.n	8003400 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033be:	4b12      	ldr	r3, [pc, #72]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1f0      	bne.n	80033ac <HAL_RCC_OscConfig+0x498>
 80033ca:	e018      	b.n	80033fe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	69db      	ldr	r3, [r3, #28]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d101      	bne.n	80033d8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e013      	b.n	8003400 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033d8:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d106      	bne.n	80033fa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d001      	beq.n	80033fe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e000      	b.n	8003400 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3718      	adds	r7, #24
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40021000 	.word	0x40021000
 800340c:	40007000 	.word	0x40007000
 8003410:	42420060 	.word	0x42420060

08003414 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e0d0      	b.n	80035ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003428:	4b6a      	ldr	r3, [pc, #424]	; (80035d4 <HAL_RCC_ClockConfig+0x1c0>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	429a      	cmp	r2, r3
 8003434:	d910      	bls.n	8003458 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003436:	4b67      	ldr	r3, [pc, #412]	; (80035d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f023 0207 	bic.w	r2, r3, #7
 800343e:	4965      	ldr	r1, [pc, #404]	; (80035d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	4313      	orrs	r3, r2
 8003444:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003446:	4b63      	ldr	r3, [pc, #396]	; (80035d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	429a      	cmp	r2, r3
 8003452:	d001      	beq.n	8003458 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e0b8      	b.n	80035ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d020      	beq.n	80034a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0304 	and.w	r3, r3, #4
 800346c:	2b00      	cmp	r3, #0
 800346e:	d005      	beq.n	800347c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003470:	4b59      	ldr	r3, [pc, #356]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	4a58      	ldr	r2, [pc, #352]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003476:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800347a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0308 	and.w	r3, r3, #8
 8003484:	2b00      	cmp	r3, #0
 8003486:	d005      	beq.n	8003494 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003488:	4b53      	ldr	r3, [pc, #332]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	4a52      	ldr	r2, [pc, #328]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 800348e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003492:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003494:	4b50      	ldr	r3, [pc, #320]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	494d      	ldr	r1, [pc, #308]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d040      	beq.n	8003534 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d107      	bne.n	80034ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ba:	4b47      	ldr	r3, [pc, #284]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d115      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e07f      	b.n	80035ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d107      	bne.n	80034e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034d2:	4b41      	ldr	r3, [pc, #260]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d109      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e073      	b.n	80035ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e2:	4b3d      	ldr	r3, [pc, #244]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e06b      	b.n	80035ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034f2:	4b39      	ldr	r3, [pc, #228]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f023 0203 	bic.w	r2, r3, #3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	4936      	ldr	r1, [pc, #216]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003500:	4313      	orrs	r3, r2
 8003502:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003504:	f7fd fbb4 	bl	8000c70 <HAL_GetTick>
 8003508:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800350a:	e00a      	b.n	8003522 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800350c:	f7fd fbb0 	bl	8000c70 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	f241 3288 	movw	r2, #5000	; 0x1388
 800351a:	4293      	cmp	r3, r2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e053      	b.n	80035ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003522:	4b2d      	ldr	r3, [pc, #180]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f003 020c 	and.w	r2, r3, #12
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	429a      	cmp	r2, r3
 8003532:	d1eb      	bne.n	800350c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003534:	4b27      	ldr	r3, [pc, #156]	; (80035d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0307 	and.w	r3, r3, #7
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	429a      	cmp	r2, r3
 8003540:	d210      	bcs.n	8003564 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003542:	4b24      	ldr	r3, [pc, #144]	; (80035d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f023 0207 	bic.w	r2, r3, #7
 800354a:	4922      	ldr	r1, [pc, #136]	; (80035d4 <HAL_RCC_ClockConfig+0x1c0>)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	4313      	orrs	r3, r2
 8003550:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003552:	4b20      	ldr	r3, [pc, #128]	; (80035d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0307 	and.w	r3, r3, #7
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	429a      	cmp	r2, r3
 800355e:	d001      	beq.n	8003564 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e032      	b.n	80035ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	d008      	beq.n	8003582 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003570:	4b19      	ldr	r3, [pc, #100]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	4916      	ldr	r1, [pc, #88]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 800357e:	4313      	orrs	r3, r2
 8003580:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0308 	and.w	r3, r3, #8
 800358a:	2b00      	cmp	r3, #0
 800358c:	d009      	beq.n	80035a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800358e:	4b12      	ldr	r3, [pc, #72]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	490e      	ldr	r1, [pc, #56]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035a2:	f000 f821 	bl	80035e8 <HAL_RCC_GetSysClockFreq>
 80035a6:	4602      	mov	r2, r0
 80035a8:	4b0b      	ldr	r3, [pc, #44]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	091b      	lsrs	r3, r3, #4
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	490a      	ldr	r1, [pc, #40]	; (80035dc <HAL_RCC_ClockConfig+0x1c8>)
 80035b4:	5ccb      	ldrb	r3, [r1, r3]
 80035b6:	fa22 f303 	lsr.w	r3, r2, r3
 80035ba:	4a09      	ldr	r2, [pc, #36]	; (80035e0 <HAL_RCC_ClockConfig+0x1cc>)
 80035bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035be:	4b09      	ldr	r3, [pc, #36]	; (80035e4 <HAL_RCC_ClockConfig+0x1d0>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7fd fb12 	bl	8000bec <HAL_InitTick>

  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	40022000 	.word	0x40022000
 80035d8:	40021000 	.word	0x40021000
 80035dc:	080097a4 	.word	0x080097a4
 80035e0:	20000004 	.word	0x20000004
 80035e4:	20000008 	.word	0x20000008

080035e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035e8:	b490      	push	{r4, r7}
 80035ea:	b08a      	sub	sp, #40	; 0x28
 80035ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80035ee:	4b2a      	ldr	r3, [pc, #168]	; (8003698 <HAL_RCC_GetSysClockFreq+0xb0>)
 80035f0:	1d3c      	adds	r4, r7, #4
 80035f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80035f8:	f240 2301 	movw	r3, #513	; 0x201
 80035fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035fe:	2300      	movs	r3, #0
 8003600:	61fb      	str	r3, [r7, #28]
 8003602:	2300      	movs	r3, #0
 8003604:	61bb      	str	r3, [r7, #24]
 8003606:	2300      	movs	r3, #0
 8003608:	627b      	str	r3, [r7, #36]	; 0x24
 800360a:	2300      	movs	r3, #0
 800360c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800360e:	2300      	movs	r3, #0
 8003610:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003612:	4b22      	ldr	r3, [pc, #136]	; (800369c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	f003 030c 	and.w	r3, r3, #12
 800361e:	2b04      	cmp	r3, #4
 8003620:	d002      	beq.n	8003628 <HAL_RCC_GetSysClockFreq+0x40>
 8003622:	2b08      	cmp	r3, #8
 8003624:	d003      	beq.n	800362e <HAL_RCC_GetSysClockFreq+0x46>
 8003626:	e02d      	b.n	8003684 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003628:	4b1d      	ldr	r3, [pc, #116]	; (80036a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800362a:	623b      	str	r3, [r7, #32]
      break;
 800362c:	e02d      	b.n	800368a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	0c9b      	lsrs	r3, r3, #18
 8003632:	f003 030f 	and.w	r3, r3, #15
 8003636:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800363a:	4413      	add	r3, r2
 800363c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003640:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d013      	beq.n	8003674 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800364c:	4b13      	ldr	r3, [pc, #76]	; (800369c <HAL_RCC_GetSysClockFreq+0xb4>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	0c5b      	lsrs	r3, r3, #17
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800365a:	4413      	add	r3, r2
 800365c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003660:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	4a0e      	ldr	r2, [pc, #56]	; (80036a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003666:	fb02 f203 	mul.w	r2, r2, r3
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003670:	627b      	str	r3, [r7, #36]	; 0x24
 8003672:	e004      	b.n	800367e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	4a0b      	ldr	r2, [pc, #44]	; (80036a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003678:	fb02 f303 	mul.w	r3, r2, r3
 800367c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800367e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003680:	623b      	str	r3, [r7, #32]
      break;
 8003682:	e002      	b.n	800368a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003684:	4b06      	ldr	r3, [pc, #24]	; (80036a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003686:	623b      	str	r3, [r7, #32]
      break;
 8003688:	bf00      	nop
    }
  }
  return sysclockfreq;
 800368a:	6a3b      	ldr	r3, [r7, #32]
}
 800368c:	4618      	mov	r0, r3
 800368e:	3728      	adds	r7, #40	; 0x28
 8003690:	46bd      	mov	sp, r7
 8003692:	bc90      	pop	{r4, r7}
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	08009718 	.word	0x08009718
 800369c:	40021000 	.word	0x40021000
 80036a0:	007a1200 	.word	0x007a1200
 80036a4:	003d0900 	.word	0x003d0900

080036a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036b0:	4b0a      	ldr	r3, [pc, #40]	; (80036dc <RCC_Delay+0x34>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a0a      	ldr	r2, [pc, #40]	; (80036e0 <RCC_Delay+0x38>)
 80036b6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ba:	0a5b      	lsrs	r3, r3, #9
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	fb02 f303 	mul.w	r3, r2, r3
 80036c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80036c4:	bf00      	nop
  }
  while (Delay --);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	1e5a      	subs	r2, r3, #1
 80036ca:	60fa      	str	r2, [r7, #12]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1f9      	bne.n	80036c4 <RCC_Delay+0x1c>
}
 80036d0:	bf00      	nop
 80036d2:	bf00      	nop
 80036d4:	3714      	adds	r7, #20
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bc80      	pop	{r7}
 80036da:	4770      	bx	lr
 80036dc:	20000004 	.word	0x20000004
 80036e0:	10624dd3 	.word	0x10624dd3

080036e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80036ec:	2300      	movs	r3, #0
 80036ee:	613b      	str	r3, [r7, #16]
 80036f0:	2300      	movs	r3, #0
 80036f2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d07d      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003700:	2300      	movs	r3, #0
 8003702:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003704:	4b4f      	ldr	r3, [pc, #316]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10d      	bne.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003710:	4b4c      	ldr	r3, [pc, #304]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003712:	69db      	ldr	r3, [r3, #28]
 8003714:	4a4b      	ldr	r2, [pc, #300]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800371a:	61d3      	str	r3, [r2, #28]
 800371c:	4b49      	ldr	r3, [pc, #292]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800371e:	69db      	ldr	r3, [r3, #28]
 8003720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003724:	60bb      	str	r3, [r7, #8]
 8003726:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003728:	2301      	movs	r3, #1
 800372a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800372c:	4b46      	ldr	r3, [pc, #280]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003734:	2b00      	cmp	r3, #0
 8003736:	d118      	bne.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003738:	4b43      	ldr	r3, [pc, #268]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a42      	ldr	r2, [pc, #264]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800373e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003742:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003744:	f7fd fa94 	bl	8000c70 <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800374a:	e008      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800374c:	f7fd fa90 	bl	8000c70 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b64      	cmp	r3, #100	; 0x64
 8003758:	d901      	bls.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e06d      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800375e:	4b3a      	ldr	r3, [pc, #232]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003766:	2b00      	cmp	r3, #0
 8003768:	d0f0      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800376a:	4b36      	ldr	r3, [pc, #216]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003772:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d02e      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	429a      	cmp	r2, r3
 8003786:	d027      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003788:	4b2e      	ldr	r3, [pc, #184]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800378a:	6a1b      	ldr	r3, [r3, #32]
 800378c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003790:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003792:	4b2e      	ldr	r3, [pc, #184]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003794:	2201      	movs	r2, #1
 8003796:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003798:	4b2c      	ldr	r3, [pc, #176]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800379a:	2200      	movs	r2, #0
 800379c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800379e:	4a29      	ldr	r2, [pc, #164]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d014      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ae:	f7fd fa5f 	bl	8000c70 <HAL_GetTick>
 80037b2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037b4:	e00a      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037b6:	f7fd fa5b 	bl	8000c70 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d901      	bls.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e036      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037cc:	4b1d      	ldr	r3, [pc, #116]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ce:	6a1b      	ldr	r3, [r3, #32]
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d0ee      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037d8:	4b1a      	ldr	r3, [pc, #104]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	4917      	ldr	r1, [pc, #92]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037ea:	7dfb      	ldrb	r3, [r7, #23]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d105      	bne.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037f0:	4b14      	ldr	r3, [pc, #80]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037f2:	69db      	ldr	r3, [r3, #28]
 80037f4:	4a13      	ldr	r2, [pc, #76]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037fa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d008      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003808:	4b0e      	ldr	r3, [pc, #56]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	490b      	ldr	r1, [pc, #44]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003816:	4313      	orrs	r3, r2
 8003818:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0310 	and.w	r3, r3, #16
 8003822:	2b00      	cmp	r3, #0
 8003824:	d008      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003826:	4b07      	ldr	r3, [pc, #28]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	4904      	ldr	r1, [pc, #16]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003834:	4313      	orrs	r3, r2
 8003836:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3718      	adds	r7, #24
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	40021000 	.word	0x40021000
 8003848:	40007000 	.word	0x40007000
 800384c:	42420440 	.word	0x42420440

08003850 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e041      	b.n	80038e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d106      	bne.n	800387c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f7fd f87c 	bl	8000974 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2202      	movs	r2, #2
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	3304      	adds	r3, #4
 800388c:	4619      	mov	r1, r3
 800388e:	4610      	mov	r0, r2
 8003890:	f000 faaa 	bl	8003de8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b082      	sub	sp, #8
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d101      	bne.n	8003900 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e041      	b.n	8003984 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b00      	cmp	r3, #0
 800390a:	d106      	bne.n	800391a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 f839 	bl	800398c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2202      	movs	r2, #2
 800391e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	3304      	adds	r3, #4
 800392a:	4619      	mov	r1, r3
 800392c:	4610      	mov	r0, r2
 800392e:	f000 fa5b 	bl	8003de8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	4618      	mov	r0, r3
 8003986:	3708      	adds	r7, #8
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	bc80      	pop	{r7}
 800399c:	4770      	bx	lr
	...

080039a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d109      	bne.n	80039c4 <HAL_TIM_PWM_Start+0x24>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	bf14      	ite	ne
 80039bc:	2301      	movne	r3, #1
 80039be:	2300      	moveq	r3, #0
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	e022      	b.n	8003a0a <HAL_TIM_PWM_Start+0x6a>
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	d109      	bne.n	80039de <HAL_TIM_PWM_Start+0x3e>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	bf14      	ite	ne
 80039d6:	2301      	movne	r3, #1
 80039d8:	2300      	moveq	r3, #0
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	e015      	b.n	8003a0a <HAL_TIM_PWM_Start+0x6a>
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	2b08      	cmp	r3, #8
 80039e2:	d109      	bne.n	80039f8 <HAL_TIM_PWM_Start+0x58>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	bf14      	ite	ne
 80039f0:	2301      	movne	r3, #1
 80039f2:	2300      	moveq	r3, #0
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	e008      	b.n	8003a0a <HAL_TIM_PWM_Start+0x6a>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	bf14      	ite	ne
 8003a04:	2301      	movne	r3, #1
 8003a06:	2300      	moveq	r3, #0
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e05e      	b.n	8003ad0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d104      	bne.n	8003a22 <HAL_TIM_PWM_Start+0x82>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a20:	e013      	b.n	8003a4a <HAL_TIM_PWM_Start+0xaa>
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	2b04      	cmp	r3, #4
 8003a26:	d104      	bne.n	8003a32 <HAL_TIM_PWM_Start+0x92>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a30:	e00b      	b.n	8003a4a <HAL_TIM_PWM_Start+0xaa>
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	2b08      	cmp	r3, #8
 8003a36:	d104      	bne.n	8003a42 <HAL_TIM_PWM_Start+0xa2>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a40:	e003      	b.n	8003a4a <HAL_TIM_PWM_Start+0xaa>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2202      	movs	r2, #2
 8003a46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	6839      	ldr	r1, [r7, #0]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 fc48 	bl	80042e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a1e      	ldr	r2, [pc, #120]	; (8003ad8 <HAL_TIM_PWM_Start+0x138>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d107      	bne.n	8003a72 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a18      	ldr	r2, [pc, #96]	; (8003ad8 <HAL_TIM_PWM_Start+0x138>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d00e      	beq.n	8003a9a <HAL_TIM_PWM_Start+0xfa>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a84:	d009      	beq.n	8003a9a <HAL_TIM_PWM_Start+0xfa>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a14      	ldr	r2, [pc, #80]	; (8003adc <HAL_TIM_PWM_Start+0x13c>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d004      	beq.n	8003a9a <HAL_TIM_PWM_Start+0xfa>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a12      	ldr	r2, [pc, #72]	; (8003ae0 <HAL_TIM_PWM_Start+0x140>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d111      	bne.n	8003abe <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f003 0307 	and.w	r3, r3, #7
 8003aa4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2b06      	cmp	r3, #6
 8003aaa:	d010      	beq.n	8003ace <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f042 0201 	orr.w	r2, r2, #1
 8003aba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003abc:	e007      	b.n	8003ace <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f042 0201 	orr.w	r2, r2, #1
 8003acc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40012c00 	.word	0x40012c00
 8003adc:	40000400 	.word	0x40000400
 8003ae0:	40000800 	.word	0x40000800

08003ae4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d101      	bne.n	8003afe <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003afa:	2302      	movs	r3, #2
 8003afc:	e0ac      	b.n	8003c58 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2b0c      	cmp	r3, #12
 8003b0a:	f200 809f 	bhi.w	8003c4c <HAL_TIM_PWM_ConfigChannel+0x168>
 8003b0e:	a201      	add	r2, pc, #4	; (adr r2, 8003b14 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b14:	08003b49 	.word	0x08003b49
 8003b18:	08003c4d 	.word	0x08003c4d
 8003b1c:	08003c4d 	.word	0x08003c4d
 8003b20:	08003c4d 	.word	0x08003c4d
 8003b24:	08003b89 	.word	0x08003b89
 8003b28:	08003c4d 	.word	0x08003c4d
 8003b2c:	08003c4d 	.word	0x08003c4d
 8003b30:	08003c4d 	.word	0x08003c4d
 8003b34:	08003bcb 	.word	0x08003bcb
 8003b38:	08003c4d 	.word	0x08003c4d
 8003b3c:	08003c4d 	.word	0x08003c4d
 8003b40:	08003c4d 	.word	0x08003c4d
 8003b44:	08003c0b 	.word	0x08003c0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68b9      	ldr	r1, [r7, #8]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f000 f9ac 	bl	8003eac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	699a      	ldr	r2, [r3, #24]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 0208 	orr.w	r2, r2, #8
 8003b62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	699a      	ldr	r2, [r3, #24]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 0204 	bic.w	r2, r2, #4
 8003b72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6999      	ldr	r1, [r3, #24]
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	691a      	ldr	r2, [r3, #16]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	619a      	str	r2, [r3, #24]
      break;
 8003b86:	e062      	b.n	8003c4e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68b9      	ldr	r1, [r7, #8]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 f9f2 	bl	8003f78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	699a      	ldr	r2, [r3, #24]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ba2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	699a      	ldr	r2, [r3, #24]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6999      	ldr	r1, [r3, #24]
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	021a      	lsls	r2, r3, #8
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	619a      	str	r2, [r3, #24]
      break;
 8003bc8:	e041      	b.n	8003c4e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68b9      	ldr	r1, [r7, #8]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f000 fa3b 	bl	800404c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	69da      	ldr	r2, [r3, #28]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f042 0208 	orr.w	r2, r2, #8
 8003be4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	69da      	ldr	r2, [r3, #28]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 0204 	bic.w	r2, r2, #4
 8003bf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	69d9      	ldr	r1, [r3, #28]
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	691a      	ldr	r2, [r3, #16]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	61da      	str	r2, [r3, #28]
      break;
 8003c08:	e021      	b.n	8003c4e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68b9      	ldr	r1, [r7, #8]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f000 fa85 	bl	8004120 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	69da      	ldr	r2, [r3, #28]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	69da      	ldr	r2, [r3, #28]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	69d9      	ldr	r1, [r3, #28]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	021a      	lsls	r2, r3, #8
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	61da      	str	r2, [r3, #28]
      break;
 8003c4a:	e000      	b.n	8003c4e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003c4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d101      	bne.n	8003c78 <HAL_TIM_ConfigClockSource+0x18>
 8003c74:	2302      	movs	r3, #2
 8003c76:	e0b3      	b.n	8003de0 <HAL_TIM_ConfigClockSource+0x180>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2202      	movs	r2, #2
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c9e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cb0:	d03e      	beq.n	8003d30 <HAL_TIM_ConfigClockSource+0xd0>
 8003cb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cb6:	f200 8087 	bhi.w	8003dc8 <HAL_TIM_ConfigClockSource+0x168>
 8003cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cbe:	f000 8085 	beq.w	8003dcc <HAL_TIM_ConfigClockSource+0x16c>
 8003cc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cc6:	d87f      	bhi.n	8003dc8 <HAL_TIM_ConfigClockSource+0x168>
 8003cc8:	2b70      	cmp	r3, #112	; 0x70
 8003cca:	d01a      	beq.n	8003d02 <HAL_TIM_ConfigClockSource+0xa2>
 8003ccc:	2b70      	cmp	r3, #112	; 0x70
 8003cce:	d87b      	bhi.n	8003dc8 <HAL_TIM_ConfigClockSource+0x168>
 8003cd0:	2b60      	cmp	r3, #96	; 0x60
 8003cd2:	d050      	beq.n	8003d76 <HAL_TIM_ConfigClockSource+0x116>
 8003cd4:	2b60      	cmp	r3, #96	; 0x60
 8003cd6:	d877      	bhi.n	8003dc8 <HAL_TIM_ConfigClockSource+0x168>
 8003cd8:	2b50      	cmp	r3, #80	; 0x50
 8003cda:	d03c      	beq.n	8003d56 <HAL_TIM_ConfigClockSource+0xf6>
 8003cdc:	2b50      	cmp	r3, #80	; 0x50
 8003cde:	d873      	bhi.n	8003dc8 <HAL_TIM_ConfigClockSource+0x168>
 8003ce0:	2b40      	cmp	r3, #64	; 0x40
 8003ce2:	d058      	beq.n	8003d96 <HAL_TIM_ConfigClockSource+0x136>
 8003ce4:	2b40      	cmp	r3, #64	; 0x40
 8003ce6:	d86f      	bhi.n	8003dc8 <HAL_TIM_ConfigClockSource+0x168>
 8003ce8:	2b30      	cmp	r3, #48	; 0x30
 8003cea:	d064      	beq.n	8003db6 <HAL_TIM_ConfigClockSource+0x156>
 8003cec:	2b30      	cmp	r3, #48	; 0x30
 8003cee:	d86b      	bhi.n	8003dc8 <HAL_TIM_ConfigClockSource+0x168>
 8003cf0:	2b20      	cmp	r3, #32
 8003cf2:	d060      	beq.n	8003db6 <HAL_TIM_ConfigClockSource+0x156>
 8003cf4:	2b20      	cmp	r3, #32
 8003cf6:	d867      	bhi.n	8003dc8 <HAL_TIM_ConfigClockSource+0x168>
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d05c      	beq.n	8003db6 <HAL_TIM_ConfigClockSource+0x156>
 8003cfc:	2b10      	cmp	r3, #16
 8003cfe:	d05a      	beq.n	8003db6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003d00:	e062      	b.n	8003dc8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6818      	ldr	r0, [r3, #0]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	6899      	ldr	r1, [r3, #8]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	f000 faca 	bl	80042aa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d24:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	609a      	str	r2, [r3, #8]
      break;
 8003d2e:	e04e      	b.n	8003dce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6818      	ldr	r0, [r3, #0]
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	6899      	ldr	r1, [r3, #8]
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	f000 fab3 	bl	80042aa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	689a      	ldr	r2, [r3, #8]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d52:	609a      	str	r2, [r3, #8]
      break;
 8003d54:	e03b      	b.n	8003dce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6818      	ldr	r0, [r3, #0]
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	6859      	ldr	r1, [r3, #4]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	461a      	mov	r2, r3
 8003d64:	f000 fa2a 	bl	80041bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2150      	movs	r1, #80	; 0x50
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 fa81 	bl	8004276 <TIM_ITRx_SetConfig>
      break;
 8003d74:	e02b      	b.n	8003dce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6818      	ldr	r0, [r3, #0]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	6859      	ldr	r1, [r3, #4]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	461a      	mov	r2, r3
 8003d84:	f000 fa48 	bl	8004218 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2160      	movs	r1, #96	; 0x60
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 fa71 	bl	8004276 <TIM_ITRx_SetConfig>
      break;
 8003d94:	e01b      	b.n	8003dce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6818      	ldr	r0, [r3, #0]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	6859      	ldr	r1, [r3, #4]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	461a      	mov	r2, r3
 8003da4:	f000 fa0a 	bl	80041bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2140      	movs	r1, #64	; 0x40
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 fa61 	bl	8004276 <TIM_ITRx_SetConfig>
      break;
 8003db4:	e00b      	b.n	8003dce <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	4610      	mov	r0, r2
 8003dc2:	f000 fa58 	bl	8004276 <TIM_ITRx_SetConfig>
        break;
 8003dc6:	e002      	b.n	8003dce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003dc8:	bf00      	nop
 8003dca:	e000      	b.n	8003dce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003dcc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a29      	ldr	r2, [pc, #164]	; (8003ea0 <TIM_Base_SetConfig+0xb8>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d00b      	beq.n	8003e18 <TIM_Base_SetConfig+0x30>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e06:	d007      	beq.n	8003e18 <TIM_Base_SetConfig+0x30>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a26      	ldr	r2, [pc, #152]	; (8003ea4 <TIM_Base_SetConfig+0xbc>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d003      	beq.n	8003e18 <TIM_Base_SetConfig+0x30>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a25      	ldr	r2, [pc, #148]	; (8003ea8 <TIM_Base_SetConfig+0xc0>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d108      	bne.n	8003e2a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a1c      	ldr	r2, [pc, #112]	; (8003ea0 <TIM_Base_SetConfig+0xb8>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d00b      	beq.n	8003e4a <TIM_Base_SetConfig+0x62>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e38:	d007      	beq.n	8003e4a <TIM_Base_SetConfig+0x62>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a19      	ldr	r2, [pc, #100]	; (8003ea4 <TIM_Base_SetConfig+0xbc>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d003      	beq.n	8003e4a <TIM_Base_SetConfig+0x62>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a18      	ldr	r2, [pc, #96]	; (8003ea8 <TIM_Base_SetConfig+0xc0>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d108      	bne.n	8003e5c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	689a      	ldr	r2, [r3, #8]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a07      	ldr	r2, [pc, #28]	; (8003ea0 <TIM_Base_SetConfig+0xb8>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d103      	bne.n	8003e90 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	691a      	ldr	r2, [r3, #16]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	615a      	str	r2, [r3, #20]
}
 8003e96:	bf00      	nop
 8003e98:	3714      	adds	r7, #20
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bc80      	pop	{r7}
 8003e9e:	4770      	bx	lr
 8003ea0:	40012c00 	.word	0x40012c00
 8003ea4:	40000400 	.word	0x40000400
 8003ea8:	40000800 	.word	0x40000800

08003eac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b087      	sub	sp, #28
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	f023 0201 	bic.w	r2, r3, #1
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f023 0303 	bic.w	r3, r3, #3
 8003ee2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	f023 0302 	bic.w	r3, r3, #2
 8003ef4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a1c      	ldr	r2, [pc, #112]	; (8003f74 <TIM_OC1_SetConfig+0xc8>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d10c      	bne.n	8003f22 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	f023 0308 	bic.w	r3, r3, #8
 8003f0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	f023 0304 	bic.w	r3, r3, #4
 8003f20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a13      	ldr	r2, [pc, #76]	; (8003f74 <TIM_OC1_SetConfig+0xc8>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d111      	bne.n	8003f4e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	621a      	str	r2, [r3, #32]
}
 8003f68:	bf00      	nop
 8003f6a:	371c      	adds	r7, #28
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bc80      	pop	{r7}
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	40012c00 	.word	0x40012c00

08003f78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b087      	sub	sp, #28
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	f023 0210 	bic.w	r2, r3, #16
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	021b      	lsls	r3, r3, #8
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f023 0320 	bic.w	r3, r3, #32
 8003fc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	011b      	lsls	r3, r3, #4
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a1d      	ldr	r2, [pc, #116]	; (8004048 <TIM_OC2_SetConfig+0xd0>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d10d      	bne.n	8003ff4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	011b      	lsls	r3, r3, #4
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ff2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a14      	ldr	r2, [pc, #80]	; (8004048 <TIM_OC2_SetConfig+0xd0>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d113      	bne.n	8004024 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004002:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800400a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	695b      	ldr	r3, [r3, #20]
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	4313      	orrs	r3, r2
 8004016:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	4313      	orrs	r3, r2
 8004022:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685a      	ldr	r2, [r3, #4]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	621a      	str	r2, [r3, #32]
}
 800403e:	bf00      	nop
 8004040:	371c      	adds	r7, #28
 8004042:	46bd      	mov	sp, r7
 8004044:	bc80      	pop	{r7}
 8004046:	4770      	bx	lr
 8004048:	40012c00 	.word	0x40012c00

0800404c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800404c:	b480      	push	{r7}
 800404e:	b087      	sub	sp, #28
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800407a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f023 0303 	bic.w	r3, r3, #3
 8004082:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	4313      	orrs	r3, r2
 800408c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004094:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	021b      	lsls	r3, r3, #8
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	4313      	orrs	r3, r2
 80040a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a1d      	ldr	r2, [pc, #116]	; (800411c <TIM_OC3_SetConfig+0xd0>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d10d      	bne.n	80040c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	021b      	lsls	r3, r3, #8
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a14      	ldr	r2, [pc, #80]	; (800411c <TIM_OC3_SetConfig+0xd0>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d113      	bne.n	80040f6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	011b      	lsls	r3, r3, #4
 80040e4:	693a      	ldr	r2, [r7, #16]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	011b      	lsls	r3, r3, #4
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685a      	ldr	r2, [r3, #4]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	621a      	str	r2, [r3, #32]
}
 8004110:	bf00      	nop
 8004112:	371c      	adds	r7, #28
 8004114:	46bd      	mov	sp, r7
 8004116:	bc80      	pop	{r7}
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	40012c00 	.word	0x40012c00

08004120 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004120:	b480      	push	{r7}
 8004122:	b087      	sub	sp, #28
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800414e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004156:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	021b      	lsls	r3, r3, #8
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	4313      	orrs	r3, r2
 8004162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800416a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	031b      	lsls	r3, r3, #12
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	4313      	orrs	r3, r2
 8004176:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a0f      	ldr	r2, [pc, #60]	; (80041b8 <TIM_OC4_SetConfig+0x98>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d109      	bne.n	8004194 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004186:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	695b      	ldr	r3, [r3, #20]
 800418c:	019b      	lsls	r3, r3, #6
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	4313      	orrs	r3, r2
 8004192:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685a      	ldr	r2, [r3, #4]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	621a      	str	r2, [r3, #32]
}
 80041ae:	bf00      	nop
 80041b0:	371c      	adds	r7, #28
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bc80      	pop	{r7}
 80041b6:	4770      	bx	lr
 80041b8:	40012c00 	.word	0x40012c00

080041bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041bc:	b480      	push	{r7}
 80041be:	b087      	sub	sp, #28
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	f023 0201 	bic.w	r2, r3, #1
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	011b      	lsls	r3, r3, #4
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	f023 030a 	bic.w	r3, r3, #10
 80041f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	4313      	orrs	r3, r2
 8004200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	621a      	str	r2, [r3, #32]
}
 800420e:	bf00      	nop
 8004210:	371c      	adds	r7, #28
 8004212:	46bd      	mov	sp, r7
 8004214:	bc80      	pop	{r7}
 8004216:	4770      	bx	lr

08004218 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004218:	b480      	push	{r7}
 800421a:	b087      	sub	sp, #28
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	f023 0210 	bic.w	r2, r3, #16
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004242:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	031b      	lsls	r3, r3, #12
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	4313      	orrs	r3, r2
 800424c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004254:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	011b      	lsls	r3, r3, #4
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	4313      	orrs	r3, r2
 800425e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	621a      	str	r2, [r3, #32]
}
 800426c:	bf00      	nop
 800426e:	371c      	adds	r7, #28
 8004270:	46bd      	mov	sp, r7
 8004272:	bc80      	pop	{r7}
 8004274:	4770      	bx	lr

08004276 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004276:	b480      	push	{r7}
 8004278:	b085      	sub	sp, #20
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
 800427e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800428c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	4313      	orrs	r3, r2
 8004294:	f043 0307 	orr.w	r3, r3, #7
 8004298:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	609a      	str	r2, [r3, #8]
}
 80042a0:	bf00      	nop
 80042a2:	3714      	adds	r7, #20
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bc80      	pop	{r7}
 80042a8:	4770      	bx	lr

080042aa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042aa:	b480      	push	{r7}
 80042ac:	b087      	sub	sp, #28
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	60f8      	str	r0, [r7, #12]
 80042b2:	60b9      	str	r1, [r7, #8]
 80042b4:	607a      	str	r2, [r7, #4]
 80042b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042c4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	021a      	lsls	r2, r3, #8
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	431a      	orrs	r2, r3
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	609a      	str	r2, [r3, #8]
}
 80042de:	bf00      	nop
 80042e0:	371c      	adds	r7, #28
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bc80      	pop	{r7}
 80042e6:	4770      	bx	lr

080042e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b087      	sub	sp, #28
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	f003 031f 	and.w	r3, r3, #31
 80042fa:	2201      	movs	r2, #1
 80042fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004300:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6a1a      	ldr	r2, [r3, #32]
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	43db      	mvns	r3, r3
 800430a:	401a      	ands	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6a1a      	ldr	r2, [r3, #32]
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	f003 031f 	and.w	r3, r3, #31
 800431a:	6879      	ldr	r1, [r7, #4]
 800431c:	fa01 f303 	lsl.w	r3, r1, r3
 8004320:	431a      	orrs	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	621a      	str	r2, [r3, #32]
}
 8004326:	bf00      	nop
 8004328:	371c      	adds	r7, #28
 800432a:	46bd      	mov	sp, r7
 800432c:	bc80      	pop	{r7}
 800432e:	4770      	bx	lr

08004330 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004340:	2b01      	cmp	r3, #1
 8004342:	d101      	bne.n	8004348 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004344:	2302      	movs	r3, #2
 8004346:	e046      	b.n	80043d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2202      	movs	r2, #2
 8004354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800436e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	4313      	orrs	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a16      	ldr	r2, [pc, #88]	; (80043e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d00e      	beq.n	80043aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004394:	d009      	beq.n	80043aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a12      	ldr	r2, [pc, #72]	; (80043e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d004      	beq.n	80043aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a10      	ldr	r2, [pc, #64]	; (80043e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d10c      	bne.n	80043c4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68ba      	ldr	r2, [r7, #8]
 80043c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3714      	adds	r7, #20
 80043da:	46bd      	mov	sp, r7
 80043dc:	bc80      	pop	{r7}
 80043de:	4770      	bx	lr
 80043e0:	40012c00 	.word	0x40012c00
 80043e4:	40000400 	.word	0x40000400
 80043e8:	40000800 	.word	0x40000800

080043ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80043ec:	b084      	sub	sp, #16
 80043ee:	b480      	push	{r7}
 80043f0:	b083      	sub	sp, #12
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
 80043f6:	f107 0014 	add.w	r0, r7, #20
 80043fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	bc80      	pop	{r7}
 8004408:	b004      	add	sp, #16
 800440a:	4770      	bx	lr

0800440c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800441c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004420:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	b29a      	uxth	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3714      	adds	r7, #20
 8004432:	46bd      	mov	sp, r7
 8004434:	bc80      	pop	{r7}
 8004436:	4770      	bx	lr

08004438 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004440:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004444:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800444c:	b29a      	uxth	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	b29b      	uxth	r3, r3
 8004452:	43db      	mvns	r3, r3
 8004454:	b29b      	uxth	r3, r3
 8004456:	4013      	ands	r3, r2
 8004458:	b29a      	uxth	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3714      	adds	r7, #20
 8004466:	46bd      	mov	sp, r7
 8004468:	bc80      	pop	{r7}
 800446a:	4770      	bx	lr

0800446c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	460b      	mov	r3, r1
 8004476:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	bc80      	pop	{r7}
 8004482:	4770      	bx	lr

08004484 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004484:	b084      	sub	sp, #16
 8004486:	b480      	push	{r7}
 8004488:	b083      	sub	sp, #12
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
 800448e:	f107 0014 	add.w	r0, r7, #20
 8004492:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	bc80      	pop	{r7}
 80044c0:	b004      	add	sp, #16
 80044c2:	4770      	bx	lr

080044c4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b09b      	sub	sp, #108	; 0x6c
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80044ce:	2300      	movs	r3, #0
 80044d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	4413      	add	r3, r2
 80044de:	881b      	ldrh	r3, [r3, #0]
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80044e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ea:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	78db      	ldrb	r3, [r3, #3]
 80044f2:	2b03      	cmp	r3, #3
 80044f4:	d81f      	bhi.n	8004536 <USB_ActivateEndpoint+0x72>
 80044f6:	a201      	add	r2, pc, #4	; (adr r2, 80044fc <USB_ActivateEndpoint+0x38>)
 80044f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044fc:	0800450d 	.word	0x0800450d
 8004500:	08004529 	.word	0x08004529
 8004504:	0800453f 	.word	0x0800453f
 8004508:	0800451b 	.word	0x0800451b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800450c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004510:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004514:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004518:	e012      	b.n	8004540 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800451a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800451e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004522:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004526:	e00b      	b.n	8004540 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004528:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800452c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004530:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004534:	e004      	b.n	8004540 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800453c:	e000      	b.n	8004540 <USB_ActivateEndpoint+0x7c>
      break;
 800453e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	441a      	add	r2, r3
 800454a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800454e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004552:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004556:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800455a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800455e:	b29b      	uxth	r3, r3
 8004560:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	4413      	add	r3, r2
 800456c:	881b      	ldrh	r3, [r3, #0]
 800456e:	b29b      	uxth	r3, r3
 8004570:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004574:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004578:	b29a      	uxth	r2, r3
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	b29b      	uxth	r3, r3
 8004580:	4313      	orrs	r3, r2
 8004582:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	441a      	add	r2, r3
 8004590:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004594:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004598:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800459c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	7b1b      	ldrb	r3, [r3, #12]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f040 8149 	bne.w	8004844 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	785b      	ldrb	r3, [r3, #1]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f000 8084 	beq.w	80046c4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	617b      	str	r3, [r7, #20]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	461a      	mov	r2, r3
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	4413      	add	r3, r2
 80045ce:	617b      	str	r3, [r7, #20]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	011a      	lsls	r2, r3, #4
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	4413      	add	r3, r2
 80045da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045de:	613b      	str	r3, [r7, #16]
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	88db      	ldrh	r3, [r3, #6]
 80045e4:	085b      	lsrs	r3, r3, #1
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	005b      	lsls	r3, r3, #1
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4413      	add	r3, r2
 80045fa:	881b      	ldrh	r3, [r3, #0]
 80045fc:	81fb      	strh	r3, [r7, #14]
 80045fe:	89fb      	ldrh	r3, [r7, #14]
 8004600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004604:	2b00      	cmp	r3, #0
 8004606:	d01b      	beq.n	8004640 <USB_ActivateEndpoint+0x17c>
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	4413      	add	r3, r2
 8004612:	881b      	ldrh	r3, [r3, #0]
 8004614:	b29b      	uxth	r3, r3
 8004616:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800461a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800461e:	81bb      	strh	r3, [r7, #12]
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	441a      	add	r2, r3
 800462a:	89bb      	ldrh	r3, [r7, #12]
 800462c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004630:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004634:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004638:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800463c:	b29b      	uxth	r3, r3
 800463e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	78db      	ldrb	r3, [r3, #3]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d020      	beq.n	800468a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4413      	add	r3, r2
 8004652:	881b      	ldrh	r3, [r3, #0]
 8004654:	b29b      	uxth	r3, r3
 8004656:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800465a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800465e:	813b      	strh	r3, [r7, #8]
 8004660:	893b      	ldrh	r3, [r7, #8]
 8004662:	f083 0320 	eor.w	r3, r3, #32
 8004666:	813b      	strh	r3, [r7, #8]
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	441a      	add	r2, r3
 8004672:	893b      	ldrh	r3, [r7, #8]
 8004674:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004678:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800467c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004684:	b29b      	uxth	r3, r3
 8004686:	8013      	strh	r3, [r2, #0]
 8004688:	e27f      	b.n	8004b8a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4413      	add	r3, r2
 8004694:	881b      	ldrh	r3, [r3, #0]
 8004696:	b29b      	uxth	r3, r3
 8004698:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800469c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046a0:	817b      	strh	r3, [r7, #10]
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	441a      	add	r2, r3
 80046ac:	897b      	ldrh	r3, [r7, #10]
 80046ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046be:	b29b      	uxth	r3, r3
 80046c0:	8013      	strh	r3, [r2, #0]
 80046c2:	e262      	b.n	8004b8a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	461a      	mov	r2, r3
 80046d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d4:	4413      	add	r3, r2
 80046d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	011a      	lsls	r2, r3, #4
 80046de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e0:	4413      	add	r3, r2
 80046e2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80046e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	88db      	ldrh	r3, [r3, #6]
 80046ec:	085b      	lsrs	r3, r3, #1
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	005b      	lsls	r3, r3, #1
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f6:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	627b      	str	r3, [r7, #36]	; 0x24
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004702:	b29b      	uxth	r3, r3
 8004704:	461a      	mov	r2, r3
 8004706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004708:	4413      	add	r3, r2
 800470a:	627b      	str	r3, [r7, #36]	; 0x24
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	011a      	lsls	r2, r3, #4
 8004712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004714:	4413      	add	r3, r2
 8004716:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800471a:	623b      	str	r3, [r7, #32]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d112      	bne.n	800474a <USB_ActivateEndpoint+0x286>
 8004724:	6a3b      	ldr	r3, [r7, #32]
 8004726:	881b      	ldrh	r3, [r3, #0]
 8004728:	b29b      	uxth	r3, r3
 800472a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800472e:	b29a      	uxth	r2, r3
 8004730:	6a3b      	ldr	r3, [r7, #32]
 8004732:	801a      	strh	r2, [r3, #0]
 8004734:	6a3b      	ldr	r3, [r7, #32]
 8004736:	881b      	ldrh	r3, [r3, #0]
 8004738:	b29b      	uxth	r3, r3
 800473a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800473e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004742:	b29a      	uxth	r2, r3
 8004744:	6a3b      	ldr	r3, [r7, #32]
 8004746:	801a      	strh	r2, [r3, #0]
 8004748:	e02f      	b.n	80047aa <USB_ActivateEndpoint+0x2e6>
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	2b3e      	cmp	r3, #62	; 0x3e
 8004750:	d813      	bhi.n	800477a <USB_ActivateEndpoint+0x2b6>
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	085b      	lsrs	r3, r3, #1
 8004758:	663b      	str	r3, [r7, #96]	; 0x60
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d002      	beq.n	800476c <USB_ActivateEndpoint+0x2a8>
 8004766:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004768:	3301      	adds	r3, #1
 800476a:	663b      	str	r3, [r7, #96]	; 0x60
 800476c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800476e:	b29b      	uxth	r3, r3
 8004770:	029b      	lsls	r3, r3, #10
 8004772:	b29a      	uxth	r2, r3
 8004774:	6a3b      	ldr	r3, [r7, #32]
 8004776:	801a      	strh	r2, [r3, #0]
 8004778:	e017      	b.n	80047aa <USB_ActivateEndpoint+0x2e6>
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	095b      	lsrs	r3, r3, #5
 8004780:	663b      	str	r3, [r7, #96]	; 0x60
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	f003 031f 	and.w	r3, r3, #31
 800478a:	2b00      	cmp	r3, #0
 800478c:	d102      	bne.n	8004794 <USB_ActivateEndpoint+0x2d0>
 800478e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004790:	3b01      	subs	r3, #1
 8004792:	663b      	str	r3, [r7, #96]	; 0x60
 8004794:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004796:	b29b      	uxth	r3, r3
 8004798:	029b      	lsls	r3, r3, #10
 800479a:	b29b      	uxth	r3, r3
 800479c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	6a3b      	ldr	r3, [r7, #32]
 80047a8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	4413      	add	r3, r2
 80047b4:	881b      	ldrh	r3, [r3, #0]
 80047b6:	83fb      	strh	r3, [r7, #30]
 80047b8:	8bfb      	ldrh	r3, [r7, #30]
 80047ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d01b      	beq.n	80047fa <USB_ActivateEndpoint+0x336>
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	4413      	add	r3, r2
 80047cc:	881b      	ldrh	r3, [r3, #0]
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047d8:	83bb      	strh	r3, [r7, #28]
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	441a      	add	r2, r3
 80047e4:	8bbb      	ldrh	r3, [r7, #28]
 80047e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4413      	add	r3, r2
 8004804:	881b      	ldrh	r3, [r3, #0]
 8004806:	b29b      	uxth	r3, r3
 8004808:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800480c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004810:	837b      	strh	r3, [r7, #26]
 8004812:	8b7b      	ldrh	r3, [r7, #26]
 8004814:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004818:	837b      	strh	r3, [r7, #26]
 800481a:	8b7b      	ldrh	r3, [r7, #26]
 800481c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004820:	837b      	strh	r3, [r7, #26]
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	441a      	add	r2, r3
 800482c:	8b7b      	ldrh	r3, [r7, #26]
 800482e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004832:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800483a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800483e:	b29b      	uxth	r3, r3
 8004840:	8013      	strh	r3, [r2, #0]
 8004842:	e1a2      	b.n	8004b8a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4413      	add	r3, r2
 800484e:	881b      	ldrh	r3, [r3, #0]
 8004850:	b29b      	uxth	r3, r3
 8004852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800485a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	441a      	add	r2, r3
 8004868:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800486c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004870:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004874:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800487c:	b29b      	uxth	r3, r3
 800487e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	65bb      	str	r3, [r7, #88]	; 0x58
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800488a:	b29b      	uxth	r3, r3
 800488c:	461a      	mov	r2, r3
 800488e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004890:	4413      	add	r3, r2
 8004892:	65bb      	str	r3, [r7, #88]	; 0x58
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	011a      	lsls	r2, r3, #4
 800489a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800489c:	4413      	add	r3, r2
 800489e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048a2:	657b      	str	r3, [r7, #84]	; 0x54
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	891b      	ldrh	r3, [r3, #8]
 80048a8:	085b      	lsrs	r3, r3, #1
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	005b      	lsls	r3, r3, #1
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048b2:	801a      	strh	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	653b      	str	r3, [r7, #80]	; 0x50
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048be:	b29b      	uxth	r3, r3
 80048c0:	461a      	mov	r2, r3
 80048c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048c4:	4413      	add	r3, r2
 80048c6:	653b      	str	r3, [r7, #80]	; 0x50
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	011a      	lsls	r2, r3, #4
 80048ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048d0:	4413      	add	r3, r2
 80048d2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80048d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	895b      	ldrh	r3, [r3, #10]
 80048dc:	085b      	lsrs	r3, r3, #1
 80048de:	b29b      	uxth	r3, r3
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048e6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	785b      	ldrb	r3, [r3, #1]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f040 8091 	bne.w	8004a14 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4413      	add	r3, r2
 80048fc:	881b      	ldrh	r3, [r3, #0]
 80048fe:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004900:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004902:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d01b      	beq.n	8004942 <USB_ActivateEndpoint+0x47e>
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4413      	add	r3, r2
 8004914:	881b      	ldrh	r3, [r3, #0]
 8004916:	b29b      	uxth	r3, r3
 8004918:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800491c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004920:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	441a      	add	r2, r3
 800492c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800492e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004932:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004936:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800493a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800493e:	b29b      	uxth	r3, r3
 8004940:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	4413      	add	r3, r2
 800494c:	881b      	ldrh	r3, [r3, #0]
 800494e:	873b      	strh	r3, [r7, #56]	; 0x38
 8004950:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004956:	2b00      	cmp	r3, #0
 8004958:	d01b      	beq.n	8004992 <USB_ActivateEndpoint+0x4ce>
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	4413      	add	r3, r2
 8004964:	881b      	ldrh	r3, [r3, #0]
 8004966:	b29b      	uxth	r3, r3
 8004968:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800496c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004970:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	441a      	add	r2, r3
 800497c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800497e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004982:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004986:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800498a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800498e:	b29b      	uxth	r3, r3
 8004990:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4413      	add	r3, r2
 800499c:	881b      	ldrh	r3, [r3, #0]
 800499e:	b29b      	uxth	r3, r3
 80049a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80049aa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80049ac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80049b0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80049b2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80049b4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80049b8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	441a      	add	r2, r3
 80049c4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80049c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	4413      	add	r3, r2
 80049e4:	881b      	ldrh	r3, [r3, #0]
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049f0:	867b      	strh	r3, [r7, #50]	; 0x32
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	441a      	add	r2, r3
 80049fc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80049fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	8013      	strh	r3, [r2, #0]
 8004a12:	e0ba      	b.n	8004b8a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	4413      	add	r3, r2
 8004a1e:	881b      	ldrh	r3, [r3, #0]
 8004a20:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004a24:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004a28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d01d      	beq.n	8004a6c <USB_ActivateEndpoint+0x5a8>
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	4413      	add	r3, r2
 8004a3a:	881b      	ldrh	r3, [r3, #0]
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a46:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	441a      	add	r2, r3
 8004a54:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004a58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	4413      	add	r3, r2
 8004a76:	881b      	ldrh	r3, [r3, #0]
 8004a78:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004a7c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d01d      	beq.n	8004ac4 <USB_ActivateEndpoint+0x600>
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	4413      	add	r3, r2
 8004a92:	881b      	ldrh	r3, [r3, #0]
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a9e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	441a      	add	r2, r3
 8004aac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004ab0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ab4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ab8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004abc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	78db      	ldrb	r3, [r3, #3]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d024      	beq.n	8004b16 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4413      	add	r3, r2
 8004ad6:	881b      	ldrh	r3, [r3, #0]
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ade:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ae2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004ae6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004aea:	f083 0320 	eor.w	r3, r3, #32
 8004aee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	441a      	add	r2, r3
 8004afc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004b00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	8013      	strh	r3, [r2, #0]
 8004b14:	e01d      	b.n	8004b52 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	4413      	add	r3, r2
 8004b20:	881b      	ldrh	r3, [r3, #0]
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b2c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	441a      	add	r2, r3
 8004b3a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004b3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	4413      	add	r3, r2
 8004b5c:	881b      	ldrh	r3, [r3, #0]
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b68:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	441a      	add	r2, r3
 8004b74:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004b76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004b8a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	376c      	adds	r7, #108	; 0x6c
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bc80      	pop	{r7}
 8004b96:	4770      	bx	lr

08004b98 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b08d      	sub	sp, #52	; 0x34
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	7b1b      	ldrb	r3, [r3, #12]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f040 808e 	bne.w	8004cc8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	785b      	ldrb	r3, [r3, #1]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d044      	beq.n	8004c3e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4413      	add	r3, r2
 8004bbe:	881b      	ldrh	r3, [r3, #0]
 8004bc0:	81bb      	strh	r3, [r7, #12]
 8004bc2:	89bb      	ldrh	r3, [r7, #12]
 8004bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d01b      	beq.n	8004c04 <USB_DeactivateEndpoint+0x6c>
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4413      	add	r3, r2
 8004bd6:	881b      	ldrh	r3, [r3, #0]
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be2:	817b      	strh	r3, [r7, #10]
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	441a      	add	r2, r3
 8004bee:	897b      	ldrh	r3, [r7, #10]
 8004bf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bfc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	4413      	add	r3, r2
 8004c0e:	881b      	ldrh	r3, [r3, #0]
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c1a:	813b      	strh	r3, [r7, #8]
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	441a      	add	r2, r3
 8004c26:	893b      	ldrh	r3, [r7, #8]
 8004c28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	8013      	strh	r3, [r2, #0]
 8004c3c:	e192      	b.n	8004f64 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	4413      	add	r3, r2
 8004c48:	881b      	ldrh	r3, [r3, #0]
 8004c4a:	827b      	strh	r3, [r7, #18]
 8004c4c:	8a7b      	ldrh	r3, [r7, #18]
 8004c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d01b      	beq.n	8004c8e <USB_DeactivateEndpoint+0xf6>
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4413      	add	r3, r2
 8004c60:	881b      	ldrh	r3, [r3, #0]
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c6c:	823b      	strh	r3, [r7, #16]
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	441a      	add	r2, r3
 8004c78:	8a3b      	ldrh	r3, [r7, #16]
 8004c7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	4413      	add	r3, r2
 8004c98:	881b      	ldrh	r3, [r3, #0]
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca4:	81fb      	strh	r3, [r7, #14]
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	441a      	add	r2, r3
 8004cb0:	89fb      	ldrh	r3, [r7, #14]
 8004cb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	8013      	strh	r3, [r2, #0]
 8004cc6:	e14d      	b.n	8004f64 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	785b      	ldrb	r3, [r3, #1]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f040 80a5 	bne.w	8004e1c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	4413      	add	r3, r2
 8004cdc:	881b      	ldrh	r3, [r3, #0]
 8004cde:	843b      	strh	r3, [r7, #32]
 8004ce0:	8c3b      	ldrh	r3, [r7, #32]
 8004ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d01b      	beq.n	8004d22 <USB_DeactivateEndpoint+0x18a>
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4413      	add	r3, r2
 8004cf4:	881b      	ldrh	r3, [r3, #0]
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d00:	83fb      	strh	r3, [r7, #30]
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	441a      	add	r2, r3
 8004d0c:	8bfb      	ldrh	r3, [r7, #30]
 8004d0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4413      	add	r3, r2
 8004d2c:	881b      	ldrh	r3, [r3, #0]
 8004d2e:	83bb      	strh	r3, [r7, #28]
 8004d30:	8bbb      	ldrh	r3, [r7, #28]
 8004d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d01b      	beq.n	8004d72 <USB_DeactivateEndpoint+0x1da>
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	4413      	add	r3, r2
 8004d44:	881b      	ldrh	r3, [r3, #0]
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d50:	837b      	strh	r3, [r7, #26]
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	441a      	add	r2, r3
 8004d5c:	8b7b      	ldrh	r3, [r7, #26]
 8004d5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d6a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4413      	add	r3, r2
 8004d7c:	881b      	ldrh	r3, [r3, #0]
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d88:	833b      	strh	r3, [r7, #24]
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	441a      	add	r2, r3
 8004d94:	8b3b      	ldrh	r3, [r7, #24]
 8004d96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004da2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4413      	add	r3, r2
 8004db4:	881b      	ldrh	r3, [r3, #0]
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dc0:	82fb      	strh	r3, [r7, #22]
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	441a      	add	r2, r3
 8004dcc:	8afb      	ldrh	r3, [r7, #22]
 8004dce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4413      	add	r3, r2
 8004dec:	881b      	ldrh	r3, [r3, #0]
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004df4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004df8:	82bb      	strh	r3, [r7, #20]
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	441a      	add	r2, r3
 8004e04:	8abb      	ldrh	r3, [r7, #20]
 8004e06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	8013      	strh	r3, [r2, #0]
 8004e1a:	e0a3      	b.n	8004f64 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4413      	add	r3, r2
 8004e26:	881b      	ldrh	r3, [r3, #0]
 8004e28:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004e2a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004e2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d01b      	beq.n	8004e6c <USB_DeactivateEndpoint+0x2d4>
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	4413      	add	r3, r2
 8004e3e:	881b      	ldrh	r3, [r3, #0]
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e4a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	441a      	add	r2, r3
 8004e56:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004e58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4413      	add	r3, r2
 8004e76:	881b      	ldrh	r3, [r3, #0]
 8004e78:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004e7a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d01b      	beq.n	8004ebc <USB_DeactivateEndpoint+0x324>
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	4413      	add	r3, r2
 8004e8e:	881b      	ldrh	r3, [r3, #0]
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e9a:	853b      	strh	r3, [r7, #40]	; 0x28
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	441a      	add	r2, r3
 8004ea6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004ea8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eb4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4413      	add	r3, r2
 8004ec6:	881b      	ldrh	r3, [r3, #0]
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	441a      	add	r2, r3
 8004ede:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ee0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ee4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ee8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4413      	add	r3, r2
 8004efe:	881b      	ldrh	r3, [r3, #0]
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f0a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	441a      	add	r2, r3
 8004f16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4413      	add	r3, r2
 8004f36:	881b      	ldrh	r3, [r3, #0]
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f42:	847b      	strh	r3, [r7, #34]	; 0x22
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	441a      	add	r2, r3
 8004f4e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004f50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3734      	adds	r7, #52	; 0x34
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bc80      	pop	{r7}
 8004f6e:	4770      	bx	lr

08004f70 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b0c4      	sub	sp, #272	; 0x110
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	1d3b      	adds	r3, r7, #4
 8004f78:	6018      	str	r0, [r3, #0]
 8004f7a:	463b      	mov	r3, r7
 8004f7c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f7e:	463b      	mov	r3, r7
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	785b      	ldrb	r3, [r3, #1]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	f040 8557 	bne.w	8005a38 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004f8a:	463b      	mov	r3, r7
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	699a      	ldr	r2, [r3, #24]
 8004f90:	463b      	mov	r3, r7
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d905      	bls.n	8004fa6 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004f9a:	463b      	mov	r3, r7
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004fa4:	e004      	b.n	8004fb0 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004fa6:	463b      	mov	r3, r7
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004fb0:	463b      	mov	r3, r7
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	7b1b      	ldrb	r3, [r3, #12]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d12c      	bne.n	8005014 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004fba:	463b      	mov	r3, r7
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	6959      	ldr	r1, [r3, #20]
 8004fc0:	463b      	mov	r3, r7
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	88da      	ldrh	r2, [r3, #6]
 8004fc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	1d38      	adds	r0, r7, #4
 8004fce:	6800      	ldr	r0, [r0, #0]
 8004fd0:	f001 fa2c 	bl	800642c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004fd4:	1d3b      	adds	r3, r7, #4
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	617b      	str	r3, [r7, #20]
 8004fda:	1d3b      	adds	r3, r7, #4
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	4413      	add	r3, r2
 8004fea:	617b      	str	r3, [r7, #20]
 8004fec:	463b      	mov	r3, r7
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	011a      	lsls	r2, r3, #4
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004ffc:	f107 0310 	add.w	r3, r7, #16
 8005000:	601a      	str	r2, [r3, #0]
 8005002:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005006:	b29a      	uxth	r2, r3
 8005008:	f107 0310 	add.w	r3, r7, #16
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	801a      	strh	r2, [r3, #0]
 8005010:	f000 bcdd 	b.w	80059ce <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005014:	463b      	mov	r3, r7
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	78db      	ldrb	r3, [r3, #3]
 800501a:	2b02      	cmp	r3, #2
 800501c:	f040 8347 	bne.w	80056ae <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005020:	463b      	mov	r3, r7
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6a1a      	ldr	r2, [r3, #32]
 8005026:	463b      	mov	r3, r7
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	429a      	cmp	r2, r3
 800502e:	f240 82eb 	bls.w	8005608 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005032:	1d3b      	adds	r3, r7, #4
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	463b      	mov	r3, r7
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	4413      	add	r3, r2
 8005040:	881b      	ldrh	r3, [r3, #0]
 8005042:	b29b      	uxth	r3, r3
 8005044:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800504c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8005050:	1d3b      	adds	r3, r7, #4
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	463b      	mov	r3, r7
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	441a      	add	r2, r3
 800505e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005062:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005066:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800506a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800506e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005072:	b29b      	uxth	r3, r3
 8005074:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005076:	463b      	mov	r3, r7
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	6a1a      	ldr	r2, [r3, #32]
 800507c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005080:	1ad2      	subs	r2, r2, r3
 8005082:	463b      	mov	r3, r7
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005088:	1d3b      	adds	r3, r7, #4
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	463b      	mov	r3, r7
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	881b      	ldrh	r3, [r3, #0]
 8005098:	b29b      	uxth	r3, r3
 800509a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f000 8159 	beq.w	8005356 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80050a4:	1d3b      	adds	r3, r7, #4
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	637b      	str	r3, [r7, #52]	; 0x34
 80050aa:	463b      	mov	r3, r7
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	785b      	ldrb	r3, [r3, #1]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d164      	bne.n	800517e <USB_EPStartXfer+0x20e>
 80050b4:	1d3b      	adds	r3, r7, #4
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050ba:	1d3b      	adds	r3, r7, #4
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	461a      	mov	r2, r3
 80050c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c8:	4413      	add	r3, r2
 80050ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050cc:	463b      	mov	r3, r7
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	011a      	lsls	r2, r3, #4
 80050d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d6:	4413      	add	r3, r2
 80050d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80050dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80050de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d112      	bne.n	800510c <USB_EPStartXfer+0x19c>
 80050e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e8:	881b      	ldrh	r3, [r3, #0]
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f4:	801a      	strh	r2, [r3, #0]
 80050f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f8:	881b      	ldrh	r3, [r3, #0]
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005100:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005104:	b29a      	uxth	r2, r3
 8005106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005108:	801a      	strh	r2, [r3, #0]
 800510a:	e054      	b.n	80051b6 <USB_EPStartXfer+0x246>
 800510c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005110:	2b3e      	cmp	r3, #62	; 0x3e
 8005112:	d817      	bhi.n	8005144 <USB_EPStartXfer+0x1d4>
 8005114:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005118:	085b      	lsrs	r3, r3, #1
 800511a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800511e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005122:	f003 0301 	and.w	r3, r3, #1
 8005126:	2b00      	cmp	r3, #0
 8005128:	d004      	beq.n	8005134 <USB_EPStartXfer+0x1c4>
 800512a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800512e:	3301      	adds	r3, #1
 8005130:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005134:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005138:	b29b      	uxth	r3, r3
 800513a:	029b      	lsls	r3, r3, #10
 800513c:	b29a      	uxth	r2, r3
 800513e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005140:	801a      	strh	r2, [r3, #0]
 8005142:	e038      	b.n	80051b6 <USB_EPStartXfer+0x246>
 8005144:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005148:	095b      	lsrs	r3, r3, #5
 800514a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800514e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005152:	f003 031f 	and.w	r3, r3, #31
 8005156:	2b00      	cmp	r3, #0
 8005158:	d104      	bne.n	8005164 <USB_EPStartXfer+0x1f4>
 800515a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800515e:	3b01      	subs	r3, #1
 8005160:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005164:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005168:	b29b      	uxth	r3, r3
 800516a:	029b      	lsls	r3, r3, #10
 800516c:	b29b      	uxth	r3, r3
 800516e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005172:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005176:	b29a      	uxth	r2, r3
 8005178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517a:	801a      	strh	r2, [r3, #0]
 800517c:	e01b      	b.n	80051b6 <USB_EPStartXfer+0x246>
 800517e:	463b      	mov	r3, r7
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	785b      	ldrb	r3, [r3, #1]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d116      	bne.n	80051b6 <USB_EPStartXfer+0x246>
 8005188:	1d3b      	adds	r3, r7, #4
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005190:	b29b      	uxth	r3, r3
 8005192:	461a      	mov	r2, r3
 8005194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005196:	4413      	add	r3, r2
 8005198:	637b      	str	r3, [r7, #52]	; 0x34
 800519a:	463b      	mov	r3, r7
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	011a      	lsls	r2, r3, #4
 80051a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051a4:	4413      	add	r3, r2
 80051a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80051aa:	633b      	str	r3, [r7, #48]	; 0x30
 80051ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051b0:	b29a      	uxth	r2, r3
 80051b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80051b6:	463b      	mov	r3, r7
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	895b      	ldrh	r3, [r3, #10]
 80051bc:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051c0:	463b      	mov	r3, r7
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	6959      	ldr	r1, [r3, #20]
 80051c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80051d0:	1d38      	adds	r0, r7, #4
 80051d2:	6800      	ldr	r0, [r0, #0]
 80051d4:	f001 f92a 	bl	800642c <USB_WritePMA>
            ep->xfer_buff += len;
 80051d8:	463b      	mov	r3, r7
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	695a      	ldr	r2, [r3, #20]
 80051de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051e2:	441a      	add	r2, r3
 80051e4:	463b      	mov	r3, r7
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80051ea:	463b      	mov	r3, r7
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	6a1a      	ldr	r2, [r3, #32]
 80051f0:	463b      	mov	r3, r7
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d909      	bls.n	800520e <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 80051fa:	463b      	mov	r3, r7
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	6a1a      	ldr	r2, [r3, #32]
 8005200:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005204:	1ad2      	subs	r2, r2, r3
 8005206:	463b      	mov	r3, r7
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	621a      	str	r2, [r3, #32]
 800520c:	e008      	b.n	8005220 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800520e:	463b      	mov	r3, r7
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	6a1b      	ldr	r3, [r3, #32]
 8005214:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8005218:	463b      	mov	r3, r7
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2200      	movs	r2, #0
 800521e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005220:	463b      	mov	r3, r7
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	785b      	ldrb	r3, [r3, #1]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d164      	bne.n	80052f4 <USB_EPStartXfer+0x384>
 800522a:	1d3b      	adds	r3, r7, #4
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	61fb      	str	r3, [r7, #28]
 8005230:	1d3b      	adds	r3, r7, #4
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005238:	b29b      	uxth	r3, r3
 800523a:	461a      	mov	r2, r3
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	4413      	add	r3, r2
 8005240:	61fb      	str	r3, [r7, #28]
 8005242:	463b      	mov	r3, r7
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	011a      	lsls	r2, r3, #4
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	4413      	add	r3, r2
 800524e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005252:	61bb      	str	r3, [r7, #24]
 8005254:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005258:	2b00      	cmp	r3, #0
 800525a:	d112      	bne.n	8005282 <USB_EPStartXfer+0x312>
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	881b      	ldrh	r3, [r3, #0]
 8005260:	b29b      	uxth	r3, r3
 8005262:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005266:	b29a      	uxth	r2, r3
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	801a      	strh	r2, [r3, #0]
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	881b      	ldrh	r3, [r3, #0]
 8005270:	b29b      	uxth	r3, r3
 8005272:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005276:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800527a:	b29a      	uxth	r2, r3
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	801a      	strh	r2, [r3, #0]
 8005280:	e057      	b.n	8005332 <USB_EPStartXfer+0x3c2>
 8005282:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005286:	2b3e      	cmp	r3, #62	; 0x3e
 8005288:	d817      	bhi.n	80052ba <USB_EPStartXfer+0x34a>
 800528a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800528e:	085b      	lsrs	r3, r3, #1
 8005290:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005294:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005298:	f003 0301 	and.w	r3, r3, #1
 800529c:	2b00      	cmp	r3, #0
 800529e:	d004      	beq.n	80052aa <USB_EPStartXfer+0x33a>
 80052a0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80052a4:	3301      	adds	r3, #1
 80052a6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80052aa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	029b      	lsls	r3, r3, #10
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	801a      	strh	r2, [r3, #0]
 80052b8:	e03b      	b.n	8005332 <USB_EPStartXfer+0x3c2>
 80052ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052be:	095b      	lsrs	r3, r3, #5
 80052c0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80052c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052c8:	f003 031f 	and.w	r3, r3, #31
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d104      	bne.n	80052da <USB_EPStartXfer+0x36a>
 80052d0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80052d4:	3b01      	subs	r3, #1
 80052d6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80052da:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80052de:	b29b      	uxth	r3, r3
 80052e0:	029b      	lsls	r3, r3, #10
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	801a      	strh	r2, [r3, #0]
 80052f2:	e01e      	b.n	8005332 <USB_EPStartXfer+0x3c2>
 80052f4:	463b      	mov	r3, r7
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	785b      	ldrb	r3, [r3, #1]
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d119      	bne.n	8005332 <USB_EPStartXfer+0x3c2>
 80052fe:	1d3b      	adds	r3, r7, #4
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	627b      	str	r3, [r7, #36]	; 0x24
 8005304:	1d3b      	adds	r3, r7, #4
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800530c:	b29b      	uxth	r3, r3
 800530e:	461a      	mov	r2, r3
 8005310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005312:	4413      	add	r3, r2
 8005314:	627b      	str	r3, [r7, #36]	; 0x24
 8005316:	463b      	mov	r3, r7
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	011a      	lsls	r2, r3, #4
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	4413      	add	r3, r2
 8005322:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005326:	623b      	str	r3, [r7, #32]
 8005328:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800532c:	b29a      	uxth	r2, r3
 800532e:	6a3b      	ldr	r3, [r7, #32]
 8005330:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005332:	463b      	mov	r3, r7
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	891b      	ldrh	r3, [r3, #8]
 8005338:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800533c:	463b      	mov	r3, r7
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6959      	ldr	r1, [r3, #20]
 8005342:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005346:	b29b      	uxth	r3, r3
 8005348:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800534c:	1d38      	adds	r0, r7, #4
 800534e:	6800      	ldr	r0, [r0, #0]
 8005350:	f001 f86c 	bl	800642c <USB_WritePMA>
 8005354:	e33b      	b.n	80059ce <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005356:	463b      	mov	r3, r7
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	785b      	ldrb	r3, [r3, #1]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d164      	bne.n	800542a <USB_EPStartXfer+0x4ba>
 8005360:	1d3b      	adds	r3, r7, #4
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005366:	1d3b      	adds	r3, r7, #4
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800536e:	b29b      	uxth	r3, r3
 8005370:	461a      	mov	r2, r3
 8005372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005374:	4413      	add	r3, r2
 8005376:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005378:	463b      	mov	r3, r7
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	011a      	lsls	r2, r3, #4
 8005380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005382:	4413      	add	r3, r2
 8005384:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005388:	64bb      	str	r3, [r7, #72]	; 0x48
 800538a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800538e:	2b00      	cmp	r3, #0
 8005390:	d112      	bne.n	80053b8 <USB_EPStartXfer+0x448>
 8005392:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005394:	881b      	ldrh	r3, [r3, #0]
 8005396:	b29b      	uxth	r3, r3
 8005398:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800539c:	b29a      	uxth	r2, r3
 800539e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053a0:	801a      	strh	r2, [r3, #0]
 80053a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053a4:	881b      	ldrh	r3, [r3, #0]
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053b4:	801a      	strh	r2, [r3, #0]
 80053b6:	e057      	b.n	8005468 <USB_EPStartXfer+0x4f8>
 80053b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053bc:	2b3e      	cmp	r3, #62	; 0x3e
 80053be:	d817      	bhi.n	80053f0 <USB_EPStartXfer+0x480>
 80053c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053c4:	085b      	lsrs	r3, r3, #1
 80053c6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80053ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d004      	beq.n	80053e0 <USB_EPStartXfer+0x470>
 80053d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053da:	3301      	adds	r3, #1
 80053dc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80053e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	029b      	lsls	r3, r3, #10
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053ec:	801a      	strh	r2, [r3, #0]
 80053ee:	e03b      	b.n	8005468 <USB_EPStartXfer+0x4f8>
 80053f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053f4:	095b      	lsrs	r3, r3, #5
 80053f6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80053fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053fe:	f003 031f 	and.w	r3, r3, #31
 8005402:	2b00      	cmp	r3, #0
 8005404:	d104      	bne.n	8005410 <USB_EPStartXfer+0x4a0>
 8005406:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800540a:	3b01      	subs	r3, #1
 800540c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005410:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005414:	b29b      	uxth	r3, r3
 8005416:	029b      	lsls	r3, r3, #10
 8005418:	b29b      	uxth	r3, r3
 800541a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800541e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005422:	b29a      	uxth	r2, r3
 8005424:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005426:	801a      	strh	r2, [r3, #0]
 8005428:	e01e      	b.n	8005468 <USB_EPStartXfer+0x4f8>
 800542a:	463b      	mov	r3, r7
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	785b      	ldrb	r3, [r3, #1]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d119      	bne.n	8005468 <USB_EPStartXfer+0x4f8>
 8005434:	1d3b      	adds	r3, r7, #4
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	657b      	str	r3, [r7, #84]	; 0x54
 800543a:	1d3b      	adds	r3, r7, #4
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005442:	b29b      	uxth	r3, r3
 8005444:	461a      	mov	r2, r3
 8005446:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005448:	4413      	add	r3, r2
 800544a:	657b      	str	r3, [r7, #84]	; 0x54
 800544c:	463b      	mov	r3, r7
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	011a      	lsls	r2, r3, #4
 8005454:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005456:	4413      	add	r3, r2
 8005458:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800545c:	653b      	str	r3, [r7, #80]	; 0x50
 800545e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005462:	b29a      	uxth	r2, r3
 8005464:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005466:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005468:	463b      	mov	r3, r7
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	891b      	ldrh	r3, [r3, #8]
 800546e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005472:	463b      	mov	r3, r7
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	6959      	ldr	r1, [r3, #20]
 8005478:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800547c:	b29b      	uxth	r3, r3
 800547e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005482:	1d38      	adds	r0, r7, #4
 8005484:	6800      	ldr	r0, [r0, #0]
 8005486:	f000 ffd1 	bl	800642c <USB_WritePMA>
            ep->xfer_buff += len;
 800548a:	463b      	mov	r3, r7
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	695a      	ldr	r2, [r3, #20]
 8005490:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005494:	441a      	add	r2, r3
 8005496:	463b      	mov	r3, r7
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800549c:	463b      	mov	r3, r7
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6a1a      	ldr	r2, [r3, #32]
 80054a2:	463b      	mov	r3, r7
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d909      	bls.n	80054c0 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 80054ac:	463b      	mov	r3, r7
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	6a1a      	ldr	r2, [r3, #32]
 80054b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054b6:	1ad2      	subs	r2, r2, r3
 80054b8:	463b      	mov	r3, r7
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	621a      	str	r2, [r3, #32]
 80054be:	e008      	b.n	80054d2 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 80054c0:	463b      	mov	r3, r7
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80054ca:	463b      	mov	r3, r7
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2200      	movs	r2, #0
 80054d0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80054d2:	1d3b      	adds	r3, r7, #4
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	647b      	str	r3, [r7, #68]	; 0x44
 80054d8:	463b      	mov	r3, r7
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	785b      	ldrb	r3, [r3, #1]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d164      	bne.n	80055ac <USB_EPStartXfer+0x63c>
 80054e2:	1d3b      	adds	r3, r7, #4
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054e8:	1d3b      	adds	r3, r7, #4
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	461a      	mov	r2, r3
 80054f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054f6:	4413      	add	r3, r2
 80054f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054fa:	463b      	mov	r3, r7
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	011a      	lsls	r2, r3, #4
 8005502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005504:	4413      	add	r3, r2
 8005506:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800550a:	63bb      	str	r3, [r7, #56]	; 0x38
 800550c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005510:	2b00      	cmp	r3, #0
 8005512:	d112      	bne.n	800553a <USB_EPStartXfer+0x5ca>
 8005514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005516:	881b      	ldrh	r3, [r3, #0]
 8005518:	b29b      	uxth	r3, r3
 800551a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800551e:	b29a      	uxth	r2, r3
 8005520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005522:	801a      	strh	r2, [r3, #0]
 8005524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005526:	881b      	ldrh	r3, [r3, #0]
 8005528:	b29b      	uxth	r3, r3
 800552a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800552e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005532:	b29a      	uxth	r2, r3
 8005534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005536:	801a      	strh	r2, [r3, #0]
 8005538:	e054      	b.n	80055e4 <USB_EPStartXfer+0x674>
 800553a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800553e:	2b3e      	cmp	r3, #62	; 0x3e
 8005540:	d817      	bhi.n	8005572 <USB_EPStartXfer+0x602>
 8005542:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005546:	085b      	lsrs	r3, r3, #1
 8005548:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800554c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005550:	f003 0301 	and.w	r3, r3, #1
 8005554:	2b00      	cmp	r3, #0
 8005556:	d004      	beq.n	8005562 <USB_EPStartXfer+0x5f2>
 8005558:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800555c:	3301      	adds	r3, #1
 800555e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005562:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005566:	b29b      	uxth	r3, r3
 8005568:	029b      	lsls	r3, r3, #10
 800556a:	b29a      	uxth	r2, r3
 800556c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556e:	801a      	strh	r2, [r3, #0]
 8005570:	e038      	b.n	80055e4 <USB_EPStartXfer+0x674>
 8005572:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005576:	095b      	lsrs	r3, r3, #5
 8005578:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800557c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005580:	f003 031f 	and.w	r3, r3, #31
 8005584:	2b00      	cmp	r3, #0
 8005586:	d104      	bne.n	8005592 <USB_EPStartXfer+0x622>
 8005588:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800558c:	3b01      	subs	r3, #1
 800558e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005592:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005596:	b29b      	uxth	r3, r3
 8005598:	029b      	lsls	r3, r3, #10
 800559a:	b29b      	uxth	r3, r3
 800559c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a8:	801a      	strh	r2, [r3, #0]
 80055aa:	e01b      	b.n	80055e4 <USB_EPStartXfer+0x674>
 80055ac:	463b      	mov	r3, r7
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	785b      	ldrb	r3, [r3, #1]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d116      	bne.n	80055e4 <USB_EPStartXfer+0x674>
 80055b6:	1d3b      	adds	r3, r7, #4
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055be:	b29b      	uxth	r3, r3
 80055c0:	461a      	mov	r2, r3
 80055c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055c4:	4413      	add	r3, r2
 80055c6:	647b      	str	r3, [r7, #68]	; 0x44
 80055c8:	463b      	mov	r3, r7
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	011a      	lsls	r2, r3, #4
 80055d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055d2:	4413      	add	r3, r2
 80055d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055d8:	643b      	str	r3, [r7, #64]	; 0x40
 80055da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055de:	b29a      	uxth	r2, r3
 80055e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055e2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80055e4:	463b      	mov	r3, r7
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	895b      	ldrh	r3, [r3, #10]
 80055ea:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055ee:	463b      	mov	r3, r7
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	6959      	ldr	r1, [r3, #20]
 80055f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80055fe:	1d38      	adds	r0, r7, #4
 8005600:	6800      	ldr	r0, [r0, #0]
 8005602:	f000 ff13 	bl	800642c <USB_WritePMA>
 8005606:	e1e2      	b.n	80059ce <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005608:	463b      	mov	r3, r7
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005612:	1d3b      	adds	r3, r7, #4
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	463b      	mov	r3, r7
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	4413      	add	r3, r2
 8005620:	881b      	ldrh	r3, [r3, #0]
 8005622:	b29b      	uxth	r3, r3
 8005624:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005628:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800562c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005630:	1d3b      	adds	r3, r7, #4
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	463b      	mov	r3, r7
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	441a      	add	r2, r3
 800563e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005642:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005646:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800564a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800564e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005652:	b29b      	uxth	r3, r3
 8005654:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005656:	1d3b      	adds	r3, r7, #4
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	663b      	str	r3, [r7, #96]	; 0x60
 800565c:	1d3b      	adds	r3, r7, #4
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005664:	b29b      	uxth	r3, r3
 8005666:	461a      	mov	r2, r3
 8005668:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800566a:	4413      	add	r3, r2
 800566c:	663b      	str	r3, [r7, #96]	; 0x60
 800566e:	463b      	mov	r3, r7
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	011a      	lsls	r2, r3, #4
 8005676:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005678:	4413      	add	r3, r2
 800567a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800567e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005680:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005684:	b29a      	uxth	r2, r3
 8005686:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005688:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800568a:	463b      	mov	r3, r7
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	891b      	ldrh	r3, [r3, #8]
 8005690:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005694:	463b      	mov	r3, r7
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6959      	ldr	r1, [r3, #20]
 800569a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800569e:	b29b      	uxth	r3, r3
 80056a0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80056a4:	1d38      	adds	r0, r7, #4
 80056a6:	6800      	ldr	r0, [r0, #0]
 80056a8:	f000 fec0 	bl	800642c <USB_WritePMA>
 80056ac:	e18f      	b.n	80059ce <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80056ae:	1d3b      	adds	r3, r7, #4
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	463b      	mov	r3, r7
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	4413      	add	r3, r2
 80056bc:	881b      	ldrh	r3, [r3, #0]
 80056be:	b29b      	uxth	r3, r3
 80056c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f000 808f 	beq.w	80057e8 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80056ca:	1d3b      	adds	r3, r7, #4
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	67bb      	str	r3, [r7, #120]	; 0x78
 80056d0:	463b      	mov	r3, r7
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	785b      	ldrb	r3, [r3, #1]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d164      	bne.n	80057a4 <USB_EPStartXfer+0x834>
 80056da:	1d3b      	adds	r3, r7, #4
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	673b      	str	r3, [r7, #112]	; 0x70
 80056e0:	1d3b      	adds	r3, r7, #4
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	461a      	mov	r2, r3
 80056ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056ee:	4413      	add	r3, r2
 80056f0:	673b      	str	r3, [r7, #112]	; 0x70
 80056f2:	463b      	mov	r3, r7
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	011a      	lsls	r2, r3, #4
 80056fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056fc:	4413      	add	r3, r2
 80056fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005702:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005704:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005708:	2b00      	cmp	r3, #0
 800570a:	d112      	bne.n	8005732 <USB_EPStartXfer+0x7c2>
 800570c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800570e:	881b      	ldrh	r3, [r3, #0]
 8005710:	b29b      	uxth	r3, r3
 8005712:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005716:	b29a      	uxth	r2, r3
 8005718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800571a:	801a      	strh	r2, [r3, #0]
 800571c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800571e:	881b      	ldrh	r3, [r3, #0]
 8005720:	b29b      	uxth	r3, r3
 8005722:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005726:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800572a:	b29a      	uxth	r2, r3
 800572c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800572e:	801a      	strh	r2, [r3, #0]
 8005730:	e054      	b.n	80057dc <USB_EPStartXfer+0x86c>
 8005732:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005736:	2b3e      	cmp	r3, #62	; 0x3e
 8005738:	d817      	bhi.n	800576a <USB_EPStartXfer+0x7fa>
 800573a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800573e:	085b      	lsrs	r3, r3, #1
 8005740:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005744:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005748:	f003 0301 	and.w	r3, r3, #1
 800574c:	2b00      	cmp	r3, #0
 800574e:	d004      	beq.n	800575a <USB_EPStartXfer+0x7ea>
 8005750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005754:	3301      	adds	r3, #1
 8005756:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800575a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800575e:	b29b      	uxth	r3, r3
 8005760:	029b      	lsls	r3, r3, #10
 8005762:	b29a      	uxth	r2, r3
 8005764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005766:	801a      	strh	r2, [r3, #0]
 8005768:	e038      	b.n	80057dc <USB_EPStartXfer+0x86c>
 800576a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800576e:	095b      	lsrs	r3, r3, #5
 8005770:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005774:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005778:	f003 031f 	and.w	r3, r3, #31
 800577c:	2b00      	cmp	r3, #0
 800577e:	d104      	bne.n	800578a <USB_EPStartXfer+0x81a>
 8005780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005784:	3b01      	subs	r3, #1
 8005786:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800578a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800578e:	b29b      	uxth	r3, r3
 8005790:	029b      	lsls	r3, r3, #10
 8005792:	b29b      	uxth	r3, r3
 8005794:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005798:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800579c:	b29a      	uxth	r2, r3
 800579e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057a0:	801a      	strh	r2, [r3, #0]
 80057a2:	e01b      	b.n	80057dc <USB_EPStartXfer+0x86c>
 80057a4:	463b      	mov	r3, r7
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	785b      	ldrb	r3, [r3, #1]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d116      	bne.n	80057dc <USB_EPStartXfer+0x86c>
 80057ae:	1d3b      	adds	r3, r7, #4
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	461a      	mov	r2, r3
 80057ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057bc:	4413      	add	r3, r2
 80057be:	67bb      	str	r3, [r7, #120]	; 0x78
 80057c0:	463b      	mov	r3, r7
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	011a      	lsls	r2, r3, #4
 80057c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057ca:	4413      	add	r3, r2
 80057cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80057d0:	677b      	str	r3, [r7, #116]	; 0x74
 80057d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057d6:	b29a      	uxth	r2, r3
 80057d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057da:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80057dc:	463b      	mov	r3, r7
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	895b      	ldrh	r3, [r3, #10]
 80057e2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 80057e6:	e097      	b.n	8005918 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80057e8:	463b      	mov	r3, r7
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	785b      	ldrb	r3, [r3, #1]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d168      	bne.n	80058c4 <USB_EPStartXfer+0x954>
 80057f2:	1d3b      	adds	r3, r7, #4
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80057fa:	1d3b      	adds	r3, r7, #4
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005802:	b29b      	uxth	r3, r3
 8005804:	461a      	mov	r2, r3
 8005806:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800580a:	4413      	add	r3, r2
 800580c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005810:	463b      	mov	r3, r7
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	011a      	lsls	r2, r3, #4
 8005818:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800581c:	4413      	add	r3, r2
 800581e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005822:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005824:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005828:	2b00      	cmp	r3, #0
 800582a:	d112      	bne.n	8005852 <USB_EPStartXfer+0x8e2>
 800582c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800582e:	881b      	ldrh	r3, [r3, #0]
 8005830:	b29b      	uxth	r3, r3
 8005832:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005836:	b29a      	uxth	r2, r3
 8005838:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800583a:	801a      	strh	r2, [r3, #0]
 800583c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800583e:	881b      	ldrh	r3, [r3, #0]
 8005840:	b29b      	uxth	r3, r3
 8005842:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005846:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800584a:	b29a      	uxth	r2, r3
 800584c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800584e:	801a      	strh	r2, [r3, #0]
 8005850:	e05d      	b.n	800590e <USB_EPStartXfer+0x99e>
 8005852:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005856:	2b3e      	cmp	r3, #62	; 0x3e
 8005858:	d817      	bhi.n	800588a <USB_EPStartXfer+0x91a>
 800585a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800585e:	085b      	lsrs	r3, r3, #1
 8005860:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005864:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005868:	f003 0301 	and.w	r3, r3, #1
 800586c:	2b00      	cmp	r3, #0
 800586e:	d004      	beq.n	800587a <USB_EPStartXfer+0x90a>
 8005870:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005874:	3301      	adds	r3, #1
 8005876:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800587a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800587e:	b29b      	uxth	r3, r3
 8005880:	029b      	lsls	r3, r3, #10
 8005882:	b29a      	uxth	r2, r3
 8005884:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005886:	801a      	strh	r2, [r3, #0]
 8005888:	e041      	b.n	800590e <USB_EPStartXfer+0x99e>
 800588a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800588e:	095b      	lsrs	r3, r3, #5
 8005890:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005894:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005898:	f003 031f 	and.w	r3, r3, #31
 800589c:	2b00      	cmp	r3, #0
 800589e:	d104      	bne.n	80058aa <USB_EPStartXfer+0x93a>
 80058a0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80058a4:	3b01      	subs	r3, #1
 80058a6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80058aa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	029b      	lsls	r3, r3, #10
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058bc:	b29a      	uxth	r2, r3
 80058be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80058c0:	801a      	strh	r2, [r3, #0]
 80058c2:	e024      	b.n	800590e <USB_EPStartXfer+0x99e>
 80058c4:	463b      	mov	r3, r7
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	785b      	ldrb	r3, [r3, #1]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d11f      	bne.n	800590e <USB_EPStartXfer+0x99e>
 80058ce:	1d3b      	adds	r3, r7, #4
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80058d6:	1d3b      	adds	r3, r7, #4
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058de:	b29b      	uxth	r3, r3
 80058e0:	461a      	mov	r2, r3
 80058e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058e6:	4413      	add	r3, r2
 80058e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80058ec:	463b      	mov	r3, r7
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	011a      	lsls	r2, r3, #4
 80058f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058f8:	4413      	add	r3, r2
 80058fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005902:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005906:	b29a      	uxth	r2, r3
 8005908:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800590c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800590e:	463b      	mov	r3, r7
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	891b      	ldrh	r3, [r3, #8]
 8005914:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005918:	463b      	mov	r3, r7
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	6959      	ldr	r1, [r3, #20]
 800591e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005922:	b29b      	uxth	r3, r3
 8005924:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005928:	1d38      	adds	r0, r7, #4
 800592a:	6800      	ldr	r0, [r0, #0]
 800592c:	f000 fd7e 	bl	800642c <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005930:	463b      	mov	r3, r7
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	785b      	ldrb	r3, [r3, #1]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d122      	bne.n	8005980 <USB_EPStartXfer+0xa10>
 800593a:	1d3b      	adds	r3, r7, #4
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	463b      	mov	r3, r7
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4413      	add	r3, r2
 8005948:	881b      	ldrh	r3, [r3, #0]
 800594a:	b29b      	uxth	r3, r3
 800594c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005954:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8005958:	1d3b      	adds	r3, r7, #4
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	463b      	mov	r3, r7
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	441a      	add	r2, r3
 8005966:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800596a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800596e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005976:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800597a:	b29b      	uxth	r3, r3
 800597c:	8013      	strh	r3, [r2, #0]
 800597e:	e026      	b.n	80059ce <USB_EPStartXfer+0xa5e>
 8005980:	463b      	mov	r3, r7
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	785b      	ldrb	r3, [r3, #1]
 8005986:	2b01      	cmp	r3, #1
 8005988:	d121      	bne.n	80059ce <USB_EPStartXfer+0xa5e>
 800598a:	1d3b      	adds	r3, r7, #4
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	463b      	mov	r3, r7
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	4413      	add	r3, r2
 8005998:	881b      	ldrh	r3, [r3, #0]
 800599a:	b29b      	uxth	r3, r3
 800599c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059a4:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80059a8:	1d3b      	adds	r3, r7, #4
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	463b      	mov	r3, r7
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	441a      	add	r2, r3
 80059b6:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80059ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80059ce:	1d3b      	adds	r3, r7, #4
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	463b      	mov	r3, r7
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	4413      	add	r3, r2
 80059dc:	881b      	ldrh	r3, [r3, #0]
 80059de:	b29b      	uxth	r3, r3
 80059e0:	f107 020e 	add.w	r2, r7, #14
 80059e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059ec:	8013      	strh	r3, [r2, #0]
 80059ee:	f107 030e 	add.w	r3, r7, #14
 80059f2:	f107 020e 	add.w	r2, r7, #14
 80059f6:	8812      	ldrh	r2, [r2, #0]
 80059f8:	f082 0210 	eor.w	r2, r2, #16
 80059fc:	801a      	strh	r2, [r3, #0]
 80059fe:	f107 030e 	add.w	r3, r7, #14
 8005a02:	f107 020e 	add.w	r2, r7, #14
 8005a06:	8812      	ldrh	r2, [r2, #0]
 8005a08:	f082 0220 	eor.w	r2, r2, #32
 8005a0c:	801a      	strh	r2, [r3, #0]
 8005a0e:	1d3b      	adds	r3, r7, #4
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	463b      	mov	r3, r7
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	441a      	add	r2, r3
 8005a1c:	f107 030e 	add.w	r3, r7, #14
 8005a20:	881b      	ldrh	r3, [r3, #0]
 8005a22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	8013      	strh	r3, [r2, #0]
 8005a36:	e3b5      	b.n	80061a4 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005a38:	463b      	mov	r3, r7
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	7b1b      	ldrb	r3, [r3, #12]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	f040 8090 	bne.w	8005b64 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005a44:	463b      	mov	r3, r7
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	699a      	ldr	r2, [r3, #24]
 8005a4a:	463b      	mov	r3, r7
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d90e      	bls.n	8005a72 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8005a54:	463b      	mov	r3, r7
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8005a5e:	463b      	mov	r3, r7
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	699a      	ldr	r2, [r3, #24]
 8005a64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a68:	1ad2      	subs	r2, r2, r3
 8005a6a:	463b      	mov	r3, r7
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	619a      	str	r2, [r3, #24]
 8005a70:	e008      	b.n	8005a84 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8005a72:	463b      	mov	r3, r7
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8005a7c:	463b      	mov	r3, r7
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2200      	movs	r2, #0
 8005a82:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005a84:	1d3b      	adds	r3, r7, #4
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005a8c:	1d3b      	adds	r3, r7, #4
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	461a      	mov	r2, r3
 8005a98:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005a9c:	4413      	add	r3, r2
 8005a9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005aa2:	463b      	mov	r3, r7
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	011a      	lsls	r2, r3, #4
 8005aaa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005aae:	4413      	add	r3, r2
 8005ab0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ab4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ab8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d116      	bne.n	8005aee <USB_EPStartXfer+0xb7e>
 8005ac0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ac4:	881b      	ldrh	r3, [r3, #0]
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ad2:	801a      	strh	r2, [r3, #0]
 8005ad4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ad8:	881b      	ldrh	r3, [r3, #0]
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ae0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005aea:	801a      	strh	r2, [r3, #0]
 8005aec:	e32c      	b.n	8006148 <USB_EPStartXfer+0x11d8>
 8005aee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005af2:	2b3e      	cmp	r3, #62	; 0x3e
 8005af4:	d818      	bhi.n	8005b28 <USB_EPStartXfer+0xbb8>
 8005af6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005afa:	085b      	lsrs	r3, r3, #1
 8005afc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005b00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b04:	f003 0301 	and.w	r3, r3, #1
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d004      	beq.n	8005b16 <USB_EPStartXfer+0xba6>
 8005b0c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005b10:	3301      	adds	r3, #1
 8005b12:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005b16:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	029b      	lsls	r3, r3, #10
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005b24:	801a      	strh	r2, [r3, #0]
 8005b26:	e30f      	b.n	8006148 <USB_EPStartXfer+0x11d8>
 8005b28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b2c:	095b      	lsrs	r3, r3, #5
 8005b2e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005b32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b36:	f003 031f 	and.w	r3, r3, #31
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d104      	bne.n	8005b48 <USB_EPStartXfer+0xbd8>
 8005b3e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005b42:	3b01      	subs	r3, #1
 8005b44:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005b48:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	029b      	lsls	r3, r3, #10
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b5a:	b29a      	uxth	r2, r3
 8005b5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005b60:	801a      	strh	r2, [r3, #0]
 8005b62:	e2f1      	b.n	8006148 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005b64:	463b      	mov	r3, r7
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	78db      	ldrb	r3, [r3, #3]
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	f040 818f 	bne.w	8005e8e <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005b70:	463b      	mov	r3, r7
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	785b      	ldrb	r3, [r3, #1]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d175      	bne.n	8005c66 <USB_EPStartXfer+0xcf6>
 8005b7a:	1d3b      	adds	r3, r7, #4
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b82:	1d3b      	adds	r3, r7, #4
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005b92:	4413      	add	r3, r2
 8005b94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b98:	463b      	mov	r3, r7
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	011a      	lsls	r2, r3, #4
 8005ba0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005baa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005bae:	463b      	mov	r3, r7
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d116      	bne.n	8005be6 <USB_EPStartXfer+0xc76>
 8005bb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005bbc:	881b      	ldrh	r3, [r3, #0]
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bc4:	b29a      	uxth	r2, r3
 8005bc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005bca:	801a      	strh	r2, [r3, #0]
 8005bcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005bd0:	881b      	ldrh	r3, [r3, #0]
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005be2:	801a      	strh	r2, [r3, #0]
 8005be4:	e065      	b.n	8005cb2 <USB_EPStartXfer+0xd42>
 8005be6:	463b      	mov	r3, r7
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	2b3e      	cmp	r3, #62	; 0x3e
 8005bee:	d81a      	bhi.n	8005c26 <USB_EPStartXfer+0xcb6>
 8005bf0:	463b      	mov	r3, r7
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	085b      	lsrs	r3, r3, #1
 8005bf8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005bfc:	463b      	mov	r3, r7
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d004      	beq.n	8005c14 <USB_EPStartXfer+0xca4>
 8005c0a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005c0e:	3301      	adds	r3, #1
 8005c10:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c14:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	029b      	lsls	r3, r3, #10
 8005c1c:	b29a      	uxth	r2, r3
 8005c1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c22:	801a      	strh	r2, [r3, #0]
 8005c24:	e045      	b.n	8005cb2 <USB_EPStartXfer+0xd42>
 8005c26:	463b      	mov	r3, r7
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	095b      	lsrs	r3, r3, #5
 8005c2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c32:	463b      	mov	r3, r7
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	f003 031f 	and.w	r3, r3, #31
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d104      	bne.n	8005c4a <USB_EPStartXfer+0xcda>
 8005c40:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005c44:	3b01      	subs	r3, #1
 8005c46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c4a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	029b      	lsls	r3, r3, #10
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c62:	801a      	strh	r2, [r3, #0]
 8005c64:	e025      	b.n	8005cb2 <USB_EPStartXfer+0xd42>
 8005c66:	463b      	mov	r3, r7
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	785b      	ldrb	r3, [r3, #1]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d120      	bne.n	8005cb2 <USB_EPStartXfer+0xd42>
 8005c70:	1d3b      	adds	r3, r7, #4
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c78:	1d3b      	adds	r3, r7, #4
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	461a      	mov	r2, r3
 8005c84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c88:	4413      	add	r3, r2
 8005c8a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c8e:	463b      	mov	r3, r7
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	011a      	lsls	r2, r3, #4
 8005c96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ca0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ca4:	463b      	mov	r3, r7
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005cb0:	801a      	strh	r2, [r3, #0]
 8005cb2:	1d3b      	adds	r3, r7, #4
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005cba:	463b      	mov	r3, r7
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	785b      	ldrb	r3, [r3, #1]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d175      	bne.n	8005db0 <USB_EPStartXfer+0xe40>
 8005cc4:	1d3b      	adds	r3, r7, #4
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005ccc:	1d3b      	adds	r3, r7, #4
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005cdc:	4413      	add	r3, r2
 8005cde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005ce2:	463b      	mov	r3, r7
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	011a      	lsls	r2, r3, #4
 8005cea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005cee:	4413      	add	r3, r2
 8005cf0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005cf4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005cf8:	463b      	mov	r3, r7
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d116      	bne.n	8005d30 <USB_EPStartXfer+0xdc0>
 8005d02:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d06:	881b      	ldrh	r3, [r3, #0]
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d0e:	b29a      	uxth	r2, r3
 8005d10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d14:	801a      	strh	r2, [r3, #0]
 8005d16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d1a:	881b      	ldrh	r3, [r3, #0]
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d26:	b29a      	uxth	r2, r3
 8005d28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d2c:	801a      	strh	r2, [r3, #0]
 8005d2e:	e061      	b.n	8005df4 <USB_EPStartXfer+0xe84>
 8005d30:	463b      	mov	r3, r7
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	2b3e      	cmp	r3, #62	; 0x3e
 8005d38:	d81a      	bhi.n	8005d70 <USB_EPStartXfer+0xe00>
 8005d3a:	463b      	mov	r3, r7
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	085b      	lsrs	r3, r3, #1
 8005d42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d46:	463b      	mov	r3, r7
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	f003 0301 	and.w	r3, r3, #1
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d004      	beq.n	8005d5e <USB_EPStartXfer+0xdee>
 8005d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d58:	3301      	adds	r3, #1
 8005d5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	029b      	lsls	r3, r3, #10
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d6c:	801a      	strh	r2, [r3, #0]
 8005d6e:	e041      	b.n	8005df4 <USB_EPStartXfer+0xe84>
 8005d70:	463b      	mov	r3, r7
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	095b      	lsrs	r3, r3, #5
 8005d78:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d7c:	463b      	mov	r3, r7
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	f003 031f 	and.w	r3, r3, #31
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d104      	bne.n	8005d94 <USB_EPStartXfer+0xe24>
 8005d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d8e:	3b01      	subs	r3, #1
 8005d90:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	029b      	lsls	r3, r3, #10
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005da2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005dac:	801a      	strh	r2, [r3, #0]
 8005dae:	e021      	b.n	8005df4 <USB_EPStartXfer+0xe84>
 8005db0:	463b      	mov	r3, r7
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	785b      	ldrb	r3, [r3, #1]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d11c      	bne.n	8005df4 <USB_EPStartXfer+0xe84>
 8005dba:	1d3b      	adds	r3, r7, #4
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005dca:	4413      	add	r3, r2
 8005dcc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005dd0:	463b      	mov	r3, r7
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	011a      	lsls	r2, r3, #4
 8005dd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005ddc:	4413      	add	r3, r2
 8005dde:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005de2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005de6:	463b      	mov	r3, r7
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005df2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005df4:	463b      	mov	r3, r7
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	69db      	ldr	r3, [r3, #28]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f000 81a4 	beq.w	8006148 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005e00:	1d3b      	adds	r3, r7, #4
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	463b      	mov	r3, r7
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4413      	add	r3, r2
 8005e0e:	881b      	ldrh	r3, [r3, #0]
 8005e10:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005e14:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005e18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d005      	beq.n	8005e2c <USB_EPStartXfer+0xebc>
 8005e20:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d10d      	bne.n	8005e48 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005e2c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005e30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	f040 8187 	bne.w	8006148 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005e3a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f040 8180 	bne.w	8006148 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005e48:	1d3b      	adds	r3, r7, #4
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	463b      	mov	r3, r7
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	4413      	add	r3, r2
 8005e56:	881b      	ldrh	r3, [r3, #0]
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e62:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8005e66:	1d3b      	adds	r3, r7, #4
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	463b      	mov	r3, r7
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	441a      	add	r2, r3
 8005e74:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8005e78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	8013      	strh	r3, [r2, #0]
 8005e8c:	e15c      	b.n	8006148 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005e8e:	463b      	mov	r3, r7
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	78db      	ldrb	r3, [r3, #3]
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	f040 8155 	bne.w	8006144 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005e9a:	463b      	mov	r3, r7
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	699a      	ldr	r2, [r3, #24]
 8005ea0:	463b      	mov	r3, r7
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d90e      	bls.n	8005ec8 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8005eaa:	463b      	mov	r3, r7
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8005eb4:	463b      	mov	r3, r7
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	699a      	ldr	r2, [r3, #24]
 8005eba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ebe:	1ad2      	subs	r2, r2, r3
 8005ec0:	463b      	mov	r3, r7
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	619a      	str	r2, [r3, #24]
 8005ec6:	e008      	b.n	8005eda <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8005ec8:	463b      	mov	r3, r7
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8005ed2:	463b      	mov	r3, r7
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005eda:	463b      	mov	r3, r7
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	785b      	ldrb	r3, [r3, #1]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d16f      	bne.n	8005fc4 <USB_EPStartXfer+0x1054>
 8005ee4:	1d3b      	adds	r3, r7, #4
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005eec:	1d3b      	adds	r3, r7, #4
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005efc:	4413      	add	r3, r2
 8005efe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f02:	463b      	mov	r3, r7
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	011a      	lsls	r2, r3, #4
 8005f0a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005f0e:	4413      	add	r3, r2
 8005f10:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d116      	bne.n	8005f4e <USB_EPStartXfer+0xfde>
 8005f20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f24:	881b      	ldrh	r3, [r3, #0]
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f2c:	b29a      	uxth	r2, r3
 8005f2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f32:	801a      	strh	r2, [r3, #0]
 8005f34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f38:	881b      	ldrh	r3, [r3, #0]
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f4a:	801a      	strh	r2, [r3, #0]
 8005f4c:	e05f      	b.n	800600e <USB_EPStartXfer+0x109e>
 8005f4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f52:	2b3e      	cmp	r3, #62	; 0x3e
 8005f54:	d818      	bhi.n	8005f88 <USB_EPStartXfer+0x1018>
 8005f56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f5a:	085b      	lsrs	r3, r3, #1
 8005f5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d004      	beq.n	8005f76 <USB_EPStartXfer+0x1006>
 8005f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f70:	3301      	adds	r3, #1
 8005f72:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	029b      	lsls	r3, r3, #10
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f84:	801a      	strh	r2, [r3, #0]
 8005f86:	e042      	b.n	800600e <USB_EPStartXfer+0x109e>
 8005f88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f8c:	095b      	lsrs	r3, r3, #5
 8005f8e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f96:	f003 031f 	and.w	r3, r3, #31
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d104      	bne.n	8005fa8 <USB_EPStartXfer+0x1038>
 8005f9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fa2:	3b01      	subs	r3, #1
 8005fa4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	029b      	lsls	r3, r3, #10
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005fc0:	801a      	strh	r2, [r3, #0]
 8005fc2:	e024      	b.n	800600e <USB_EPStartXfer+0x109e>
 8005fc4:	463b      	mov	r3, r7
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	785b      	ldrb	r3, [r3, #1]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d11f      	bne.n	800600e <USB_EPStartXfer+0x109e>
 8005fce:	1d3b      	adds	r3, r7, #4
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005fd6:	1d3b      	adds	r3, r7, #4
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005fec:	463b      	mov	r3, r7
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	011a      	lsls	r2, r3, #4
 8005ff4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ff8:	4413      	add	r3, r2
 8005ffa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ffe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006002:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006006:	b29a      	uxth	r2, r3
 8006008:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800600c:	801a      	strh	r2, [r3, #0]
 800600e:	1d3b      	adds	r3, r7, #4
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006016:	463b      	mov	r3, r7
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	785b      	ldrb	r3, [r3, #1]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d16f      	bne.n	8006100 <USB_EPStartXfer+0x1190>
 8006020:	1d3b      	adds	r3, r7, #4
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006028:	1d3b      	adds	r3, r7, #4
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006030:	b29b      	uxth	r3, r3
 8006032:	461a      	mov	r2, r3
 8006034:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006038:	4413      	add	r3, r2
 800603a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800603e:	463b      	mov	r3, r7
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	011a      	lsls	r2, r3, #4
 8006046:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800604a:	4413      	add	r3, r2
 800604c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006050:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006054:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006058:	2b00      	cmp	r3, #0
 800605a:	d116      	bne.n	800608a <USB_EPStartXfer+0x111a>
 800605c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006060:	881b      	ldrh	r3, [r3, #0]
 8006062:	b29b      	uxth	r3, r3
 8006064:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006068:	b29a      	uxth	r2, r3
 800606a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800606e:	801a      	strh	r2, [r3, #0]
 8006070:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006074:	881b      	ldrh	r3, [r3, #0]
 8006076:	b29b      	uxth	r3, r3
 8006078:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800607c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006080:	b29a      	uxth	r2, r3
 8006082:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006086:	801a      	strh	r2, [r3, #0]
 8006088:	e05e      	b.n	8006148 <USB_EPStartXfer+0x11d8>
 800608a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800608e:	2b3e      	cmp	r3, #62	; 0x3e
 8006090:	d818      	bhi.n	80060c4 <USB_EPStartXfer+0x1154>
 8006092:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006096:	085b      	lsrs	r3, r3, #1
 8006098:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800609c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060a0:	f003 0301 	and.w	r3, r3, #1
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d004      	beq.n	80060b2 <USB_EPStartXfer+0x1142>
 80060a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060ac:	3301      	adds	r3, #1
 80060ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80060b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	029b      	lsls	r3, r3, #10
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80060c0:	801a      	strh	r2, [r3, #0]
 80060c2:	e041      	b.n	8006148 <USB_EPStartXfer+0x11d8>
 80060c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060c8:	095b      	lsrs	r3, r3, #5
 80060ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80060ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060d2:	f003 031f 	and.w	r3, r3, #31
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d104      	bne.n	80060e4 <USB_EPStartXfer+0x1174>
 80060da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060de:	3b01      	subs	r3, #1
 80060e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80060e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	029b      	lsls	r3, r3, #10
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80060fc:	801a      	strh	r2, [r3, #0]
 80060fe:	e023      	b.n	8006148 <USB_EPStartXfer+0x11d8>
 8006100:	463b      	mov	r3, r7
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	785b      	ldrb	r3, [r3, #1]
 8006106:	2b01      	cmp	r3, #1
 8006108:	d11e      	bne.n	8006148 <USB_EPStartXfer+0x11d8>
 800610a:	1d3b      	adds	r3, r7, #4
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006112:	b29b      	uxth	r3, r3
 8006114:	461a      	mov	r2, r3
 8006116:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800611a:	4413      	add	r3, r2
 800611c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006120:	463b      	mov	r3, r7
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	011a      	lsls	r2, r3, #4
 8006128:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800612c:	4413      	add	r3, r2
 800612e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006132:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006136:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800613a:	b29a      	uxth	r2, r3
 800613c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006140:	801a      	strh	r2, [r3, #0]
 8006142:	e001      	b.n	8006148 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e02e      	b.n	80061a6 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006148:	1d3b      	adds	r3, r7, #4
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	463b      	mov	r3, r7
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	4413      	add	r3, r2
 8006156:	881b      	ldrh	r3, [r3, #0]
 8006158:	b29b      	uxth	r3, r3
 800615a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800615e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006162:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006166:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800616a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800616e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006172:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006176:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800617a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800617e:	1d3b      	adds	r3, r7, #4
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	463b      	mov	r3, r7
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	441a      	add	r2, r3
 800618c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006190:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006194:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006198:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800619c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	785b      	ldrb	r3, [r3, #1]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d020      	beq.n	8006204 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	4413      	add	r3, r2
 80061cc:	881b      	ldrh	r3, [r3, #0]
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061d8:	81bb      	strh	r3, [r7, #12]
 80061da:	89bb      	ldrh	r3, [r7, #12]
 80061dc:	f083 0310 	eor.w	r3, r3, #16
 80061e0:	81bb      	strh	r3, [r7, #12]
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	441a      	add	r2, r3
 80061ec:	89bb      	ldrh	r3, [r7, #12]
 80061ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061fe:	b29b      	uxth	r3, r3
 8006200:	8013      	strh	r3, [r2, #0]
 8006202:	e01f      	b.n	8006244 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	4413      	add	r3, r2
 800620e:	881b      	ldrh	r3, [r3, #0]
 8006210:	b29b      	uxth	r3, r3
 8006212:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800621a:	81fb      	strh	r3, [r7, #14]
 800621c:	89fb      	ldrh	r3, [r7, #14]
 800621e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006222:	81fb      	strh	r3, [r7, #14]
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	441a      	add	r2, r3
 800622e:	89fb      	ldrh	r3, [r7, #14]
 8006230:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006234:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006238:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800623c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006240:	b29b      	uxth	r3, r3
 8006242:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3714      	adds	r7, #20
 800624a:	46bd      	mov	sp, r7
 800624c:	bc80      	pop	{r7}
 800624e:	4770      	bx	lr

08006250 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006250:	b480      	push	{r7}
 8006252:	b087      	sub	sp, #28
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	7b1b      	ldrb	r3, [r3, #12]
 800625e:	2b00      	cmp	r3, #0
 8006260:	f040 809d 	bne.w	800639e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	785b      	ldrb	r3, [r3, #1]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d04c      	beq.n	8006306 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	4413      	add	r3, r2
 8006276:	881b      	ldrh	r3, [r3, #0]
 8006278:	823b      	strh	r3, [r7, #16]
 800627a:	8a3b      	ldrh	r3, [r7, #16]
 800627c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006280:	2b00      	cmp	r3, #0
 8006282:	d01b      	beq.n	80062bc <USB_EPClearStall+0x6c>
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	4413      	add	r3, r2
 800628e:	881b      	ldrh	r3, [r3, #0]
 8006290:	b29b      	uxth	r3, r3
 8006292:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800629a:	81fb      	strh	r3, [r7, #14]
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	441a      	add	r2, r3
 80062a6:	89fb      	ldrh	r3, [r7, #14]
 80062a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	78db      	ldrb	r3, [r3, #3]
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d06c      	beq.n	800639e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	4413      	add	r3, r2
 80062ce:	881b      	ldrh	r3, [r3, #0]
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062da:	81bb      	strh	r3, [r7, #12]
 80062dc:	89bb      	ldrh	r3, [r7, #12]
 80062de:	f083 0320 	eor.w	r3, r3, #32
 80062e2:	81bb      	strh	r3, [r7, #12]
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	441a      	add	r2, r3
 80062ee:	89bb      	ldrh	r3, [r7, #12]
 80062f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006300:	b29b      	uxth	r3, r3
 8006302:	8013      	strh	r3, [r2, #0]
 8006304:	e04b      	b.n	800639e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4413      	add	r3, r2
 8006310:	881b      	ldrh	r3, [r3, #0]
 8006312:	82fb      	strh	r3, [r7, #22]
 8006314:	8afb      	ldrh	r3, [r7, #22]
 8006316:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800631a:	2b00      	cmp	r3, #0
 800631c:	d01b      	beq.n	8006356 <USB_EPClearStall+0x106>
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	4413      	add	r3, r2
 8006328:	881b      	ldrh	r3, [r3, #0]
 800632a:	b29b      	uxth	r3, r3
 800632c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006334:	82bb      	strh	r3, [r7, #20]
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	441a      	add	r2, r3
 8006340:	8abb      	ldrh	r3, [r7, #20]
 8006342:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006346:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800634a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800634e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006352:	b29b      	uxth	r3, r3
 8006354:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	4413      	add	r3, r2
 8006360:	881b      	ldrh	r3, [r3, #0]
 8006362:	b29b      	uxth	r3, r3
 8006364:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800636c:	827b      	strh	r3, [r7, #18]
 800636e:	8a7b      	ldrh	r3, [r7, #18]
 8006370:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006374:	827b      	strh	r3, [r7, #18]
 8006376:	8a7b      	ldrh	r3, [r7, #18]
 8006378:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800637c:	827b      	strh	r3, [r7, #18]
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	441a      	add	r2, r3
 8006388:	8a7b      	ldrh	r3, [r7, #18]
 800638a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800638e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006392:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006396:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800639a:	b29b      	uxth	r3, r3
 800639c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	371c      	adds	r7, #28
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bc80      	pop	{r7}
 80063a8:	4770      	bx	lr

080063aa <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b083      	sub	sp, #12
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
 80063b2:	460b      	mov	r3, r1
 80063b4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80063b6:	78fb      	ldrb	r3, [r7, #3]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d103      	bne.n	80063c4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2280      	movs	r2, #128	; 0x80
 80063c0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	370c      	adds	r7, #12
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bc80      	pop	{r7}
 80063ce:	4770      	bx	lr

080063d0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	370c      	adds	r7, #12
 80063de:	46bd      	mov	sp, r7
 80063e0:	bc80      	pop	{r7}
 80063e2:	4770      	bx	lr

080063e4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	370c      	adds	r7, #12
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bc80      	pop	{r7}
 80063f6:	4770      	bx	lr

080063f8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006406:	b29b      	uxth	r3, r3
 8006408:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800640a:	68fb      	ldr	r3, [r7, #12]
}
 800640c:	4618      	mov	r0, r3
 800640e:	3714      	adds	r7, #20
 8006410:	46bd      	mov	sp, r7
 8006412:	bc80      	pop	{r7}
 8006414:	4770      	bx	lr

08006416 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006416:	b480      	push	{r7}
 8006418:	b083      	sub	sp, #12
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
 800641e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	370c      	adds	r7, #12
 8006426:	46bd      	mov	sp, r7
 8006428:	bc80      	pop	{r7}
 800642a:	4770      	bx	lr

0800642c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800642c:	b480      	push	{r7}
 800642e:	b08d      	sub	sp, #52	; 0x34
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	4611      	mov	r1, r2
 8006438:	461a      	mov	r2, r3
 800643a:	460b      	mov	r3, r1
 800643c:	80fb      	strh	r3, [r7, #6]
 800643e:	4613      	mov	r3, r2
 8006440:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006442:	88bb      	ldrh	r3, [r7, #4]
 8006444:	3301      	adds	r3, #1
 8006446:	085b      	lsrs	r3, r3, #1
 8006448:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006452:	88fb      	ldrh	r3, [r7, #6]
 8006454:	005a      	lsls	r2, r3, #1
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	4413      	add	r3, r2
 800645a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800645e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006460:	6a3b      	ldr	r3, [r7, #32]
 8006462:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006464:	e01e      	b.n	80064a4 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800646c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646e:	3301      	adds	r3, #1
 8006470:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	b29b      	uxth	r3, r3
 8006478:	021b      	lsls	r3, r3, #8
 800647a:	b29b      	uxth	r3, r3
 800647c:	461a      	mov	r2, r3
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	4313      	orrs	r3, r2
 8006482:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	b29a      	uxth	r2, r3
 8006488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800648c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648e:	3302      	adds	r3, #2
 8006490:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006494:	3302      	adds	r3, #2
 8006496:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649a:	3301      	adds	r3, #1
 800649c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800649e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a0:	3b01      	subs	r3, #1
 80064a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d1dd      	bne.n	8006466 <USB_WritePMA+0x3a>
  }
}
 80064aa:	bf00      	nop
 80064ac:	bf00      	nop
 80064ae:	3734      	adds	r7, #52	; 0x34
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bc80      	pop	{r7}
 80064b4:	4770      	bx	lr

080064b6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80064b6:	b480      	push	{r7}
 80064b8:	b08b      	sub	sp, #44	; 0x2c
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	60f8      	str	r0, [r7, #12]
 80064be:	60b9      	str	r1, [r7, #8]
 80064c0:	4611      	mov	r1, r2
 80064c2:	461a      	mov	r2, r3
 80064c4:	460b      	mov	r3, r1
 80064c6:	80fb      	strh	r3, [r7, #6]
 80064c8:	4613      	mov	r3, r2
 80064ca:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80064cc:	88bb      	ldrh	r3, [r7, #4]
 80064ce:	085b      	lsrs	r3, r3, #1
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80064dc:	88fb      	ldrh	r3, [r7, #6]
 80064de:	005a      	lsls	r2, r3, #1
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	4413      	add	r3, r2
 80064e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064e8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	627b      	str	r3, [r7, #36]	; 0x24
 80064ee:	e01b      	b.n	8006528 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80064f0:	6a3b      	ldr	r3, [r7, #32]
 80064f2:	881b      	ldrh	r3, [r3, #0]
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80064f8:	6a3b      	ldr	r3, [r7, #32]
 80064fa:	3302      	adds	r3, #2
 80064fc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	b2da      	uxtb	r2, r3
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	3301      	adds	r3, #1
 800650a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	0a1b      	lsrs	r3, r3, #8
 8006510:	b2da      	uxtb	r2, r3
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	3301      	adds	r3, #1
 800651a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800651c:	6a3b      	ldr	r3, [r7, #32]
 800651e:	3302      	adds	r3, #2
 8006520:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006524:	3b01      	subs	r3, #1
 8006526:	627b      	str	r3, [r7, #36]	; 0x24
 8006528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652a:	2b00      	cmp	r3, #0
 800652c:	d1e0      	bne.n	80064f0 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800652e:	88bb      	ldrh	r3, [r7, #4]
 8006530:	f003 0301 	and.w	r3, r3, #1
 8006534:	b29b      	uxth	r3, r3
 8006536:	2b00      	cmp	r3, #0
 8006538:	d007      	beq.n	800654a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800653a:	6a3b      	ldr	r3, [r7, #32]
 800653c:	881b      	ldrh	r3, [r3, #0]
 800653e:	b29b      	uxth	r3, r3
 8006540:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	b2da      	uxtb	r2, r3
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	701a      	strb	r2, [r3, #0]
  }
}
 800654a:	bf00      	nop
 800654c:	372c      	adds	r7, #44	; 0x2c
 800654e:	46bd      	mov	sp, r7
 8006550:	bc80      	pop	{r7}
 8006552:	4770      	bx	lr

08006554 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	460b      	mov	r3, r1
 800655e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006560:	2300      	movs	r3, #0
 8006562:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	7c1b      	ldrb	r3, [r3, #16]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d115      	bne.n	8006598 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800656c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006570:	2202      	movs	r2, #2
 8006572:	2181      	movs	r1, #129	; 0x81
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f001 ff2a 	bl	80083ce <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2201      	movs	r2, #1
 800657e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006580:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006584:	2202      	movs	r2, #2
 8006586:	2101      	movs	r1, #1
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f001 ff20 	bl	80083ce <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2201      	movs	r2, #1
 8006592:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006596:	e012      	b.n	80065be <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006598:	2340      	movs	r3, #64	; 0x40
 800659a:	2202      	movs	r2, #2
 800659c:	2181      	movs	r1, #129	; 0x81
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f001 ff15 	bl	80083ce <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80065aa:	2340      	movs	r3, #64	; 0x40
 80065ac:	2202      	movs	r2, #2
 80065ae:	2101      	movs	r1, #1
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f001 ff0c 	bl	80083ce <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2201      	movs	r2, #1
 80065ba:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80065be:	2308      	movs	r3, #8
 80065c0:	2203      	movs	r2, #3
 80065c2:	2182      	movs	r1, #130	; 0x82
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f001 ff02 	bl	80083ce <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2201      	movs	r2, #1
 80065ce:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80065d0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80065d4:	f002 f822 	bl	800861c <USBD_static_malloc>
 80065d8:	4602      	mov	r2, r0
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d102      	bne.n	80065f0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80065ea:	2301      	movs	r3, #1
 80065ec:	73fb      	strb	r3, [r7, #15]
 80065ee:	e026      	b.n	800663e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065f6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	2200      	movs	r2, #0
 8006606:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	2200      	movs	r2, #0
 800660e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	7c1b      	ldrb	r3, [r3, #16]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d109      	bne.n	800662e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006620:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006624:	2101      	movs	r1, #1
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f001 ffc2 	bl	80085b0 <USBD_LL_PrepareReceive>
 800662c:	e007      	b.n	800663e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006634:	2340      	movs	r3, #64	; 0x40
 8006636:	2101      	movs	r1, #1
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f001 ffb9 	bl	80085b0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800663e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006640:	4618      	mov	r0, r3
 8006642:	3710      	adds	r7, #16
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	460b      	mov	r3, r1
 8006652:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006654:	2300      	movs	r3, #0
 8006656:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006658:	2181      	movs	r1, #129	; 0x81
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f001 fedd 	bl	800841a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006666:	2101      	movs	r1, #1
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f001 fed6 	bl	800841a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006676:	2182      	movs	r1, #130	; 0x82
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f001 fece 	bl	800841a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00e      	beq.n	80066ac <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800669e:	4618      	mov	r0, r3
 80066a0:	f001 ffc8 	bl	8008634 <USBD_static_free>
    pdev->pClassData = NULL;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80066ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3710      	adds	r7, #16
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b086      	sub	sp, #24
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
 80066be:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066c6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80066c8:	2300      	movs	r3, #0
 80066ca:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80066cc:	2300      	movs	r3, #0
 80066ce:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80066d0:	2300      	movs	r3, #0
 80066d2:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d039      	beq.n	8006754 <USBD_CDC_Setup+0x9e>
 80066e0:	2b20      	cmp	r3, #32
 80066e2:	d17f      	bne.n	80067e4 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	88db      	ldrh	r3, [r3, #6]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d029      	beq.n	8006740 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	b25b      	sxtb	r3, r3
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	da11      	bge.n	800671a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	683a      	ldr	r2, [r7, #0]
 8006700:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006702:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006704:	683a      	ldr	r2, [r7, #0]
 8006706:	88d2      	ldrh	r2, [r2, #6]
 8006708:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800670a:	6939      	ldr	r1, [r7, #16]
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	88db      	ldrh	r3, [r3, #6]
 8006710:	461a      	mov	r2, r3
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f001 fa23 	bl	8007b5e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006718:	e06b      	b.n	80067f2 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	785a      	ldrb	r2, [r3, #1]
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	88db      	ldrh	r3, [r3, #6]
 8006728:	b2da      	uxtb	r2, r3
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006730:	6939      	ldr	r1, [r7, #16]
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	88db      	ldrh	r3, [r3, #6]
 8006736:	461a      	mov	r2, r3
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f001 fa3e 	bl	8007bba <USBD_CtlPrepareRx>
      break;
 800673e:	e058      	b.n	80067f2 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	683a      	ldr	r2, [r7, #0]
 800674a:	7850      	ldrb	r0, [r2, #1]
 800674c:	2200      	movs	r2, #0
 800674e:	6839      	ldr	r1, [r7, #0]
 8006750:	4798      	blx	r3
      break;
 8006752:	e04e      	b.n	80067f2 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	785b      	ldrb	r3, [r3, #1]
 8006758:	2b0b      	cmp	r3, #11
 800675a:	d02e      	beq.n	80067ba <USBD_CDC_Setup+0x104>
 800675c:	2b0b      	cmp	r3, #11
 800675e:	dc38      	bgt.n	80067d2 <USBD_CDC_Setup+0x11c>
 8006760:	2b00      	cmp	r3, #0
 8006762:	d002      	beq.n	800676a <USBD_CDC_Setup+0xb4>
 8006764:	2b0a      	cmp	r3, #10
 8006766:	d014      	beq.n	8006792 <USBD_CDC_Setup+0xdc>
 8006768:	e033      	b.n	80067d2 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006770:	2b03      	cmp	r3, #3
 8006772:	d107      	bne.n	8006784 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006774:	f107 030c 	add.w	r3, r7, #12
 8006778:	2202      	movs	r2, #2
 800677a:	4619      	mov	r1, r3
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f001 f9ee 	bl	8007b5e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006782:	e02e      	b.n	80067e2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006784:	6839      	ldr	r1, [r7, #0]
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f001 f97f 	bl	8007a8a <USBD_CtlError>
            ret = USBD_FAIL;
 800678c:	2302      	movs	r3, #2
 800678e:	75fb      	strb	r3, [r7, #23]
          break;
 8006790:	e027      	b.n	80067e2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006798:	2b03      	cmp	r3, #3
 800679a:	d107      	bne.n	80067ac <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800679c:	f107 030f 	add.w	r3, r7, #15
 80067a0:	2201      	movs	r2, #1
 80067a2:	4619      	mov	r1, r3
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f001 f9da 	bl	8007b5e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80067aa:	e01a      	b.n	80067e2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80067ac:	6839      	ldr	r1, [r7, #0]
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f001 f96b 	bl	8007a8a <USBD_CtlError>
            ret = USBD_FAIL;
 80067b4:	2302      	movs	r3, #2
 80067b6:	75fb      	strb	r3, [r7, #23]
          break;
 80067b8:	e013      	b.n	80067e2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067c0:	2b03      	cmp	r3, #3
 80067c2:	d00d      	beq.n	80067e0 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80067c4:	6839      	ldr	r1, [r7, #0]
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f001 f95f 	bl	8007a8a <USBD_CtlError>
            ret = USBD_FAIL;
 80067cc:	2302      	movs	r3, #2
 80067ce:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80067d0:	e006      	b.n	80067e0 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80067d2:	6839      	ldr	r1, [r7, #0]
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f001 f958 	bl	8007a8a <USBD_CtlError>
          ret = USBD_FAIL;
 80067da:	2302      	movs	r3, #2
 80067dc:	75fb      	strb	r3, [r7, #23]
          break;
 80067de:	e000      	b.n	80067e2 <USBD_CDC_Setup+0x12c>
          break;
 80067e0:	bf00      	nop
      }
      break;
 80067e2:	e006      	b.n	80067f2 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80067e4:	6839      	ldr	r1, [r7, #0]
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f001 f94f 	bl	8007a8a <USBD_CtlError>
      ret = USBD_FAIL;
 80067ec:	2302      	movs	r3, #2
 80067ee:	75fb      	strb	r3, [r7, #23]
      break;
 80067f0:	bf00      	nop
  }

  return ret;
 80067f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3718      	adds	r7, #24
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	460b      	mov	r3, r1
 8006806:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800680e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006816:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800681e:	2b00      	cmp	r3, #0
 8006820:	d03a      	beq.n	8006898 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006822:	78fa      	ldrb	r2, [r7, #3]
 8006824:	6879      	ldr	r1, [r7, #4]
 8006826:	4613      	mov	r3, r2
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	4413      	add	r3, r2
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	440b      	add	r3, r1
 8006830:	331c      	adds	r3, #28
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d029      	beq.n	800688c <USBD_CDC_DataIn+0x90>
 8006838:	78fa      	ldrb	r2, [r7, #3]
 800683a:	6879      	ldr	r1, [r7, #4]
 800683c:	4613      	mov	r3, r2
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	4413      	add	r3, r2
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	440b      	add	r3, r1
 8006846:	331c      	adds	r3, #28
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	78f9      	ldrb	r1, [r7, #3]
 800684c:	68b8      	ldr	r0, [r7, #8]
 800684e:	460b      	mov	r3, r1
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	440b      	add	r3, r1
 8006854:	00db      	lsls	r3, r3, #3
 8006856:	4403      	add	r3, r0
 8006858:	3338      	adds	r3, #56	; 0x38
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006860:	fb03 f301 	mul.w	r3, r3, r1
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	2b00      	cmp	r3, #0
 8006868:	d110      	bne.n	800688c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800686a:	78fa      	ldrb	r2, [r7, #3]
 800686c:	6879      	ldr	r1, [r7, #4]
 800686e:	4613      	mov	r3, r2
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	4413      	add	r3, r2
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	440b      	add	r3, r1
 8006878:	331c      	adds	r3, #28
 800687a:	2200      	movs	r2, #0
 800687c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800687e:	78f9      	ldrb	r1, [r7, #3]
 8006880:	2300      	movs	r3, #0
 8006882:	2200      	movs	r2, #0
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f001 fe70 	bl	800856a <USBD_LL_Transmit>
 800688a:	e003      	b.n	8006894 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006894:	2300      	movs	r3, #0
 8006896:	e000      	b.n	800689a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006898:	2302      	movs	r3, #2
  }
}
 800689a:	4618      	mov	r0, r3
 800689c:	3710      	adds	r7, #16
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}

080068a2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80068a2:	b580      	push	{r7, lr}
 80068a4:	b084      	sub	sp, #16
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
 80068aa:	460b      	mov	r3, r1
 80068ac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068b4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80068b6:	78fb      	ldrb	r3, [r7, #3]
 80068b8:	4619      	mov	r1, r3
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f001 fe9b 	bl	80085f6 <USBD_LL_GetRxDataSize>
 80068c0:	4602      	mov	r2, r0
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00d      	beq.n	80068ee <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80068e6:	4611      	mov	r1, r2
 80068e8:	4798      	blx	r3

    return USBD_OK;
 80068ea:	2300      	movs	r3, #0
 80068ec:	e000      	b.n	80068f0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80068ee:	2302      	movs	r3, #2
  }
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3710      	adds	r7, #16
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006906:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800690e:	2b00      	cmp	r3, #0
 8006910:	d015      	beq.n	800693e <USBD_CDC_EP0_RxReady+0x46>
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006918:	2bff      	cmp	r3, #255	; 0xff
 800691a:	d010      	beq.n	800693e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800692a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006932:	b292      	uxth	r2, r2
 8006934:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	22ff      	movs	r2, #255	; 0xff
 800693a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3710      	adds	r7, #16
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2243      	movs	r2, #67	; 0x43
 8006954:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006956:	4b03      	ldr	r3, [pc, #12]	; (8006964 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006958:	4618      	mov	r0, r3
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	bc80      	pop	{r7}
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	20000098 	.word	0x20000098

08006968 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2243      	movs	r2, #67	; 0x43
 8006974:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006976:	4b03      	ldr	r3, [pc, #12]	; (8006984 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006978:	4618      	mov	r0, r3
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	bc80      	pop	{r7}
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop
 8006984:	20000054 	.word	0x20000054

08006988 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2243      	movs	r2, #67	; 0x43
 8006994:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006996:	4b03      	ldr	r3, [pc, #12]	; (80069a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006998:	4618      	mov	r0, r3
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	bc80      	pop	{r7}
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	200000dc 	.word	0x200000dc

080069a8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	220a      	movs	r2, #10
 80069b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80069b6:	4b03      	ldr	r3, [pc, #12]	; (80069c4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	bc80      	pop	{r7}
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	20000010 	.word	0x20000010

080069c8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80069d2:	2302      	movs	r3, #2
 80069d4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d005      	beq.n	80069e8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	683a      	ldr	r2, [r7, #0]
 80069e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80069e4:	2300      	movs	r3, #0
 80069e6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80069e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3714      	adds	r7, #20
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bc80      	pop	{r7}
 80069f2:	4770      	bx	lr

080069f4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b087      	sub	sp, #28
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	4613      	mov	r3, r2
 8006a00:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a08:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	68ba      	ldr	r2, [r7, #8]
 8006a0e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006a12:	88fa      	ldrh	r2, [r7, #6]
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006a1a:	2300      	movs	r3, #0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	371c      	adds	r7, #28
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bc80      	pop	{r7}
 8006a24:	4770      	bx	lr

08006a26 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006a26:	b480      	push	{r7}
 8006a28:	b085      	sub	sp, #20
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
 8006a2e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a36:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	683a      	ldr	r2, [r7, #0]
 8006a3c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3714      	adds	r7, #20
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bc80      	pop	{r7}
 8006a4a:	4770      	bx	lr

08006a4c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a5a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d01c      	beq.n	8006aa0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d115      	bne.n	8006a9c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	2181      	movs	r1, #129	; 0x81
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f001 fd69 	bl	800856a <USBD_LL_Transmit>

      return USBD_OK;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	e002      	b.n	8006aa2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e000      	b.n	8006aa2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006aa0:	2302      	movs	r3, #2
  }
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b084      	sub	sp, #16
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ab8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d017      	beq.n	8006af4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	7c1b      	ldrb	r3, [r3, #16]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d109      	bne.n	8006ae0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ad2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ad6:	2101      	movs	r1, #1
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f001 fd69 	bl	80085b0 <USBD_LL_PrepareReceive>
 8006ade:	e007      	b.n	8006af0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ae6:	2340      	movs	r3, #64	; 0x40
 8006ae8:	2101      	movs	r1, #1
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f001 fd60 	bl	80085b0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006af0:	2300      	movs	r3, #0
 8006af2:	e000      	b.n	8006af6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006af4:	2302      	movs	r3, #2
  }
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3710      	adds	r7, #16
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
	...

08006b00 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d10a      	bne.n	8006b2a <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8006b14:	4814      	ldr	r0, [pc, #80]	; (8006b68 <USBD_Init+0x68>)
 8006b16:	f001 fdf9 	bl	800870c <iprintf>
 8006b1a:	4814      	ldr	r0, [pc, #80]	; (8006b6c <USBD_Init+0x6c>)
 8006b1c:	f001 fdf6 	bl	800870c <iprintf>
 8006b20:	200a      	movs	r0, #10
 8006b22:	f001 fe0b 	bl	800873c <putchar>
#endif
    return USBD_FAIL;
 8006b26:	2302      	movs	r3, #2
 8006b28:	e01a      	b.n	8006b60 <USBD_Init+0x60>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d003      	beq.n	8006b3c <USBD_Init+0x3c>
  {
    pdev->pClass = NULL;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d003      	beq.n	8006b4a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	68ba      	ldr	r2, [r7, #8]
 8006b46:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	79fa      	ldrb	r2, [r7, #7]
 8006b56:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f001 fbc3 	bl	80082e4 <USBD_LL_Init>

  return USBD_OK;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3710      	adds	r7, #16
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}
 8006b68:	08009728 	.word	0x08009728
 8006b6c:	08009730 	.word	0x08009730

08006b70 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d006      	beq.n	8006b92 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	683a      	ldr	r2, [r7, #0]
 8006b88:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	73fb      	strb	r3, [r7, #15]
 8006b90:	e00a      	b.n	8006ba8 <USBD_RegisterClass+0x38>
  }
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 8006b92:	4808      	ldr	r0, [pc, #32]	; (8006bb4 <USBD_RegisterClass+0x44>)
 8006b94:	f001 fdba 	bl	800870c <iprintf>
 8006b98:	4807      	ldr	r0, [pc, #28]	; (8006bb8 <USBD_RegisterClass+0x48>)
 8006b9a:	f001 fdb7 	bl	800870c <iprintf>
 8006b9e:	200a      	movs	r0, #10
 8006ba0:	f001 fdcc 	bl	800873c <putchar>
#endif
    status = USBD_FAIL;
 8006ba4:	2302      	movs	r3, #2
 8006ba6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3710      	adds	r7, #16
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	08009728 	.word	0x08009728
 8006bb8:	08009748 	.word	0x08009748

08006bbc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f001 fbe7 	bl	8008398 <USBD_LL_Start>

  return USBD_OK;
 8006bca:	2300      	movs	r3, #0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3708      	adds	r7, #8
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	370c      	adds	r7, #12
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bc80      	pop	{r7}
 8006be6:	4770      	bx	lr

08006be8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006bf4:	2302      	movs	r3, #2
 8006bf6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00c      	beq.n	8006c1c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	78fa      	ldrb	r2, [r7, #3]
 8006c0c:	4611      	mov	r1, r2
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	4798      	blx	r3
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d101      	bne.n	8006c1c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3710      	adds	r7, #16
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}

08006c26 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006c26:	b580      	push	{r7, lr}
 8006c28:	b082      	sub	sp, #8
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
 8006c2e:	460b      	mov	r3, r1
 8006c30:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	78fa      	ldrb	r2, [r7, #3]
 8006c3c:	4611      	mov	r1, r2
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	4798      	blx	r3

  return USBD_OK;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3708      	adds	r7, #8
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006c5c:	6839      	ldr	r1, [r7, #0]
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f000 fed7 	bl	8007a12 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006c72:	461a      	mov	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006c80:	f003 031f 	and.w	r3, r3, #31
 8006c84:	2b02      	cmp	r3, #2
 8006c86:	d016      	beq.n	8006cb6 <USBD_LL_SetupStage+0x6a>
 8006c88:	2b02      	cmp	r3, #2
 8006c8a:	d81c      	bhi.n	8006cc6 <USBD_LL_SetupStage+0x7a>
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d002      	beq.n	8006c96 <USBD_LL_SetupStage+0x4a>
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d008      	beq.n	8006ca6 <USBD_LL_SetupStage+0x5a>
 8006c94:	e017      	b.n	8006cc6 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 f9ca 	bl	8007038 <USBD_StdDevReq>
      break;
 8006ca4:	e01a      	b.n	8006cdc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006cac:	4619      	mov	r1, r3
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 fa2c 	bl	800710c <USBD_StdItfReq>
      break;
 8006cb4:	e012      	b.n	8006cdc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 fa6c 	bl	800719c <USBD_StdEPReq>
      break;
 8006cc4:	e00a      	b.n	8006cdc <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006ccc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f001 fbbf 	bl	8008458 <USBD_LL_StallEP>
      break;
 8006cda:	bf00      	nop
  }

  return USBD_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3708      	adds	r7, #8
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b086      	sub	sp, #24
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	60f8      	str	r0, [r7, #12]
 8006cee:	460b      	mov	r3, r1
 8006cf0:	607a      	str	r2, [r7, #4]
 8006cf2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006cf4:	7afb      	ldrb	r3, [r7, #11]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d14b      	bne.n	8006d92 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006d00:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d08:	2b03      	cmp	r3, #3
 8006d0a:	d134      	bne.n	8006d76 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	68da      	ldr	r2, [r3, #12]
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d919      	bls.n	8006d4c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	68da      	ldr	r2, [r3, #12]
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	1ad2      	subs	r2, r2, r3
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	68da      	ldr	r2, [r3, #12]
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d203      	bcs.n	8006d3a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	e002      	b.n	8006d40 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	461a      	mov	r2, r3
 8006d42:	6879      	ldr	r1, [r7, #4]
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	f000 ff56 	bl	8007bf6 <USBD_CtlContinueRx>
 8006d4a:	e038      	b.n	8006dbe <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d52:	691b      	ldr	r3, [r3, #16]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d00a      	beq.n	8006d6e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006d5e:	2b03      	cmp	r3, #3
 8006d60:	d105      	bne.n	8006d6e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	68f8      	ldr	r0, [r7, #12]
 8006d6c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006d6e:	68f8      	ldr	r0, [r7, #12]
 8006d70:	f000 ff53 	bl	8007c1a <USBD_CtlSendStatus>
 8006d74:	e023      	b.n	8006dbe <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d7c:	2b05      	cmp	r3, #5
 8006d7e:	d11e      	bne.n	8006dbe <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006d88:	2100      	movs	r1, #0
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	f001 fb64 	bl	8008458 <USBD_LL_StallEP>
 8006d90:	e015      	b.n	8006dbe <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d98:	699b      	ldr	r3, [r3, #24]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00d      	beq.n	8006dba <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006da4:	2b03      	cmp	r3, #3
 8006da6:	d108      	bne.n	8006dba <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dae:	699b      	ldr	r3, [r3, #24]
 8006db0:	7afa      	ldrb	r2, [r7, #11]
 8006db2:	4611      	mov	r1, r2
 8006db4:	68f8      	ldr	r0, [r7, #12]
 8006db6:	4798      	blx	r3
 8006db8:	e001      	b.n	8006dbe <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006dba:	2302      	movs	r3, #2
 8006dbc:	e000      	b.n	8006dc0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3718      	adds	r7, #24
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b086      	sub	sp, #24
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	607a      	str	r2, [r7, #4]
 8006dd4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006dd6:	7afb      	ldrb	r3, [r7, #11]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d17f      	bne.n	8006edc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	3314      	adds	r3, #20
 8006de0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006de8:	2b02      	cmp	r3, #2
 8006dea:	d15c      	bne.n	8006ea6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	68da      	ldr	r2, [r3, #12]
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d915      	bls.n	8006e24 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	68da      	ldr	r2, [r3, #12]
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	691b      	ldr	r3, [r3, #16]
 8006e00:	1ad2      	subs	r2, r2, r3
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	6879      	ldr	r1, [r7, #4]
 8006e10:	68f8      	ldr	r0, [r7, #12]
 8006e12:	f000 fec0 	bl	8007b96 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e16:	2300      	movs	r3, #0
 8006e18:	2200      	movs	r2, #0
 8006e1a:	2100      	movs	r1, #0
 8006e1c:	68f8      	ldr	r0, [r7, #12]
 8006e1e:	f001 fbc7 	bl	80085b0 <USBD_LL_PrepareReceive>
 8006e22:	e04e      	b.n	8006ec2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	697a      	ldr	r2, [r7, #20]
 8006e2a:	6912      	ldr	r2, [r2, #16]
 8006e2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e30:	fb02 f201 	mul.w	r2, r2, r1
 8006e34:	1a9b      	subs	r3, r3, r2
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d11c      	bne.n	8006e74 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	689a      	ldr	r2, [r3, #8]
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d316      	bcc.n	8006e74 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	689a      	ldr	r2, [r3, #8]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d20f      	bcs.n	8006e74 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006e54:	2200      	movs	r2, #0
 8006e56:	2100      	movs	r1, #0
 8006e58:	68f8      	ldr	r0, [r7, #12]
 8006e5a:	f000 fe9c 	bl	8007b96 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e66:	2300      	movs	r3, #0
 8006e68:	2200      	movs	r2, #0
 8006e6a:	2100      	movs	r1, #0
 8006e6c:	68f8      	ldr	r0, [r7, #12]
 8006e6e:	f001 fb9f 	bl	80085b0 <USBD_LL_PrepareReceive>
 8006e72:	e026      	b.n	8006ec2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d00a      	beq.n	8006e96 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006e86:	2b03      	cmp	r3, #3
 8006e88:	d105      	bne.n	8006e96 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	68f8      	ldr	r0, [r7, #12]
 8006e94:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006e96:	2180      	movs	r1, #128	; 0x80
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	f001 fadd 	bl	8008458 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006e9e:	68f8      	ldr	r0, [r7, #12]
 8006ea0:	f000 fece 	bl	8007c40 <USBD_CtlReceiveStatus>
 8006ea4:	e00d      	b.n	8006ec2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006eac:	2b04      	cmp	r3, #4
 8006eae:	d004      	beq.n	8006eba <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d103      	bne.n	8006ec2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006eba:	2180      	movs	r1, #128	; 0x80
 8006ebc:	68f8      	ldr	r0, [r7, #12]
 8006ebe:	f001 facb 	bl	8008458 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d11d      	bne.n	8006f08 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006ecc:	68f8      	ldr	r0, [r7, #12]
 8006ece:	f7ff fe81 	bl	8006bd4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006eda:	e015      	b.n	8006f08 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ee2:	695b      	ldr	r3, [r3, #20]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00d      	beq.n	8006f04 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006eee:	2b03      	cmp	r3, #3
 8006ef0:	d108      	bne.n	8006f04 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ef8:	695b      	ldr	r3, [r3, #20]
 8006efa:	7afa      	ldrb	r2, [r7, #11]
 8006efc:	4611      	mov	r1, r2
 8006efe:	68f8      	ldr	r0, [r7, #12]
 8006f00:	4798      	blx	r3
 8006f02:	e001      	b.n	8006f08 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006f04:	2302      	movs	r3, #2
 8006f06:	e000      	b.n	8006f0a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3718      	adds	r7, #24
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b082      	sub	sp, #8
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f1a:	2340      	movs	r3, #64	; 0x40
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	2100      	movs	r1, #0
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f001 fa54 	bl	80083ce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2240      	movs	r2, #64	; 0x40
 8006f32:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f36:	2340      	movs	r3, #64	; 0x40
 8006f38:	2200      	movs	r2, #0
 8006f3a:	2180      	movs	r1, #128	; 0x80
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f001 fa46 	bl	80083ce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2201      	movs	r2, #1
 8006f46:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2240      	movs	r2, #64	; 0x40
 8006f4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2201      	movs	r2, #1
 8006f52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d009      	beq.n	8006f8a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	6852      	ldr	r2, [r2, #4]
 8006f82:	b2d2      	uxtb	r2, r2
 8006f84:	4611      	mov	r1, r2
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	4798      	blx	r3
  }

  return USBD_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3708      	adds	r7, #8
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	78fa      	ldrb	r2, [r7, #3]
 8006fa4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006fa6:	2300      	movs	r3, #0
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bc80      	pop	{r7}
 8006fb0:	4770      	bx	lr

08006fb2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006fb2:	b480      	push	{r7}
 8006fb4:	b083      	sub	sp, #12
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2204      	movs	r2, #4
 8006fca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bc80      	pop	{r7}
 8006fd8:	4770      	bx	lr

08006fda <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006fda:	b480      	push	{r7}
 8006fdc:	b083      	sub	sp, #12
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fe8:	2b04      	cmp	r3, #4
 8006fea:	d105      	bne.n	8006ff8 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	370c      	adds	r7, #12
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bc80      	pop	{r7}
 8007002:	4770      	bx	lr

08007004 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007012:	2b03      	cmp	r3, #3
 8007014:	d10b      	bne.n	800702e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800701c:	69db      	ldr	r3, [r3, #28]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d005      	beq.n	800702e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007028:	69db      	ldr	r3, [r3, #28]
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3708      	adds	r7, #8
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007042:	2300      	movs	r3, #0
 8007044:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800704e:	2b40      	cmp	r3, #64	; 0x40
 8007050:	d005      	beq.n	800705e <USBD_StdDevReq+0x26>
 8007052:	2b40      	cmp	r3, #64	; 0x40
 8007054:	d84f      	bhi.n	80070f6 <USBD_StdDevReq+0xbe>
 8007056:	2b00      	cmp	r3, #0
 8007058:	d009      	beq.n	800706e <USBD_StdDevReq+0x36>
 800705a:	2b20      	cmp	r3, #32
 800705c:	d14b      	bne.n	80070f6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	6839      	ldr	r1, [r7, #0]
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	4798      	blx	r3
      break;
 800706c:	e048      	b.n	8007100 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	785b      	ldrb	r3, [r3, #1]
 8007072:	2b09      	cmp	r3, #9
 8007074:	d839      	bhi.n	80070ea <USBD_StdDevReq+0xb2>
 8007076:	a201      	add	r2, pc, #4	; (adr r2, 800707c <USBD_StdDevReq+0x44>)
 8007078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800707c:	080070cd 	.word	0x080070cd
 8007080:	080070e1 	.word	0x080070e1
 8007084:	080070eb 	.word	0x080070eb
 8007088:	080070d7 	.word	0x080070d7
 800708c:	080070eb 	.word	0x080070eb
 8007090:	080070af 	.word	0x080070af
 8007094:	080070a5 	.word	0x080070a5
 8007098:	080070eb 	.word	0x080070eb
 800709c:	080070c3 	.word	0x080070c3
 80070a0:	080070b9 	.word	0x080070b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80070a4:	6839      	ldr	r1, [r7, #0]
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 f9dc 	bl	8007464 <USBD_GetDescriptor>
          break;
 80070ac:	e022      	b.n	80070f4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80070ae:	6839      	ldr	r1, [r7, #0]
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 fb3f 	bl	8007734 <USBD_SetAddress>
          break;
 80070b6:	e01d      	b.n	80070f4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80070b8:	6839      	ldr	r1, [r7, #0]
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 fb7e 	bl	80077bc <USBD_SetConfig>
          break;
 80070c0:	e018      	b.n	80070f4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80070c2:	6839      	ldr	r1, [r7, #0]
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 fc07 	bl	80078d8 <USBD_GetConfig>
          break;
 80070ca:	e013      	b.n	80070f4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80070cc:	6839      	ldr	r1, [r7, #0]
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 fc37 	bl	8007942 <USBD_GetStatus>
          break;
 80070d4:	e00e      	b.n	80070f4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80070d6:	6839      	ldr	r1, [r7, #0]
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 fc65 	bl	80079a8 <USBD_SetFeature>
          break;
 80070de:	e009      	b.n	80070f4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80070e0:	6839      	ldr	r1, [r7, #0]
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 fc74 	bl	80079d0 <USBD_ClrFeature>
          break;
 80070e8:	e004      	b.n	80070f4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80070ea:	6839      	ldr	r1, [r7, #0]
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 fccc 	bl	8007a8a <USBD_CtlError>
          break;
 80070f2:	bf00      	nop
      }
      break;
 80070f4:	e004      	b.n	8007100 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80070f6:	6839      	ldr	r1, [r7, #0]
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 fcc6 	bl	8007a8a <USBD_CtlError>
      break;
 80070fe:	bf00      	nop
  }

  return ret;
 8007100:	7bfb      	ldrb	r3, [r7, #15]
}
 8007102:	4618      	mov	r0, r3
 8007104:	3710      	adds	r7, #16
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop

0800710c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007116:	2300      	movs	r3, #0
 8007118:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007122:	2b40      	cmp	r3, #64	; 0x40
 8007124:	d005      	beq.n	8007132 <USBD_StdItfReq+0x26>
 8007126:	2b40      	cmp	r3, #64	; 0x40
 8007128:	d82e      	bhi.n	8007188 <USBD_StdItfReq+0x7c>
 800712a:	2b00      	cmp	r3, #0
 800712c:	d001      	beq.n	8007132 <USBD_StdItfReq+0x26>
 800712e:	2b20      	cmp	r3, #32
 8007130:	d12a      	bne.n	8007188 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007138:	3b01      	subs	r3, #1
 800713a:	2b02      	cmp	r3, #2
 800713c:	d81d      	bhi.n	800717a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	889b      	ldrh	r3, [r3, #4]
 8007142:	b2db      	uxtb	r3, r3
 8007144:	2b01      	cmp	r3, #1
 8007146:	d813      	bhi.n	8007170 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	6839      	ldr	r1, [r7, #0]
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	4798      	blx	r3
 8007156:	4603      	mov	r3, r0
 8007158:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	88db      	ldrh	r3, [r3, #6]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d110      	bne.n	8007184 <USBD_StdItfReq+0x78>
 8007162:	7bfb      	ldrb	r3, [r7, #15]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d10d      	bne.n	8007184 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 fd56 	bl	8007c1a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800716e:	e009      	b.n	8007184 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007170:	6839      	ldr	r1, [r7, #0]
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 fc89 	bl	8007a8a <USBD_CtlError>
          break;
 8007178:	e004      	b.n	8007184 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800717a:	6839      	ldr	r1, [r7, #0]
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 fc84 	bl	8007a8a <USBD_CtlError>
          break;
 8007182:	e000      	b.n	8007186 <USBD_StdItfReq+0x7a>
          break;
 8007184:	bf00      	nop
      }
      break;
 8007186:	e004      	b.n	8007192 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007188:	6839      	ldr	r1, [r7, #0]
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 fc7d 	bl	8007a8a <USBD_CtlError>
      break;
 8007190:	bf00      	nop
  }

  return USBD_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	3710      	adds	r7, #16
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80071a6:	2300      	movs	r3, #0
 80071a8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	889b      	ldrh	r3, [r3, #4]
 80071ae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071b8:	2b40      	cmp	r3, #64	; 0x40
 80071ba:	d007      	beq.n	80071cc <USBD_StdEPReq+0x30>
 80071bc:	2b40      	cmp	r3, #64	; 0x40
 80071be:	f200 8146 	bhi.w	800744e <USBD_StdEPReq+0x2b2>
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00a      	beq.n	80071dc <USBD_StdEPReq+0x40>
 80071c6:	2b20      	cmp	r3, #32
 80071c8:	f040 8141 	bne.w	800744e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	6839      	ldr	r1, [r7, #0]
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	4798      	blx	r3
      break;
 80071da:	e13d      	b.n	8007458 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071e4:	2b20      	cmp	r3, #32
 80071e6:	d10a      	bne.n	80071fe <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	6839      	ldr	r1, [r7, #0]
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	4798      	blx	r3
 80071f6:	4603      	mov	r3, r0
 80071f8:	73fb      	strb	r3, [r7, #15]

        return ret;
 80071fa:	7bfb      	ldrb	r3, [r7, #15]
 80071fc:	e12d      	b.n	800745a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	785b      	ldrb	r3, [r3, #1]
 8007202:	2b03      	cmp	r3, #3
 8007204:	d007      	beq.n	8007216 <USBD_StdEPReq+0x7a>
 8007206:	2b03      	cmp	r3, #3
 8007208:	f300 811b 	bgt.w	8007442 <USBD_StdEPReq+0x2a6>
 800720c:	2b00      	cmp	r3, #0
 800720e:	d072      	beq.n	80072f6 <USBD_StdEPReq+0x15a>
 8007210:	2b01      	cmp	r3, #1
 8007212:	d03a      	beq.n	800728a <USBD_StdEPReq+0xee>
 8007214:	e115      	b.n	8007442 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800721c:	2b02      	cmp	r3, #2
 800721e:	d002      	beq.n	8007226 <USBD_StdEPReq+0x8a>
 8007220:	2b03      	cmp	r3, #3
 8007222:	d015      	beq.n	8007250 <USBD_StdEPReq+0xb4>
 8007224:	e02b      	b.n	800727e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007226:	7bbb      	ldrb	r3, [r7, #14]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00c      	beq.n	8007246 <USBD_StdEPReq+0xaa>
 800722c:	7bbb      	ldrb	r3, [r7, #14]
 800722e:	2b80      	cmp	r3, #128	; 0x80
 8007230:	d009      	beq.n	8007246 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007232:	7bbb      	ldrb	r3, [r7, #14]
 8007234:	4619      	mov	r1, r3
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f001 f90e 	bl	8008458 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800723c:	2180      	movs	r1, #128	; 0x80
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f001 f90a 	bl	8008458 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007244:	e020      	b.n	8007288 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007246:	6839      	ldr	r1, [r7, #0]
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 fc1e 	bl	8007a8a <USBD_CtlError>
              break;
 800724e:	e01b      	b.n	8007288 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	885b      	ldrh	r3, [r3, #2]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d10e      	bne.n	8007276 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007258:	7bbb      	ldrb	r3, [r7, #14]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00b      	beq.n	8007276 <USBD_StdEPReq+0xda>
 800725e:	7bbb      	ldrb	r3, [r7, #14]
 8007260:	2b80      	cmp	r3, #128	; 0x80
 8007262:	d008      	beq.n	8007276 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	88db      	ldrh	r3, [r3, #6]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d104      	bne.n	8007276 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800726c:	7bbb      	ldrb	r3, [r7, #14]
 800726e:	4619      	mov	r1, r3
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f001 f8f1 	bl	8008458 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 fccf 	bl	8007c1a <USBD_CtlSendStatus>

              break;
 800727c:	e004      	b.n	8007288 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800727e:	6839      	ldr	r1, [r7, #0]
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 fc02 	bl	8007a8a <USBD_CtlError>
              break;
 8007286:	bf00      	nop
          }
          break;
 8007288:	e0e0      	b.n	800744c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007290:	2b02      	cmp	r3, #2
 8007292:	d002      	beq.n	800729a <USBD_StdEPReq+0xfe>
 8007294:	2b03      	cmp	r3, #3
 8007296:	d015      	beq.n	80072c4 <USBD_StdEPReq+0x128>
 8007298:	e026      	b.n	80072e8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800729a:	7bbb      	ldrb	r3, [r7, #14]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d00c      	beq.n	80072ba <USBD_StdEPReq+0x11e>
 80072a0:	7bbb      	ldrb	r3, [r7, #14]
 80072a2:	2b80      	cmp	r3, #128	; 0x80
 80072a4:	d009      	beq.n	80072ba <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80072a6:	7bbb      	ldrb	r3, [r7, #14]
 80072a8:	4619      	mov	r1, r3
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f001 f8d4 	bl	8008458 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80072b0:	2180      	movs	r1, #128	; 0x80
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f001 f8d0 	bl	8008458 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80072b8:	e01c      	b.n	80072f4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80072ba:	6839      	ldr	r1, [r7, #0]
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 fbe4 	bl	8007a8a <USBD_CtlError>
              break;
 80072c2:	e017      	b.n	80072f4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	885b      	ldrh	r3, [r3, #2]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d112      	bne.n	80072f2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80072cc:	7bbb      	ldrb	r3, [r7, #14]
 80072ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d004      	beq.n	80072e0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80072d6:	7bbb      	ldrb	r3, [r7, #14]
 80072d8:	4619      	mov	r1, r3
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f001 f8db 	bl	8008496 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 fc9a 	bl	8007c1a <USBD_CtlSendStatus>
              }
              break;
 80072e6:	e004      	b.n	80072f2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80072e8:	6839      	ldr	r1, [r7, #0]
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 fbcd 	bl	8007a8a <USBD_CtlError>
              break;
 80072f0:	e000      	b.n	80072f4 <USBD_StdEPReq+0x158>
              break;
 80072f2:	bf00      	nop
          }
          break;
 80072f4:	e0aa      	b.n	800744c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072fc:	2b02      	cmp	r3, #2
 80072fe:	d002      	beq.n	8007306 <USBD_StdEPReq+0x16a>
 8007300:	2b03      	cmp	r3, #3
 8007302:	d032      	beq.n	800736a <USBD_StdEPReq+0x1ce>
 8007304:	e097      	b.n	8007436 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007306:	7bbb      	ldrb	r3, [r7, #14]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d007      	beq.n	800731c <USBD_StdEPReq+0x180>
 800730c:	7bbb      	ldrb	r3, [r7, #14]
 800730e:	2b80      	cmp	r3, #128	; 0x80
 8007310:	d004      	beq.n	800731c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007312:	6839      	ldr	r1, [r7, #0]
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 fbb8 	bl	8007a8a <USBD_CtlError>
                break;
 800731a:	e091      	b.n	8007440 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800731c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007320:	2b00      	cmp	r3, #0
 8007322:	da0b      	bge.n	800733c <USBD_StdEPReq+0x1a0>
 8007324:	7bbb      	ldrb	r3, [r7, #14]
 8007326:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800732a:	4613      	mov	r3, r2
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	4413      	add	r3, r2
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	3310      	adds	r3, #16
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	4413      	add	r3, r2
 8007338:	3304      	adds	r3, #4
 800733a:	e00b      	b.n	8007354 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800733c:	7bbb      	ldrb	r3, [r7, #14]
 800733e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007342:	4613      	mov	r3, r2
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	4413      	add	r3, r2
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	4413      	add	r3, r2
 8007352:	3304      	adds	r3, #4
 8007354:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	2200      	movs	r2, #0
 800735a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	2202      	movs	r2, #2
 8007360:	4619      	mov	r1, r3
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fbfb 	bl	8007b5e <USBD_CtlSendData>
              break;
 8007368:	e06a      	b.n	8007440 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800736a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800736e:	2b00      	cmp	r3, #0
 8007370:	da11      	bge.n	8007396 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007372:	7bbb      	ldrb	r3, [r7, #14]
 8007374:	f003 020f 	and.w	r2, r3, #15
 8007378:	6879      	ldr	r1, [r7, #4]
 800737a:	4613      	mov	r3, r2
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	4413      	add	r3, r2
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	440b      	add	r3, r1
 8007384:	3318      	adds	r3, #24
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d117      	bne.n	80073bc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800738c:	6839      	ldr	r1, [r7, #0]
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 fb7b 	bl	8007a8a <USBD_CtlError>
                  break;
 8007394:	e054      	b.n	8007440 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007396:	7bbb      	ldrb	r3, [r7, #14]
 8007398:	f003 020f 	and.w	r2, r3, #15
 800739c:	6879      	ldr	r1, [r7, #4]
 800739e:	4613      	mov	r3, r2
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	4413      	add	r3, r2
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	440b      	add	r3, r1
 80073a8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d104      	bne.n	80073bc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80073b2:	6839      	ldr	r1, [r7, #0]
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 fb68 	bl	8007a8a <USBD_CtlError>
                  break;
 80073ba:	e041      	b.n	8007440 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	da0b      	bge.n	80073dc <USBD_StdEPReq+0x240>
 80073c4:	7bbb      	ldrb	r3, [r7, #14]
 80073c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80073ca:	4613      	mov	r3, r2
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	4413      	add	r3, r2
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	3310      	adds	r3, #16
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	4413      	add	r3, r2
 80073d8:	3304      	adds	r3, #4
 80073da:	e00b      	b.n	80073f4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80073dc:	7bbb      	ldrb	r3, [r7, #14]
 80073de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073e2:	4613      	mov	r3, r2
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	4413      	add	r3, r2
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	4413      	add	r3, r2
 80073f2:	3304      	adds	r3, #4
 80073f4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80073f6:	7bbb      	ldrb	r3, [r7, #14]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d002      	beq.n	8007402 <USBD_StdEPReq+0x266>
 80073fc:	7bbb      	ldrb	r3, [r7, #14]
 80073fe:	2b80      	cmp	r3, #128	; 0x80
 8007400:	d103      	bne.n	800740a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	2200      	movs	r2, #0
 8007406:	601a      	str	r2, [r3, #0]
 8007408:	e00e      	b.n	8007428 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800740a:	7bbb      	ldrb	r3, [r7, #14]
 800740c:	4619      	mov	r1, r3
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f001 f860 	bl	80084d4 <USBD_LL_IsStallEP>
 8007414:	4603      	mov	r3, r0
 8007416:	2b00      	cmp	r3, #0
 8007418:	d003      	beq.n	8007422 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	2201      	movs	r2, #1
 800741e:	601a      	str	r2, [r3, #0]
 8007420:	e002      	b.n	8007428 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	2200      	movs	r2, #0
 8007426:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	2202      	movs	r2, #2
 800742c:	4619      	mov	r1, r3
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 fb95 	bl	8007b5e <USBD_CtlSendData>
              break;
 8007434:	e004      	b.n	8007440 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007436:	6839      	ldr	r1, [r7, #0]
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 fb26 	bl	8007a8a <USBD_CtlError>
              break;
 800743e:	bf00      	nop
          }
          break;
 8007440:	e004      	b.n	800744c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007442:	6839      	ldr	r1, [r7, #0]
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 fb20 	bl	8007a8a <USBD_CtlError>
          break;
 800744a:	bf00      	nop
      }
      break;
 800744c:	e004      	b.n	8007458 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800744e:	6839      	ldr	r1, [r7, #0]
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 fb1a 	bl	8007a8a <USBD_CtlError>
      break;
 8007456:	bf00      	nop
  }

  return ret;
 8007458:	7bfb      	ldrb	r3, [r7, #15]
}
 800745a:	4618      	mov	r0, r3
 800745c:	3710      	adds	r7, #16
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
	...

08007464 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800746e:	2300      	movs	r3, #0
 8007470:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007472:	2300      	movs	r3, #0
 8007474:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007476:	2300      	movs	r3, #0
 8007478:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	885b      	ldrh	r3, [r3, #2]
 800747e:	0a1b      	lsrs	r3, r3, #8
 8007480:	b29b      	uxth	r3, r3
 8007482:	3b01      	subs	r3, #1
 8007484:	2b06      	cmp	r3, #6
 8007486:	f200 8128 	bhi.w	80076da <USBD_GetDescriptor+0x276>
 800748a:	a201      	add	r2, pc, #4	; (adr r2, 8007490 <USBD_GetDescriptor+0x2c>)
 800748c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007490:	080074ad 	.word	0x080074ad
 8007494:	080074c5 	.word	0x080074c5
 8007498:	08007505 	.word	0x08007505
 800749c:	080076db 	.word	0x080076db
 80074a0:	080076db 	.word	0x080076db
 80074a4:	0800767b 	.word	0x0800767b
 80074a8:	080076a7 	.word	0x080076a7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	7c12      	ldrb	r2, [r2, #16]
 80074b8:	f107 0108 	add.w	r1, r7, #8
 80074bc:	4610      	mov	r0, r2
 80074be:	4798      	blx	r3
 80074c0:	60f8      	str	r0, [r7, #12]
      break;
 80074c2:	e112      	b.n	80076ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	7c1b      	ldrb	r3, [r3, #16]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d10d      	bne.n	80074e8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d4:	f107 0208 	add.w	r2, r7, #8
 80074d8:	4610      	mov	r0, r2
 80074da:	4798      	blx	r3
 80074dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	3301      	adds	r3, #1
 80074e2:	2202      	movs	r2, #2
 80074e4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80074e6:	e100      	b.n	80076ea <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f0:	f107 0208 	add.w	r2, r7, #8
 80074f4:	4610      	mov	r0, r2
 80074f6:	4798      	blx	r3
 80074f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	3301      	adds	r3, #1
 80074fe:	2202      	movs	r2, #2
 8007500:	701a      	strb	r2, [r3, #0]
      break;
 8007502:	e0f2      	b.n	80076ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	885b      	ldrh	r3, [r3, #2]
 8007508:	b2db      	uxtb	r3, r3
 800750a:	2b05      	cmp	r3, #5
 800750c:	f200 80ac 	bhi.w	8007668 <USBD_GetDescriptor+0x204>
 8007510:	a201      	add	r2, pc, #4	; (adr r2, 8007518 <USBD_GetDescriptor+0xb4>)
 8007512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007516:	bf00      	nop
 8007518:	08007531 	.word	0x08007531
 800751c:	08007565 	.word	0x08007565
 8007520:	08007599 	.word	0x08007599
 8007524:	080075cd 	.word	0x080075cd
 8007528:	08007601 	.word	0x08007601
 800752c:	08007635 	.word	0x08007635
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00b      	beq.n	8007554 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	7c12      	ldrb	r2, [r2, #16]
 8007548:	f107 0108 	add.w	r1, r7, #8
 800754c:	4610      	mov	r0, r2
 800754e:	4798      	blx	r3
 8007550:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007552:	e091      	b.n	8007678 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007554:	6839      	ldr	r1, [r7, #0]
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 fa97 	bl	8007a8a <USBD_CtlError>
            err++;
 800755c:	7afb      	ldrb	r3, [r7, #11]
 800755e:	3301      	adds	r3, #1
 8007560:	72fb      	strb	r3, [r7, #11]
          break;
 8007562:	e089      	b.n	8007678 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00b      	beq.n	8007588 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	7c12      	ldrb	r2, [r2, #16]
 800757c:	f107 0108 	add.w	r1, r7, #8
 8007580:	4610      	mov	r0, r2
 8007582:	4798      	blx	r3
 8007584:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007586:	e077      	b.n	8007678 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007588:	6839      	ldr	r1, [r7, #0]
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 fa7d 	bl	8007a8a <USBD_CtlError>
            err++;
 8007590:	7afb      	ldrb	r3, [r7, #11]
 8007592:	3301      	adds	r3, #1
 8007594:	72fb      	strb	r3, [r7, #11]
          break;
 8007596:	e06f      	b.n	8007678 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00b      	beq.n	80075bc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	7c12      	ldrb	r2, [r2, #16]
 80075b0:	f107 0108 	add.w	r1, r7, #8
 80075b4:	4610      	mov	r0, r2
 80075b6:	4798      	blx	r3
 80075b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075ba:	e05d      	b.n	8007678 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075bc:	6839      	ldr	r1, [r7, #0]
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 fa63 	bl	8007a8a <USBD_CtlError>
            err++;
 80075c4:	7afb      	ldrb	r3, [r7, #11]
 80075c6:	3301      	adds	r3, #1
 80075c8:	72fb      	strb	r3, [r7, #11]
          break;
 80075ca:	e055      	b.n	8007678 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075d2:	691b      	ldr	r3, [r3, #16]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d00b      	beq.n	80075f0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075de:	691b      	ldr	r3, [r3, #16]
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	7c12      	ldrb	r2, [r2, #16]
 80075e4:	f107 0108 	add.w	r1, r7, #8
 80075e8:	4610      	mov	r0, r2
 80075ea:	4798      	blx	r3
 80075ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075ee:	e043      	b.n	8007678 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075f0:	6839      	ldr	r1, [r7, #0]
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 fa49 	bl	8007a8a <USBD_CtlError>
            err++;
 80075f8:	7afb      	ldrb	r3, [r7, #11]
 80075fa:	3301      	adds	r3, #1
 80075fc:	72fb      	strb	r3, [r7, #11]
          break;
 80075fe:	e03b      	b.n	8007678 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007606:	695b      	ldr	r3, [r3, #20]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d00b      	beq.n	8007624 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007612:	695b      	ldr	r3, [r3, #20]
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	7c12      	ldrb	r2, [r2, #16]
 8007618:	f107 0108 	add.w	r1, r7, #8
 800761c:	4610      	mov	r0, r2
 800761e:	4798      	blx	r3
 8007620:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007622:	e029      	b.n	8007678 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007624:	6839      	ldr	r1, [r7, #0]
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 fa2f 	bl	8007a8a <USBD_CtlError>
            err++;
 800762c:	7afb      	ldrb	r3, [r7, #11]
 800762e:	3301      	adds	r3, #1
 8007630:	72fb      	strb	r3, [r7, #11]
          break;
 8007632:	e021      	b.n	8007678 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800763a:	699b      	ldr	r3, [r3, #24]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d00b      	beq.n	8007658 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007646:	699b      	ldr	r3, [r3, #24]
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	7c12      	ldrb	r2, [r2, #16]
 800764c:	f107 0108 	add.w	r1, r7, #8
 8007650:	4610      	mov	r0, r2
 8007652:	4798      	blx	r3
 8007654:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007656:	e00f      	b.n	8007678 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007658:	6839      	ldr	r1, [r7, #0]
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 fa15 	bl	8007a8a <USBD_CtlError>
            err++;
 8007660:	7afb      	ldrb	r3, [r7, #11]
 8007662:	3301      	adds	r3, #1
 8007664:	72fb      	strb	r3, [r7, #11]
          break;
 8007666:	e007      	b.n	8007678 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007668:	6839      	ldr	r1, [r7, #0]
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 fa0d 	bl	8007a8a <USBD_CtlError>
          err++;
 8007670:	7afb      	ldrb	r3, [r7, #11]
 8007672:	3301      	adds	r3, #1
 8007674:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007676:	e038      	b.n	80076ea <USBD_GetDescriptor+0x286>
 8007678:	e037      	b.n	80076ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	7c1b      	ldrb	r3, [r3, #16]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d109      	bne.n	8007696 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800768a:	f107 0208 	add.w	r2, r7, #8
 800768e:	4610      	mov	r0, r2
 8007690:	4798      	blx	r3
 8007692:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007694:	e029      	b.n	80076ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007696:	6839      	ldr	r1, [r7, #0]
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 f9f6 	bl	8007a8a <USBD_CtlError>
        err++;
 800769e:	7afb      	ldrb	r3, [r7, #11]
 80076a0:	3301      	adds	r3, #1
 80076a2:	72fb      	strb	r3, [r7, #11]
      break;
 80076a4:	e021      	b.n	80076ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	7c1b      	ldrb	r3, [r3, #16]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d10d      	bne.n	80076ca <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b6:	f107 0208 	add.w	r2, r7, #8
 80076ba:	4610      	mov	r0, r2
 80076bc:	4798      	blx	r3
 80076be:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	3301      	adds	r3, #1
 80076c4:	2207      	movs	r2, #7
 80076c6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076c8:	e00f      	b.n	80076ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80076ca:	6839      	ldr	r1, [r7, #0]
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 f9dc 	bl	8007a8a <USBD_CtlError>
        err++;
 80076d2:	7afb      	ldrb	r3, [r7, #11]
 80076d4:	3301      	adds	r3, #1
 80076d6:	72fb      	strb	r3, [r7, #11]
      break;
 80076d8:	e007      	b.n	80076ea <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80076da:	6839      	ldr	r1, [r7, #0]
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 f9d4 	bl	8007a8a <USBD_CtlError>
      err++;
 80076e2:	7afb      	ldrb	r3, [r7, #11]
 80076e4:	3301      	adds	r3, #1
 80076e6:	72fb      	strb	r3, [r7, #11]
      break;
 80076e8:	bf00      	nop
  }

  if (err != 0U)
 80076ea:	7afb      	ldrb	r3, [r7, #11]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d11c      	bne.n	800772a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80076f0:	893b      	ldrh	r3, [r7, #8]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d011      	beq.n	800771a <USBD_GetDescriptor+0x2b6>
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	88db      	ldrh	r3, [r3, #6]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00d      	beq.n	800771a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	88da      	ldrh	r2, [r3, #6]
 8007702:	893b      	ldrh	r3, [r7, #8]
 8007704:	4293      	cmp	r3, r2
 8007706:	bf28      	it	cs
 8007708:	4613      	movcs	r3, r2
 800770a:	b29b      	uxth	r3, r3
 800770c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800770e:	893b      	ldrh	r3, [r7, #8]
 8007710:	461a      	mov	r2, r3
 8007712:	68f9      	ldr	r1, [r7, #12]
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 fa22 	bl	8007b5e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	88db      	ldrh	r3, [r3, #6]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d104      	bne.n	800772c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 fa79 	bl	8007c1a <USBD_CtlSendStatus>
 8007728:	e000      	b.n	800772c <USBD_GetDescriptor+0x2c8>
    return;
 800772a:	bf00      	nop
    }
  }
}
 800772c:	3710      	adds	r7, #16
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
 8007732:	bf00      	nop

08007734 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	889b      	ldrh	r3, [r3, #4]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d130      	bne.n	80077a8 <USBD_SetAddress+0x74>
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	88db      	ldrh	r3, [r3, #6]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d12c      	bne.n	80077a8 <USBD_SetAddress+0x74>
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	885b      	ldrh	r3, [r3, #2]
 8007752:	2b7f      	cmp	r3, #127	; 0x7f
 8007754:	d828      	bhi.n	80077a8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	885b      	ldrh	r3, [r3, #2]
 800775a:	b2db      	uxtb	r3, r3
 800775c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007760:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007768:	2b03      	cmp	r3, #3
 800776a:	d104      	bne.n	8007776 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800776c:	6839      	ldr	r1, [r7, #0]
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 f98b 	bl	8007a8a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007774:	e01d      	b.n	80077b2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	7bfa      	ldrb	r2, [r7, #15]
 800777a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800777e:	7bfb      	ldrb	r3, [r7, #15]
 8007780:	4619      	mov	r1, r3
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 fed2 	bl	800852c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 fa46 	bl	8007c1a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800778e:	7bfb      	ldrb	r3, [r7, #15]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d004      	beq.n	800779e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2202      	movs	r2, #2
 8007798:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800779c:	e009      	b.n	80077b2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2201      	movs	r2, #1
 80077a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077a6:	e004      	b.n	80077b2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80077a8:	6839      	ldr	r1, [r7, #0]
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 f96d 	bl	8007a8a <USBD_CtlError>
  }
}
 80077b0:	bf00      	nop
 80077b2:	bf00      	nop
 80077b4:	3710      	adds	r7, #16
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
	...

080077bc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	885b      	ldrh	r3, [r3, #2]
 80077ca:	b2da      	uxtb	r2, r3
 80077cc:	4b41      	ldr	r3, [pc, #260]	; (80078d4 <USBD_SetConfig+0x118>)
 80077ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80077d0:	4b40      	ldr	r3, [pc, #256]	; (80078d4 <USBD_SetConfig+0x118>)
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d904      	bls.n	80077e2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80077d8:	6839      	ldr	r1, [r7, #0]
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 f955 	bl	8007a8a <USBD_CtlError>
 80077e0:	e075      	b.n	80078ce <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077e8:	2b02      	cmp	r3, #2
 80077ea:	d002      	beq.n	80077f2 <USBD_SetConfig+0x36>
 80077ec:	2b03      	cmp	r3, #3
 80077ee:	d023      	beq.n	8007838 <USBD_SetConfig+0x7c>
 80077f0:	e062      	b.n	80078b8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80077f2:	4b38      	ldr	r3, [pc, #224]	; (80078d4 <USBD_SetConfig+0x118>)
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d01a      	beq.n	8007830 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80077fa:	4b36      	ldr	r3, [pc, #216]	; (80078d4 <USBD_SetConfig+0x118>)
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	461a      	mov	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2203      	movs	r2, #3
 8007808:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800780c:	4b31      	ldr	r3, [pc, #196]	; (80078d4 <USBD_SetConfig+0x118>)
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	4619      	mov	r1, r3
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f7ff f9e8 	bl	8006be8 <USBD_SetClassConfig>
 8007818:	4603      	mov	r3, r0
 800781a:	2b02      	cmp	r3, #2
 800781c:	d104      	bne.n	8007828 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800781e:	6839      	ldr	r1, [r7, #0]
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 f932 	bl	8007a8a <USBD_CtlError>
            return;
 8007826:	e052      	b.n	80078ce <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 f9f6 	bl	8007c1a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800782e:	e04e      	b.n	80078ce <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 f9f2 	bl	8007c1a <USBD_CtlSendStatus>
        break;
 8007836:	e04a      	b.n	80078ce <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007838:	4b26      	ldr	r3, [pc, #152]	; (80078d4 <USBD_SetConfig+0x118>)
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d112      	bne.n	8007866 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2202      	movs	r2, #2
 8007844:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007848:	4b22      	ldr	r3, [pc, #136]	; (80078d4 <USBD_SetConfig+0x118>)
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	461a      	mov	r2, r3
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007852:	4b20      	ldr	r3, [pc, #128]	; (80078d4 <USBD_SetConfig+0x118>)
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	4619      	mov	r1, r3
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f7ff f9e4 	bl	8006c26 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 f9db 	bl	8007c1a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007864:	e033      	b.n	80078ce <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007866:	4b1b      	ldr	r3, [pc, #108]	; (80078d4 <USBD_SetConfig+0x118>)
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	461a      	mov	r2, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	429a      	cmp	r2, r3
 8007872:	d01d      	beq.n	80078b0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	b2db      	uxtb	r3, r3
 800787a:	4619      	mov	r1, r3
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f7ff f9d2 	bl	8006c26 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007882:	4b14      	ldr	r3, [pc, #80]	; (80078d4 <USBD_SetConfig+0x118>)
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	461a      	mov	r2, r3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800788c:	4b11      	ldr	r3, [pc, #68]	; (80078d4 <USBD_SetConfig+0x118>)
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	4619      	mov	r1, r3
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f7ff f9a8 	bl	8006be8 <USBD_SetClassConfig>
 8007898:	4603      	mov	r3, r0
 800789a:	2b02      	cmp	r3, #2
 800789c:	d104      	bne.n	80078a8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800789e:	6839      	ldr	r1, [r7, #0]
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 f8f2 	bl	8007a8a <USBD_CtlError>
            return;
 80078a6:	e012      	b.n	80078ce <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 f9b6 	bl	8007c1a <USBD_CtlSendStatus>
        break;
 80078ae:	e00e      	b.n	80078ce <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 f9b2 	bl	8007c1a <USBD_CtlSendStatus>
        break;
 80078b6:	e00a      	b.n	80078ce <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80078b8:	6839      	ldr	r1, [r7, #0]
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 f8e5 	bl	8007a8a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80078c0:	4b04      	ldr	r3, [pc, #16]	; (80078d4 <USBD_SetConfig+0x118>)
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	4619      	mov	r1, r3
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f7ff f9ad 	bl	8006c26 <USBD_ClrClassConfig>
        break;
 80078cc:	bf00      	nop
    }
  }
}
 80078ce:	3708      	adds	r7, #8
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	20000201 	.word	0x20000201

080078d8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	88db      	ldrh	r3, [r3, #6]
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d004      	beq.n	80078f4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80078ea:	6839      	ldr	r1, [r7, #0]
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 f8cc 	bl	8007a8a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80078f2:	e022      	b.n	800793a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	dc02      	bgt.n	8007904 <USBD_GetConfig+0x2c>
 80078fe:	2b00      	cmp	r3, #0
 8007900:	dc03      	bgt.n	800790a <USBD_GetConfig+0x32>
 8007902:	e015      	b.n	8007930 <USBD_GetConfig+0x58>
 8007904:	2b03      	cmp	r3, #3
 8007906:	d00b      	beq.n	8007920 <USBD_GetConfig+0x48>
 8007908:	e012      	b.n	8007930 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	3308      	adds	r3, #8
 8007914:	2201      	movs	r2, #1
 8007916:	4619      	mov	r1, r3
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 f920 	bl	8007b5e <USBD_CtlSendData>
        break;
 800791e:	e00c      	b.n	800793a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	3304      	adds	r3, #4
 8007924:	2201      	movs	r2, #1
 8007926:	4619      	mov	r1, r3
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 f918 	bl	8007b5e <USBD_CtlSendData>
        break;
 800792e:	e004      	b.n	800793a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007930:	6839      	ldr	r1, [r7, #0]
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 f8a9 	bl	8007a8a <USBD_CtlError>
        break;
 8007938:	bf00      	nop
}
 800793a:	bf00      	nop
 800793c:	3708      	adds	r7, #8
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}

08007942 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007942:	b580      	push	{r7, lr}
 8007944:	b082      	sub	sp, #8
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
 800794a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007952:	3b01      	subs	r3, #1
 8007954:	2b02      	cmp	r3, #2
 8007956:	d81e      	bhi.n	8007996 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	88db      	ldrh	r3, [r3, #6]
 800795c:	2b02      	cmp	r3, #2
 800795e:	d004      	beq.n	800796a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007960:	6839      	ldr	r1, [r7, #0]
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 f891 	bl	8007a8a <USBD_CtlError>
        break;
 8007968:	e01a      	b.n	80079a0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	60da      	str	r2, [r3, #12]
#endif

      if (pdev->dev_remote_wakeup)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007976:	2b00      	cmp	r3, #0
 8007978:	d005      	beq.n	8007986 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	f043 0202 	orr.w	r2, r3, #2
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	330c      	adds	r3, #12
 800798a:	2202      	movs	r2, #2
 800798c:	4619      	mov	r1, r3
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 f8e5 	bl	8007b5e <USBD_CtlSendData>
      break;
 8007994:	e004      	b.n	80079a0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007996:	6839      	ldr	r1, [r7, #0]
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 f876 	bl	8007a8a <USBD_CtlError>
      break;
 800799e:	bf00      	nop
  }
}
 80079a0:	bf00      	nop
 80079a2:	3708      	adds	r7, #8
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	885b      	ldrh	r3, [r3, #2]
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d106      	bne.n	80079c8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2201      	movs	r2, #1
 80079be:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 f929 	bl	8007c1a <USBD_CtlSendStatus>
  }
}
 80079c8:	bf00      	nop
 80079ca:	3708      	adds	r7, #8
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079e0:	3b01      	subs	r3, #1
 80079e2:	2b02      	cmp	r3, #2
 80079e4:	d80b      	bhi.n	80079fe <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	885b      	ldrh	r3, [r3, #2]
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d10c      	bne.n	8007a08 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 f90f 	bl	8007c1a <USBD_CtlSendStatus>
      }
      break;
 80079fc:	e004      	b.n	8007a08 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80079fe:	6839      	ldr	r1, [r7, #0]
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 f842 	bl	8007a8a <USBD_CtlError>
      break;
 8007a06:	e000      	b.n	8007a0a <USBD_ClrFeature+0x3a>
      break;
 8007a08:	bf00      	nop
  }
}
 8007a0a:	bf00      	nop
 8007a0c:	3708      	adds	r7, #8
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007a12:	b480      	push	{r7}
 8007a14:	b083      	sub	sp, #12
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
 8007a1a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	781a      	ldrb	r2, [r3, #0]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	785a      	ldrb	r2, [r3, #1]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	3302      	adds	r3, #2
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	b29a      	uxth	r2, r3
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	3303      	adds	r3, #3
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	021b      	lsls	r3, r3, #8
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	4413      	add	r3, r2
 8007a42:	b29a      	uxth	r2, r3
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	3304      	adds	r3, #4
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	3305      	adds	r3, #5
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	021b      	lsls	r3, r3, #8
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	4413      	add	r3, r2
 8007a5e:	b29a      	uxth	r2, r3
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	3306      	adds	r3, #6
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	b29a      	uxth	r2, r3
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	3307      	adds	r3, #7
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	021b      	lsls	r3, r3, #8
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	4413      	add	r3, r2
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	80da      	strh	r2, [r3, #6]

}
 8007a80:	bf00      	nop
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bc80      	pop	{r7}
 8007a88:	4770      	bx	lr

08007a8a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b082      	sub	sp, #8
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
 8007a92:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007a94:	2180      	movs	r1, #128	; 0x80
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 fcde 	bl	8008458 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007a9c:	2100      	movs	r1, #0
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 fcda 	bl	8008458 <USBD_LL_StallEP>
}
 8007aa4:	bf00      	nop
 8007aa6:	3708      	adds	r7, #8
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b086      	sub	sp, #24
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d032      	beq.n	8007b28 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007ac2:	68f8      	ldr	r0, [r7, #12]
 8007ac4:	f000 f834 	bl	8007b30 <USBD_GetLen>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	3301      	adds	r3, #1
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	005b      	lsls	r3, r3, #1
 8007ad0:	b29a      	uxth	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007ad6:	7dfb      	ldrb	r3, [r7, #23]
 8007ad8:	1c5a      	adds	r2, r3, #1
 8007ada:	75fa      	strb	r2, [r7, #23]
 8007adc:	461a      	mov	r2, r3
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	4413      	add	r3, r2
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	7812      	ldrb	r2, [r2, #0]
 8007ae6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007ae8:	7dfb      	ldrb	r3, [r7, #23]
 8007aea:	1c5a      	adds	r2, r3, #1
 8007aec:	75fa      	strb	r2, [r7, #23]
 8007aee:	461a      	mov	r2, r3
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	4413      	add	r3, r2
 8007af4:	2203      	movs	r2, #3
 8007af6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007af8:	e012      	b.n	8007b20 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	1c5a      	adds	r2, r3, #1
 8007afe:	60fa      	str	r2, [r7, #12]
 8007b00:	7dfa      	ldrb	r2, [r7, #23]
 8007b02:	1c51      	adds	r1, r2, #1
 8007b04:	75f9      	strb	r1, [r7, #23]
 8007b06:	4611      	mov	r1, r2
 8007b08:	68ba      	ldr	r2, [r7, #8]
 8007b0a:	440a      	add	r2, r1
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007b10:	7dfb      	ldrb	r3, [r7, #23]
 8007b12:	1c5a      	adds	r2, r3, #1
 8007b14:	75fa      	strb	r2, [r7, #23]
 8007b16:	461a      	mov	r2, r3
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	4413      	add	r3, r2
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d1e8      	bne.n	8007afa <USBD_GetString+0x4e>
    }
  }
}
 8007b28:	bf00      	nop
 8007b2a:	3718      	adds	r7, #24
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b085      	sub	sp, #20
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007b3c:	e005      	b.n	8007b4a <USBD_GetLen+0x1a>
  {
    len++;
 8007b3e:	7bfb      	ldrb	r3, [r7, #15]
 8007b40:	3301      	adds	r3, #1
 8007b42:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	3301      	adds	r3, #1
 8007b48:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d1f5      	bne.n	8007b3e <USBD_GetLen+0xe>
  }

  return len;
 8007b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3714      	adds	r7, #20
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bc80      	pop	{r7}
 8007b5c:	4770      	bx	lr

08007b5e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b084      	sub	sp, #16
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	60f8      	str	r0, [r7, #12]
 8007b66:	60b9      	str	r1, [r7, #8]
 8007b68:	4613      	mov	r3, r2
 8007b6a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2202      	movs	r2, #2
 8007b70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007b74:	88fa      	ldrh	r2, [r7, #6]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007b7a:	88fa      	ldrh	r2, [r7, #6]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b80:	88fb      	ldrh	r3, [r7, #6]
 8007b82:	68ba      	ldr	r2, [r7, #8]
 8007b84:	2100      	movs	r1, #0
 8007b86:	68f8      	ldr	r0, [r7, #12]
 8007b88:	f000 fcef 	bl	800856a <USBD_LL_Transmit>

  return USBD_OK;
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b084      	sub	sp, #16
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	60f8      	str	r0, [r7, #12]
 8007b9e:	60b9      	str	r1, [r7, #8]
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ba4:	88fb      	ldrh	r3, [r7, #6]
 8007ba6:	68ba      	ldr	r2, [r7, #8]
 8007ba8:	2100      	movs	r1, #0
 8007baa:	68f8      	ldr	r0, [r7, #12]
 8007bac:	f000 fcdd 	bl	800856a <USBD_LL_Transmit>

  return USBD_OK;
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3710      	adds	r7, #16
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b084      	sub	sp, #16
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	60f8      	str	r0, [r7, #12]
 8007bc2:	60b9      	str	r1, [r7, #8]
 8007bc4:	4613      	mov	r3, r2
 8007bc6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2203      	movs	r2, #3
 8007bcc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007bd0:	88fa      	ldrh	r2, [r7, #6]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007bd8:	88fa      	ldrh	r2, [r7, #6]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007be0:	88fb      	ldrh	r3, [r7, #6]
 8007be2:	68ba      	ldr	r2, [r7, #8]
 8007be4:	2100      	movs	r1, #0
 8007be6:	68f8      	ldr	r0, [r7, #12]
 8007be8:	f000 fce2 	bl	80085b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3710      	adds	r7, #16
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b084      	sub	sp, #16
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	60f8      	str	r0, [r7, #12]
 8007bfe:	60b9      	str	r1, [r7, #8]
 8007c00:	4613      	mov	r3, r2
 8007c02:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c04:	88fb      	ldrh	r3, [r7, #6]
 8007c06:	68ba      	ldr	r2, [r7, #8]
 8007c08:	2100      	movs	r1, #0
 8007c0a:	68f8      	ldr	r0, [r7, #12]
 8007c0c:	f000 fcd0 	bl	80085b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3710      	adds	r7, #16
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b082      	sub	sp, #8
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2204      	movs	r2, #4
 8007c26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	2100      	movs	r1, #0
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 fc9a 	bl	800856a <USBD_LL_Transmit>

  return USBD_OK;
 8007c36:	2300      	movs	r3, #0
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3708      	adds	r7, #8
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2205      	movs	r2, #5
 8007c4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c50:	2300      	movs	r3, #0
 8007c52:	2200      	movs	r2, #0
 8007c54:	2100      	movs	r1, #0
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 fcaa 	bl	80085b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c5c:	2300      	movs	r3, #0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3708      	adds	r7, #8
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
	...

08007c68 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	4912      	ldr	r1, [pc, #72]	; (8007cb8 <MX_USB_DEVICE_Init+0x50>)
 8007c70:	4812      	ldr	r0, [pc, #72]	; (8007cbc <MX_USB_DEVICE_Init+0x54>)
 8007c72:	f7fe ff45 	bl	8006b00 <USBD_Init>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d001      	beq.n	8007c80 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007c7c:	f7f8 fe42 	bl	8000904 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007c80:	490f      	ldr	r1, [pc, #60]	; (8007cc0 <MX_USB_DEVICE_Init+0x58>)
 8007c82:	480e      	ldr	r0, [pc, #56]	; (8007cbc <MX_USB_DEVICE_Init+0x54>)
 8007c84:	f7fe ff74 	bl	8006b70 <USBD_RegisterClass>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d001      	beq.n	8007c92 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007c8e:	f7f8 fe39 	bl	8000904 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007c92:	490c      	ldr	r1, [pc, #48]	; (8007cc4 <MX_USB_DEVICE_Init+0x5c>)
 8007c94:	4809      	ldr	r0, [pc, #36]	; (8007cbc <MX_USB_DEVICE_Init+0x54>)
 8007c96:	f7fe fe97 	bl	80069c8 <USBD_CDC_RegisterInterface>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d001      	beq.n	8007ca4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007ca0:	f7f8 fe30 	bl	8000904 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007ca4:	4805      	ldr	r0, [pc, #20]	; (8007cbc <MX_USB_DEVICE_Init+0x54>)
 8007ca6:	f7fe ff89 	bl	8006bbc <USBD_Start>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d001      	beq.n	8007cb4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007cb0:	f7f8 fe28 	bl	8000904 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007cb4:	bf00      	nop
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	20000130 	.word	0x20000130
 8007cbc:	200007e8 	.word	0x200007e8
 8007cc0:	2000001c 	.word	0x2000001c
 8007cc4:	20000120 	.word	0x20000120

08007cc8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007ccc:	2200      	movs	r2, #0
 8007cce:	4905      	ldr	r1, [pc, #20]	; (8007ce4 <CDC_Init_FS+0x1c>)
 8007cd0:	4805      	ldr	r0, [pc, #20]	; (8007ce8 <CDC_Init_FS+0x20>)
 8007cd2:	f7fe fe8f 	bl	80069f4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007cd6:	4905      	ldr	r1, [pc, #20]	; (8007cec <CDC_Init_FS+0x24>)
 8007cd8:	4803      	ldr	r0, [pc, #12]	; (8007ce8 <CDC_Init_FS+0x20>)
 8007cda:	f7fe fea4 	bl	8006a26 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007cde:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	20000e9c 	.word	0x20000e9c
 8007ce8:	200007e8 	.word	0x200007e8
 8007cec:	20000ab4 	.word	0x20000ab4

08007cf0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007cf4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bc80      	pop	{r7}
 8007cfc:	4770      	bx	lr
	...

08007d00 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	4603      	mov	r3, r0
 8007d08:	6039      	str	r1, [r7, #0]
 8007d0a:	71fb      	strb	r3, [r7, #7]
 8007d0c:	4613      	mov	r3, r2
 8007d0e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007d10:	79fb      	ldrb	r3, [r7, #7]
 8007d12:	2b23      	cmp	r3, #35	; 0x23
 8007d14:	d84a      	bhi.n	8007dac <CDC_Control_FS+0xac>
 8007d16:	a201      	add	r2, pc, #4	; (adr r2, 8007d1c <CDC_Control_FS+0x1c>)
 8007d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1c:	08007dad 	.word	0x08007dad
 8007d20:	08007dad 	.word	0x08007dad
 8007d24:	08007dad 	.word	0x08007dad
 8007d28:	08007dad 	.word	0x08007dad
 8007d2c:	08007dad 	.word	0x08007dad
 8007d30:	08007dad 	.word	0x08007dad
 8007d34:	08007dad 	.word	0x08007dad
 8007d38:	08007dad 	.word	0x08007dad
 8007d3c:	08007dad 	.word	0x08007dad
 8007d40:	08007dad 	.word	0x08007dad
 8007d44:	08007dad 	.word	0x08007dad
 8007d48:	08007dad 	.word	0x08007dad
 8007d4c:	08007dad 	.word	0x08007dad
 8007d50:	08007dad 	.word	0x08007dad
 8007d54:	08007dad 	.word	0x08007dad
 8007d58:	08007dad 	.word	0x08007dad
 8007d5c:	08007dad 	.word	0x08007dad
 8007d60:	08007dad 	.word	0x08007dad
 8007d64:	08007dad 	.word	0x08007dad
 8007d68:	08007dad 	.word	0x08007dad
 8007d6c:	08007dad 	.word	0x08007dad
 8007d70:	08007dad 	.word	0x08007dad
 8007d74:	08007dad 	.word	0x08007dad
 8007d78:	08007dad 	.word	0x08007dad
 8007d7c:	08007dad 	.word	0x08007dad
 8007d80:	08007dad 	.word	0x08007dad
 8007d84:	08007dad 	.word	0x08007dad
 8007d88:	08007dad 	.word	0x08007dad
 8007d8c:	08007dad 	.word	0x08007dad
 8007d90:	08007dad 	.word	0x08007dad
 8007d94:	08007dad 	.word	0x08007dad
 8007d98:	08007dad 	.word	0x08007dad
 8007d9c:	08007dad 	.word	0x08007dad
 8007da0:	08007dad 	.word	0x08007dad
 8007da4:	08007dad 	.word	0x08007dad
 8007da8:	08007dad 	.word	0x08007dad
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007dac:	bf00      	nop
  }

  return (USBD_OK);
 8007dae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	370c      	adds	r7, #12
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bc80      	pop	{r7}
 8007db8:	4770      	bx	lr
 8007dba:	bf00      	nop

08007dbc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b086      	sub	sp, #24
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007dc6:	6879      	ldr	r1, [r7, #4]
 8007dc8:	4844      	ldr	r0, [pc, #272]	; (8007edc <CDC_Receive_FS+0x120>)
 8007dca:	f7fe fe2c 	bl	8006a26 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007dce:	4843      	ldr	r0, [pc, #268]	; (8007edc <CDC_Receive_FS+0x120>)
 8007dd0:	f7fe fe6b 	bl	8006aaa <USBD_CDC_ReceivePacket>
  if(*Len == 61) // There is data received
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	2b3d      	cmp	r3, #61	; 0x3d
 8007dda:	d129      	bne.n	8007e30 <CDC_Receive_FS+0x74>
  {
//	  __HAL_RCC_TIM1_CLK_DISABLE();//stop clocking interrupt timer
	  // 8 bits buffer to 16 bits buffer transfer
	 for (int i = 0, j = 0; i < 30; ++i, j+= 2)
 8007ddc:	2300      	movs	r3, #0
 8007dde:	617b      	str	r3, [r7, #20]
 8007de0:	2300      	movs	r3, #0
 8007de2:	613b      	str	r3, [r7, #16]
 8007de4:	e021      	b.n	8007e2a <CDC_Receive_FS+0x6e>
	 {
		 aOutputWave[i+(UserRxBufferFS[60]*30)] =
				 (UserRxBufferFS[j] << 8) | UserRxBufferFS[j + 1];
 8007de6:	4a3e      	ldr	r2, [pc, #248]	; (8007ee0 <CDC_Receive_FS+0x124>)
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	4413      	add	r3, r2
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	021b      	lsls	r3, r3, #8
 8007df0:	b21a      	sxth	r2, r3
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	3301      	adds	r3, #1
 8007df6:	493a      	ldr	r1, [pc, #232]	; (8007ee0 <CDC_Receive_FS+0x124>)
 8007df8:	5ccb      	ldrb	r3, [r1, r3]
 8007dfa:	b21b      	sxth	r3, r3
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	b219      	sxth	r1, r3
		 aOutputWave[i+(UserRxBufferFS[60]*30)] =
 8007e00:	4b37      	ldr	r3, [pc, #220]	; (8007ee0 <CDC_Receive_FS+0x124>)
 8007e02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e06:	461a      	mov	r2, r3
 8007e08:	4613      	mov	r3, r2
 8007e0a:	011b      	lsls	r3, r3, #4
 8007e0c:	1a9b      	subs	r3, r3, r2
 8007e0e:	005b      	lsls	r3, r3, #1
 8007e10:	461a      	mov	r2, r3
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	4413      	add	r3, r2
				 (UserRxBufferFS[j] << 8) | UserRxBufferFS[j + 1];
 8007e16:	b289      	uxth	r1, r1
		 aOutputWave[i+(UserRxBufferFS[60]*30)] =
 8007e18:	4a32      	ldr	r2, [pc, #200]	; (8007ee4 <CDC_Receive_FS+0x128>)
 8007e1a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	 for (int i = 0, j = 0; i < 30; ++i, j+= 2)
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	3301      	adds	r3, #1
 8007e22:	617b      	str	r3, [r7, #20]
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	3302      	adds	r3, #2
 8007e28:	613b      	str	r3, [r7, #16]
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	2b1d      	cmp	r3, #29
 8007e2e:	ddda      	ble.n	8007de6 <CDC_Receive_FS+0x2a>
	 }
//	  CDC_Transmit_FS(buffer, sizeof(buffer));
//	  NewDataFromUsb = 0;
//	  __HAL_RCC_TIM1_CLK_ENABLE();//start clocking interrupt timer
  }
  if(*Len == 1) // There is command received
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d135      	bne.n	8007ea4 <CDC_Receive_FS+0xe8>
  {
	  if(UserRxBufferFS[0] == USB_DEVICE_START)
 8007e38:	4b29      	ldr	r3, [pc, #164]	; (8007ee0 <CDC_Receive_FS+0x124>)
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	2b55      	cmp	r3, #85	; 0x55
 8007e3e:	d115      	bne.n	8007e6c <CDC_Receive_FS+0xb0>
	  {
		  __HAL_RCC_TIM1_CLK_ENABLE();//start clocking interrupt timer
 8007e40:	4b29      	ldr	r3, [pc, #164]	; (8007ee8 <CDC_Receive_FS+0x12c>)
 8007e42:	699b      	ldr	r3, [r3, #24]
 8007e44:	4a28      	ldr	r2, [pc, #160]	; (8007ee8 <CDC_Receive_FS+0x12c>)
 8007e46:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007e4a:	6193      	str	r3, [r2, #24]
 8007e4c:	4b26      	ldr	r3, [pc, #152]	; (8007ee8 <CDC_Receive_FS+0x12c>)
 8007e4e:	699b      	ldr	r3, [r3, #24]
 8007e50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e54:	60bb      	str	r3, [r7, #8]
 8007e56:	68bb      	ldr	r3, [r7, #8]
		  ReturnedCommand = USB_DEVICE_START;
 8007e58:	4b24      	ldr	r3, [pc, #144]	; (8007eec <CDC_Receive_FS+0x130>)
 8007e5a:	2255      	movs	r2, #85	; 0x55
 8007e5c:	701a      	strb	r2, [r3, #0]
		  CDC_Transmit_FS(&ReturnedCommand, 0x01); //issue feedback to PC
 8007e5e:	2101      	movs	r1, #1
 8007e60:	4822      	ldr	r0, [pc, #136]	; (8007eec <CDC_Receive_FS+0x130>)
 8007e62:	f000 f849 	bl	8007ef8 <CDC_Transmit_FS>
		  retWave = 1; // notification for wave return
 8007e66:	4b22      	ldr	r3, [pc, #136]	; (8007ef0 <CDC_Receive_FS+0x134>)
 8007e68:	2201      	movs	r2, #1
 8007e6a:	701a      	strb	r2, [r3, #0]
	  }
	  if(UserRxBufferFS[0] == USB_DEVICE_STOP)
 8007e6c:	4b1c      	ldr	r3, [pc, #112]	; (8007ee0 <CDC_Receive_FS+0x124>)
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	2baa      	cmp	r3, #170	; 0xaa
 8007e72:	d10c      	bne.n	8007e8e <CDC_Receive_FS+0xd2>
	  {
		  __HAL_RCC_TIM1_CLK_DISABLE();//stop clocking interrupt timer
 8007e74:	4b1c      	ldr	r3, [pc, #112]	; (8007ee8 <CDC_Receive_FS+0x12c>)
 8007e76:	699b      	ldr	r3, [r3, #24]
 8007e78:	4a1b      	ldr	r2, [pc, #108]	; (8007ee8 <CDC_Receive_FS+0x12c>)
 8007e7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e7e:	6193      	str	r3, [r2, #24]
		  ReturnedCommand = USB_DEVICE_STOP;
 8007e80:	4b1a      	ldr	r3, [pc, #104]	; (8007eec <CDC_Receive_FS+0x130>)
 8007e82:	22aa      	movs	r2, #170	; 0xaa
 8007e84:	701a      	strb	r2, [r3, #0]
		  CDC_Transmit_FS(&ReturnedCommand, 0x01);
 8007e86:	2101      	movs	r1, #1
 8007e88:	4818      	ldr	r0, [pc, #96]	; (8007eec <CDC_Receive_FS+0x130>)
 8007e8a:	f000 f835 	bl	8007ef8 <CDC_Transmit_FS>
		  //issue feedback to PC
	  }
	  if(UserRxBufferFS[0] == USB_DEVICE_TYPE)
 8007e8e:	4b14      	ldr	r3, [pc, #80]	; (8007ee0 <CDC_Receive_FS+0x124>)
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d106      	bne.n	8007ea4 <CDC_Receive_FS+0xe8>
	  {
		  ReturnedCommand = USB_DEVICE_TYPE;
 8007e96:	4b15      	ldr	r3, [pc, #84]	; (8007eec <CDC_Receive_FS+0x130>)
 8007e98:	2200      	movs	r2, #0
 8007e9a:	701a      	strb	r2, [r3, #0]
		  CDC_Transmit_FS(&ReturnedCommand, 0x01);
 8007e9c:	2101      	movs	r1, #1
 8007e9e:	4813      	ldr	r0, [pc, #76]	; (8007eec <CDC_Receive_FS+0x130>)
 8007ea0:	f000 f82a 	bl	8007ef8 <CDC_Transmit_FS>
	  	  // Say to PC that this is "Lite"
	  }
  }
  if(*Len==8) //There is configuration received
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	2b08      	cmp	r3, #8
 8007eaa:	d111      	bne.n	8007ed0 <CDC_Receive_FS+0x114>
  {
	  for(int i =0; i<8; ++i)
 8007eac:	2300      	movs	r3, #0
 8007eae:	60fb      	str	r3, [r7, #12]
 8007eb0:	e00b      	b.n	8007eca <CDC_Receive_FS+0x10e>
		  aConfig[i]= UserRxBufferFS[i];
 8007eb2:	4a0b      	ldr	r2, [pc, #44]	; (8007ee0 <CDC_Receive_FS+0x124>)
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	4413      	add	r3, r2
 8007eb8:	7819      	ldrb	r1, [r3, #0]
 8007eba:	4a0e      	ldr	r2, [pc, #56]	; (8007ef4 <CDC_Receive_FS+0x138>)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	460a      	mov	r2, r1
 8007ec2:	701a      	strb	r2, [r3, #0]
	  for(int i =0; i<8; ++i)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	60fb      	str	r3, [r7, #12]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2b07      	cmp	r3, #7
 8007ece:	ddf0      	ble.n	8007eb2 <CDC_Receive_FS+0xf6>
  }
  return (USBD_OK);
 8007ed0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3718      	adds	r7, #24
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop
 8007edc:	200007e8 	.word	0x200007e8
 8007ee0:	20000ab4 	.word	0x20000ab4
 8007ee4:	20000204 	.word	0x20000204
 8007ee8:	40021000 	.word	0x40021000
 8007eec:	20001284 	.word	0x20001284
 8007ef0:	200004d4 	.word	0x200004d4
 8007ef4:	20000aac 	.word	0x20000aac

08007ef8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	460b      	mov	r3, r1
 8007f02:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007f04:	2300      	movs	r3, #0
 8007f06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007f08:	4b0d      	ldr	r3, [pc, #52]	; (8007f40 <CDC_Transmit_FS+0x48>)
 8007f0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f0e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d001      	beq.n	8007f1e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e00b      	b.n	8007f36 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007f1e:	887b      	ldrh	r3, [r7, #2]
 8007f20:	461a      	mov	r2, r3
 8007f22:	6879      	ldr	r1, [r7, #4]
 8007f24:	4806      	ldr	r0, [pc, #24]	; (8007f40 <CDC_Transmit_FS+0x48>)
 8007f26:	f7fe fd65 	bl	80069f4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007f2a:	4805      	ldr	r0, [pc, #20]	; (8007f40 <CDC_Transmit_FS+0x48>)
 8007f2c:	f7fe fd8e 	bl	8006a4c <USBD_CDC_TransmitPacket>
 8007f30:	4603      	mov	r3, r0
 8007f32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3710      	adds	r7, #16
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	200007e8 	.word	0x200007e8

08007f44 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	6039      	str	r1, [r7, #0]
 8007f4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	2212      	movs	r2, #18
 8007f54:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007f56:	4b03      	ldr	r3, [pc, #12]	; (8007f64 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	370c      	adds	r7, #12
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bc80      	pop	{r7}
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop
 8007f64:	2000014c 	.word	0x2000014c

08007f68 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	4603      	mov	r3, r0
 8007f70:	6039      	str	r1, [r7, #0]
 8007f72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	2204      	movs	r2, #4
 8007f78:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007f7a:	4b03      	ldr	r3, [pc, #12]	; (8007f88 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	370c      	adds	r7, #12
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bc80      	pop	{r7}
 8007f84:	4770      	bx	lr
 8007f86:	bf00      	nop
 8007f88:	20000160 	.word	0x20000160

08007f8c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	4603      	mov	r3, r0
 8007f94:	6039      	str	r1, [r7, #0]
 8007f96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f98:	79fb      	ldrb	r3, [r7, #7]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d105      	bne.n	8007faa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007f9e:	683a      	ldr	r2, [r7, #0]
 8007fa0:	4907      	ldr	r1, [pc, #28]	; (8007fc0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007fa2:	4808      	ldr	r0, [pc, #32]	; (8007fc4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007fa4:	f7ff fd82 	bl	8007aac <USBD_GetString>
 8007fa8:	e004      	b.n	8007fb4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007faa:	683a      	ldr	r2, [r7, #0]
 8007fac:	4904      	ldr	r1, [pc, #16]	; (8007fc0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007fae:	4805      	ldr	r0, [pc, #20]	; (8007fc4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007fb0:	f7ff fd7c 	bl	8007aac <USBD_GetString>
  }
  return USBD_StrDesc;
 8007fb4:	4b02      	ldr	r3, [pc, #8]	; (8007fc0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3708      	adds	r7, #8
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	20001288 	.word	0x20001288
 8007fc4:	08009760 	.word	0x08009760

08007fc8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	4603      	mov	r3, r0
 8007fd0:	6039      	str	r1, [r7, #0]
 8007fd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007fd4:	683a      	ldr	r2, [r7, #0]
 8007fd6:	4904      	ldr	r1, [pc, #16]	; (8007fe8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007fd8:	4804      	ldr	r0, [pc, #16]	; (8007fec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007fda:	f7ff fd67 	bl	8007aac <USBD_GetString>
  return USBD_StrDesc;
 8007fde:	4b02      	ldr	r3, [pc, #8]	; (8007fe8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3708      	adds	r7, #8
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}
 8007fe8:	20001288 	.word	0x20001288
 8007fec:	08009778 	.word	0x08009778

08007ff0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	6039      	str	r1, [r7, #0]
 8007ffa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	221a      	movs	r2, #26
 8008000:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008002:	f000 f843 	bl	800808c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008006:	4b02      	ldr	r3, [pc, #8]	; (8008010 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008008:	4618      	mov	r0, r3
 800800a:	3708      	adds	r7, #8
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}
 8008010:	20000164 	.word	0x20000164

08008014 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b082      	sub	sp, #8
 8008018:	af00      	add	r7, sp, #0
 800801a:	4603      	mov	r3, r0
 800801c:	6039      	str	r1, [r7, #0]
 800801e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008020:	79fb      	ldrb	r3, [r7, #7]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d105      	bne.n	8008032 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008026:	683a      	ldr	r2, [r7, #0]
 8008028:	4907      	ldr	r1, [pc, #28]	; (8008048 <USBD_FS_ConfigStrDescriptor+0x34>)
 800802a:	4808      	ldr	r0, [pc, #32]	; (800804c <USBD_FS_ConfigStrDescriptor+0x38>)
 800802c:	f7ff fd3e 	bl	8007aac <USBD_GetString>
 8008030:	e004      	b.n	800803c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008032:	683a      	ldr	r2, [r7, #0]
 8008034:	4904      	ldr	r1, [pc, #16]	; (8008048 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008036:	4805      	ldr	r0, [pc, #20]	; (800804c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008038:	f7ff fd38 	bl	8007aac <USBD_GetString>
  }
  return USBD_StrDesc;
 800803c:	4b02      	ldr	r3, [pc, #8]	; (8008048 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800803e:	4618      	mov	r0, r3
 8008040:	3708      	adds	r7, #8
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
 8008046:	bf00      	nop
 8008048:	20001288 	.word	0x20001288
 800804c:	08009788 	.word	0x08009788

08008050 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
 8008056:	4603      	mov	r3, r0
 8008058:	6039      	str	r1, [r7, #0]
 800805a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800805c:	79fb      	ldrb	r3, [r7, #7]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d105      	bne.n	800806e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008062:	683a      	ldr	r2, [r7, #0]
 8008064:	4907      	ldr	r1, [pc, #28]	; (8008084 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008066:	4808      	ldr	r0, [pc, #32]	; (8008088 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008068:	f7ff fd20 	bl	8007aac <USBD_GetString>
 800806c:	e004      	b.n	8008078 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800806e:	683a      	ldr	r2, [r7, #0]
 8008070:	4904      	ldr	r1, [pc, #16]	; (8008084 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008072:	4805      	ldr	r0, [pc, #20]	; (8008088 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008074:	f7ff fd1a 	bl	8007aac <USBD_GetString>
  }
  return USBD_StrDesc;
 8008078:	4b02      	ldr	r3, [pc, #8]	; (8008084 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800807a:	4618      	mov	r0, r3
 800807c:	3708      	adds	r7, #8
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	20001288 	.word	0x20001288
 8008088:	08009794 	.word	0x08009794

0800808c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008092:	4b0f      	ldr	r3, [pc, #60]	; (80080d0 <Get_SerialNum+0x44>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008098:	4b0e      	ldr	r3, [pc, #56]	; (80080d4 <Get_SerialNum+0x48>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800809e:	4b0e      	ldr	r3, [pc, #56]	; (80080d8 <Get_SerialNum+0x4c>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	4413      	add	r3, r2
 80080aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d009      	beq.n	80080c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80080b2:	2208      	movs	r2, #8
 80080b4:	4909      	ldr	r1, [pc, #36]	; (80080dc <Get_SerialNum+0x50>)
 80080b6:	68f8      	ldr	r0, [r7, #12]
 80080b8:	f000 f814 	bl	80080e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80080bc:	2204      	movs	r2, #4
 80080be:	4908      	ldr	r1, [pc, #32]	; (80080e0 <Get_SerialNum+0x54>)
 80080c0:	68b8      	ldr	r0, [r7, #8]
 80080c2:	f000 f80f 	bl	80080e4 <IntToUnicode>
  }
}
 80080c6:	bf00      	nop
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	1ffff7e8 	.word	0x1ffff7e8
 80080d4:	1ffff7ec 	.word	0x1ffff7ec
 80080d8:	1ffff7f0 	.word	0x1ffff7f0
 80080dc:	20000166 	.word	0x20000166
 80080e0:	20000176 	.word	0x20000176

080080e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b087      	sub	sp, #28
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	60b9      	str	r1, [r7, #8]
 80080ee:	4613      	mov	r3, r2
 80080f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80080f2:	2300      	movs	r3, #0
 80080f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80080f6:	2300      	movs	r3, #0
 80080f8:	75fb      	strb	r3, [r7, #23]
 80080fa:	e027      	b.n	800814c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	0f1b      	lsrs	r3, r3, #28
 8008100:	2b09      	cmp	r3, #9
 8008102:	d80b      	bhi.n	800811c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	0f1b      	lsrs	r3, r3, #28
 8008108:	b2da      	uxtb	r2, r3
 800810a:	7dfb      	ldrb	r3, [r7, #23]
 800810c:	005b      	lsls	r3, r3, #1
 800810e:	4619      	mov	r1, r3
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	440b      	add	r3, r1
 8008114:	3230      	adds	r2, #48	; 0x30
 8008116:	b2d2      	uxtb	r2, r2
 8008118:	701a      	strb	r2, [r3, #0]
 800811a:	e00a      	b.n	8008132 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	0f1b      	lsrs	r3, r3, #28
 8008120:	b2da      	uxtb	r2, r3
 8008122:	7dfb      	ldrb	r3, [r7, #23]
 8008124:	005b      	lsls	r3, r3, #1
 8008126:	4619      	mov	r1, r3
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	440b      	add	r3, r1
 800812c:	3237      	adds	r2, #55	; 0x37
 800812e:	b2d2      	uxtb	r2, r2
 8008130:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	011b      	lsls	r3, r3, #4
 8008136:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008138:	7dfb      	ldrb	r3, [r7, #23]
 800813a:	005b      	lsls	r3, r3, #1
 800813c:	3301      	adds	r3, #1
 800813e:	68ba      	ldr	r2, [r7, #8]
 8008140:	4413      	add	r3, r2
 8008142:	2200      	movs	r2, #0
 8008144:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008146:	7dfb      	ldrb	r3, [r7, #23]
 8008148:	3301      	adds	r3, #1
 800814a:	75fb      	strb	r3, [r7, #23]
 800814c:	7dfa      	ldrb	r2, [r7, #23]
 800814e:	79fb      	ldrb	r3, [r7, #7]
 8008150:	429a      	cmp	r2, r3
 8008152:	d3d3      	bcc.n	80080fc <IntToUnicode+0x18>
  }
}
 8008154:	bf00      	nop
 8008156:	bf00      	nop
 8008158:	371c      	adds	r7, #28
 800815a:	46bd      	mov	sp, r7
 800815c:	bc80      	pop	{r7}
 800815e:	4770      	bx	lr

08008160 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a0d      	ldr	r2, [pc, #52]	; (80081a4 <HAL_PCD_MspInit+0x44>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d113      	bne.n	800819a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008172:	4b0d      	ldr	r3, [pc, #52]	; (80081a8 <HAL_PCD_MspInit+0x48>)
 8008174:	69db      	ldr	r3, [r3, #28]
 8008176:	4a0c      	ldr	r2, [pc, #48]	; (80081a8 <HAL_PCD_MspInit+0x48>)
 8008178:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800817c:	61d3      	str	r3, [r2, #28]
 800817e:	4b0a      	ldr	r3, [pc, #40]	; (80081a8 <HAL_PCD_MspInit+0x48>)
 8008180:	69db      	ldr	r3, [r3, #28]
 8008182:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008186:	60fb      	str	r3, [r7, #12]
 8008188:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800818a:	2200      	movs	r2, #0
 800818c:	2100      	movs	r1, #0
 800818e:	2014      	movs	r0, #20
 8008190:	f7f8 fe73 	bl	8000e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008194:	2014      	movs	r0, #20
 8008196:	f7f8 fe8c 	bl	8000eb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800819a:	bf00      	nop
 800819c:	3710      	adds	r7, #16
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	40005c00 	.word	0x40005c00
 80081a8:	40021000 	.word	0x40021000

080081ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80081c0:	4619      	mov	r1, r3
 80081c2:	4610      	mov	r0, r2
 80081c4:	f7fe fd42 	bl	8006c4c <USBD_LL_SetupStage>
}
 80081c8:	bf00      	nop
 80081ca:	3708      	adds	r7, #8
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	460b      	mov	r3, r1
 80081da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80081e2:	78fa      	ldrb	r2, [r7, #3]
 80081e4:	6879      	ldr	r1, [r7, #4]
 80081e6:	4613      	mov	r3, r2
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	4413      	add	r3, r2
 80081ec:	00db      	lsls	r3, r3, #3
 80081ee:	440b      	add	r3, r1
 80081f0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	78fb      	ldrb	r3, [r7, #3]
 80081f8:	4619      	mov	r1, r3
 80081fa:	f7fe fd74 	bl	8006ce6 <USBD_LL_DataOutStage>
}
 80081fe:	bf00      	nop
 8008200:	3708      	adds	r7, #8
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}

08008206 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008206:	b580      	push	{r7, lr}
 8008208:	b082      	sub	sp, #8
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
 800820e:	460b      	mov	r3, r1
 8008210:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008218:	78fa      	ldrb	r2, [r7, #3]
 800821a:	6879      	ldr	r1, [r7, #4]
 800821c:	4613      	mov	r3, r2
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	4413      	add	r3, r2
 8008222:	00db      	lsls	r3, r3, #3
 8008224:	440b      	add	r3, r1
 8008226:	333c      	adds	r3, #60	; 0x3c
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	78fb      	ldrb	r3, [r7, #3]
 800822c:	4619      	mov	r1, r3
 800822e:	f7fe fdcb 	bl	8006dc8 <USBD_LL_DataInStage>
}
 8008232:	bf00      	nop
 8008234:	3708      	adds	r7, #8
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}

0800823a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800823a:	b580      	push	{r7, lr}
 800823c:	b082      	sub	sp, #8
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008248:	4618      	mov	r0, r3
 800824a:	f7fe fedb 	bl	8007004 <USBD_LL_SOF>
}
 800824e:	bf00      	nop
 8008250:	3708      	adds	r7, #8
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008256:	b580      	push	{r7, lr}
 8008258:	b084      	sub	sp, #16
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800825e:	2301      	movs	r3, #1
 8008260:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	2b02      	cmp	r3, #2
 8008268:	d001      	beq.n	800826e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800826a:	f7f8 fb4b 	bl	8000904 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008274:	7bfa      	ldrb	r2, [r7, #15]
 8008276:	4611      	mov	r1, r2
 8008278:	4618      	mov	r0, r3
 800827a:	f7fe fe8b 	bl	8006f94 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008284:	4618      	mov	r0, r3
 8008286:	f7fe fe44 	bl	8006f12 <USBD_LL_Reset>
}
 800828a:	bf00      	nop
 800828c:	3710      	adds	r7, #16
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
	...

08008294 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80082a2:	4618      	mov	r0, r3
 80082a4:	f7fe fe85 	bl	8006fb2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	699b      	ldr	r3, [r3, #24]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d005      	beq.n	80082bc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80082b0:	4b04      	ldr	r3, [pc, #16]	; (80082c4 <HAL_PCD_SuspendCallback+0x30>)
 80082b2:	691b      	ldr	r3, [r3, #16]
 80082b4:	4a03      	ldr	r2, [pc, #12]	; (80082c4 <HAL_PCD_SuspendCallback+0x30>)
 80082b6:	f043 0306 	orr.w	r3, r3, #6
 80082ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80082bc:	bf00      	nop
 80082be:	3708      	adds	r7, #8
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}
 80082c4:	e000ed00 	.word	0xe000ed00

080082c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80082d6:	4618      	mov	r0, r3
 80082d8:	f7fe fe7f 	bl	8006fda <USBD_LL_Resume>
}
 80082dc:	bf00      	nop
 80082de:	3708      	adds	r7, #8
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80082ec:	4a28      	ldr	r2, [pc, #160]	; (8008390 <USBD_LL_Init+0xac>)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	4a26      	ldr	r2, [pc, #152]	; (8008390 <USBD_LL_Init+0xac>)
 80082f8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80082fc:	4b24      	ldr	r3, [pc, #144]	; (8008390 <USBD_LL_Init+0xac>)
 80082fe:	4a25      	ldr	r2, [pc, #148]	; (8008394 <USBD_LL_Init+0xb0>)
 8008300:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008302:	4b23      	ldr	r3, [pc, #140]	; (8008390 <USBD_LL_Init+0xac>)
 8008304:	2208      	movs	r2, #8
 8008306:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008308:	4b21      	ldr	r3, [pc, #132]	; (8008390 <USBD_LL_Init+0xac>)
 800830a:	2202      	movs	r2, #2
 800830c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800830e:	4b20      	ldr	r3, [pc, #128]	; (8008390 <USBD_LL_Init+0xac>)
 8008310:	2200      	movs	r2, #0
 8008312:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008314:	4b1e      	ldr	r3, [pc, #120]	; (8008390 <USBD_LL_Init+0xac>)
 8008316:	2200      	movs	r2, #0
 8008318:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800831a:	4b1d      	ldr	r3, [pc, #116]	; (8008390 <USBD_LL_Init+0xac>)
 800831c:	2200      	movs	r2, #0
 800831e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008320:	481b      	ldr	r0, [pc, #108]	; (8008390 <USBD_LL_Init+0xac>)
 8008322:	f7f9 fa65 	bl	80017f0 <HAL_PCD_Init>
 8008326:	4603      	mov	r3, r0
 8008328:	2b00      	cmp	r3, #0
 800832a:	d001      	beq.n	8008330 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800832c:	f7f8 faea 	bl	8000904 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008336:	2318      	movs	r3, #24
 8008338:	2200      	movs	r2, #0
 800833a:	2100      	movs	r1, #0
 800833c:	f7fa fda7 	bl	8002e8e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008346:	2358      	movs	r3, #88	; 0x58
 8008348:	2200      	movs	r2, #0
 800834a:	2180      	movs	r1, #128	; 0x80
 800834c:	f7fa fd9f 	bl	8002e8e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008356:	23c0      	movs	r3, #192	; 0xc0
 8008358:	2200      	movs	r2, #0
 800835a:	2181      	movs	r1, #129	; 0x81
 800835c:	f7fa fd97 	bl	8002e8e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008366:	f44f 7388 	mov.w	r3, #272	; 0x110
 800836a:	2200      	movs	r2, #0
 800836c:	2101      	movs	r1, #1
 800836e:	f7fa fd8e 	bl	8002e8e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008378:	f44f 7380 	mov.w	r3, #256	; 0x100
 800837c:	2200      	movs	r2, #0
 800837e:	2182      	movs	r1, #130	; 0x82
 8008380:	f7fa fd85 	bl	8002e8e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008384:	2300      	movs	r3, #0
}
 8008386:	4618      	mov	r0, r3
 8008388:	3708      	adds	r7, #8
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	20001488 	.word	0x20001488
 8008394:	40005c00 	.word	0x40005c00

08008398 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083a0:	2300      	movs	r3, #0
 80083a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083a4:	2300      	movs	r3, #0
 80083a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083ae:	4618      	mov	r0, r3
 80083b0:	f7f9 fb29 	bl	8001a06 <HAL_PCD_Start>
 80083b4:	4603      	mov	r3, r0
 80083b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083b8:	7bfb      	ldrb	r3, [r7, #15]
 80083ba:	4618      	mov	r0, r3
 80083bc:	f000 f94e 	bl	800865c <USBD_Get_USB_Status>
 80083c0:	4603      	mov	r3, r0
 80083c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3710      	adds	r7, #16
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}

080083ce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80083ce:	b580      	push	{r7, lr}
 80083d0:	b084      	sub	sp, #16
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
 80083d6:	4608      	mov	r0, r1
 80083d8:	4611      	mov	r1, r2
 80083da:	461a      	mov	r2, r3
 80083dc:	4603      	mov	r3, r0
 80083de:	70fb      	strb	r3, [r7, #3]
 80083e0:	460b      	mov	r3, r1
 80083e2:	70bb      	strb	r3, [r7, #2]
 80083e4:	4613      	mov	r3, r2
 80083e6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083e8:	2300      	movs	r3, #0
 80083ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083ec:	2300      	movs	r3, #0
 80083ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80083f6:	78bb      	ldrb	r3, [r7, #2]
 80083f8:	883a      	ldrh	r2, [r7, #0]
 80083fa:	78f9      	ldrb	r1, [r7, #3]
 80083fc:	f7f9 fca3 	bl	8001d46 <HAL_PCD_EP_Open>
 8008400:	4603      	mov	r3, r0
 8008402:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008404:	7bfb      	ldrb	r3, [r7, #15]
 8008406:	4618      	mov	r0, r3
 8008408:	f000 f928 	bl	800865c <USBD_Get_USB_Status>
 800840c:	4603      	mov	r3, r0
 800840e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008410:	7bbb      	ldrb	r3, [r7, #14]
}
 8008412:	4618      	mov	r0, r3
 8008414:	3710      	adds	r7, #16
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}

0800841a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800841a:	b580      	push	{r7, lr}
 800841c:	b084      	sub	sp, #16
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
 8008422:	460b      	mov	r3, r1
 8008424:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008426:	2300      	movs	r3, #0
 8008428:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800842a:	2300      	movs	r3, #0
 800842c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008434:	78fa      	ldrb	r2, [r7, #3]
 8008436:	4611      	mov	r1, r2
 8008438:	4618      	mov	r0, r3
 800843a:	f7f9 fcea 	bl	8001e12 <HAL_PCD_EP_Close>
 800843e:	4603      	mov	r3, r0
 8008440:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008442:	7bfb      	ldrb	r3, [r7, #15]
 8008444:	4618      	mov	r0, r3
 8008446:	f000 f909 	bl	800865c <USBD_Get_USB_Status>
 800844a:	4603      	mov	r3, r0
 800844c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800844e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008450:	4618      	mov	r0, r3
 8008452:	3710      	adds	r7, #16
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b084      	sub	sp, #16
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	460b      	mov	r3, r1
 8008462:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008464:	2300      	movs	r3, #0
 8008466:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008468:	2300      	movs	r3, #0
 800846a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008472:	78fa      	ldrb	r2, [r7, #3]
 8008474:	4611      	mov	r1, r2
 8008476:	4618      	mov	r0, r3
 8008478:	f7f9 fdaa 	bl	8001fd0 <HAL_PCD_EP_SetStall>
 800847c:	4603      	mov	r3, r0
 800847e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008480:	7bfb      	ldrb	r3, [r7, #15]
 8008482:	4618      	mov	r0, r3
 8008484:	f000 f8ea 	bl	800865c <USBD_Get_USB_Status>
 8008488:	4603      	mov	r3, r0
 800848a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800848c:	7bbb      	ldrb	r3, [r7, #14]
}
 800848e:	4618      	mov	r0, r3
 8008490:	3710      	adds	r7, #16
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}

08008496 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008496:	b580      	push	{r7, lr}
 8008498:	b084      	sub	sp, #16
 800849a:	af00      	add	r7, sp, #0
 800849c:	6078      	str	r0, [r7, #4]
 800849e:	460b      	mov	r3, r1
 80084a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084a2:	2300      	movs	r3, #0
 80084a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084a6:	2300      	movs	r3, #0
 80084a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084b0:	78fa      	ldrb	r2, [r7, #3]
 80084b2:	4611      	mov	r1, r2
 80084b4:	4618      	mov	r0, r3
 80084b6:	f7f9 fdeb 	bl	8002090 <HAL_PCD_EP_ClrStall>
 80084ba:	4603      	mov	r3, r0
 80084bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084be:	7bfb      	ldrb	r3, [r7, #15]
 80084c0:	4618      	mov	r0, r3
 80084c2:	f000 f8cb 	bl	800865c <USBD_Get_USB_Status>
 80084c6:	4603      	mov	r3, r0
 80084c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3710      	adds	r7, #16
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b085      	sub	sp, #20
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	460b      	mov	r3, r1
 80084de:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084e6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80084e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	da0c      	bge.n	800850a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80084f0:	78fb      	ldrb	r3, [r7, #3]
 80084f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084f6:	68f9      	ldr	r1, [r7, #12]
 80084f8:	1c5a      	adds	r2, r3, #1
 80084fa:	4613      	mov	r3, r2
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	4413      	add	r3, r2
 8008500:	00db      	lsls	r3, r3, #3
 8008502:	440b      	add	r3, r1
 8008504:	3302      	adds	r3, #2
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	e00b      	b.n	8008522 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800850a:	78fb      	ldrb	r3, [r7, #3]
 800850c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008510:	68f9      	ldr	r1, [r7, #12]
 8008512:	4613      	mov	r3, r2
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	4413      	add	r3, r2
 8008518:	00db      	lsls	r3, r3, #3
 800851a:	440b      	add	r3, r1
 800851c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008520:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008522:	4618      	mov	r0, r3
 8008524:	3714      	adds	r7, #20
 8008526:	46bd      	mov	sp, r7
 8008528:	bc80      	pop	{r7}
 800852a:	4770      	bx	lr

0800852c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	460b      	mov	r3, r1
 8008536:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008538:	2300      	movs	r3, #0
 800853a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800853c:	2300      	movs	r3, #0
 800853e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008546:	78fa      	ldrb	r2, [r7, #3]
 8008548:	4611      	mov	r1, r2
 800854a:	4618      	mov	r0, r3
 800854c:	f7f9 fbd6 	bl	8001cfc <HAL_PCD_SetAddress>
 8008550:	4603      	mov	r3, r0
 8008552:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008554:	7bfb      	ldrb	r3, [r7, #15]
 8008556:	4618      	mov	r0, r3
 8008558:	f000 f880 	bl	800865c <USBD_Get_USB_Status>
 800855c:	4603      	mov	r3, r0
 800855e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008560:	7bbb      	ldrb	r3, [r7, #14]
}
 8008562:	4618      	mov	r0, r3
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b086      	sub	sp, #24
 800856e:	af00      	add	r7, sp, #0
 8008570:	60f8      	str	r0, [r7, #12]
 8008572:	607a      	str	r2, [r7, #4]
 8008574:	461a      	mov	r2, r3
 8008576:	460b      	mov	r3, r1
 8008578:	72fb      	strb	r3, [r7, #11]
 800857a:	4613      	mov	r3, r2
 800857c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800857e:	2300      	movs	r3, #0
 8008580:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008582:	2300      	movs	r3, #0
 8008584:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800858c:	893b      	ldrh	r3, [r7, #8]
 800858e:	7af9      	ldrb	r1, [r7, #11]
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	f7f9 fcda 	bl	8001f4a <HAL_PCD_EP_Transmit>
 8008596:	4603      	mov	r3, r0
 8008598:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800859a:	7dfb      	ldrb	r3, [r7, #23]
 800859c:	4618      	mov	r0, r3
 800859e:	f000 f85d 	bl	800865c <USBD_Get_USB_Status>
 80085a2:	4603      	mov	r3, r0
 80085a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80085a6:	7dbb      	ldrb	r3, [r7, #22]
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3718      	adds	r7, #24
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b086      	sub	sp, #24
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	607a      	str	r2, [r7, #4]
 80085ba:	461a      	mov	r2, r3
 80085bc:	460b      	mov	r3, r1
 80085be:	72fb      	strb	r3, [r7, #11]
 80085c0:	4613      	mov	r3, r2
 80085c2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085c4:	2300      	movs	r3, #0
 80085c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085c8:	2300      	movs	r3, #0
 80085ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80085d2:	893b      	ldrh	r3, [r7, #8]
 80085d4:	7af9      	ldrb	r1, [r7, #11]
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	f7f9 fc63 	bl	8001ea2 <HAL_PCD_EP_Receive>
 80085dc:	4603      	mov	r3, r0
 80085de:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085e0:	7dfb      	ldrb	r3, [r7, #23]
 80085e2:	4618      	mov	r0, r3
 80085e4:	f000 f83a 	bl	800865c <USBD_Get_USB_Status>
 80085e8:	4603      	mov	r3, r0
 80085ea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80085ec:	7dbb      	ldrb	r3, [r7, #22]
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3718      	adds	r7, #24
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}

080085f6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085f6:	b580      	push	{r7, lr}
 80085f8:	b082      	sub	sp, #8
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	6078      	str	r0, [r7, #4]
 80085fe:	460b      	mov	r3, r1
 8008600:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008608:	78fa      	ldrb	r2, [r7, #3]
 800860a:	4611      	mov	r1, r2
 800860c:	4618      	mov	r0, r3
 800860e:	f7f9 fc85 	bl	8001f1c <HAL_PCD_EP_GetRxCount>
 8008612:	4603      	mov	r3, r0
}
 8008614:	4618      	mov	r0, r3
 8008616:	3708      	adds	r7, #8
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800861c:	b480      	push	{r7}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008624:	4b02      	ldr	r3, [pc, #8]	; (8008630 <USBD_static_malloc+0x14>)
}
 8008626:	4618      	mov	r0, r3
 8008628:	370c      	adds	r7, #12
 800862a:	46bd      	mov	sp, r7
 800862c:	bc80      	pop	{r7}
 800862e:	4770      	bx	lr
 8008630:	200004d8 	.word	0x200004d8

08008634 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008634:	b480      	push	{r7}
 8008636:	b083      	sub	sp, #12
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]

}
 800863c:	bf00      	nop
 800863e:	370c      	adds	r7, #12
 8008640:	46bd      	mov	sp, r7
 8008642:	bc80      	pop	{r7}
 8008644:	4770      	bx	lr

08008646 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008646:	b480      	push	{r7}
 8008648:	b083      	sub	sp, #12
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
 800864e:	460b      	mov	r3, r1
 8008650:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008652:	bf00      	nop
 8008654:	370c      	adds	r7, #12
 8008656:	46bd      	mov	sp, r7
 8008658:	bc80      	pop	{r7}
 800865a:	4770      	bx	lr

0800865c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800865c:	b480      	push	{r7}
 800865e:	b085      	sub	sp, #20
 8008660:	af00      	add	r7, sp, #0
 8008662:	4603      	mov	r3, r0
 8008664:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008666:	2300      	movs	r3, #0
 8008668:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800866a:	79fb      	ldrb	r3, [r7, #7]
 800866c:	2b03      	cmp	r3, #3
 800866e:	d817      	bhi.n	80086a0 <USBD_Get_USB_Status+0x44>
 8008670:	a201      	add	r2, pc, #4	; (adr r2, 8008678 <USBD_Get_USB_Status+0x1c>)
 8008672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008676:	bf00      	nop
 8008678:	08008689 	.word	0x08008689
 800867c:	0800868f 	.word	0x0800868f
 8008680:	08008695 	.word	0x08008695
 8008684:	0800869b 	.word	0x0800869b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008688:	2300      	movs	r3, #0
 800868a:	73fb      	strb	r3, [r7, #15]
    break;
 800868c:	e00b      	b.n	80086a6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800868e:	2302      	movs	r3, #2
 8008690:	73fb      	strb	r3, [r7, #15]
    break;
 8008692:	e008      	b.n	80086a6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008694:	2301      	movs	r3, #1
 8008696:	73fb      	strb	r3, [r7, #15]
    break;
 8008698:	e005      	b.n	80086a6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800869a:	2302      	movs	r3, #2
 800869c:	73fb      	strb	r3, [r7, #15]
    break;
 800869e:	e002      	b.n	80086a6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80086a0:	2302      	movs	r3, #2
 80086a2:	73fb      	strb	r3, [r7, #15]
    break;
 80086a4:	bf00      	nop
  }
  return usb_status;
 80086a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3714      	adds	r7, #20
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bc80      	pop	{r7}
 80086b0:	4770      	bx	lr
 80086b2:	bf00      	nop

080086b4 <__libc_init_array>:
 80086b4:	b570      	push	{r4, r5, r6, lr}
 80086b6:	2600      	movs	r6, #0
 80086b8:	4d0c      	ldr	r5, [pc, #48]	; (80086ec <__libc_init_array+0x38>)
 80086ba:	4c0d      	ldr	r4, [pc, #52]	; (80086f0 <__libc_init_array+0x3c>)
 80086bc:	1b64      	subs	r4, r4, r5
 80086be:	10a4      	asrs	r4, r4, #2
 80086c0:	42a6      	cmp	r6, r4
 80086c2:	d109      	bne.n	80086d8 <__libc_init_array+0x24>
 80086c4:	f001 f81c 	bl	8009700 <_init>
 80086c8:	2600      	movs	r6, #0
 80086ca:	4d0a      	ldr	r5, [pc, #40]	; (80086f4 <__libc_init_array+0x40>)
 80086cc:	4c0a      	ldr	r4, [pc, #40]	; (80086f8 <__libc_init_array+0x44>)
 80086ce:	1b64      	subs	r4, r4, r5
 80086d0:	10a4      	asrs	r4, r4, #2
 80086d2:	42a6      	cmp	r6, r4
 80086d4:	d105      	bne.n	80086e2 <__libc_init_array+0x2e>
 80086d6:	bd70      	pop	{r4, r5, r6, pc}
 80086d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80086dc:	4798      	blx	r3
 80086de:	3601      	adds	r6, #1
 80086e0:	e7ee      	b.n	80086c0 <__libc_init_array+0xc>
 80086e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80086e6:	4798      	blx	r3
 80086e8:	3601      	adds	r6, #1
 80086ea:	e7f2      	b.n	80086d2 <__libc_init_array+0x1e>
 80086ec:	0800984c 	.word	0x0800984c
 80086f0:	0800984c 	.word	0x0800984c
 80086f4:	0800984c 	.word	0x0800984c
 80086f8:	08009850 	.word	0x08009850

080086fc <memset>:
 80086fc:	4603      	mov	r3, r0
 80086fe:	4402      	add	r2, r0
 8008700:	4293      	cmp	r3, r2
 8008702:	d100      	bne.n	8008706 <memset+0xa>
 8008704:	4770      	bx	lr
 8008706:	f803 1b01 	strb.w	r1, [r3], #1
 800870a:	e7f9      	b.n	8008700 <memset+0x4>

0800870c <iprintf>:
 800870c:	b40f      	push	{r0, r1, r2, r3}
 800870e:	4b0a      	ldr	r3, [pc, #40]	; (8008738 <iprintf+0x2c>)
 8008710:	b513      	push	{r0, r1, r4, lr}
 8008712:	681c      	ldr	r4, [r3, #0]
 8008714:	b124      	cbz	r4, 8008720 <iprintf+0x14>
 8008716:	69a3      	ldr	r3, [r4, #24]
 8008718:	b913      	cbnz	r3, 8008720 <iprintf+0x14>
 800871a:	4620      	mov	r0, r4
 800871c:	f000 f87a 	bl	8008814 <__sinit>
 8008720:	ab05      	add	r3, sp, #20
 8008722:	4620      	mov	r0, r4
 8008724:	9a04      	ldr	r2, [sp, #16]
 8008726:	68a1      	ldr	r1, [r4, #8]
 8008728:	9301      	str	r3, [sp, #4]
 800872a:	f000 f995 	bl	8008a58 <_vfiprintf_r>
 800872e:	b002      	add	sp, #8
 8008730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008734:	b004      	add	sp, #16
 8008736:	4770      	bx	lr
 8008738:	20000180 	.word	0x20000180

0800873c <putchar>:
 800873c:	b538      	push	{r3, r4, r5, lr}
 800873e:	4b08      	ldr	r3, [pc, #32]	; (8008760 <putchar+0x24>)
 8008740:	4605      	mov	r5, r0
 8008742:	681c      	ldr	r4, [r3, #0]
 8008744:	b124      	cbz	r4, 8008750 <putchar+0x14>
 8008746:	69a3      	ldr	r3, [r4, #24]
 8008748:	b913      	cbnz	r3, 8008750 <putchar+0x14>
 800874a:	4620      	mov	r0, r4
 800874c:	f000 f862 	bl	8008814 <__sinit>
 8008750:	4629      	mov	r1, r5
 8008752:	4620      	mov	r0, r4
 8008754:	68a2      	ldr	r2, [r4, #8]
 8008756:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800875a:	f000 bc43 	b.w	8008fe4 <_putc_r>
 800875e:	bf00      	nop
 8008760:	20000180 	.word	0x20000180

08008764 <std>:
 8008764:	2300      	movs	r3, #0
 8008766:	b510      	push	{r4, lr}
 8008768:	4604      	mov	r4, r0
 800876a:	e9c0 3300 	strd	r3, r3, [r0]
 800876e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008772:	6083      	str	r3, [r0, #8]
 8008774:	8181      	strh	r1, [r0, #12]
 8008776:	6643      	str	r3, [r0, #100]	; 0x64
 8008778:	81c2      	strh	r2, [r0, #14]
 800877a:	6183      	str	r3, [r0, #24]
 800877c:	4619      	mov	r1, r3
 800877e:	2208      	movs	r2, #8
 8008780:	305c      	adds	r0, #92	; 0x5c
 8008782:	f7ff ffbb 	bl	80086fc <memset>
 8008786:	4b05      	ldr	r3, [pc, #20]	; (800879c <std+0x38>)
 8008788:	6224      	str	r4, [r4, #32]
 800878a:	6263      	str	r3, [r4, #36]	; 0x24
 800878c:	4b04      	ldr	r3, [pc, #16]	; (80087a0 <std+0x3c>)
 800878e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008790:	4b04      	ldr	r3, [pc, #16]	; (80087a4 <std+0x40>)
 8008792:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008794:	4b04      	ldr	r3, [pc, #16]	; (80087a8 <std+0x44>)
 8008796:	6323      	str	r3, [r4, #48]	; 0x30
 8008798:	bd10      	pop	{r4, pc}
 800879a:	bf00      	nop
 800879c:	08009095 	.word	0x08009095
 80087a0:	080090b7 	.word	0x080090b7
 80087a4:	080090ef 	.word	0x080090ef
 80087a8:	08009113 	.word	0x08009113

080087ac <_cleanup_r>:
 80087ac:	4901      	ldr	r1, [pc, #4]	; (80087b4 <_cleanup_r+0x8>)
 80087ae:	f000 b8af 	b.w	8008910 <_fwalk_reent>
 80087b2:	bf00      	nop
 80087b4:	080093ed 	.word	0x080093ed

080087b8 <__sfmoreglue>:
 80087b8:	b570      	push	{r4, r5, r6, lr}
 80087ba:	2568      	movs	r5, #104	; 0x68
 80087bc:	1e4a      	subs	r2, r1, #1
 80087be:	4355      	muls	r5, r2
 80087c0:	460e      	mov	r6, r1
 80087c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80087c6:	f000 f8c5 	bl	8008954 <_malloc_r>
 80087ca:	4604      	mov	r4, r0
 80087cc:	b140      	cbz	r0, 80087e0 <__sfmoreglue+0x28>
 80087ce:	2100      	movs	r1, #0
 80087d0:	e9c0 1600 	strd	r1, r6, [r0]
 80087d4:	300c      	adds	r0, #12
 80087d6:	60a0      	str	r0, [r4, #8]
 80087d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80087dc:	f7ff ff8e 	bl	80086fc <memset>
 80087e0:	4620      	mov	r0, r4
 80087e2:	bd70      	pop	{r4, r5, r6, pc}

080087e4 <__sfp_lock_acquire>:
 80087e4:	4801      	ldr	r0, [pc, #4]	; (80087ec <__sfp_lock_acquire+0x8>)
 80087e6:	f000 b8b3 	b.w	8008950 <__retarget_lock_acquire_recursive>
 80087ea:	bf00      	nop
 80087ec:	2000177c 	.word	0x2000177c

080087f0 <__sfp_lock_release>:
 80087f0:	4801      	ldr	r0, [pc, #4]	; (80087f8 <__sfp_lock_release+0x8>)
 80087f2:	f000 b8ae 	b.w	8008952 <__retarget_lock_release_recursive>
 80087f6:	bf00      	nop
 80087f8:	2000177c 	.word	0x2000177c

080087fc <__sinit_lock_acquire>:
 80087fc:	4801      	ldr	r0, [pc, #4]	; (8008804 <__sinit_lock_acquire+0x8>)
 80087fe:	f000 b8a7 	b.w	8008950 <__retarget_lock_acquire_recursive>
 8008802:	bf00      	nop
 8008804:	20001777 	.word	0x20001777

08008808 <__sinit_lock_release>:
 8008808:	4801      	ldr	r0, [pc, #4]	; (8008810 <__sinit_lock_release+0x8>)
 800880a:	f000 b8a2 	b.w	8008952 <__retarget_lock_release_recursive>
 800880e:	bf00      	nop
 8008810:	20001777 	.word	0x20001777

08008814 <__sinit>:
 8008814:	b510      	push	{r4, lr}
 8008816:	4604      	mov	r4, r0
 8008818:	f7ff fff0 	bl	80087fc <__sinit_lock_acquire>
 800881c:	69a3      	ldr	r3, [r4, #24]
 800881e:	b11b      	cbz	r3, 8008828 <__sinit+0x14>
 8008820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008824:	f7ff bff0 	b.w	8008808 <__sinit_lock_release>
 8008828:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800882c:	6523      	str	r3, [r4, #80]	; 0x50
 800882e:	4b13      	ldr	r3, [pc, #76]	; (800887c <__sinit+0x68>)
 8008830:	4a13      	ldr	r2, [pc, #76]	; (8008880 <__sinit+0x6c>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	62a2      	str	r2, [r4, #40]	; 0x28
 8008836:	42a3      	cmp	r3, r4
 8008838:	bf08      	it	eq
 800883a:	2301      	moveq	r3, #1
 800883c:	4620      	mov	r0, r4
 800883e:	bf08      	it	eq
 8008840:	61a3      	streq	r3, [r4, #24]
 8008842:	f000 f81f 	bl	8008884 <__sfp>
 8008846:	6060      	str	r0, [r4, #4]
 8008848:	4620      	mov	r0, r4
 800884a:	f000 f81b 	bl	8008884 <__sfp>
 800884e:	60a0      	str	r0, [r4, #8]
 8008850:	4620      	mov	r0, r4
 8008852:	f000 f817 	bl	8008884 <__sfp>
 8008856:	2200      	movs	r2, #0
 8008858:	2104      	movs	r1, #4
 800885a:	60e0      	str	r0, [r4, #12]
 800885c:	6860      	ldr	r0, [r4, #4]
 800885e:	f7ff ff81 	bl	8008764 <std>
 8008862:	2201      	movs	r2, #1
 8008864:	2109      	movs	r1, #9
 8008866:	68a0      	ldr	r0, [r4, #8]
 8008868:	f7ff ff7c 	bl	8008764 <std>
 800886c:	2202      	movs	r2, #2
 800886e:	2112      	movs	r1, #18
 8008870:	68e0      	ldr	r0, [r4, #12]
 8008872:	f7ff ff77 	bl	8008764 <std>
 8008876:	2301      	movs	r3, #1
 8008878:	61a3      	str	r3, [r4, #24]
 800887a:	e7d1      	b.n	8008820 <__sinit+0xc>
 800887c:	080097b4 	.word	0x080097b4
 8008880:	080087ad 	.word	0x080087ad

08008884 <__sfp>:
 8008884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008886:	4607      	mov	r7, r0
 8008888:	f7ff ffac 	bl	80087e4 <__sfp_lock_acquire>
 800888c:	4b1e      	ldr	r3, [pc, #120]	; (8008908 <__sfp+0x84>)
 800888e:	681e      	ldr	r6, [r3, #0]
 8008890:	69b3      	ldr	r3, [r6, #24]
 8008892:	b913      	cbnz	r3, 800889a <__sfp+0x16>
 8008894:	4630      	mov	r0, r6
 8008896:	f7ff ffbd 	bl	8008814 <__sinit>
 800889a:	3648      	adds	r6, #72	; 0x48
 800889c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80088a0:	3b01      	subs	r3, #1
 80088a2:	d503      	bpl.n	80088ac <__sfp+0x28>
 80088a4:	6833      	ldr	r3, [r6, #0]
 80088a6:	b30b      	cbz	r3, 80088ec <__sfp+0x68>
 80088a8:	6836      	ldr	r6, [r6, #0]
 80088aa:	e7f7      	b.n	800889c <__sfp+0x18>
 80088ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80088b0:	b9d5      	cbnz	r5, 80088e8 <__sfp+0x64>
 80088b2:	4b16      	ldr	r3, [pc, #88]	; (800890c <__sfp+0x88>)
 80088b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80088b8:	60e3      	str	r3, [r4, #12]
 80088ba:	6665      	str	r5, [r4, #100]	; 0x64
 80088bc:	f000 f847 	bl	800894e <__retarget_lock_init_recursive>
 80088c0:	f7ff ff96 	bl	80087f0 <__sfp_lock_release>
 80088c4:	2208      	movs	r2, #8
 80088c6:	4629      	mov	r1, r5
 80088c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80088cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80088d0:	6025      	str	r5, [r4, #0]
 80088d2:	61a5      	str	r5, [r4, #24]
 80088d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80088d8:	f7ff ff10 	bl	80086fc <memset>
 80088dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80088e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80088e4:	4620      	mov	r0, r4
 80088e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088e8:	3468      	adds	r4, #104	; 0x68
 80088ea:	e7d9      	b.n	80088a0 <__sfp+0x1c>
 80088ec:	2104      	movs	r1, #4
 80088ee:	4638      	mov	r0, r7
 80088f0:	f7ff ff62 	bl	80087b8 <__sfmoreglue>
 80088f4:	4604      	mov	r4, r0
 80088f6:	6030      	str	r0, [r6, #0]
 80088f8:	2800      	cmp	r0, #0
 80088fa:	d1d5      	bne.n	80088a8 <__sfp+0x24>
 80088fc:	f7ff ff78 	bl	80087f0 <__sfp_lock_release>
 8008900:	230c      	movs	r3, #12
 8008902:	603b      	str	r3, [r7, #0]
 8008904:	e7ee      	b.n	80088e4 <__sfp+0x60>
 8008906:	bf00      	nop
 8008908:	080097b4 	.word	0x080097b4
 800890c:	ffff0001 	.word	0xffff0001

08008910 <_fwalk_reent>:
 8008910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008914:	4606      	mov	r6, r0
 8008916:	4688      	mov	r8, r1
 8008918:	2700      	movs	r7, #0
 800891a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800891e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008922:	f1b9 0901 	subs.w	r9, r9, #1
 8008926:	d505      	bpl.n	8008934 <_fwalk_reent+0x24>
 8008928:	6824      	ldr	r4, [r4, #0]
 800892a:	2c00      	cmp	r4, #0
 800892c:	d1f7      	bne.n	800891e <_fwalk_reent+0xe>
 800892e:	4638      	mov	r0, r7
 8008930:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008934:	89ab      	ldrh	r3, [r5, #12]
 8008936:	2b01      	cmp	r3, #1
 8008938:	d907      	bls.n	800894a <_fwalk_reent+0x3a>
 800893a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800893e:	3301      	adds	r3, #1
 8008940:	d003      	beq.n	800894a <_fwalk_reent+0x3a>
 8008942:	4629      	mov	r1, r5
 8008944:	4630      	mov	r0, r6
 8008946:	47c0      	blx	r8
 8008948:	4307      	orrs	r7, r0
 800894a:	3568      	adds	r5, #104	; 0x68
 800894c:	e7e9      	b.n	8008922 <_fwalk_reent+0x12>

0800894e <__retarget_lock_init_recursive>:
 800894e:	4770      	bx	lr

08008950 <__retarget_lock_acquire_recursive>:
 8008950:	4770      	bx	lr

08008952 <__retarget_lock_release_recursive>:
 8008952:	4770      	bx	lr

08008954 <_malloc_r>:
 8008954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008956:	1ccd      	adds	r5, r1, #3
 8008958:	f025 0503 	bic.w	r5, r5, #3
 800895c:	3508      	adds	r5, #8
 800895e:	2d0c      	cmp	r5, #12
 8008960:	bf38      	it	cc
 8008962:	250c      	movcc	r5, #12
 8008964:	2d00      	cmp	r5, #0
 8008966:	4606      	mov	r6, r0
 8008968:	db01      	blt.n	800896e <_malloc_r+0x1a>
 800896a:	42a9      	cmp	r1, r5
 800896c:	d903      	bls.n	8008976 <_malloc_r+0x22>
 800896e:	230c      	movs	r3, #12
 8008970:	6033      	str	r3, [r6, #0]
 8008972:	2000      	movs	r0, #0
 8008974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008976:	f000 fdf9 	bl	800956c <__malloc_lock>
 800897a:	4921      	ldr	r1, [pc, #132]	; (8008a00 <_malloc_r+0xac>)
 800897c:	680a      	ldr	r2, [r1, #0]
 800897e:	4614      	mov	r4, r2
 8008980:	b99c      	cbnz	r4, 80089aa <_malloc_r+0x56>
 8008982:	4f20      	ldr	r7, [pc, #128]	; (8008a04 <_malloc_r+0xb0>)
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	b923      	cbnz	r3, 8008992 <_malloc_r+0x3e>
 8008988:	4621      	mov	r1, r4
 800898a:	4630      	mov	r0, r6
 800898c:	f000 fb72 	bl	8009074 <_sbrk_r>
 8008990:	6038      	str	r0, [r7, #0]
 8008992:	4629      	mov	r1, r5
 8008994:	4630      	mov	r0, r6
 8008996:	f000 fb6d 	bl	8009074 <_sbrk_r>
 800899a:	1c43      	adds	r3, r0, #1
 800899c:	d123      	bne.n	80089e6 <_malloc_r+0x92>
 800899e:	230c      	movs	r3, #12
 80089a0:	4630      	mov	r0, r6
 80089a2:	6033      	str	r3, [r6, #0]
 80089a4:	f000 fde8 	bl	8009578 <__malloc_unlock>
 80089a8:	e7e3      	b.n	8008972 <_malloc_r+0x1e>
 80089aa:	6823      	ldr	r3, [r4, #0]
 80089ac:	1b5b      	subs	r3, r3, r5
 80089ae:	d417      	bmi.n	80089e0 <_malloc_r+0x8c>
 80089b0:	2b0b      	cmp	r3, #11
 80089b2:	d903      	bls.n	80089bc <_malloc_r+0x68>
 80089b4:	6023      	str	r3, [r4, #0]
 80089b6:	441c      	add	r4, r3
 80089b8:	6025      	str	r5, [r4, #0]
 80089ba:	e004      	b.n	80089c6 <_malloc_r+0x72>
 80089bc:	6863      	ldr	r3, [r4, #4]
 80089be:	42a2      	cmp	r2, r4
 80089c0:	bf0c      	ite	eq
 80089c2:	600b      	streq	r3, [r1, #0]
 80089c4:	6053      	strne	r3, [r2, #4]
 80089c6:	4630      	mov	r0, r6
 80089c8:	f000 fdd6 	bl	8009578 <__malloc_unlock>
 80089cc:	f104 000b 	add.w	r0, r4, #11
 80089d0:	1d23      	adds	r3, r4, #4
 80089d2:	f020 0007 	bic.w	r0, r0, #7
 80089d6:	1ac2      	subs	r2, r0, r3
 80089d8:	d0cc      	beq.n	8008974 <_malloc_r+0x20>
 80089da:	1a1b      	subs	r3, r3, r0
 80089dc:	50a3      	str	r3, [r4, r2]
 80089de:	e7c9      	b.n	8008974 <_malloc_r+0x20>
 80089e0:	4622      	mov	r2, r4
 80089e2:	6864      	ldr	r4, [r4, #4]
 80089e4:	e7cc      	b.n	8008980 <_malloc_r+0x2c>
 80089e6:	1cc4      	adds	r4, r0, #3
 80089e8:	f024 0403 	bic.w	r4, r4, #3
 80089ec:	42a0      	cmp	r0, r4
 80089ee:	d0e3      	beq.n	80089b8 <_malloc_r+0x64>
 80089f0:	1a21      	subs	r1, r4, r0
 80089f2:	4630      	mov	r0, r6
 80089f4:	f000 fb3e 	bl	8009074 <_sbrk_r>
 80089f8:	3001      	adds	r0, #1
 80089fa:	d1dd      	bne.n	80089b8 <_malloc_r+0x64>
 80089fc:	e7cf      	b.n	800899e <_malloc_r+0x4a>
 80089fe:	bf00      	nop
 8008a00:	200006f8 	.word	0x200006f8
 8008a04:	200006fc 	.word	0x200006fc

08008a08 <__sfputc_r>:
 8008a08:	6893      	ldr	r3, [r2, #8]
 8008a0a:	b410      	push	{r4}
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	6093      	str	r3, [r2, #8]
 8008a12:	da07      	bge.n	8008a24 <__sfputc_r+0x1c>
 8008a14:	6994      	ldr	r4, [r2, #24]
 8008a16:	42a3      	cmp	r3, r4
 8008a18:	db01      	blt.n	8008a1e <__sfputc_r+0x16>
 8008a1a:	290a      	cmp	r1, #10
 8008a1c:	d102      	bne.n	8008a24 <__sfputc_r+0x1c>
 8008a1e:	bc10      	pop	{r4}
 8008a20:	f000 bb7c 	b.w	800911c <__swbuf_r>
 8008a24:	6813      	ldr	r3, [r2, #0]
 8008a26:	1c58      	adds	r0, r3, #1
 8008a28:	6010      	str	r0, [r2, #0]
 8008a2a:	7019      	strb	r1, [r3, #0]
 8008a2c:	4608      	mov	r0, r1
 8008a2e:	bc10      	pop	{r4}
 8008a30:	4770      	bx	lr

08008a32 <__sfputs_r>:
 8008a32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a34:	4606      	mov	r6, r0
 8008a36:	460f      	mov	r7, r1
 8008a38:	4614      	mov	r4, r2
 8008a3a:	18d5      	adds	r5, r2, r3
 8008a3c:	42ac      	cmp	r4, r5
 8008a3e:	d101      	bne.n	8008a44 <__sfputs_r+0x12>
 8008a40:	2000      	movs	r0, #0
 8008a42:	e007      	b.n	8008a54 <__sfputs_r+0x22>
 8008a44:	463a      	mov	r2, r7
 8008a46:	4630      	mov	r0, r6
 8008a48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a4c:	f7ff ffdc 	bl	8008a08 <__sfputc_r>
 8008a50:	1c43      	adds	r3, r0, #1
 8008a52:	d1f3      	bne.n	8008a3c <__sfputs_r+0xa>
 8008a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008a58 <_vfiprintf_r>:
 8008a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a5c:	460d      	mov	r5, r1
 8008a5e:	4614      	mov	r4, r2
 8008a60:	4698      	mov	r8, r3
 8008a62:	4606      	mov	r6, r0
 8008a64:	b09d      	sub	sp, #116	; 0x74
 8008a66:	b118      	cbz	r0, 8008a70 <_vfiprintf_r+0x18>
 8008a68:	6983      	ldr	r3, [r0, #24]
 8008a6a:	b90b      	cbnz	r3, 8008a70 <_vfiprintf_r+0x18>
 8008a6c:	f7ff fed2 	bl	8008814 <__sinit>
 8008a70:	4b89      	ldr	r3, [pc, #548]	; (8008c98 <_vfiprintf_r+0x240>)
 8008a72:	429d      	cmp	r5, r3
 8008a74:	d11b      	bne.n	8008aae <_vfiprintf_r+0x56>
 8008a76:	6875      	ldr	r5, [r6, #4]
 8008a78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a7a:	07d9      	lsls	r1, r3, #31
 8008a7c:	d405      	bmi.n	8008a8a <_vfiprintf_r+0x32>
 8008a7e:	89ab      	ldrh	r3, [r5, #12]
 8008a80:	059a      	lsls	r2, r3, #22
 8008a82:	d402      	bmi.n	8008a8a <_vfiprintf_r+0x32>
 8008a84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a86:	f7ff ff63 	bl	8008950 <__retarget_lock_acquire_recursive>
 8008a8a:	89ab      	ldrh	r3, [r5, #12]
 8008a8c:	071b      	lsls	r3, r3, #28
 8008a8e:	d501      	bpl.n	8008a94 <_vfiprintf_r+0x3c>
 8008a90:	692b      	ldr	r3, [r5, #16]
 8008a92:	b9eb      	cbnz	r3, 8008ad0 <_vfiprintf_r+0x78>
 8008a94:	4629      	mov	r1, r5
 8008a96:	4630      	mov	r0, r6
 8008a98:	f000 fba4 	bl	80091e4 <__swsetup_r>
 8008a9c:	b1c0      	cbz	r0, 8008ad0 <_vfiprintf_r+0x78>
 8008a9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008aa0:	07dc      	lsls	r4, r3, #31
 8008aa2:	d50e      	bpl.n	8008ac2 <_vfiprintf_r+0x6a>
 8008aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8008aa8:	b01d      	add	sp, #116	; 0x74
 8008aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aae:	4b7b      	ldr	r3, [pc, #492]	; (8008c9c <_vfiprintf_r+0x244>)
 8008ab0:	429d      	cmp	r5, r3
 8008ab2:	d101      	bne.n	8008ab8 <_vfiprintf_r+0x60>
 8008ab4:	68b5      	ldr	r5, [r6, #8]
 8008ab6:	e7df      	b.n	8008a78 <_vfiprintf_r+0x20>
 8008ab8:	4b79      	ldr	r3, [pc, #484]	; (8008ca0 <_vfiprintf_r+0x248>)
 8008aba:	429d      	cmp	r5, r3
 8008abc:	bf08      	it	eq
 8008abe:	68f5      	ldreq	r5, [r6, #12]
 8008ac0:	e7da      	b.n	8008a78 <_vfiprintf_r+0x20>
 8008ac2:	89ab      	ldrh	r3, [r5, #12]
 8008ac4:	0598      	lsls	r0, r3, #22
 8008ac6:	d4ed      	bmi.n	8008aa4 <_vfiprintf_r+0x4c>
 8008ac8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008aca:	f7ff ff42 	bl	8008952 <__retarget_lock_release_recursive>
 8008ace:	e7e9      	b.n	8008aa4 <_vfiprintf_r+0x4c>
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	9309      	str	r3, [sp, #36]	; 0x24
 8008ad4:	2320      	movs	r3, #32
 8008ad6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ada:	2330      	movs	r3, #48	; 0x30
 8008adc:	f04f 0901 	mov.w	r9, #1
 8008ae0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ae4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008ca4 <_vfiprintf_r+0x24c>
 8008ae8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008aec:	4623      	mov	r3, r4
 8008aee:	469a      	mov	sl, r3
 8008af0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008af4:	b10a      	cbz	r2, 8008afa <_vfiprintf_r+0xa2>
 8008af6:	2a25      	cmp	r2, #37	; 0x25
 8008af8:	d1f9      	bne.n	8008aee <_vfiprintf_r+0x96>
 8008afa:	ebba 0b04 	subs.w	fp, sl, r4
 8008afe:	d00b      	beq.n	8008b18 <_vfiprintf_r+0xc0>
 8008b00:	465b      	mov	r3, fp
 8008b02:	4622      	mov	r2, r4
 8008b04:	4629      	mov	r1, r5
 8008b06:	4630      	mov	r0, r6
 8008b08:	f7ff ff93 	bl	8008a32 <__sfputs_r>
 8008b0c:	3001      	adds	r0, #1
 8008b0e:	f000 80aa 	beq.w	8008c66 <_vfiprintf_r+0x20e>
 8008b12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b14:	445a      	add	r2, fp
 8008b16:	9209      	str	r2, [sp, #36]	; 0x24
 8008b18:	f89a 3000 	ldrb.w	r3, [sl]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	f000 80a2 	beq.w	8008c66 <_vfiprintf_r+0x20e>
 8008b22:	2300      	movs	r3, #0
 8008b24:	f04f 32ff 	mov.w	r2, #4294967295
 8008b28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b2c:	f10a 0a01 	add.w	sl, sl, #1
 8008b30:	9304      	str	r3, [sp, #16]
 8008b32:	9307      	str	r3, [sp, #28]
 8008b34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b38:	931a      	str	r3, [sp, #104]	; 0x68
 8008b3a:	4654      	mov	r4, sl
 8008b3c:	2205      	movs	r2, #5
 8008b3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b42:	4858      	ldr	r0, [pc, #352]	; (8008ca4 <_vfiprintf_r+0x24c>)
 8008b44:	f000 fd04 	bl	8009550 <memchr>
 8008b48:	9a04      	ldr	r2, [sp, #16]
 8008b4a:	b9d8      	cbnz	r0, 8008b84 <_vfiprintf_r+0x12c>
 8008b4c:	06d1      	lsls	r1, r2, #27
 8008b4e:	bf44      	itt	mi
 8008b50:	2320      	movmi	r3, #32
 8008b52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b56:	0713      	lsls	r3, r2, #28
 8008b58:	bf44      	itt	mi
 8008b5a:	232b      	movmi	r3, #43	; 0x2b
 8008b5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b60:	f89a 3000 	ldrb.w	r3, [sl]
 8008b64:	2b2a      	cmp	r3, #42	; 0x2a
 8008b66:	d015      	beq.n	8008b94 <_vfiprintf_r+0x13c>
 8008b68:	4654      	mov	r4, sl
 8008b6a:	2000      	movs	r0, #0
 8008b6c:	f04f 0c0a 	mov.w	ip, #10
 8008b70:	9a07      	ldr	r2, [sp, #28]
 8008b72:	4621      	mov	r1, r4
 8008b74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b78:	3b30      	subs	r3, #48	; 0x30
 8008b7a:	2b09      	cmp	r3, #9
 8008b7c:	d94e      	bls.n	8008c1c <_vfiprintf_r+0x1c4>
 8008b7e:	b1b0      	cbz	r0, 8008bae <_vfiprintf_r+0x156>
 8008b80:	9207      	str	r2, [sp, #28]
 8008b82:	e014      	b.n	8008bae <_vfiprintf_r+0x156>
 8008b84:	eba0 0308 	sub.w	r3, r0, r8
 8008b88:	fa09 f303 	lsl.w	r3, r9, r3
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	46a2      	mov	sl, r4
 8008b90:	9304      	str	r3, [sp, #16]
 8008b92:	e7d2      	b.n	8008b3a <_vfiprintf_r+0xe2>
 8008b94:	9b03      	ldr	r3, [sp, #12]
 8008b96:	1d19      	adds	r1, r3, #4
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	9103      	str	r1, [sp, #12]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	bfbb      	ittet	lt
 8008ba0:	425b      	neglt	r3, r3
 8008ba2:	f042 0202 	orrlt.w	r2, r2, #2
 8008ba6:	9307      	strge	r3, [sp, #28]
 8008ba8:	9307      	strlt	r3, [sp, #28]
 8008baa:	bfb8      	it	lt
 8008bac:	9204      	strlt	r2, [sp, #16]
 8008bae:	7823      	ldrb	r3, [r4, #0]
 8008bb0:	2b2e      	cmp	r3, #46	; 0x2e
 8008bb2:	d10c      	bne.n	8008bce <_vfiprintf_r+0x176>
 8008bb4:	7863      	ldrb	r3, [r4, #1]
 8008bb6:	2b2a      	cmp	r3, #42	; 0x2a
 8008bb8:	d135      	bne.n	8008c26 <_vfiprintf_r+0x1ce>
 8008bba:	9b03      	ldr	r3, [sp, #12]
 8008bbc:	3402      	adds	r4, #2
 8008bbe:	1d1a      	adds	r2, r3, #4
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	9203      	str	r2, [sp, #12]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	bfb8      	it	lt
 8008bc8:	f04f 33ff 	movlt.w	r3, #4294967295
 8008bcc:	9305      	str	r3, [sp, #20]
 8008bce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008cb4 <_vfiprintf_r+0x25c>
 8008bd2:	2203      	movs	r2, #3
 8008bd4:	4650      	mov	r0, sl
 8008bd6:	7821      	ldrb	r1, [r4, #0]
 8008bd8:	f000 fcba 	bl	8009550 <memchr>
 8008bdc:	b140      	cbz	r0, 8008bf0 <_vfiprintf_r+0x198>
 8008bde:	2340      	movs	r3, #64	; 0x40
 8008be0:	eba0 000a 	sub.w	r0, r0, sl
 8008be4:	fa03 f000 	lsl.w	r0, r3, r0
 8008be8:	9b04      	ldr	r3, [sp, #16]
 8008bea:	3401      	adds	r4, #1
 8008bec:	4303      	orrs	r3, r0
 8008bee:	9304      	str	r3, [sp, #16]
 8008bf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bf4:	2206      	movs	r2, #6
 8008bf6:	482c      	ldr	r0, [pc, #176]	; (8008ca8 <_vfiprintf_r+0x250>)
 8008bf8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008bfc:	f000 fca8 	bl	8009550 <memchr>
 8008c00:	2800      	cmp	r0, #0
 8008c02:	d03f      	beq.n	8008c84 <_vfiprintf_r+0x22c>
 8008c04:	4b29      	ldr	r3, [pc, #164]	; (8008cac <_vfiprintf_r+0x254>)
 8008c06:	bb1b      	cbnz	r3, 8008c50 <_vfiprintf_r+0x1f8>
 8008c08:	9b03      	ldr	r3, [sp, #12]
 8008c0a:	3307      	adds	r3, #7
 8008c0c:	f023 0307 	bic.w	r3, r3, #7
 8008c10:	3308      	adds	r3, #8
 8008c12:	9303      	str	r3, [sp, #12]
 8008c14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c16:	443b      	add	r3, r7
 8008c18:	9309      	str	r3, [sp, #36]	; 0x24
 8008c1a:	e767      	b.n	8008aec <_vfiprintf_r+0x94>
 8008c1c:	460c      	mov	r4, r1
 8008c1e:	2001      	movs	r0, #1
 8008c20:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c24:	e7a5      	b.n	8008b72 <_vfiprintf_r+0x11a>
 8008c26:	2300      	movs	r3, #0
 8008c28:	f04f 0c0a 	mov.w	ip, #10
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	3401      	adds	r4, #1
 8008c30:	9305      	str	r3, [sp, #20]
 8008c32:	4620      	mov	r0, r4
 8008c34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c38:	3a30      	subs	r2, #48	; 0x30
 8008c3a:	2a09      	cmp	r2, #9
 8008c3c:	d903      	bls.n	8008c46 <_vfiprintf_r+0x1ee>
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d0c5      	beq.n	8008bce <_vfiprintf_r+0x176>
 8008c42:	9105      	str	r1, [sp, #20]
 8008c44:	e7c3      	b.n	8008bce <_vfiprintf_r+0x176>
 8008c46:	4604      	mov	r4, r0
 8008c48:	2301      	movs	r3, #1
 8008c4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c4e:	e7f0      	b.n	8008c32 <_vfiprintf_r+0x1da>
 8008c50:	ab03      	add	r3, sp, #12
 8008c52:	9300      	str	r3, [sp, #0]
 8008c54:	462a      	mov	r2, r5
 8008c56:	4630      	mov	r0, r6
 8008c58:	4b15      	ldr	r3, [pc, #84]	; (8008cb0 <_vfiprintf_r+0x258>)
 8008c5a:	a904      	add	r1, sp, #16
 8008c5c:	f3af 8000 	nop.w
 8008c60:	4607      	mov	r7, r0
 8008c62:	1c78      	adds	r0, r7, #1
 8008c64:	d1d6      	bne.n	8008c14 <_vfiprintf_r+0x1bc>
 8008c66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c68:	07d9      	lsls	r1, r3, #31
 8008c6a:	d405      	bmi.n	8008c78 <_vfiprintf_r+0x220>
 8008c6c:	89ab      	ldrh	r3, [r5, #12]
 8008c6e:	059a      	lsls	r2, r3, #22
 8008c70:	d402      	bmi.n	8008c78 <_vfiprintf_r+0x220>
 8008c72:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c74:	f7ff fe6d 	bl	8008952 <__retarget_lock_release_recursive>
 8008c78:	89ab      	ldrh	r3, [r5, #12]
 8008c7a:	065b      	lsls	r3, r3, #25
 8008c7c:	f53f af12 	bmi.w	8008aa4 <_vfiprintf_r+0x4c>
 8008c80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c82:	e711      	b.n	8008aa8 <_vfiprintf_r+0x50>
 8008c84:	ab03      	add	r3, sp, #12
 8008c86:	9300      	str	r3, [sp, #0]
 8008c88:	462a      	mov	r2, r5
 8008c8a:	4630      	mov	r0, r6
 8008c8c:	4b08      	ldr	r3, [pc, #32]	; (8008cb0 <_vfiprintf_r+0x258>)
 8008c8e:	a904      	add	r1, sp, #16
 8008c90:	f000 f882 	bl	8008d98 <_printf_i>
 8008c94:	e7e4      	b.n	8008c60 <_vfiprintf_r+0x208>
 8008c96:	bf00      	nop
 8008c98:	080097d8 	.word	0x080097d8
 8008c9c:	080097f8 	.word	0x080097f8
 8008ca0:	080097b8 	.word	0x080097b8
 8008ca4:	08009818 	.word	0x08009818
 8008ca8:	08009822 	.word	0x08009822
 8008cac:	00000000 	.word	0x00000000
 8008cb0:	08008a33 	.word	0x08008a33
 8008cb4:	0800981e 	.word	0x0800981e

08008cb8 <_printf_common>:
 8008cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cbc:	4616      	mov	r6, r2
 8008cbe:	4699      	mov	r9, r3
 8008cc0:	688a      	ldr	r2, [r1, #8]
 8008cc2:	690b      	ldr	r3, [r1, #16]
 8008cc4:	4607      	mov	r7, r0
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	bfb8      	it	lt
 8008cca:	4613      	movlt	r3, r2
 8008ccc:	6033      	str	r3, [r6, #0]
 8008cce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008cd2:	460c      	mov	r4, r1
 8008cd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008cd8:	b10a      	cbz	r2, 8008cde <_printf_common+0x26>
 8008cda:	3301      	adds	r3, #1
 8008cdc:	6033      	str	r3, [r6, #0]
 8008cde:	6823      	ldr	r3, [r4, #0]
 8008ce0:	0699      	lsls	r1, r3, #26
 8008ce2:	bf42      	ittt	mi
 8008ce4:	6833      	ldrmi	r3, [r6, #0]
 8008ce6:	3302      	addmi	r3, #2
 8008ce8:	6033      	strmi	r3, [r6, #0]
 8008cea:	6825      	ldr	r5, [r4, #0]
 8008cec:	f015 0506 	ands.w	r5, r5, #6
 8008cf0:	d106      	bne.n	8008d00 <_printf_common+0x48>
 8008cf2:	f104 0a19 	add.w	sl, r4, #25
 8008cf6:	68e3      	ldr	r3, [r4, #12]
 8008cf8:	6832      	ldr	r2, [r6, #0]
 8008cfa:	1a9b      	subs	r3, r3, r2
 8008cfc:	42ab      	cmp	r3, r5
 8008cfe:	dc28      	bgt.n	8008d52 <_printf_common+0x9a>
 8008d00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008d04:	1e13      	subs	r3, r2, #0
 8008d06:	6822      	ldr	r2, [r4, #0]
 8008d08:	bf18      	it	ne
 8008d0a:	2301      	movne	r3, #1
 8008d0c:	0692      	lsls	r2, r2, #26
 8008d0e:	d42d      	bmi.n	8008d6c <_printf_common+0xb4>
 8008d10:	4649      	mov	r1, r9
 8008d12:	4638      	mov	r0, r7
 8008d14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d18:	47c0      	blx	r8
 8008d1a:	3001      	adds	r0, #1
 8008d1c:	d020      	beq.n	8008d60 <_printf_common+0xa8>
 8008d1e:	6823      	ldr	r3, [r4, #0]
 8008d20:	68e5      	ldr	r5, [r4, #12]
 8008d22:	f003 0306 	and.w	r3, r3, #6
 8008d26:	2b04      	cmp	r3, #4
 8008d28:	bf18      	it	ne
 8008d2a:	2500      	movne	r5, #0
 8008d2c:	6832      	ldr	r2, [r6, #0]
 8008d2e:	f04f 0600 	mov.w	r6, #0
 8008d32:	68a3      	ldr	r3, [r4, #8]
 8008d34:	bf08      	it	eq
 8008d36:	1aad      	subeq	r5, r5, r2
 8008d38:	6922      	ldr	r2, [r4, #16]
 8008d3a:	bf08      	it	eq
 8008d3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d40:	4293      	cmp	r3, r2
 8008d42:	bfc4      	itt	gt
 8008d44:	1a9b      	subgt	r3, r3, r2
 8008d46:	18ed      	addgt	r5, r5, r3
 8008d48:	341a      	adds	r4, #26
 8008d4a:	42b5      	cmp	r5, r6
 8008d4c:	d11a      	bne.n	8008d84 <_printf_common+0xcc>
 8008d4e:	2000      	movs	r0, #0
 8008d50:	e008      	b.n	8008d64 <_printf_common+0xac>
 8008d52:	2301      	movs	r3, #1
 8008d54:	4652      	mov	r2, sl
 8008d56:	4649      	mov	r1, r9
 8008d58:	4638      	mov	r0, r7
 8008d5a:	47c0      	blx	r8
 8008d5c:	3001      	adds	r0, #1
 8008d5e:	d103      	bne.n	8008d68 <_printf_common+0xb0>
 8008d60:	f04f 30ff 	mov.w	r0, #4294967295
 8008d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d68:	3501      	adds	r5, #1
 8008d6a:	e7c4      	b.n	8008cf6 <_printf_common+0x3e>
 8008d6c:	2030      	movs	r0, #48	; 0x30
 8008d6e:	18e1      	adds	r1, r4, r3
 8008d70:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d74:	1c5a      	adds	r2, r3, #1
 8008d76:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d7a:	4422      	add	r2, r4
 8008d7c:	3302      	adds	r3, #2
 8008d7e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d82:	e7c5      	b.n	8008d10 <_printf_common+0x58>
 8008d84:	2301      	movs	r3, #1
 8008d86:	4622      	mov	r2, r4
 8008d88:	4649      	mov	r1, r9
 8008d8a:	4638      	mov	r0, r7
 8008d8c:	47c0      	blx	r8
 8008d8e:	3001      	adds	r0, #1
 8008d90:	d0e6      	beq.n	8008d60 <_printf_common+0xa8>
 8008d92:	3601      	adds	r6, #1
 8008d94:	e7d9      	b.n	8008d4a <_printf_common+0x92>
	...

08008d98 <_printf_i>:
 8008d98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d9c:	460c      	mov	r4, r1
 8008d9e:	7e27      	ldrb	r7, [r4, #24]
 8008da0:	4691      	mov	r9, r2
 8008da2:	2f78      	cmp	r7, #120	; 0x78
 8008da4:	4680      	mov	r8, r0
 8008da6:	469a      	mov	sl, r3
 8008da8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008daa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008dae:	d807      	bhi.n	8008dc0 <_printf_i+0x28>
 8008db0:	2f62      	cmp	r7, #98	; 0x62
 8008db2:	d80a      	bhi.n	8008dca <_printf_i+0x32>
 8008db4:	2f00      	cmp	r7, #0
 8008db6:	f000 80d9 	beq.w	8008f6c <_printf_i+0x1d4>
 8008dba:	2f58      	cmp	r7, #88	; 0x58
 8008dbc:	f000 80a4 	beq.w	8008f08 <_printf_i+0x170>
 8008dc0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008dc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008dc8:	e03a      	b.n	8008e40 <_printf_i+0xa8>
 8008dca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008dce:	2b15      	cmp	r3, #21
 8008dd0:	d8f6      	bhi.n	8008dc0 <_printf_i+0x28>
 8008dd2:	a001      	add	r0, pc, #4	; (adr r0, 8008dd8 <_printf_i+0x40>)
 8008dd4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008dd8:	08008e31 	.word	0x08008e31
 8008ddc:	08008e45 	.word	0x08008e45
 8008de0:	08008dc1 	.word	0x08008dc1
 8008de4:	08008dc1 	.word	0x08008dc1
 8008de8:	08008dc1 	.word	0x08008dc1
 8008dec:	08008dc1 	.word	0x08008dc1
 8008df0:	08008e45 	.word	0x08008e45
 8008df4:	08008dc1 	.word	0x08008dc1
 8008df8:	08008dc1 	.word	0x08008dc1
 8008dfc:	08008dc1 	.word	0x08008dc1
 8008e00:	08008dc1 	.word	0x08008dc1
 8008e04:	08008f53 	.word	0x08008f53
 8008e08:	08008e75 	.word	0x08008e75
 8008e0c:	08008f35 	.word	0x08008f35
 8008e10:	08008dc1 	.word	0x08008dc1
 8008e14:	08008dc1 	.word	0x08008dc1
 8008e18:	08008f75 	.word	0x08008f75
 8008e1c:	08008dc1 	.word	0x08008dc1
 8008e20:	08008e75 	.word	0x08008e75
 8008e24:	08008dc1 	.word	0x08008dc1
 8008e28:	08008dc1 	.word	0x08008dc1
 8008e2c:	08008f3d 	.word	0x08008f3d
 8008e30:	680b      	ldr	r3, [r1, #0]
 8008e32:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008e36:	1d1a      	adds	r2, r3, #4
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	600a      	str	r2, [r1, #0]
 8008e3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e40:	2301      	movs	r3, #1
 8008e42:	e0a4      	b.n	8008f8e <_printf_i+0x1f6>
 8008e44:	6825      	ldr	r5, [r4, #0]
 8008e46:	6808      	ldr	r0, [r1, #0]
 8008e48:	062e      	lsls	r6, r5, #24
 8008e4a:	f100 0304 	add.w	r3, r0, #4
 8008e4e:	d50a      	bpl.n	8008e66 <_printf_i+0xce>
 8008e50:	6805      	ldr	r5, [r0, #0]
 8008e52:	600b      	str	r3, [r1, #0]
 8008e54:	2d00      	cmp	r5, #0
 8008e56:	da03      	bge.n	8008e60 <_printf_i+0xc8>
 8008e58:	232d      	movs	r3, #45	; 0x2d
 8008e5a:	426d      	negs	r5, r5
 8008e5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e60:	230a      	movs	r3, #10
 8008e62:	485e      	ldr	r0, [pc, #376]	; (8008fdc <_printf_i+0x244>)
 8008e64:	e019      	b.n	8008e9a <_printf_i+0x102>
 8008e66:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008e6a:	6805      	ldr	r5, [r0, #0]
 8008e6c:	600b      	str	r3, [r1, #0]
 8008e6e:	bf18      	it	ne
 8008e70:	b22d      	sxthne	r5, r5
 8008e72:	e7ef      	b.n	8008e54 <_printf_i+0xbc>
 8008e74:	680b      	ldr	r3, [r1, #0]
 8008e76:	6825      	ldr	r5, [r4, #0]
 8008e78:	1d18      	adds	r0, r3, #4
 8008e7a:	6008      	str	r0, [r1, #0]
 8008e7c:	0628      	lsls	r0, r5, #24
 8008e7e:	d501      	bpl.n	8008e84 <_printf_i+0xec>
 8008e80:	681d      	ldr	r5, [r3, #0]
 8008e82:	e002      	b.n	8008e8a <_printf_i+0xf2>
 8008e84:	0669      	lsls	r1, r5, #25
 8008e86:	d5fb      	bpl.n	8008e80 <_printf_i+0xe8>
 8008e88:	881d      	ldrh	r5, [r3, #0]
 8008e8a:	2f6f      	cmp	r7, #111	; 0x6f
 8008e8c:	bf0c      	ite	eq
 8008e8e:	2308      	moveq	r3, #8
 8008e90:	230a      	movne	r3, #10
 8008e92:	4852      	ldr	r0, [pc, #328]	; (8008fdc <_printf_i+0x244>)
 8008e94:	2100      	movs	r1, #0
 8008e96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e9a:	6866      	ldr	r6, [r4, #4]
 8008e9c:	2e00      	cmp	r6, #0
 8008e9e:	bfa8      	it	ge
 8008ea0:	6821      	ldrge	r1, [r4, #0]
 8008ea2:	60a6      	str	r6, [r4, #8]
 8008ea4:	bfa4      	itt	ge
 8008ea6:	f021 0104 	bicge.w	r1, r1, #4
 8008eaa:	6021      	strge	r1, [r4, #0]
 8008eac:	b90d      	cbnz	r5, 8008eb2 <_printf_i+0x11a>
 8008eae:	2e00      	cmp	r6, #0
 8008eb0:	d04d      	beq.n	8008f4e <_printf_i+0x1b6>
 8008eb2:	4616      	mov	r6, r2
 8008eb4:	fbb5 f1f3 	udiv	r1, r5, r3
 8008eb8:	fb03 5711 	mls	r7, r3, r1, r5
 8008ebc:	5dc7      	ldrb	r7, [r0, r7]
 8008ebe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008ec2:	462f      	mov	r7, r5
 8008ec4:	42bb      	cmp	r3, r7
 8008ec6:	460d      	mov	r5, r1
 8008ec8:	d9f4      	bls.n	8008eb4 <_printf_i+0x11c>
 8008eca:	2b08      	cmp	r3, #8
 8008ecc:	d10b      	bne.n	8008ee6 <_printf_i+0x14e>
 8008ece:	6823      	ldr	r3, [r4, #0]
 8008ed0:	07df      	lsls	r7, r3, #31
 8008ed2:	d508      	bpl.n	8008ee6 <_printf_i+0x14e>
 8008ed4:	6923      	ldr	r3, [r4, #16]
 8008ed6:	6861      	ldr	r1, [r4, #4]
 8008ed8:	4299      	cmp	r1, r3
 8008eda:	bfde      	ittt	le
 8008edc:	2330      	movle	r3, #48	; 0x30
 8008ede:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008ee2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008ee6:	1b92      	subs	r2, r2, r6
 8008ee8:	6122      	str	r2, [r4, #16]
 8008eea:	464b      	mov	r3, r9
 8008eec:	4621      	mov	r1, r4
 8008eee:	4640      	mov	r0, r8
 8008ef0:	f8cd a000 	str.w	sl, [sp]
 8008ef4:	aa03      	add	r2, sp, #12
 8008ef6:	f7ff fedf 	bl	8008cb8 <_printf_common>
 8008efa:	3001      	adds	r0, #1
 8008efc:	d14c      	bne.n	8008f98 <_printf_i+0x200>
 8008efe:	f04f 30ff 	mov.w	r0, #4294967295
 8008f02:	b004      	add	sp, #16
 8008f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f08:	4834      	ldr	r0, [pc, #208]	; (8008fdc <_printf_i+0x244>)
 8008f0a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008f0e:	680e      	ldr	r6, [r1, #0]
 8008f10:	6823      	ldr	r3, [r4, #0]
 8008f12:	f856 5b04 	ldr.w	r5, [r6], #4
 8008f16:	061f      	lsls	r7, r3, #24
 8008f18:	600e      	str	r6, [r1, #0]
 8008f1a:	d514      	bpl.n	8008f46 <_printf_i+0x1ae>
 8008f1c:	07d9      	lsls	r1, r3, #31
 8008f1e:	bf44      	itt	mi
 8008f20:	f043 0320 	orrmi.w	r3, r3, #32
 8008f24:	6023      	strmi	r3, [r4, #0]
 8008f26:	b91d      	cbnz	r5, 8008f30 <_printf_i+0x198>
 8008f28:	6823      	ldr	r3, [r4, #0]
 8008f2a:	f023 0320 	bic.w	r3, r3, #32
 8008f2e:	6023      	str	r3, [r4, #0]
 8008f30:	2310      	movs	r3, #16
 8008f32:	e7af      	b.n	8008e94 <_printf_i+0xfc>
 8008f34:	6823      	ldr	r3, [r4, #0]
 8008f36:	f043 0320 	orr.w	r3, r3, #32
 8008f3a:	6023      	str	r3, [r4, #0]
 8008f3c:	2378      	movs	r3, #120	; 0x78
 8008f3e:	4828      	ldr	r0, [pc, #160]	; (8008fe0 <_printf_i+0x248>)
 8008f40:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008f44:	e7e3      	b.n	8008f0e <_printf_i+0x176>
 8008f46:	065e      	lsls	r6, r3, #25
 8008f48:	bf48      	it	mi
 8008f4a:	b2ad      	uxthmi	r5, r5
 8008f4c:	e7e6      	b.n	8008f1c <_printf_i+0x184>
 8008f4e:	4616      	mov	r6, r2
 8008f50:	e7bb      	b.n	8008eca <_printf_i+0x132>
 8008f52:	680b      	ldr	r3, [r1, #0]
 8008f54:	6826      	ldr	r6, [r4, #0]
 8008f56:	1d1d      	adds	r5, r3, #4
 8008f58:	6960      	ldr	r0, [r4, #20]
 8008f5a:	600d      	str	r5, [r1, #0]
 8008f5c:	0635      	lsls	r5, r6, #24
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	d501      	bpl.n	8008f66 <_printf_i+0x1ce>
 8008f62:	6018      	str	r0, [r3, #0]
 8008f64:	e002      	b.n	8008f6c <_printf_i+0x1d4>
 8008f66:	0671      	lsls	r1, r6, #25
 8008f68:	d5fb      	bpl.n	8008f62 <_printf_i+0x1ca>
 8008f6a:	8018      	strh	r0, [r3, #0]
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	4616      	mov	r6, r2
 8008f70:	6123      	str	r3, [r4, #16]
 8008f72:	e7ba      	b.n	8008eea <_printf_i+0x152>
 8008f74:	680b      	ldr	r3, [r1, #0]
 8008f76:	1d1a      	adds	r2, r3, #4
 8008f78:	600a      	str	r2, [r1, #0]
 8008f7a:	681e      	ldr	r6, [r3, #0]
 8008f7c:	2100      	movs	r1, #0
 8008f7e:	4630      	mov	r0, r6
 8008f80:	6862      	ldr	r2, [r4, #4]
 8008f82:	f000 fae5 	bl	8009550 <memchr>
 8008f86:	b108      	cbz	r0, 8008f8c <_printf_i+0x1f4>
 8008f88:	1b80      	subs	r0, r0, r6
 8008f8a:	6060      	str	r0, [r4, #4]
 8008f8c:	6863      	ldr	r3, [r4, #4]
 8008f8e:	6123      	str	r3, [r4, #16]
 8008f90:	2300      	movs	r3, #0
 8008f92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f96:	e7a8      	b.n	8008eea <_printf_i+0x152>
 8008f98:	4632      	mov	r2, r6
 8008f9a:	4649      	mov	r1, r9
 8008f9c:	4640      	mov	r0, r8
 8008f9e:	6923      	ldr	r3, [r4, #16]
 8008fa0:	47d0      	blx	sl
 8008fa2:	3001      	adds	r0, #1
 8008fa4:	d0ab      	beq.n	8008efe <_printf_i+0x166>
 8008fa6:	6823      	ldr	r3, [r4, #0]
 8008fa8:	079b      	lsls	r3, r3, #30
 8008faa:	d413      	bmi.n	8008fd4 <_printf_i+0x23c>
 8008fac:	68e0      	ldr	r0, [r4, #12]
 8008fae:	9b03      	ldr	r3, [sp, #12]
 8008fb0:	4298      	cmp	r0, r3
 8008fb2:	bfb8      	it	lt
 8008fb4:	4618      	movlt	r0, r3
 8008fb6:	e7a4      	b.n	8008f02 <_printf_i+0x16a>
 8008fb8:	2301      	movs	r3, #1
 8008fba:	4632      	mov	r2, r6
 8008fbc:	4649      	mov	r1, r9
 8008fbe:	4640      	mov	r0, r8
 8008fc0:	47d0      	blx	sl
 8008fc2:	3001      	adds	r0, #1
 8008fc4:	d09b      	beq.n	8008efe <_printf_i+0x166>
 8008fc6:	3501      	adds	r5, #1
 8008fc8:	68e3      	ldr	r3, [r4, #12]
 8008fca:	9903      	ldr	r1, [sp, #12]
 8008fcc:	1a5b      	subs	r3, r3, r1
 8008fce:	42ab      	cmp	r3, r5
 8008fd0:	dcf2      	bgt.n	8008fb8 <_printf_i+0x220>
 8008fd2:	e7eb      	b.n	8008fac <_printf_i+0x214>
 8008fd4:	2500      	movs	r5, #0
 8008fd6:	f104 0619 	add.w	r6, r4, #25
 8008fda:	e7f5      	b.n	8008fc8 <_printf_i+0x230>
 8008fdc:	08009829 	.word	0x08009829
 8008fe0:	0800983a 	.word	0x0800983a

08008fe4 <_putc_r>:
 8008fe4:	b570      	push	{r4, r5, r6, lr}
 8008fe6:	460d      	mov	r5, r1
 8008fe8:	4614      	mov	r4, r2
 8008fea:	4606      	mov	r6, r0
 8008fec:	b118      	cbz	r0, 8008ff6 <_putc_r+0x12>
 8008fee:	6983      	ldr	r3, [r0, #24]
 8008ff0:	b90b      	cbnz	r3, 8008ff6 <_putc_r+0x12>
 8008ff2:	f7ff fc0f 	bl	8008814 <__sinit>
 8008ff6:	4b1c      	ldr	r3, [pc, #112]	; (8009068 <_putc_r+0x84>)
 8008ff8:	429c      	cmp	r4, r3
 8008ffa:	d124      	bne.n	8009046 <_putc_r+0x62>
 8008ffc:	6874      	ldr	r4, [r6, #4]
 8008ffe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009000:	07d8      	lsls	r0, r3, #31
 8009002:	d405      	bmi.n	8009010 <_putc_r+0x2c>
 8009004:	89a3      	ldrh	r3, [r4, #12]
 8009006:	0599      	lsls	r1, r3, #22
 8009008:	d402      	bmi.n	8009010 <_putc_r+0x2c>
 800900a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800900c:	f7ff fca0 	bl	8008950 <__retarget_lock_acquire_recursive>
 8009010:	68a3      	ldr	r3, [r4, #8]
 8009012:	3b01      	subs	r3, #1
 8009014:	2b00      	cmp	r3, #0
 8009016:	60a3      	str	r3, [r4, #8]
 8009018:	da05      	bge.n	8009026 <_putc_r+0x42>
 800901a:	69a2      	ldr	r2, [r4, #24]
 800901c:	4293      	cmp	r3, r2
 800901e:	db1c      	blt.n	800905a <_putc_r+0x76>
 8009020:	b2eb      	uxtb	r3, r5
 8009022:	2b0a      	cmp	r3, #10
 8009024:	d019      	beq.n	800905a <_putc_r+0x76>
 8009026:	6823      	ldr	r3, [r4, #0]
 8009028:	1c5a      	adds	r2, r3, #1
 800902a:	6022      	str	r2, [r4, #0]
 800902c:	701d      	strb	r5, [r3, #0]
 800902e:	b2ed      	uxtb	r5, r5
 8009030:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009032:	07da      	lsls	r2, r3, #31
 8009034:	d405      	bmi.n	8009042 <_putc_r+0x5e>
 8009036:	89a3      	ldrh	r3, [r4, #12]
 8009038:	059b      	lsls	r3, r3, #22
 800903a:	d402      	bmi.n	8009042 <_putc_r+0x5e>
 800903c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800903e:	f7ff fc88 	bl	8008952 <__retarget_lock_release_recursive>
 8009042:	4628      	mov	r0, r5
 8009044:	bd70      	pop	{r4, r5, r6, pc}
 8009046:	4b09      	ldr	r3, [pc, #36]	; (800906c <_putc_r+0x88>)
 8009048:	429c      	cmp	r4, r3
 800904a:	d101      	bne.n	8009050 <_putc_r+0x6c>
 800904c:	68b4      	ldr	r4, [r6, #8]
 800904e:	e7d6      	b.n	8008ffe <_putc_r+0x1a>
 8009050:	4b07      	ldr	r3, [pc, #28]	; (8009070 <_putc_r+0x8c>)
 8009052:	429c      	cmp	r4, r3
 8009054:	bf08      	it	eq
 8009056:	68f4      	ldreq	r4, [r6, #12]
 8009058:	e7d1      	b.n	8008ffe <_putc_r+0x1a>
 800905a:	4629      	mov	r1, r5
 800905c:	4622      	mov	r2, r4
 800905e:	4630      	mov	r0, r6
 8009060:	f000 f85c 	bl	800911c <__swbuf_r>
 8009064:	4605      	mov	r5, r0
 8009066:	e7e3      	b.n	8009030 <_putc_r+0x4c>
 8009068:	080097d8 	.word	0x080097d8
 800906c:	080097f8 	.word	0x080097f8
 8009070:	080097b8 	.word	0x080097b8

08009074 <_sbrk_r>:
 8009074:	b538      	push	{r3, r4, r5, lr}
 8009076:	2300      	movs	r3, #0
 8009078:	4d05      	ldr	r5, [pc, #20]	; (8009090 <_sbrk_r+0x1c>)
 800907a:	4604      	mov	r4, r0
 800907c:	4608      	mov	r0, r1
 800907e:	602b      	str	r3, [r5, #0]
 8009080:	f000 fb28 	bl	80096d4 <_sbrk>
 8009084:	1c43      	adds	r3, r0, #1
 8009086:	d102      	bne.n	800908e <_sbrk_r+0x1a>
 8009088:	682b      	ldr	r3, [r5, #0]
 800908a:	b103      	cbz	r3, 800908e <_sbrk_r+0x1a>
 800908c:	6023      	str	r3, [r4, #0]
 800908e:	bd38      	pop	{r3, r4, r5, pc}
 8009090:	20001780 	.word	0x20001780

08009094 <__sread>:
 8009094:	b510      	push	{r4, lr}
 8009096:	460c      	mov	r4, r1
 8009098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800909c:	f000 fabe 	bl	800961c <_read_r>
 80090a0:	2800      	cmp	r0, #0
 80090a2:	bfab      	itete	ge
 80090a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80090a6:	89a3      	ldrhlt	r3, [r4, #12]
 80090a8:	181b      	addge	r3, r3, r0
 80090aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80090ae:	bfac      	ite	ge
 80090b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80090b2:	81a3      	strhlt	r3, [r4, #12]
 80090b4:	bd10      	pop	{r4, pc}

080090b6 <__swrite>:
 80090b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090ba:	461f      	mov	r7, r3
 80090bc:	898b      	ldrh	r3, [r1, #12]
 80090be:	4605      	mov	r5, r0
 80090c0:	05db      	lsls	r3, r3, #23
 80090c2:	460c      	mov	r4, r1
 80090c4:	4616      	mov	r6, r2
 80090c6:	d505      	bpl.n	80090d4 <__swrite+0x1e>
 80090c8:	2302      	movs	r3, #2
 80090ca:	2200      	movs	r2, #0
 80090cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090d0:	f000 f9c8 	bl	8009464 <_lseek_r>
 80090d4:	89a3      	ldrh	r3, [r4, #12]
 80090d6:	4632      	mov	r2, r6
 80090d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80090dc:	81a3      	strh	r3, [r4, #12]
 80090de:	4628      	mov	r0, r5
 80090e0:	463b      	mov	r3, r7
 80090e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090ea:	f000 b869 	b.w	80091c0 <_write_r>

080090ee <__sseek>:
 80090ee:	b510      	push	{r4, lr}
 80090f0:	460c      	mov	r4, r1
 80090f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090f6:	f000 f9b5 	bl	8009464 <_lseek_r>
 80090fa:	1c43      	adds	r3, r0, #1
 80090fc:	89a3      	ldrh	r3, [r4, #12]
 80090fe:	bf15      	itete	ne
 8009100:	6560      	strne	r0, [r4, #84]	; 0x54
 8009102:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009106:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800910a:	81a3      	strheq	r3, [r4, #12]
 800910c:	bf18      	it	ne
 800910e:	81a3      	strhne	r3, [r4, #12]
 8009110:	bd10      	pop	{r4, pc}

08009112 <__sclose>:
 8009112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009116:	f000 b8d3 	b.w	80092c0 <_close_r>
	...

0800911c <__swbuf_r>:
 800911c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800911e:	460e      	mov	r6, r1
 8009120:	4614      	mov	r4, r2
 8009122:	4605      	mov	r5, r0
 8009124:	b118      	cbz	r0, 800912e <__swbuf_r+0x12>
 8009126:	6983      	ldr	r3, [r0, #24]
 8009128:	b90b      	cbnz	r3, 800912e <__swbuf_r+0x12>
 800912a:	f7ff fb73 	bl	8008814 <__sinit>
 800912e:	4b21      	ldr	r3, [pc, #132]	; (80091b4 <__swbuf_r+0x98>)
 8009130:	429c      	cmp	r4, r3
 8009132:	d12b      	bne.n	800918c <__swbuf_r+0x70>
 8009134:	686c      	ldr	r4, [r5, #4]
 8009136:	69a3      	ldr	r3, [r4, #24]
 8009138:	60a3      	str	r3, [r4, #8]
 800913a:	89a3      	ldrh	r3, [r4, #12]
 800913c:	071a      	lsls	r2, r3, #28
 800913e:	d52f      	bpl.n	80091a0 <__swbuf_r+0x84>
 8009140:	6923      	ldr	r3, [r4, #16]
 8009142:	b36b      	cbz	r3, 80091a0 <__swbuf_r+0x84>
 8009144:	6923      	ldr	r3, [r4, #16]
 8009146:	6820      	ldr	r0, [r4, #0]
 8009148:	b2f6      	uxtb	r6, r6
 800914a:	1ac0      	subs	r0, r0, r3
 800914c:	6963      	ldr	r3, [r4, #20]
 800914e:	4637      	mov	r7, r6
 8009150:	4283      	cmp	r3, r0
 8009152:	dc04      	bgt.n	800915e <__swbuf_r+0x42>
 8009154:	4621      	mov	r1, r4
 8009156:	4628      	mov	r0, r5
 8009158:	f000 f948 	bl	80093ec <_fflush_r>
 800915c:	bb30      	cbnz	r0, 80091ac <__swbuf_r+0x90>
 800915e:	68a3      	ldr	r3, [r4, #8]
 8009160:	3001      	adds	r0, #1
 8009162:	3b01      	subs	r3, #1
 8009164:	60a3      	str	r3, [r4, #8]
 8009166:	6823      	ldr	r3, [r4, #0]
 8009168:	1c5a      	adds	r2, r3, #1
 800916a:	6022      	str	r2, [r4, #0]
 800916c:	701e      	strb	r6, [r3, #0]
 800916e:	6963      	ldr	r3, [r4, #20]
 8009170:	4283      	cmp	r3, r0
 8009172:	d004      	beq.n	800917e <__swbuf_r+0x62>
 8009174:	89a3      	ldrh	r3, [r4, #12]
 8009176:	07db      	lsls	r3, r3, #31
 8009178:	d506      	bpl.n	8009188 <__swbuf_r+0x6c>
 800917a:	2e0a      	cmp	r6, #10
 800917c:	d104      	bne.n	8009188 <__swbuf_r+0x6c>
 800917e:	4621      	mov	r1, r4
 8009180:	4628      	mov	r0, r5
 8009182:	f000 f933 	bl	80093ec <_fflush_r>
 8009186:	b988      	cbnz	r0, 80091ac <__swbuf_r+0x90>
 8009188:	4638      	mov	r0, r7
 800918a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800918c:	4b0a      	ldr	r3, [pc, #40]	; (80091b8 <__swbuf_r+0x9c>)
 800918e:	429c      	cmp	r4, r3
 8009190:	d101      	bne.n	8009196 <__swbuf_r+0x7a>
 8009192:	68ac      	ldr	r4, [r5, #8]
 8009194:	e7cf      	b.n	8009136 <__swbuf_r+0x1a>
 8009196:	4b09      	ldr	r3, [pc, #36]	; (80091bc <__swbuf_r+0xa0>)
 8009198:	429c      	cmp	r4, r3
 800919a:	bf08      	it	eq
 800919c:	68ec      	ldreq	r4, [r5, #12]
 800919e:	e7ca      	b.n	8009136 <__swbuf_r+0x1a>
 80091a0:	4621      	mov	r1, r4
 80091a2:	4628      	mov	r0, r5
 80091a4:	f000 f81e 	bl	80091e4 <__swsetup_r>
 80091a8:	2800      	cmp	r0, #0
 80091aa:	d0cb      	beq.n	8009144 <__swbuf_r+0x28>
 80091ac:	f04f 37ff 	mov.w	r7, #4294967295
 80091b0:	e7ea      	b.n	8009188 <__swbuf_r+0x6c>
 80091b2:	bf00      	nop
 80091b4:	080097d8 	.word	0x080097d8
 80091b8:	080097f8 	.word	0x080097f8
 80091bc:	080097b8 	.word	0x080097b8

080091c0 <_write_r>:
 80091c0:	b538      	push	{r3, r4, r5, lr}
 80091c2:	4604      	mov	r4, r0
 80091c4:	4608      	mov	r0, r1
 80091c6:	4611      	mov	r1, r2
 80091c8:	2200      	movs	r2, #0
 80091ca:	4d05      	ldr	r5, [pc, #20]	; (80091e0 <_write_r+0x20>)
 80091cc:	602a      	str	r2, [r5, #0]
 80091ce:	461a      	mov	r2, r3
 80091d0:	f000 fa8e 	bl	80096f0 <_write>
 80091d4:	1c43      	adds	r3, r0, #1
 80091d6:	d102      	bne.n	80091de <_write_r+0x1e>
 80091d8:	682b      	ldr	r3, [r5, #0]
 80091da:	b103      	cbz	r3, 80091de <_write_r+0x1e>
 80091dc:	6023      	str	r3, [r4, #0]
 80091de:	bd38      	pop	{r3, r4, r5, pc}
 80091e0:	20001780 	.word	0x20001780

080091e4 <__swsetup_r>:
 80091e4:	4b32      	ldr	r3, [pc, #200]	; (80092b0 <__swsetup_r+0xcc>)
 80091e6:	b570      	push	{r4, r5, r6, lr}
 80091e8:	681d      	ldr	r5, [r3, #0]
 80091ea:	4606      	mov	r6, r0
 80091ec:	460c      	mov	r4, r1
 80091ee:	b125      	cbz	r5, 80091fa <__swsetup_r+0x16>
 80091f0:	69ab      	ldr	r3, [r5, #24]
 80091f2:	b913      	cbnz	r3, 80091fa <__swsetup_r+0x16>
 80091f4:	4628      	mov	r0, r5
 80091f6:	f7ff fb0d 	bl	8008814 <__sinit>
 80091fa:	4b2e      	ldr	r3, [pc, #184]	; (80092b4 <__swsetup_r+0xd0>)
 80091fc:	429c      	cmp	r4, r3
 80091fe:	d10f      	bne.n	8009220 <__swsetup_r+0x3c>
 8009200:	686c      	ldr	r4, [r5, #4]
 8009202:	89a3      	ldrh	r3, [r4, #12]
 8009204:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009208:	0719      	lsls	r1, r3, #28
 800920a:	d42c      	bmi.n	8009266 <__swsetup_r+0x82>
 800920c:	06dd      	lsls	r5, r3, #27
 800920e:	d411      	bmi.n	8009234 <__swsetup_r+0x50>
 8009210:	2309      	movs	r3, #9
 8009212:	6033      	str	r3, [r6, #0]
 8009214:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009218:	f04f 30ff 	mov.w	r0, #4294967295
 800921c:	81a3      	strh	r3, [r4, #12]
 800921e:	e03e      	b.n	800929e <__swsetup_r+0xba>
 8009220:	4b25      	ldr	r3, [pc, #148]	; (80092b8 <__swsetup_r+0xd4>)
 8009222:	429c      	cmp	r4, r3
 8009224:	d101      	bne.n	800922a <__swsetup_r+0x46>
 8009226:	68ac      	ldr	r4, [r5, #8]
 8009228:	e7eb      	b.n	8009202 <__swsetup_r+0x1e>
 800922a:	4b24      	ldr	r3, [pc, #144]	; (80092bc <__swsetup_r+0xd8>)
 800922c:	429c      	cmp	r4, r3
 800922e:	bf08      	it	eq
 8009230:	68ec      	ldreq	r4, [r5, #12]
 8009232:	e7e6      	b.n	8009202 <__swsetup_r+0x1e>
 8009234:	0758      	lsls	r0, r3, #29
 8009236:	d512      	bpl.n	800925e <__swsetup_r+0x7a>
 8009238:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800923a:	b141      	cbz	r1, 800924e <__swsetup_r+0x6a>
 800923c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009240:	4299      	cmp	r1, r3
 8009242:	d002      	beq.n	800924a <__swsetup_r+0x66>
 8009244:	4630      	mov	r0, r6
 8009246:	f000 f99d 	bl	8009584 <_free_r>
 800924a:	2300      	movs	r3, #0
 800924c:	6363      	str	r3, [r4, #52]	; 0x34
 800924e:	89a3      	ldrh	r3, [r4, #12]
 8009250:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009254:	81a3      	strh	r3, [r4, #12]
 8009256:	2300      	movs	r3, #0
 8009258:	6063      	str	r3, [r4, #4]
 800925a:	6923      	ldr	r3, [r4, #16]
 800925c:	6023      	str	r3, [r4, #0]
 800925e:	89a3      	ldrh	r3, [r4, #12]
 8009260:	f043 0308 	orr.w	r3, r3, #8
 8009264:	81a3      	strh	r3, [r4, #12]
 8009266:	6923      	ldr	r3, [r4, #16]
 8009268:	b94b      	cbnz	r3, 800927e <__swsetup_r+0x9a>
 800926a:	89a3      	ldrh	r3, [r4, #12]
 800926c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009274:	d003      	beq.n	800927e <__swsetup_r+0x9a>
 8009276:	4621      	mov	r1, r4
 8009278:	4630      	mov	r0, r6
 800927a:	f000 f929 	bl	80094d0 <__smakebuf_r>
 800927e:	89a0      	ldrh	r0, [r4, #12]
 8009280:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009284:	f010 0301 	ands.w	r3, r0, #1
 8009288:	d00a      	beq.n	80092a0 <__swsetup_r+0xbc>
 800928a:	2300      	movs	r3, #0
 800928c:	60a3      	str	r3, [r4, #8]
 800928e:	6963      	ldr	r3, [r4, #20]
 8009290:	425b      	negs	r3, r3
 8009292:	61a3      	str	r3, [r4, #24]
 8009294:	6923      	ldr	r3, [r4, #16]
 8009296:	b943      	cbnz	r3, 80092aa <__swsetup_r+0xc6>
 8009298:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800929c:	d1ba      	bne.n	8009214 <__swsetup_r+0x30>
 800929e:	bd70      	pop	{r4, r5, r6, pc}
 80092a0:	0781      	lsls	r1, r0, #30
 80092a2:	bf58      	it	pl
 80092a4:	6963      	ldrpl	r3, [r4, #20]
 80092a6:	60a3      	str	r3, [r4, #8]
 80092a8:	e7f4      	b.n	8009294 <__swsetup_r+0xb0>
 80092aa:	2000      	movs	r0, #0
 80092ac:	e7f7      	b.n	800929e <__swsetup_r+0xba>
 80092ae:	bf00      	nop
 80092b0:	20000180 	.word	0x20000180
 80092b4:	080097d8 	.word	0x080097d8
 80092b8:	080097f8 	.word	0x080097f8
 80092bc:	080097b8 	.word	0x080097b8

080092c0 <_close_r>:
 80092c0:	b538      	push	{r3, r4, r5, lr}
 80092c2:	2300      	movs	r3, #0
 80092c4:	4d05      	ldr	r5, [pc, #20]	; (80092dc <_close_r+0x1c>)
 80092c6:	4604      	mov	r4, r0
 80092c8:	4608      	mov	r0, r1
 80092ca:	602b      	str	r3, [r5, #0]
 80092cc:	f000 f9da 	bl	8009684 <_close>
 80092d0:	1c43      	adds	r3, r0, #1
 80092d2:	d102      	bne.n	80092da <_close_r+0x1a>
 80092d4:	682b      	ldr	r3, [r5, #0]
 80092d6:	b103      	cbz	r3, 80092da <_close_r+0x1a>
 80092d8:	6023      	str	r3, [r4, #0]
 80092da:	bd38      	pop	{r3, r4, r5, pc}
 80092dc:	20001780 	.word	0x20001780

080092e0 <__sflush_r>:
 80092e0:	898a      	ldrh	r2, [r1, #12]
 80092e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092e6:	4605      	mov	r5, r0
 80092e8:	0710      	lsls	r0, r2, #28
 80092ea:	460c      	mov	r4, r1
 80092ec:	d458      	bmi.n	80093a0 <__sflush_r+0xc0>
 80092ee:	684b      	ldr	r3, [r1, #4]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	dc05      	bgt.n	8009300 <__sflush_r+0x20>
 80092f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	dc02      	bgt.n	8009300 <__sflush_r+0x20>
 80092fa:	2000      	movs	r0, #0
 80092fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009300:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009302:	2e00      	cmp	r6, #0
 8009304:	d0f9      	beq.n	80092fa <__sflush_r+0x1a>
 8009306:	2300      	movs	r3, #0
 8009308:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800930c:	682f      	ldr	r7, [r5, #0]
 800930e:	602b      	str	r3, [r5, #0]
 8009310:	d032      	beq.n	8009378 <__sflush_r+0x98>
 8009312:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009314:	89a3      	ldrh	r3, [r4, #12]
 8009316:	075a      	lsls	r2, r3, #29
 8009318:	d505      	bpl.n	8009326 <__sflush_r+0x46>
 800931a:	6863      	ldr	r3, [r4, #4]
 800931c:	1ac0      	subs	r0, r0, r3
 800931e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009320:	b10b      	cbz	r3, 8009326 <__sflush_r+0x46>
 8009322:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009324:	1ac0      	subs	r0, r0, r3
 8009326:	2300      	movs	r3, #0
 8009328:	4602      	mov	r2, r0
 800932a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800932c:	4628      	mov	r0, r5
 800932e:	6a21      	ldr	r1, [r4, #32]
 8009330:	47b0      	blx	r6
 8009332:	1c43      	adds	r3, r0, #1
 8009334:	89a3      	ldrh	r3, [r4, #12]
 8009336:	d106      	bne.n	8009346 <__sflush_r+0x66>
 8009338:	6829      	ldr	r1, [r5, #0]
 800933a:	291d      	cmp	r1, #29
 800933c:	d82c      	bhi.n	8009398 <__sflush_r+0xb8>
 800933e:	4a2a      	ldr	r2, [pc, #168]	; (80093e8 <__sflush_r+0x108>)
 8009340:	40ca      	lsrs	r2, r1
 8009342:	07d6      	lsls	r6, r2, #31
 8009344:	d528      	bpl.n	8009398 <__sflush_r+0xb8>
 8009346:	2200      	movs	r2, #0
 8009348:	6062      	str	r2, [r4, #4]
 800934a:	6922      	ldr	r2, [r4, #16]
 800934c:	04d9      	lsls	r1, r3, #19
 800934e:	6022      	str	r2, [r4, #0]
 8009350:	d504      	bpl.n	800935c <__sflush_r+0x7c>
 8009352:	1c42      	adds	r2, r0, #1
 8009354:	d101      	bne.n	800935a <__sflush_r+0x7a>
 8009356:	682b      	ldr	r3, [r5, #0]
 8009358:	b903      	cbnz	r3, 800935c <__sflush_r+0x7c>
 800935a:	6560      	str	r0, [r4, #84]	; 0x54
 800935c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800935e:	602f      	str	r7, [r5, #0]
 8009360:	2900      	cmp	r1, #0
 8009362:	d0ca      	beq.n	80092fa <__sflush_r+0x1a>
 8009364:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009368:	4299      	cmp	r1, r3
 800936a:	d002      	beq.n	8009372 <__sflush_r+0x92>
 800936c:	4628      	mov	r0, r5
 800936e:	f000 f909 	bl	8009584 <_free_r>
 8009372:	2000      	movs	r0, #0
 8009374:	6360      	str	r0, [r4, #52]	; 0x34
 8009376:	e7c1      	b.n	80092fc <__sflush_r+0x1c>
 8009378:	6a21      	ldr	r1, [r4, #32]
 800937a:	2301      	movs	r3, #1
 800937c:	4628      	mov	r0, r5
 800937e:	47b0      	blx	r6
 8009380:	1c41      	adds	r1, r0, #1
 8009382:	d1c7      	bne.n	8009314 <__sflush_r+0x34>
 8009384:	682b      	ldr	r3, [r5, #0]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d0c4      	beq.n	8009314 <__sflush_r+0x34>
 800938a:	2b1d      	cmp	r3, #29
 800938c:	d001      	beq.n	8009392 <__sflush_r+0xb2>
 800938e:	2b16      	cmp	r3, #22
 8009390:	d101      	bne.n	8009396 <__sflush_r+0xb6>
 8009392:	602f      	str	r7, [r5, #0]
 8009394:	e7b1      	b.n	80092fa <__sflush_r+0x1a>
 8009396:	89a3      	ldrh	r3, [r4, #12]
 8009398:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800939c:	81a3      	strh	r3, [r4, #12]
 800939e:	e7ad      	b.n	80092fc <__sflush_r+0x1c>
 80093a0:	690f      	ldr	r7, [r1, #16]
 80093a2:	2f00      	cmp	r7, #0
 80093a4:	d0a9      	beq.n	80092fa <__sflush_r+0x1a>
 80093a6:	0793      	lsls	r3, r2, #30
 80093a8:	bf18      	it	ne
 80093aa:	2300      	movne	r3, #0
 80093ac:	680e      	ldr	r6, [r1, #0]
 80093ae:	bf08      	it	eq
 80093b0:	694b      	ldreq	r3, [r1, #20]
 80093b2:	eba6 0807 	sub.w	r8, r6, r7
 80093b6:	600f      	str	r7, [r1, #0]
 80093b8:	608b      	str	r3, [r1, #8]
 80093ba:	f1b8 0f00 	cmp.w	r8, #0
 80093be:	dd9c      	ble.n	80092fa <__sflush_r+0x1a>
 80093c0:	4643      	mov	r3, r8
 80093c2:	463a      	mov	r2, r7
 80093c4:	4628      	mov	r0, r5
 80093c6:	6a21      	ldr	r1, [r4, #32]
 80093c8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80093ca:	47b0      	blx	r6
 80093cc:	2800      	cmp	r0, #0
 80093ce:	dc06      	bgt.n	80093de <__sflush_r+0xfe>
 80093d0:	89a3      	ldrh	r3, [r4, #12]
 80093d2:	f04f 30ff 	mov.w	r0, #4294967295
 80093d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093da:	81a3      	strh	r3, [r4, #12]
 80093dc:	e78e      	b.n	80092fc <__sflush_r+0x1c>
 80093de:	4407      	add	r7, r0
 80093e0:	eba8 0800 	sub.w	r8, r8, r0
 80093e4:	e7e9      	b.n	80093ba <__sflush_r+0xda>
 80093e6:	bf00      	nop
 80093e8:	20400001 	.word	0x20400001

080093ec <_fflush_r>:
 80093ec:	b538      	push	{r3, r4, r5, lr}
 80093ee:	690b      	ldr	r3, [r1, #16]
 80093f0:	4605      	mov	r5, r0
 80093f2:	460c      	mov	r4, r1
 80093f4:	b913      	cbnz	r3, 80093fc <_fflush_r+0x10>
 80093f6:	2500      	movs	r5, #0
 80093f8:	4628      	mov	r0, r5
 80093fa:	bd38      	pop	{r3, r4, r5, pc}
 80093fc:	b118      	cbz	r0, 8009406 <_fflush_r+0x1a>
 80093fe:	6983      	ldr	r3, [r0, #24]
 8009400:	b90b      	cbnz	r3, 8009406 <_fflush_r+0x1a>
 8009402:	f7ff fa07 	bl	8008814 <__sinit>
 8009406:	4b14      	ldr	r3, [pc, #80]	; (8009458 <_fflush_r+0x6c>)
 8009408:	429c      	cmp	r4, r3
 800940a:	d11b      	bne.n	8009444 <_fflush_r+0x58>
 800940c:	686c      	ldr	r4, [r5, #4]
 800940e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d0ef      	beq.n	80093f6 <_fflush_r+0xa>
 8009416:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009418:	07d0      	lsls	r0, r2, #31
 800941a:	d404      	bmi.n	8009426 <_fflush_r+0x3a>
 800941c:	0599      	lsls	r1, r3, #22
 800941e:	d402      	bmi.n	8009426 <_fflush_r+0x3a>
 8009420:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009422:	f7ff fa95 	bl	8008950 <__retarget_lock_acquire_recursive>
 8009426:	4628      	mov	r0, r5
 8009428:	4621      	mov	r1, r4
 800942a:	f7ff ff59 	bl	80092e0 <__sflush_r>
 800942e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009430:	4605      	mov	r5, r0
 8009432:	07da      	lsls	r2, r3, #31
 8009434:	d4e0      	bmi.n	80093f8 <_fflush_r+0xc>
 8009436:	89a3      	ldrh	r3, [r4, #12]
 8009438:	059b      	lsls	r3, r3, #22
 800943a:	d4dd      	bmi.n	80093f8 <_fflush_r+0xc>
 800943c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800943e:	f7ff fa88 	bl	8008952 <__retarget_lock_release_recursive>
 8009442:	e7d9      	b.n	80093f8 <_fflush_r+0xc>
 8009444:	4b05      	ldr	r3, [pc, #20]	; (800945c <_fflush_r+0x70>)
 8009446:	429c      	cmp	r4, r3
 8009448:	d101      	bne.n	800944e <_fflush_r+0x62>
 800944a:	68ac      	ldr	r4, [r5, #8]
 800944c:	e7df      	b.n	800940e <_fflush_r+0x22>
 800944e:	4b04      	ldr	r3, [pc, #16]	; (8009460 <_fflush_r+0x74>)
 8009450:	429c      	cmp	r4, r3
 8009452:	bf08      	it	eq
 8009454:	68ec      	ldreq	r4, [r5, #12]
 8009456:	e7da      	b.n	800940e <_fflush_r+0x22>
 8009458:	080097d8 	.word	0x080097d8
 800945c:	080097f8 	.word	0x080097f8
 8009460:	080097b8 	.word	0x080097b8

08009464 <_lseek_r>:
 8009464:	b538      	push	{r3, r4, r5, lr}
 8009466:	4604      	mov	r4, r0
 8009468:	4608      	mov	r0, r1
 800946a:	4611      	mov	r1, r2
 800946c:	2200      	movs	r2, #0
 800946e:	4d05      	ldr	r5, [pc, #20]	; (8009484 <_lseek_r+0x20>)
 8009470:	602a      	str	r2, [r5, #0]
 8009472:	461a      	mov	r2, r3
 8009474:	f000 f91e 	bl	80096b4 <_lseek>
 8009478:	1c43      	adds	r3, r0, #1
 800947a:	d102      	bne.n	8009482 <_lseek_r+0x1e>
 800947c:	682b      	ldr	r3, [r5, #0]
 800947e:	b103      	cbz	r3, 8009482 <_lseek_r+0x1e>
 8009480:	6023      	str	r3, [r4, #0]
 8009482:	bd38      	pop	{r3, r4, r5, pc}
 8009484:	20001780 	.word	0x20001780

08009488 <__swhatbuf_r>:
 8009488:	b570      	push	{r4, r5, r6, lr}
 800948a:	460e      	mov	r6, r1
 800948c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009490:	4614      	mov	r4, r2
 8009492:	2900      	cmp	r1, #0
 8009494:	461d      	mov	r5, r3
 8009496:	b096      	sub	sp, #88	; 0x58
 8009498:	da07      	bge.n	80094aa <__swhatbuf_r+0x22>
 800949a:	2300      	movs	r3, #0
 800949c:	602b      	str	r3, [r5, #0]
 800949e:	89b3      	ldrh	r3, [r6, #12]
 80094a0:	061a      	lsls	r2, r3, #24
 80094a2:	d410      	bmi.n	80094c6 <__swhatbuf_r+0x3e>
 80094a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094a8:	e00e      	b.n	80094c8 <__swhatbuf_r+0x40>
 80094aa:	466a      	mov	r2, sp
 80094ac:	f000 f8c8 	bl	8009640 <_fstat_r>
 80094b0:	2800      	cmp	r0, #0
 80094b2:	dbf2      	blt.n	800949a <__swhatbuf_r+0x12>
 80094b4:	9a01      	ldr	r2, [sp, #4]
 80094b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80094ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80094be:	425a      	negs	r2, r3
 80094c0:	415a      	adcs	r2, r3
 80094c2:	602a      	str	r2, [r5, #0]
 80094c4:	e7ee      	b.n	80094a4 <__swhatbuf_r+0x1c>
 80094c6:	2340      	movs	r3, #64	; 0x40
 80094c8:	2000      	movs	r0, #0
 80094ca:	6023      	str	r3, [r4, #0]
 80094cc:	b016      	add	sp, #88	; 0x58
 80094ce:	bd70      	pop	{r4, r5, r6, pc}

080094d0 <__smakebuf_r>:
 80094d0:	898b      	ldrh	r3, [r1, #12]
 80094d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80094d4:	079d      	lsls	r5, r3, #30
 80094d6:	4606      	mov	r6, r0
 80094d8:	460c      	mov	r4, r1
 80094da:	d507      	bpl.n	80094ec <__smakebuf_r+0x1c>
 80094dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80094e0:	6023      	str	r3, [r4, #0]
 80094e2:	6123      	str	r3, [r4, #16]
 80094e4:	2301      	movs	r3, #1
 80094e6:	6163      	str	r3, [r4, #20]
 80094e8:	b002      	add	sp, #8
 80094ea:	bd70      	pop	{r4, r5, r6, pc}
 80094ec:	466a      	mov	r2, sp
 80094ee:	ab01      	add	r3, sp, #4
 80094f0:	f7ff ffca 	bl	8009488 <__swhatbuf_r>
 80094f4:	9900      	ldr	r1, [sp, #0]
 80094f6:	4605      	mov	r5, r0
 80094f8:	4630      	mov	r0, r6
 80094fa:	f7ff fa2b 	bl	8008954 <_malloc_r>
 80094fe:	b948      	cbnz	r0, 8009514 <__smakebuf_r+0x44>
 8009500:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009504:	059a      	lsls	r2, r3, #22
 8009506:	d4ef      	bmi.n	80094e8 <__smakebuf_r+0x18>
 8009508:	f023 0303 	bic.w	r3, r3, #3
 800950c:	f043 0302 	orr.w	r3, r3, #2
 8009510:	81a3      	strh	r3, [r4, #12]
 8009512:	e7e3      	b.n	80094dc <__smakebuf_r+0xc>
 8009514:	4b0d      	ldr	r3, [pc, #52]	; (800954c <__smakebuf_r+0x7c>)
 8009516:	62b3      	str	r3, [r6, #40]	; 0x28
 8009518:	89a3      	ldrh	r3, [r4, #12]
 800951a:	6020      	str	r0, [r4, #0]
 800951c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009520:	81a3      	strh	r3, [r4, #12]
 8009522:	9b00      	ldr	r3, [sp, #0]
 8009524:	6120      	str	r0, [r4, #16]
 8009526:	6163      	str	r3, [r4, #20]
 8009528:	9b01      	ldr	r3, [sp, #4]
 800952a:	b15b      	cbz	r3, 8009544 <__smakebuf_r+0x74>
 800952c:	4630      	mov	r0, r6
 800952e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009532:	f000 f897 	bl	8009664 <_isatty_r>
 8009536:	b128      	cbz	r0, 8009544 <__smakebuf_r+0x74>
 8009538:	89a3      	ldrh	r3, [r4, #12]
 800953a:	f023 0303 	bic.w	r3, r3, #3
 800953e:	f043 0301 	orr.w	r3, r3, #1
 8009542:	81a3      	strh	r3, [r4, #12]
 8009544:	89a0      	ldrh	r0, [r4, #12]
 8009546:	4305      	orrs	r5, r0
 8009548:	81a5      	strh	r5, [r4, #12]
 800954a:	e7cd      	b.n	80094e8 <__smakebuf_r+0x18>
 800954c:	080087ad 	.word	0x080087ad

08009550 <memchr>:
 8009550:	4603      	mov	r3, r0
 8009552:	b510      	push	{r4, lr}
 8009554:	b2c9      	uxtb	r1, r1
 8009556:	4402      	add	r2, r0
 8009558:	4293      	cmp	r3, r2
 800955a:	4618      	mov	r0, r3
 800955c:	d101      	bne.n	8009562 <memchr+0x12>
 800955e:	2000      	movs	r0, #0
 8009560:	e003      	b.n	800956a <memchr+0x1a>
 8009562:	7804      	ldrb	r4, [r0, #0]
 8009564:	3301      	adds	r3, #1
 8009566:	428c      	cmp	r4, r1
 8009568:	d1f6      	bne.n	8009558 <memchr+0x8>
 800956a:	bd10      	pop	{r4, pc}

0800956c <__malloc_lock>:
 800956c:	4801      	ldr	r0, [pc, #4]	; (8009574 <__malloc_lock+0x8>)
 800956e:	f7ff b9ef 	b.w	8008950 <__retarget_lock_acquire_recursive>
 8009572:	bf00      	nop
 8009574:	20001778 	.word	0x20001778

08009578 <__malloc_unlock>:
 8009578:	4801      	ldr	r0, [pc, #4]	; (8009580 <__malloc_unlock+0x8>)
 800957a:	f7ff b9ea 	b.w	8008952 <__retarget_lock_release_recursive>
 800957e:	bf00      	nop
 8009580:	20001778 	.word	0x20001778

08009584 <_free_r>:
 8009584:	b538      	push	{r3, r4, r5, lr}
 8009586:	4605      	mov	r5, r0
 8009588:	2900      	cmp	r1, #0
 800958a:	d043      	beq.n	8009614 <_free_r+0x90>
 800958c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009590:	1f0c      	subs	r4, r1, #4
 8009592:	2b00      	cmp	r3, #0
 8009594:	bfb8      	it	lt
 8009596:	18e4      	addlt	r4, r4, r3
 8009598:	f7ff ffe8 	bl	800956c <__malloc_lock>
 800959c:	4a1e      	ldr	r2, [pc, #120]	; (8009618 <_free_r+0x94>)
 800959e:	6813      	ldr	r3, [r2, #0]
 80095a0:	4610      	mov	r0, r2
 80095a2:	b933      	cbnz	r3, 80095b2 <_free_r+0x2e>
 80095a4:	6063      	str	r3, [r4, #4]
 80095a6:	6014      	str	r4, [r2, #0]
 80095a8:	4628      	mov	r0, r5
 80095aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095ae:	f7ff bfe3 	b.w	8009578 <__malloc_unlock>
 80095b2:	42a3      	cmp	r3, r4
 80095b4:	d90a      	bls.n	80095cc <_free_r+0x48>
 80095b6:	6821      	ldr	r1, [r4, #0]
 80095b8:	1862      	adds	r2, r4, r1
 80095ba:	4293      	cmp	r3, r2
 80095bc:	bf01      	itttt	eq
 80095be:	681a      	ldreq	r2, [r3, #0]
 80095c0:	685b      	ldreq	r3, [r3, #4]
 80095c2:	1852      	addeq	r2, r2, r1
 80095c4:	6022      	streq	r2, [r4, #0]
 80095c6:	6063      	str	r3, [r4, #4]
 80095c8:	6004      	str	r4, [r0, #0]
 80095ca:	e7ed      	b.n	80095a8 <_free_r+0x24>
 80095cc:	461a      	mov	r2, r3
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	b10b      	cbz	r3, 80095d6 <_free_r+0x52>
 80095d2:	42a3      	cmp	r3, r4
 80095d4:	d9fa      	bls.n	80095cc <_free_r+0x48>
 80095d6:	6811      	ldr	r1, [r2, #0]
 80095d8:	1850      	adds	r0, r2, r1
 80095da:	42a0      	cmp	r0, r4
 80095dc:	d10b      	bne.n	80095f6 <_free_r+0x72>
 80095de:	6820      	ldr	r0, [r4, #0]
 80095e0:	4401      	add	r1, r0
 80095e2:	1850      	adds	r0, r2, r1
 80095e4:	4283      	cmp	r3, r0
 80095e6:	6011      	str	r1, [r2, #0]
 80095e8:	d1de      	bne.n	80095a8 <_free_r+0x24>
 80095ea:	6818      	ldr	r0, [r3, #0]
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	4401      	add	r1, r0
 80095f0:	6011      	str	r1, [r2, #0]
 80095f2:	6053      	str	r3, [r2, #4]
 80095f4:	e7d8      	b.n	80095a8 <_free_r+0x24>
 80095f6:	d902      	bls.n	80095fe <_free_r+0x7a>
 80095f8:	230c      	movs	r3, #12
 80095fa:	602b      	str	r3, [r5, #0]
 80095fc:	e7d4      	b.n	80095a8 <_free_r+0x24>
 80095fe:	6820      	ldr	r0, [r4, #0]
 8009600:	1821      	adds	r1, r4, r0
 8009602:	428b      	cmp	r3, r1
 8009604:	bf01      	itttt	eq
 8009606:	6819      	ldreq	r1, [r3, #0]
 8009608:	685b      	ldreq	r3, [r3, #4]
 800960a:	1809      	addeq	r1, r1, r0
 800960c:	6021      	streq	r1, [r4, #0]
 800960e:	6063      	str	r3, [r4, #4]
 8009610:	6054      	str	r4, [r2, #4]
 8009612:	e7c9      	b.n	80095a8 <_free_r+0x24>
 8009614:	bd38      	pop	{r3, r4, r5, pc}
 8009616:	bf00      	nop
 8009618:	200006f8 	.word	0x200006f8

0800961c <_read_r>:
 800961c:	b538      	push	{r3, r4, r5, lr}
 800961e:	4604      	mov	r4, r0
 8009620:	4608      	mov	r0, r1
 8009622:	4611      	mov	r1, r2
 8009624:	2200      	movs	r2, #0
 8009626:	4d05      	ldr	r5, [pc, #20]	; (800963c <_read_r+0x20>)
 8009628:	602a      	str	r2, [r5, #0]
 800962a:	461a      	mov	r2, r3
 800962c:	f000 f84a 	bl	80096c4 <_read>
 8009630:	1c43      	adds	r3, r0, #1
 8009632:	d102      	bne.n	800963a <_read_r+0x1e>
 8009634:	682b      	ldr	r3, [r5, #0]
 8009636:	b103      	cbz	r3, 800963a <_read_r+0x1e>
 8009638:	6023      	str	r3, [r4, #0]
 800963a:	bd38      	pop	{r3, r4, r5, pc}
 800963c:	20001780 	.word	0x20001780

08009640 <_fstat_r>:
 8009640:	b538      	push	{r3, r4, r5, lr}
 8009642:	2300      	movs	r3, #0
 8009644:	4d06      	ldr	r5, [pc, #24]	; (8009660 <_fstat_r+0x20>)
 8009646:	4604      	mov	r4, r0
 8009648:	4608      	mov	r0, r1
 800964a:	4611      	mov	r1, r2
 800964c:	602b      	str	r3, [r5, #0]
 800964e:	f000 f821 	bl	8009694 <_fstat>
 8009652:	1c43      	adds	r3, r0, #1
 8009654:	d102      	bne.n	800965c <_fstat_r+0x1c>
 8009656:	682b      	ldr	r3, [r5, #0]
 8009658:	b103      	cbz	r3, 800965c <_fstat_r+0x1c>
 800965a:	6023      	str	r3, [r4, #0]
 800965c:	bd38      	pop	{r3, r4, r5, pc}
 800965e:	bf00      	nop
 8009660:	20001780 	.word	0x20001780

08009664 <_isatty_r>:
 8009664:	b538      	push	{r3, r4, r5, lr}
 8009666:	2300      	movs	r3, #0
 8009668:	4d05      	ldr	r5, [pc, #20]	; (8009680 <_isatty_r+0x1c>)
 800966a:	4604      	mov	r4, r0
 800966c:	4608      	mov	r0, r1
 800966e:	602b      	str	r3, [r5, #0]
 8009670:	f000 f818 	bl	80096a4 <_isatty>
 8009674:	1c43      	adds	r3, r0, #1
 8009676:	d102      	bne.n	800967e <_isatty_r+0x1a>
 8009678:	682b      	ldr	r3, [r5, #0]
 800967a:	b103      	cbz	r3, 800967e <_isatty_r+0x1a>
 800967c:	6023      	str	r3, [r4, #0]
 800967e:	bd38      	pop	{r3, r4, r5, pc}
 8009680:	20001780 	.word	0x20001780

08009684 <_close>:
 8009684:	2258      	movs	r2, #88	; 0x58
 8009686:	4b02      	ldr	r3, [pc, #8]	; (8009690 <_close+0xc>)
 8009688:	f04f 30ff 	mov.w	r0, #4294967295
 800968c:	601a      	str	r2, [r3, #0]
 800968e:	4770      	bx	lr
 8009690:	20001780 	.word	0x20001780

08009694 <_fstat>:
 8009694:	2258      	movs	r2, #88	; 0x58
 8009696:	4b02      	ldr	r3, [pc, #8]	; (80096a0 <_fstat+0xc>)
 8009698:	f04f 30ff 	mov.w	r0, #4294967295
 800969c:	601a      	str	r2, [r3, #0]
 800969e:	4770      	bx	lr
 80096a0:	20001780 	.word	0x20001780

080096a4 <_isatty>:
 80096a4:	2258      	movs	r2, #88	; 0x58
 80096a6:	4b02      	ldr	r3, [pc, #8]	; (80096b0 <_isatty+0xc>)
 80096a8:	2000      	movs	r0, #0
 80096aa:	601a      	str	r2, [r3, #0]
 80096ac:	4770      	bx	lr
 80096ae:	bf00      	nop
 80096b0:	20001780 	.word	0x20001780

080096b4 <_lseek>:
 80096b4:	2258      	movs	r2, #88	; 0x58
 80096b6:	4b02      	ldr	r3, [pc, #8]	; (80096c0 <_lseek+0xc>)
 80096b8:	f04f 30ff 	mov.w	r0, #4294967295
 80096bc:	601a      	str	r2, [r3, #0]
 80096be:	4770      	bx	lr
 80096c0:	20001780 	.word	0x20001780

080096c4 <_read>:
 80096c4:	2258      	movs	r2, #88	; 0x58
 80096c6:	4b02      	ldr	r3, [pc, #8]	; (80096d0 <_read+0xc>)
 80096c8:	f04f 30ff 	mov.w	r0, #4294967295
 80096cc:	601a      	str	r2, [r3, #0]
 80096ce:	4770      	bx	lr
 80096d0:	20001780 	.word	0x20001780

080096d4 <_sbrk>:
 80096d4:	4b04      	ldr	r3, [pc, #16]	; (80096e8 <_sbrk+0x14>)
 80096d6:	4602      	mov	r2, r0
 80096d8:	6819      	ldr	r1, [r3, #0]
 80096da:	b909      	cbnz	r1, 80096e0 <_sbrk+0xc>
 80096dc:	4903      	ldr	r1, [pc, #12]	; (80096ec <_sbrk+0x18>)
 80096de:	6019      	str	r1, [r3, #0]
 80096e0:	6818      	ldr	r0, [r3, #0]
 80096e2:	4402      	add	r2, r0
 80096e4:	601a      	str	r2, [r3, #0]
 80096e6:	4770      	bx	lr
 80096e8:	20000700 	.word	0x20000700
 80096ec:	20001788 	.word	0x20001788

080096f0 <_write>:
 80096f0:	2258      	movs	r2, #88	; 0x58
 80096f2:	4b02      	ldr	r3, [pc, #8]	; (80096fc <_write+0xc>)
 80096f4:	f04f 30ff 	mov.w	r0, #4294967295
 80096f8:	601a      	str	r2, [r3, #0]
 80096fa:	4770      	bx	lr
 80096fc:	20001780 	.word	0x20001780

08009700 <_init>:
 8009700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009702:	bf00      	nop
 8009704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009706:	bc08      	pop	{r3}
 8009708:	469e      	mov	lr, r3
 800970a:	4770      	bx	lr

0800970c <_fini>:
 800970c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800970e:	bf00      	nop
 8009710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009712:	bc08      	pop	{r3}
 8009714:	469e      	mov	lr, r3
 8009716:	4770      	bx	lr


iSTM32DDSLite.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d4c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08008e58  08008e58  00018e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f8c  08008f8c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08008f8c  08008f8c  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008f8c  08008f8c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f8c  08008f8c  00018f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f90  08008f90  00018f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008f94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001558  200001e4  08009178  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000173c  08009178  0002173c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017362  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000351b  00000000  00000000  0003756f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001060  00000000  00000000  0003aa90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee8  00000000  00000000  0003baf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001adda  00000000  00000000  0003c9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f94  00000000  00000000  000577b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d560  00000000  00000000  0006b746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f8ca6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c04  00000000  00000000  000f8cfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000009c  00000000  00000000  000fd900  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000014d  00000000  00000000  000fd99c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e4 	.word	0x200001e4
 8000128:	00000000 	.word	0x00000000
 800012c:	08008e40 	.word	0x08008e40

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e8 	.word	0x200001e8
 8000148:	08008e40 	.word	0x08008e40

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000152:	f000 fc39 	bl	80009c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f8fd 	bl	8000354 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 fa2b 	bl	80005b4 <MX_GPIO_Init>
  MX_TIM1_Init();
 800015e:	f000 f953 	bl	8000408 <MX_TIM1_Init>
  MX_DMA_Init();
 8000162:	f000 f9b1 	bl	80004c8 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000166:	f007 f91f 	bl	80073a8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  /*Square wave generation and put it into aOutputWave */
  // as default wave on power up
  for (int i = 0; i < BUFFER_SIZE; ++i)
 800016a:	2300      	movs	r3, #0
 800016c:	617b      	str	r3, [r7, #20]
 800016e:	e011      	b.n	8000194 <main+0x48>
  {
	  if (i < BUFFER_SIZE/2) aOutputWave[i]=0;
 8000170:	697b      	ldr	r3, [r7, #20]
 8000172:	2bb3      	cmp	r3, #179	; 0xb3
 8000174:	dc05      	bgt.n	8000182 <main+0x36>
 8000176:	4a6a      	ldr	r2, [pc, #424]	; (8000320 <main+0x1d4>)
 8000178:	697b      	ldr	r3, [r7, #20]
 800017a:	2100      	movs	r1, #0
 800017c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000180:	e005      	b.n	800018e <main+0x42>
	  else aOutputWave[i]=0xFFFF;
 8000182:	4a67      	ldr	r2, [pc, #412]	; (8000320 <main+0x1d4>)
 8000184:	697b      	ldr	r3, [r7, #20]
 8000186:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800018a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0; i < BUFFER_SIZE; ++i)
 800018e:	697b      	ldr	r3, [r7, #20]
 8000190:	3301      	adds	r3, #1
 8000192:	617b      	str	r3, [r7, #20]
 8000194:	697b      	ldr	r3, [r7, #20]
 8000196:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800019a:	dbe9      	blt.n	8000170 <main+0x24>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800019c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001a0:	4860      	ldr	r0, [pc, #384]	; (8000324 <main+0x1d8>)
 80001a2:	f001 f9ed 	bl	8001580 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80001a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001aa:	f000 fc6f 	bl	8000a8c <HAL_Delay>
	  //  uint8_t HiMsg[] = "hello\r\n";
	    if(retWave==1)
 80001ae:	4b5e      	ldr	r3, [pc, #376]	; (8000328 <main+0x1dc>)
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	2b01      	cmp	r3, #1
 80001b4:	f040 80af 	bne.w	8000316 <main+0x1ca>
	    {
	    	// b[i] = (a[j] << 8) | a[j + 1];
	        // set point for Frequency
	    	uFrqSP = (aConfig[0] << 8) | aConfig[1];
 80001b8:	4b5c      	ldr	r3, [pc, #368]	; (800032c <main+0x1e0>)
 80001ba:	781b      	ldrb	r3, [r3, #0]
 80001bc:	021b      	lsls	r3, r3, #8
 80001be:	b21a      	sxth	r2, r3
 80001c0:	4b5a      	ldr	r3, [pc, #360]	; (800032c <main+0x1e0>)
 80001c2:	785b      	ldrb	r3, [r3, #1]
 80001c4:	b21b      	sxth	r3, r3
 80001c6:	4313      	orrs	r3, r2
 80001c8:	b21b      	sxth	r3, r3
 80001ca:	b29a      	uxth	r2, r3
 80001cc:	4b58      	ldr	r3, [pc, #352]	; (8000330 <main+0x1e4>)
 80001ce:	801a      	strh	r2, [r3, #0]
	        // set point for Amplitude
	    	VppSP = (aConfig[2] << 8) | aConfig[3];
 80001d0:	4b56      	ldr	r3, [pc, #344]	; (800032c <main+0x1e0>)
 80001d2:	789b      	ldrb	r3, [r3, #2]
 80001d4:	021b      	lsls	r3, r3, #8
 80001d6:	b21a      	sxth	r2, r3
 80001d8:	4b54      	ldr	r3, [pc, #336]	; (800032c <main+0x1e0>)
 80001da:	78db      	ldrb	r3, [r3, #3]
 80001dc:	b21b      	sxth	r3, r3
 80001de:	4313      	orrs	r3, r2
 80001e0:	b21b      	sxth	r3, r3
 80001e2:	b29a      	uxth	r2, r3
 80001e4:	4b53      	ldr	r3, [pc, #332]	; (8000334 <main+0x1e8>)
 80001e6:	801a      	strh	r2, [r3, #0]
	        // set point for Offset
	    	uOffsSP = aConfig[4];
 80001e8:	4b50      	ldr	r3, [pc, #320]	; (800032c <main+0x1e0>)
 80001ea:	791a      	ldrb	r2, [r3, #4]
 80001ec:	4b52      	ldr	r3, [pc, #328]	; (8000338 <main+0x1ec>)
 80001ee:	701a      	strb	r2, [r3, #0]
	        // set point for PWM on SQUARE Wave
	    	uPwmSP = aConfig[5];
 80001f0:	4b4e      	ldr	r3, [pc, #312]	; (800032c <main+0x1e0>)
 80001f2:	795a      	ldrb	r2, [r3, #5]
 80001f4:	4b51      	ldr	r3, [pc, #324]	; (800033c <main+0x1f0>)
 80001f6:	701a      	strb	r2, [r3, #0]
	        // Samples per wave
	    	if (eSPW != aConfig[6])
 80001f8:	4b4c      	ldr	r3, [pc, #304]	; (800032c <main+0x1e0>)
 80001fa:	799a      	ldrb	r2, [r3, #6]
 80001fc:	4b50      	ldr	r3, [pc, #320]	; (8000340 <main+0x1f4>)
 80001fe:	781b      	ldrb	r3, [r3, #0]
 8000200:	429a      	cmp	r2, r3
 8000202:	d078      	beq.n	80002f6 <main+0x1aa>
	    	{
	    		uint32_t BufLnght;
	    		HAL_DMA_Abort_IT(htim1.hdma[TIM_DMA_ID_UPDATE]);
 8000204:	4b4f      	ldr	r3, [pc, #316]	; (8000344 <main+0x1f8>)
 8000206:	6a1b      	ldr	r3, [r3, #32]
 8000208:	4618      	mov	r0, r3
 800020a:	f000 fe2b 	bl	8000e64 <HAL_DMA_Abort_IT>
	    		eSPW = aConfig[6];
 800020e:	4b47      	ldr	r3, [pc, #284]	; (800032c <main+0x1e0>)
 8000210:	799a      	ldrb	r2, [r3, #6]
 8000212:	4b4b      	ldr	r3, [pc, #300]	; (8000340 <main+0x1f4>)
 8000214:	701a      	strb	r2, [r3, #0]
	    		if (eSPW == SPW360) BufLnght = 360;
 8000216:	4b4a      	ldr	r3, [pc, #296]	; (8000340 <main+0x1f4>)
 8000218:	781b      	ldrb	r3, [r3, #0]
 800021a:	2b00      	cmp	r3, #0
 800021c:	d102      	bne.n	8000224 <main+0xd8>
 800021e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000222:	613b      	str	r3, [r7, #16]

	    		if (eSPW == SPW180)
 8000224:	4b46      	ldr	r3, [pc, #280]	; (8000340 <main+0x1f4>)
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	2b01      	cmp	r3, #1
 800022a:	d113      	bne.n	8000254 <main+0x108>
	    		{
	    			for(int i =0;i<180; ++i)
 800022c:	2300      	movs	r3, #0
 800022e:	60fb      	str	r3, [r7, #12]
 8000230:	e00b      	b.n	800024a <main+0xfe>
	    				aOutputWave[i] = aOutputWave[2*i];
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	005b      	lsls	r3, r3, #1
 8000236:	4a3a      	ldr	r2, [pc, #232]	; (8000320 <main+0x1d4>)
 8000238:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800023c:	4a38      	ldr	r2, [pc, #224]	; (8000320 <main+0x1d4>)
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	    			for(int i =0;i<180; ++i)
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	3301      	adds	r3, #1
 8000248:	60fb      	str	r3, [r7, #12]
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	2bb3      	cmp	r3, #179	; 0xb3
 800024e:	ddf0      	ble.n	8000232 <main+0xe6>
	    			BufLnght = 180;
 8000250:	23b4      	movs	r3, #180	; 0xb4
 8000252:	613b      	str	r3, [r7, #16]
	    		}

	    		if (eSPW == SPW90)
 8000254:	4b3a      	ldr	r3, [pc, #232]	; (8000340 <main+0x1f4>)
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	2b02      	cmp	r3, #2
 800025a:	d113      	bne.n	8000284 <main+0x138>
	    		{
	    			 for(int i =0;i<90; ++i)
 800025c:	2300      	movs	r3, #0
 800025e:	60bb      	str	r3, [r7, #8]
 8000260:	e00b      	b.n	800027a <main+0x12e>
	    			    aOutputWave[i] = aOutputWave[4*i];
 8000262:	68bb      	ldr	r3, [r7, #8]
 8000264:	009b      	lsls	r3, r3, #2
 8000266:	4a2e      	ldr	r2, [pc, #184]	; (8000320 <main+0x1d4>)
 8000268:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800026c:	4a2c      	ldr	r2, [pc, #176]	; (8000320 <main+0x1d4>)
 800026e:	68bb      	ldr	r3, [r7, #8]
 8000270:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	    			 for(int i =0;i<90; ++i)
 8000274:	68bb      	ldr	r3, [r7, #8]
 8000276:	3301      	adds	r3, #1
 8000278:	60bb      	str	r3, [r7, #8]
 800027a:	68bb      	ldr	r3, [r7, #8]
 800027c:	2b59      	cmp	r3, #89	; 0x59
 800027e:	ddf0      	ble.n	8000262 <main+0x116>
	    			 BufLnght = 90;
 8000280:	235a      	movs	r3, #90	; 0x5a
 8000282:	613b      	str	r3, [r7, #16]
	    		}

	    		if (eSPW == SPW45)
 8000284:	4b2e      	ldr	r3, [pc, #184]	; (8000340 <main+0x1f4>)
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	2b03      	cmp	r3, #3
 800028a:	d113      	bne.n	80002b4 <main+0x168>
	    		{
	    			 for(int i =0;i<45; ++i)
 800028c:	2300      	movs	r3, #0
 800028e:	607b      	str	r3, [r7, #4]
 8000290:	e00b      	b.n	80002aa <main+0x15e>
	    			    aOutputWave[i] = aOutputWave[8*i];
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	00db      	lsls	r3, r3, #3
 8000296:	4a22      	ldr	r2, [pc, #136]	; (8000320 <main+0x1d4>)
 8000298:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800029c:	4a20      	ldr	r2, [pc, #128]	; (8000320 <main+0x1d4>)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	    			 for(int i =0;i<45; ++i)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	3301      	adds	r3, #1
 80002a8:	607b      	str	r3, [r7, #4]
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	2b2c      	cmp	r3, #44	; 0x2c
 80002ae:	ddf0      	ble.n	8000292 <main+0x146>
	    			 BufLnght = 45;
 80002b0:	232d      	movs	r3, #45	; 0x2d
 80002b2:	613b      	str	r3, [r7, #16]
	    		}

	    		if (eSPW == SPW24)
 80002b4:	4b22      	ldr	r3, [pc, #136]	; (8000340 <main+0x1f4>)
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	2b04      	cmp	r3, #4
 80002ba:	d115      	bne.n	80002e8 <main+0x19c>
	    		{
	    			 for(int i =0;i<24; ++i)
 80002bc:	2300      	movs	r3, #0
 80002be:	603b      	str	r3, [r7, #0]
 80002c0:	e00d      	b.n	80002de <main+0x192>
	    			    aOutputWave[i] = aOutputWave[15*i];
 80002c2:	683a      	ldr	r2, [r7, #0]
 80002c4:	4613      	mov	r3, r2
 80002c6:	011b      	lsls	r3, r3, #4
 80002c8:	1a9b      	subs	r3, r3, r2
 80002ca:	4a15      	ldr	r2, [pc, #84]	; (8000320 <main+0x1d4>)
 80002cc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80002d0:	4a13      	ldr	r2, [pc, #76]	; (8000320 <main+0x1d4>)
 80002d2:	683b      	ldr	r3, [r7, #0]
 80002d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	    			 for(int i =0;i<24; ++i)
 80002d8:	683b      	ldr	r3, [r7, #0]
 80002da:	3301      	adds	r3, #1
 80002dc:	603b      	str	r3, [r7, #0]
 80002de:	683b      	ldr	r3, [r7, #0]
 80002e0:	2b17      	cmp	r3, #23
 80002e2:	ddee      	ble.n	80002c2 <main+0x176>
	    			 BufLnght = 24;
 80002e4:	2318      	movs	r3, #24
 80002e6:	613b      	str	r3, [r7, #16]
	    		}

	    		HAL_DMA_Start_IT(htim1.hdma[TIM_DMA_ID_UPDATE],(uint32_t)&aOutputWave,
 80002e8:	4b16      	ldr	r3, [pc, #88]	; (8000344 <main+0x1f8>)
 80002ea:	6a18      	ldr	r0, [r3, #32]
 80002ec:	490c      	ldr	r1, [pc, #48]	; (8000320 <main+0x1d4>)
 80002ee:	693b      	ldr	r3, [r7, #16]
 80002f0:	4a15      	ldr	r2, [pc, #84]	; (8000348 <main+0x1fc>)
 80002f2:	f000 fd57 	bl	8000da4 <HAL_DMA_Start_IT>
	    		  		(uint32_t)&GPIOB->ODR, BufLnght);

	    	}
	        // Amplification
	    	eAmpPow = aConfig[7];
 80002f6:	4b0d      	ldr	r3, [pc, #52]	; (800032c <main+0x1e0>)
 80002f8:	79da      	ldrb	r2, [r3, #7]
 80002fa:	4b14      	ldr	r3, [pc, #80]	; (800034c <main+0x200>)
 80002fc:	701a      	strb	r2, [r3, #0]

	    	TIM1->ARR = uFrqSP;
 80002fe:	4b0c      	ldr	r3, [pc, #48]	; (8000330 <main+0x1e4>)
 8000300:	881a      	ldrh	r2, [r3, #0]
 8000302:	4b13      	ldr	r3, [pc, #76]	; (8000350 <main+0x204>)
 8000304:	62da      	str	r2, [r3, #44]	; 0x2c
	    	//htim1.Init.Period = uFrqSP;
//	    	CDC_Transmit_FS(HiMsg, sizeof(HiMsg));
	    	CDC_Transmit_FS((uint8_t*)aOutputWave, 720);
 8000306:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 800030a:	4805      	ldr	r0, [pc, #20]	; (8000320 <main+0x1d4>)
 800030c:	f007 f994 	bl	8007638 <CDC_Transmit_FS>
	    	retWave =0;
 8000310:	4b05      	ldr	r3, [pc, #20]	; (8000328 <main+0x1dc>)
 8000312:	2200      	movs	r2, #0
 8000314:	701a      	strb	r2, [r3, #0]
	    }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_Delay(1000);
 8000316:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800031a:	f000 fbb7 	bl	8000a8c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800031e:	e73d      	b.n	800019c <main+0x50>
 8000320:	20000204 	.word	0x20000204
 8000324:	40011000 	.word	0x40011000
 8000328:	200004d4 	.word	0x200004d4
 800032c:	20000a64 	.word	0x20000a64
 8000330:	20000798 	.word	0x20000798
 8000334:	20000704 	.word	0x20000704
 8000338:	2000079a 	.word	0x2000079a
 800033c:	20000000 	.word	0x20000000
 8000340:	20000200 	.word	0x20000200
 8000344:	20000708 	.word	0x20000708
 8000348:	40010c0c 	.word	0x40010c0c
 800034c:	20000750 	.word	0x20000750
 8000350:	40012c00 	.word	0x40012c00

08000354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b094      	sub	sp, #80	; 0x50
 8000358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800035a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800035e:	2228      	movs	r2, #40	; 0x28
 8000360:	2100      	movs	r1, #0
 8000362:	4618      	mov	r0, r3
 8000364:	f007 fd6a 	bl	8007e3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000368:	f107 0314 	add.w	r3, r7, #20
 800036c:	2200      	movs	r2, #0
 800036e:	601a      	str	r2, [r3, #0]
 8000370:	605a      	str	r2, [r3, #4]
 8000372:	609a      	str	r2, [r3, #8]
 8000374:	60da      	str	r2, [r3, #12]
 8000376:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000378:	1d3b      	adds	r3, r7, #4
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
 800037e:	605a      	str	r2, [r3, #4]
 8000380:	609a      	str	r2, [r3, #8]
 8000382:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000384:	2301      	movs	r3, #1
 8000386:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000388:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800038c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800038e:	2300      	movs	r3, #0
 8000390:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000392:	2301      	movs	r3, #1
 8000394:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000396:	2302      	movs	r3, #2
 8000398:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800039a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800039e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003a0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003aa:	4618      	mov	r0, r3
 80003ac:	f002 fcb6 	bl	8002d1c <HAL_RCC_OscConfig>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <SystemClock_Config+0x66>
  {
    Error_Handler();
 80003b6:	f000 fa09 	bl	80007cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ba:	230f      	movs	r3, #15
 80003bc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003be:	2302      	movs	r3, #2
 80003c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c2:	2300      	movs	r3, #0
 80003c4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003ca:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003cc:	2300      	movs	r3, #0
 80003ce:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003d0:	f107 0314 	add.w	r3, r7, #20
 80003d4:	2102      	movs	r1, #2
 80003d6:	4618      	mov	r0, r3
 80003d8:	f002 ff20 	bl	800321c <HAL_RCC_ClockConfig>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80003e2:	f000 f9f3 	bl	80007cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80003e6:	2310      	movs	r3, #16
 80003e8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80003ea:	2300      	movs	r3, #0
 80003ec:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003ee:	1d3b      	adds	r3, r7, #4
 80003f0:	4618      	mov	r0, r3
 80003f2:	f003 f87b 	bl	80034ec <HAL_RCCEx_PeriphCLKConfig>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80003fc:	f000 f9e6 	bl	80007cc <Error_Handler>
  }
}
 8000400:	bf00      	nop
 8000402:	3750      	adds	r7, #80	; 0x50
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}

08000408 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b088      	sub	sp, #32
 800040c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800040e:	f107 0310 	add.w	r3, r7, #16
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	605a      	str	r2, [r3, #4]
 8000418:	609a      	str	r2, [r3, #8]
 800041a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800041c:	f107 0308 	add.w	r3, r7, #8
 8000420:	2200      	movs	r2, #0
 8000422:	601a      	str	r2, [r3, #0]
 8000424:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */
	__HAL_RCC_TIM1_CLK_ENABLE();
 8000426:	4b25      	ldr	r3, [pc, #148]	; (80004bc <MX_TIM1_Init+0xb4>)
 8000428:	699b      	ldr	r3, [r3, #24]
 800042a:	4a24      	ldr	r2, [pc, #144]	; (80004bc <MX_TIM1_Init+0xb4>)
 800042c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000430:	6193      	str	r3, [r2, #24]
 8000432:	4b22      	ldr	r3, [pc, #136]	; (80004bc <MX_TIM1_Init+0xb4>)
 8000434:	699b      	ldr	r3, [r3, #24]
 8000436:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800043a:	607b      	str	r3, [r7, #4]
 800043c:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800043e:	4b20      	ldr	r3, [pc, #128]	; (80004c0 <MX_TIM1_Init+0xb8>)
 8000440:	4a20      	ldr	r2, [pc, #128]	; (80004c4 <MX_TIM1_Init+0xbc>)
 8000442:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0; // 1000;
 8000444:	4b1e      	ldr	r3, [pc, #120]	; (80004c0 <MX_TIM1_Init+0xb8>)
 8000446:	2200      	movs	r2, #0
 8000448:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800044a:	4b1d      	ldr	r3, [pc, #116]	; (80004c0 <MX_TIM1_Init+0xb8>)
 800044c:	2200      	movs	r2, #0
 800044e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100; //7-65535;
 8000450:	4b1b      	ldr	r3, [pc, #108]	; (80004c0 <MX_TIM1_Init+0xb8>)
 8000452:	2264      	movs	r2, #100	; 0x64
 8000454:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000456:	4b1a      	ldr	r3, [pc, #104]	; (80004c0 <MX_TIM1_Init+0xb8>)
 8000458:	2200      	movs	r2, #0
 800045a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800045c:	4b18      	ldr	r3, [pc, #96]	; (80004c0 <MX_TIM1_Init+0xb8>)
 800045e:	2200      	movs	r2, #0
 8000460:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000462:	4b17      	ldr	r3, [pc, #92]	; (80004c0 <MX_TIM1_Init+0xb8>)
 8000464:	2200      	movs	r2, #0
 8000466:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000468:	4815      	ldr	r0, [pc, #84]	; (80004c0 <MX_TIM1_Init+0xb8>)
 800046a:	f003 f8f5 	bl	8003658 <HAL_TIM_Base_Init>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8000474:	f000 f9aa 	bl	80007cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000478:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800047c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800047e:	f107 0310 	add.w	r3, r7, #16
 8000482:	4619      	mov	r1, r3
 8000484:	480e      	ldr	r0, [pc, #56]	; (80004c0 <MX_TIM1_Init+0xb8>)
 8000486:	f003 f936 	bl	80036f6 <HAL_TIM_ConfigClockSource>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d001      	beq.n	8000494 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8000490:	f000 f99c 	bl	80007cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000494:	2300      	movs	r3, #0
 8000496:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000498:	2300      	movs	r3, #0
 800049a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800049c:	f107 0308 	add.w	r3, r7, #8
 80004a0:	4619      	mov	r1, r3
 80004a2:	4807      	ldr	r0, [pc, #28]	; (80004c0 <MX_TIM1_Init+0xb8>)
 80004a4:	f003 fae4 	bl	8003a70 <HAL_TIMEx_MasterConfigSynchronization>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 80004ae:	f000 f98d 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80004b2:	bf00      	nop
 80004b4:	3720      	adds	r7, #32
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	40021000 	.word	0x40021000
 80004c0:	20000708 	.word	0x20000708
 80004c4:	40012c00 	.word	0x40012c00

080004c8 <MX_DMA_Init>:

static void MX_DMA_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004ce:	4b31      	ldr	r3, [pc, #196]	; (8000594 <MX_DMA_Init+0xcc>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	4a30      	ldr	r2, [pc, #192]	; (8000594 <MX_DMA_Init+0xcc>)
 80004d4:	f043 0301 	orr.w	r3, r3, #1
 80004d8:	6153      	str	r3, [r2, #20]
 80004da:	4b2e      	ldr	r3, [pc, #184]	; (8000594 <MX_DMA_Init+0xcc>)
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	f003 0301 	and.w	r3, r3, #1
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]
  /* DMA configuration */
  hdma_tim1_up.Instance = DMA1_Channel5;
 80004e6:	4b2c      	ldr	r3, [pc, #176]	; (8000598 <MX_DMA_Init+0xd0>)
 80004e8:	4a2c      	ldr	r2, [pc, #176]	; (800059c <MX_DMA_Init+0xd4>)
 80004ea:	601a      	str	r2, [r3, #0]
  hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80004ec:	4b2a      	ldr	r3, [pc, #168]	; (8000598 <MX_DMA_Init+0xd0>)
 80004ee:	2210      	movs	r2, #16
 80004f0:	605a      	str	r2, [r3, #4]
  hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80004f2:	4b29      	ldr	r3, [pc, #164]	; (8000598 <MX_DMA_Init+0xd0>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	609a      	str	r2, [r3, #8]
  hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 80004f8:	4b27      	ldr	r3, [pc, #156]	; (8000598 <MX_DMA_Init+0xd0>)
 80004fa:	2280      	movs	r2, #128	; 0x80
 80004fc:	60da      	str	r2, [r3, #12]
  hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD; // 16 bits
 80004fe:	4b26      	ldr	r3, [pc, #152]	; (8000598 <MX_DMA_Init+0xd0>)
 8000500:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000504:	611a      	str	r2, [r3, #16]
  hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000506:	4b24      	ldr	r3, [pc, #144]	; (8000598 <MX_DMA_Init+0xd0>)
 8000508:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800050c:	615a      	str	r2, [r3, #20]
  hdma_tim1_up.Init.Mode = DMA_CIRCULAR;//DMA_NORMAL;
 800050e:	4b22      	ldr	r3, [pc, #136]	; (8000598 <MX_DMA_Init+0xd0>)
 8000510:	2220      	movs	r2, #32
 8000512:	619a      	str	r2, [r3, #24]
  hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 8000514:	4b20      	ldr	r3, [pc, #128]	; (8000598 <MX_DMA_Init+0xd0>)
 8000516:	2200      	movs	r2, #0
 8000518:	61da      	str	r2, [r3, #28]
  HAL_DMA_Init(&hdma_tim1_up);
 800051a:	481f      	ldr	r0, [pc, #124]	; (8000598 <MX_DMA_Init+0xd0>)
 800051c:	f000 fbe8 	bl	8000cf0 <HAL_DMA_Init>
//  __HAL_DMA1_REMAP(HAL_DMA1_CH3_TIM6_UP);
  __HAL_LINKDMA(&htim1,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8000520:	4b1f      	ldr	r3, [pc, #124]	; (80005a0 <MX_DMA_Init+0xd8>)
 8000522:	4a1d      	ldr	r2, [pc, #116]	; (8000598 <MX_DMA_Init+0xd0>)
 8000524:	621a      	str	r2, [r3, #32]
 8000526:	4b1c      	ldr	r3, [pc, #112]	; (8000598 <MX_DMA_Init+0xd0>)
 8000528:	4a1d      	ldr	r2, [pc, #116]	; (80005a0 <MX_DMA_Init+0xd8>)
 800052a:	625a      	str	r2, [r3, #36]	; 0x24
  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800052c:	2200      	movs	r2, #0
 800052e:	2100      	movs	r1, #0
 8000530:	200f      	movs	r0, #15
 8000532:	f000 fba6 	bl	8000c82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000536:	200f      	movs	r0, #15
 8000538:	f000 fbbf 	bl	8000cba <HAL_NVIC_EnableIRQ>
  /* Select Callbacks functions called after Transfer complete and Transfer error */
  HAL_DMA_RegisterCallback(&hdma_tim1_up, HAL_DMA_XFER_CPLT_CB_ID, TransferComplete);
 800053c:	4a19      	ldr	r2, [pc, #100]	; (80005a4 <MX_DMA_Init+0xdc>)
 800053e:	2100      	movs	r1, #0
 8000540:	4815      	ldr	r0, [pc, #84]	; (8000598 <MX_DMA_Init+0xd0>)
 8000542:	f000 fe0b 	bl	800115c <HAL_DMA_RegisterCallback>
  HAL_DMA_RegisterCallback(&hdma_tim1_up, HAL_DMA_XFER_ERROR_CB_ID, TransferError);
 8000546:	4a18      	ldr	r2, [pc, #96]	; (80005a8 <MX_DMA_Init+0xe0>)
 8000548:	2102      	movs	r1, #2
 800054a:	4813      	ldr	r0, [pc, #76]	; (8000598 <MX_DMA_Init+0xd0>)
 800054c:	f000 fe06 	bl	800115c <HAL_DMA_RegisterCallback>
  /* (Callbacks for DMA IRQs) */
//  htim1->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = data_tramsmitted_handler;
//  htim1->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = transmit_error_handler;
  /*  (Enable DMA) */
  HAL_DMA_Start_IT(htim1.hdma[TIM_DMA_ID_UPDATE],(uint32_t)&aOutputWave,
 8000550:	4b13      	ldr	r3, [pc, #76]	; (80005a0 <MX_DMA_Init+0xd8>)
 8000552:	6a18      	ldr	r0, [r3, #32]
 8000554:	4915      	ldr	r1, [pc, #84]	; (80005ac <MX_DMA_Init+0xe4>)
 8000556:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800055a:	4a15      	ldr	r2, [pc, #84]	; (80005b0 <MX_DMA_Init+0xe8>)
 800055c:	f000 fc22 	bl	8000da4 <HAL_DMA_Start_IT>
  		(uint32_t)&GPIOB->ODR, BUFFER_SIZE);
  /*  (Enable TIM for DMA events) */
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8000560:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <MX_DMA_Init+0xd8>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	68da      	ldr	r2, [r3, #12]
 8000566:	4b0e      	ldr	r3, [pc, #56]	; (80005a0 <MX_DMA_Init+0xd8>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800056e:	60da      	str	r2, [r3, #12]

  /*  (Run TIM) */
  __HAL_TIM_ENABLE(&htim1);
 8000570:	4b0b      	ldr	r3, [pc, #44]	; (80005a0 <MX_DMA_Init+0xd8>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	681a      	ldr	r2, [r3, #0]
 8000576:	4b0a      	ldr	r3, [pc, #40]	; (80005a0 <MX_DMA_Init+0xd8>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	f042 0201 	orr.w	r2, r2, #1
 800057e:	601a      	str	r2, [r3, #0]
  __HAL_RCC_TIM1_CLK_DISABLE();//stop clocking interrupt timer
 8000580:	4b04      	ldr	r3, [pc, #16]	; (8000594 <MX_DMA_Init+0xcc>)
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	4a03      	ldr	r2, [pc, #12]	; (8000594 <MX_DMA_Init+0xcc>)
 8000586:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800058a:	6193      	str	r3, [r2, #24]
}
 800058c:	bf00      	nop
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	40021000 	.word	0x40021000
 8000598:	20000754 	.word	0x20000754
 800059c:	40020058 	.word	0x40020058
 80005a0:	20000708 	.word	0x20000708
 80005a4:	08000719 	.word	0x08000719
 80005a8:	08000785 	.word	0x08000785
 80005ac:	20000204 	.word	0x20000204
 80005b0:	40010c0c 	.word	0x40010c0c

080005b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b088      	sub	sp, #32
 80005b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	f107 0310 	add.w	r3, r7, #16
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c8:	4b4e      	ldr	r3, [pc, #312]	; (8000704 <MX_GPIO_Init+0x150>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	4a4d      	ldr	r2, [pc, #308]	; (8000704 <MX_GPIO_Init+0x150>)
 80005ce:	f043 0310 	orr.w	r3, r3, #16
 80005d2:	6193      	str	r3, [r2, #24]
 80005d4:	4b4b      	ldr	r3, [pc, #300]	; (8000704 <MX_GPIO_Init+0x150>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	f003 0310 	and.w	r3, r3, #16
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005e0:	4b48      	ldr	r3, [pc, #288]	; (8000704 <MX_GPIO_Init+0x150>)
 80005e2:	699b      	ldr	r3, [r3, #24]
 80005e4:	4a47      	ldr	r2, [pc, #284]	; (8000704 <MX_GPIO_Init+0x150>)
 80005e6:	f043 0320 	orr.w	r3, r3, #32
 80005ea:	6193      	str	r3, [r2, #24]
 80005ec:	4b45      	ldr	r3, [pc, #276]	; (8000704 <MX_GPIO_Init+0x150>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	f003 0320 	and.w	r3, r3, #32
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f8:	4b42      	ldr	r3, [pc, #264]	; (8000704 <MX_GPIO_Init+0x150>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	4a41      	ldr	r2, [pc, #260]	; (8000704 <MX_GPIO_Init+0x150>)
 80005fe:	f043 0304 	orr.w	r3, r3, #4
 8000602:	6193      	str	r3, [r2, #24]
 8000604:	4b3f      	ldr	r3, [pc, #252]	; (8000704 <MX_GPIO_Init+0x150>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	f003 0304 	and.w	r3, r3, #4
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000610:	4b3c      	ldr	r3, [pc, #240]	; (8000704 <MX_GPIO_Init+0x150>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	4a3b      	ldr	r2, [pc, #236]	; (8000704 <MX_GPIO_Init+0x150>)
 8000616:	f043 0308 	orr.w	r3, r3, #8
 800061a:	6193      	str	r3, [r2, #24]
 800061c:	4b39      	ldr	r3, [pc, #228]	; (8000704 <MX_GPIO_Init+0x150>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	f003 0308 	and.w	r3, r3, #8
 8000624:	603b      	str	r3, [r7, #0]
 8000626:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_RESET);
 8000628:	2200      	movs	r2, #0
 800062a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800062e:	4836      	ldr	r0, [pc, #216]	; (8000708 <MX_GPIO_Init+0x154>)
 8000630:	f000 ff8e 	bl	8001550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DACA_0_Pin|DACA_1_Pin|DACA_2_Pin|DACA_3_Pin
 8000634:	2200      	movs	r2, #0
 8000636:	f248 01ff 	movw	r1, #33023	; 0x80ff
 800063a:	4834      	ldr	r0, [pc, #208]	; (800070c <MX_GPIO_Init+0x158>)
 800063c:	f000 ff88 	bl	8001550 <HAL_GPIO_WritePin>
                          |DACA_4_Pin|DACA_5_Pin|DACA_6_Pin|DACA_7_Pin
                          |LED_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DACB_0_Pin|DACB_1_Pin|DACB_2_Pin|DACB_10_Pin
 8000640:	2200      	movs	r2, #0
 8000642:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000646:	4832      	ldr	r0, [pc, #200]	; (8000710 <MX_GPIO_Init+0x15c>)
 8000648:	f000 ff82 	bl	8001550 <HAL_GPIO_WritePin>
                          |DACB_11_Pin|DACB_12_Pin|DACB_13_Pin|DACB_14_Pin
                          |DACB_15_Pin|DACB_3_Pin|DACB_4_Pin|DACB_5_Pin
                          |DACB_6_Pin|DACB_7_Pin|DACB_8_Pin|DACB_9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_0_Pin */
  GPIO_InitStruct.Pin = LED_0_Pin;
 800064c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000650:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000652:	2311      	movs	r3, #17
 8000654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065a:	2302      	movs	r3, #2
 800065c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_0_GPIO_Port, &GPIO_InitStruct);
 800065e:	f107 0310 	add.w	r3, r7, #16
 8000662:	4619      	mov	r1, r3
 8000664:	4828      	ldr	r0, [pc, #160]	; (8000708 <MX_GPIO_Init+0x154>)
 8000666:	f000 fdef 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pins : DACA_0_Pin DACA_1_Pin DACA_2_Pin DACA_3_Pin
                           DACA_4_Pin DACA_5_Pin DACA_6_Pin DACA_7_Pin */
  GPIO_InitStruct.Pin = DACA_0_Pin|DACA_1_Pin|DACA_2_Pin|DACA_3_Pin
 800066a:	23ff      	movs	r3, #255	; 0xff
 800066c:	613b      	str	r3, [r7, #16]
                          |DACA_4_Pin|DACA_5_Pin|DACA_6_Pin|DACA_7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066e:	2301      	movs	r3, #1
 8000670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000676:	2302      	movs	r3, #2
 8000678:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067a:	f107 0310 	add.w	r3, r7, #16
 800067e:	4619      	mov	r1, r3
 8000680:	4822      	ldr	r0, [pc, #136]	; (800070c <MX_GPIO_Init+0x158>)
 8000682:	f000 fde1 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pins : DACB_0_Pin DACB_1_Pin DACB_2_Pin DACB_10_Pin
                           DACB_11_Pin DACB_12_Pin DACB_13_Pin DACB_14_Pin
                           DACB_15_Pin DACB_3_Pin DACB_4_Pin DACB_5_Pin
                           DACB_6_Pin DACB_7_Pin DACB_8_Pin DACB_9_Pin */
  GPIO_InitStruct.Pin = DACB_0_Pin|DACB_1_Pin|DACB_2_Pin|DACB_10_Pin
 8000686:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800068a:	613b      	str	r3, [r7, #16]
                          |DACB_11_Pin|DACB_12_Pin|DACB_13_Pin|DACB_14_Pin
                          |DACB_15_Pin|DACB_3_Pin|DACB_4_Pin|DACB_5_Pin
                          |DACB_6_Pin|DACB_7_Pin|DACB_8_Pin|DACB_9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068c:	2301      	movs	r3, #1
 800068e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000694:	2303      	movs	r3, #3
 8000696:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000698:	f107 0310 	add.w	r3, r7, #16
 800069c:	4619      	mov	r1, r3
 800069e:	481c      	ldr	r0, [pc, #112]	; (8000710 <MX_GPIO_Init+0x15c>)
 80006a0:	f000 fdd2 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB_MODE_Pin PB_UP_Pin PB_DOWN_Pin */
  GPIO_InitStruct.Pin = PB_MODE_Pin|PB_UP_Pin|PB_DOWN_Pin;
 80006a4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80006a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006aa:	4b1a      	ldr	r3, [pc, #104]	; (8000714 <MX_GPIO_Init+0x160>)
 80006ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b2:	f107 0310 	add.w	r3, r7, #16
 80006b6:	4619      	mov	r1, r3
 80006b8:	4814      	ldr	r0, [pc, #80]	; (800070c <MX_GPIO_Init+0x158>)
 80006ba:	f000 fdc5 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_1_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin;
 80006be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80006c4:	2311      	movs	r3, #17
 80006c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006cc:	2302      	movs	r3, #2
 80006ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 80006d0:	f107 0310 	add.w	r3, r7, #16
 80006d4:	4619      	mov	r1, r3
 80006d6:	480d      	ldr	r0, [pc, #52]	; (800070c <MX_GPIO_Init+0x158>)
 80006d8:	f000 fdb6 	bl	8001248 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80006dc:	2200      	movs	r2, #0
 80006de:	2101      	movs	r1, #1
 80006e0:	2017      	movs	r0, #23
 80006e2:	f000 face 	bl	8000c82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80006e6:	2017      	movs	r0, #23
 80006e8:	f000 fae7 	bl	8000cba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2100      	movs	r1, #0
 80006f0:	2028      	movs	r0, #40	; 0x28
 80006f2:	f000 fac6 	bl	8000c82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006f6:	2028      	movs	r0, #40	; 0x28
 80006f8:	f000 fadf 	bl	8000cba <HAL_NVIC_EnableIRQ>

}
 80006fc:	bf00      	nop
 80006fe:	3720      	adds	r7, #32
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40021000 	.word	0x40021000
 8000708:	40011000 	.word	0x40011000
 800070c:	40010800 	.word	0x40010800
 8000710:	40010c00 	.word	0x40010c00
 8000714:	10210000 	.word	0x10210000

08000718 <TransferComplete>:

/* USER CODE BEGIN 4 */
/*  (DMA IRQ callbacks) */
void TransferComplete(DMA_HandleTypeDef *hdma)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
    /* Stop timer */
    __HAL_TIM_DISABLE(&htim1);
 8000720:	4b15      	ldr	r3, [pc, #84]	; (8000778 <TransferComplete+0x60>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	6a1a      	ldr	r2, [r3, #32]
 8000726:	f241 1311 	movw	r3, #4369	; 0x1111
 800072a:	4013      	ands	r3, r2
 800072c:	2b00      	cmp	r3, #0
 800072e:	d10f      	bne.n	8000750 <TransferComplete+0x38>
 8000730:	4b11      	ldr	r3, [pc, #68]	; (8000778 <TransferComplete+0x60>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	6a1a      	ldr	r2, [r3, #32]
 8000736:	f240 4344 	movw	r3, #1092	; 0x444
 800073a:	4013      	ands	r3, r2
 800073c:	2b00      	cmp	r3, #0
 800073e:	d107      	bne.n	8000750 <TransferComplete+0x38>
 8000740:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <TransferComplete+0x60>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	681a      	ldr	r2, [r3, #0]
 8000746:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <TransferComplete+0x60>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	f022 0201 	bic.w	r2, r2, #1
 800074e:	601a      	str	r2, [r3, #0]
    /* Reconfigure DMA */
    HAL_DMA_Start_IT(htim1.hdma[TIM_DMA_ID_UPDATE],(uint32_t)&aOutputWave,
 8000750:	4b09      	ldr	r3, [pc, #36]	; (8000778 <TransferComplete+0x60>)
 8000752:	6a18      	ldr	r0, [r3, #32]
 8000754:	4909      	ldr	r1, [pc, #36]	; (800077c <TransferComplete+0x64>)
 8000756:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800075a:	4a09      	ldr	r2, [pc, #36]	; (8000780 <TransferComplete+0x68>)
 800075c:	f000 fb22 	bl	8000da4 <HAL_DMA_Start_IT>
    		(uint32_t)&GPIOB->ODR, BUFFER_SIZE);
    /* Start timer for new data transmit */
    __HAL_TIM_ENABLE(&htim1);
 8000760:	4b05      	ldr	r3, [pc, #20]	; (8000778 <TransferComplete+0x60>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	4b04      	ldr	r3, [pc, #16]	; (8000778 <TransferComplete+0x60>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f042 0201 	orr.w	r2, r2, #1
 800076e:	601a      	str	r2, [r3, #0]
}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000708 	.word	0x20000708
 800077c:	20000204 	.word	0x20000204
 8000780:	40010c0c 	.word	0x40010c0c

08000784 <TransferError>:

void TransferError(DMA_HandleTypeDef *hdma)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
    /* Stop timer */
    __HAL_TIM_DISABLE(&htim1);
 800078c:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <TransferError+0x44>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	6a1a      	ldr	r2, [r3, #32]
 8000792:	f241 1311 	movw	r3, #4369	; 0x1111
 8000796:	4013      	ands	r3, r2
 8000798:	2b00      	cmp	r3, #0
 800079a:	d10f      	bne.n	80007bc <TransferError+0x38>
 800079c:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <TransferError+0x44>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	6a1a      	ldr	r2, [r3, #32]
 80007a2:	f240 4344 	movw	r3, #1092	; 0x444
 80007a6:	4013      	ands	r3, r2
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d107      	bne.n	80007bc <TransferError+0x38>
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <TransferError+0x44>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <TransferError+0x44>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f022 0201 	bic.w	r2, r2, #1
 80007ba:	601a      	str	r2, [r3, #0]
    /* !!! Some error handle for future implementation */
}
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	20000708 	.word	0x20000708

080007cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d0:	b672      	cpsid	i
}
 80007d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <Error_Handler+0x8>
	...

080007d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	b085      	sub	sp, #20
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007de:	4b15      	ldr	r3, [pc, #84]	; (8000834 <HAL_MspInit+0x5c>)
 80007e0:	699b      	ldr	r3, [r3, #24]
 80007e2:	4a14      	ldr	r2, [pc, #80]	; (8000834 <HAL_MspInit+0x5c>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6193      	str	r3, [r2, #24]
 80007ea:	4b12      	ldr	r3, [pc, #72]	; (8000834 <HAL_MspInit+0x5c>)
 80007ec:	699b      	ldr	r3, [r3, #24]
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f6:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <HAL_MspInit+0x5c>)
 80007f8:	69db      	ldr	r3, [r3, #28]
 80007fa:	4a0e      	ldr	r2, [pc, #56]	; (8000834 <HAL_MspInit+0x5c>)
 80007fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000800:	61d3      	str	r3, [r2, #28]
 8000802:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <HAL_MspInit+0x5c>)
 8000804:	69db      	ldr	r3, [r3, #28]
 8000806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800080e:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <HAL_MspInit+0x60>)
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	4a04      	ldr	r2, [pc, #16]	; (8000838 <HAL_MspInit+0x60>)
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082a:	bf00      	nop
 800082c:	3714      	adds	r7, #20
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr
 8000834:	40021000 	.word	0x40021000
 8000838:	40010000 	.word	0x40010000

0800083c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a1d      	ldr	r2, [pc, #116]	; (80008c0 <HAL_TIM_Base_MspInit+0x84>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d134      	bne.n	80008b8 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800084e:	4b1d      	ldr	r3, [pc, #116]	; (80008c4 <HAL_TIM_Base_MspInit+0x88>)
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	4a1c      	ldr	r2, [pc, #112]	; (80008c4 <HAL_TIM_Base_MspInit+0x88>)
 8000854:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000858:	6193      	str	r3, [r2, #24]
 800085a:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <HAL_TIM_Base_MspInit+0x88>)
 800085c:	699b      	ldr	r3, [r3, #24]
 800085e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA1_Channel5;
 8000866:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <HAL_TIM_Base_MspInit+0x8c>)
 8000868:	4a18      	ldr	r2, [pc, #96]	; (80008cc <HAL_TIM_Base_MspInit+0x90>)
 800086a:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800086c:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <HAL_TIM_Base_MspInit+0x8c>)
 800086e:	2210      	movs	r2, #16
 8000870:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000872:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <HAL_TIM_Base_MspInit+0x8c>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8000878:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <HAL_TIM_Base_MspInit+0x8c>)
 800087a:	2280      	movs	r2, #128	; 0x80
 800087c:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800087e:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <HAL_TIM_Base_MspInit+0x8c>)
 8000880:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000884:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <HAL_TIM_Base_MspInit+0x8c>)
 8000888:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800088c:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <HAL_TIM_Base_MspInit+0x8c>)
 8000890:	2220      	movs	r2, #32
 8000892:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <HAL_TIM_Base_MspInit+0x8c>)
 8000896:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800089a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 800089c:	480a      	ldr	r0, [pc, #40]	; (80008c8 <HAL_TIM_Base_MspInit+0x8c>)
 800089e:	f000 fa27 	bl	8000cf0 <HAL_DMA_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <HAL_TIM_Base_MspInit+0x70>
    {
      Error_Handler();
 80008a8:	f7ff ff90 	bl	80007cc <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	4a06      	ldr	r2, [pc, #24]	; (80008c8 <HAL_TIM_Base_MspInit+0x8c>)
 80008b0:	621a      	str	r2, [r3, #32]
 80008b2:	4a05      	ldr	r2, [pc, #20]	; (80008c8 <HAL_TIM_Base_MspInit+0x8c>)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80008b8:	bf00      	nop
 80008ba:	3710      	adds	r7, #16
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40012c00 	.word	0x40012c00
 80008c4:	40021000 	.word	0x40021000
 80008c8:	20000754 	.word	0x20000754
 80008cc:	40020058 	.word	0x40020058

080008d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <NMI_Handler+0x4>

080008d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008da:	e7fe      	b.n	80008da <HardFault_Handler+0x4>

080008dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <MemManage_Handler+0x4>

080008e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e6:	e7fe      	b.n	80008e6 <BusFault_Handler+0x4>

080008e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ec:	e7fe      	b.n	80008ec <UsageFault_Handler+0x4>

080008ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr

080008fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr

08000906 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr

08000912 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000916:	f000 f89d 	bl	8000a54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
	...

08000920 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8000924:	4802      	ldr	r0, [pc, #8]	; (8000930 <DMA1_Channel5_IRQHandler+0x10>)
 8000926:	f000 fb13 	bl	8000f50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000754 	.word	0x20000754

08000934 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000938:	4802      	ldr	r0, [pc, #8]	; (8000944 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800093a:	f000 ff8e 	bl	800185a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20001440 	.word	0x20001440

08000948 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800094c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000950:	f000 fe30 	bl	80015b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000954:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000958:	f000 fe2c 	bl	80015b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}

08000960 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000964:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000968:	f000 fe24 	bl	80015b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}

08000970 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr

0800097c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800097c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800097e:	e003      	b.n	8000988 <LoopCopyDataInit>

08000980 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000980:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000982:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000984:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000986:	3104      	adds	r1, #4

08000988 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000988:	480a      	ldr	r0, [pc, #40]	; (80009b4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800098a:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800098c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800098e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000990:	d3f6      	bcc.n	8000980 <CopyDataInit>
  ldr r2, =_sbss
 8000992:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000994:	e002      	b.n	800099c <LoopFillZerobss>

08000996 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000996:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000998:	f842 3b04 	str.w	r3, [r2], #4

0800099c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800099c:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800099e:	429a      	cmp	r2, r3
  bcc FillZerobss
 80009a0:	d3f9      	bcc.n	8000996 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009a2:	f7ff ffe5 	bl	8000970 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009a6:	f007 fa25 	bl	8007df4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009aa:	f7ff fbcf 	bl	800014c <main>
  bx lr
 80009ae:	4770      	bx	lr
  ldr r3, =_sidata
 80009b0:	08008f94 	.word	0x08008f94
  ldr r0, =_sdata
 80009b4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80009b8:	200001e4 	.word	0x200001e4
  ldr r2, =_sbss
 80009bc:	200001e4 	.word	0x200001e4
  ldr r3, = _ebss
 80009c0:	2000173c 	.word	0x2000173c

080009c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009c4:	e7fe      	b.n	80009c4 <ADC1_2_IRQHandler>
	...

080009c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009cc:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <HAL_Init+0x28>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a07      	ldr	r2, [pc, #28]	; (80009f0 <HAL_Init+0x28>)
 80009d2:	f043 0310 	orr.w	r3, r3, #16
 80009d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d8:	2003      	movs	r0, #3
 80009da:	f000 f947 	bl	8000c6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009de:	2000      	movs	r0, #0
 80009e0:	f000 f808 	bl	80009f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009e4:	f7ff fef8 	bl	80007d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009e8:	2300      	movs	r3, #0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40022000 	.word	0x40022000

080009f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009fc:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <HAL_InitTick+0x54>)
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <HAL_InitTick+0x58>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	4619      	mov	r1, r3
 8000a06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a12:	4618      	mov	r0, r3
 8000a14:	f000 f95f 	bl	8000cd6 <HAL_SYSTICK_Config>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e00e      	b.n	8000a40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2b0f      	cmp	r3, #15
 8000a26:	d80a      	bhi.n	8000a3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	6879      	ldr	r1, [r7, #4]
 8000a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a30:	f000 f927 	bl	8000c82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a34:	4a06      	ldr	r2, [pc, #24]	; (8000a50 <HAL_InitTick+0x5c>)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	e000      	b.n	8000a40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000004 	.word	0x20000004
 8000a4c:	2000000c 	.word	0x2000000c
 8000a50:	20000008 	.word	0x20000008

08000a54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a58:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <HAL_IncTick+0x1c>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <HAL_IncTick+0x20>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4413      	add	r3, r2
 8000a64:	4a03      	ldr	r2, [pc, #12]	; (8000a74 <HAL_IncTick+0x20>)
 8000a66:	6013      	str	r3, [r2, #0]
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr
 8000a70:	2000000c 	.word	0x2000000c
 8000a74:	2000079c 	.word	0x2000079c

08000a78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a7c:	4b02      	ldr	r3, [pc, #8]	; (8000a88 <HAL_GetTick+0x10>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr
 8000a88:	2000079c 	.word	0x2000079c

08000a8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a94:	f7ff fff0 	bl	8000a78 <HAL_GetTick>
 8000a98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa4:	d005      	beq.n	8000ab2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aa6:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <HAL_Delay+0x44>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	4413      	add	r3, r2
 8000ab0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ab2:	bf00      	nop
 8000ab4:	f7ff ffe0 	bl	8000a78 <HAL_GetTick>
 8000ab8:	4602      	mov	r2, r0
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	68fa      	ldr	r2, [r7, #12]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d8f7      	bhi.n	8000ab4 <HAL_Delay+0x28>
  {
  }
}
 8000ac4:	bf00      	nop
 8000ac6:	bf00      	nop
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	2000000c 	.word	0x2000000c

08000ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f003 0307 	and.w	r3, r3, #7
 8000ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aea:	68ba      	ldr	r2, [r7, #8]
 8000aec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000af0:	4013      	ands	r3, r2
 8000af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000afc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b06:	4a04      	ldr	r2, [pc, #16]	; (8000b18 <__NVIC_SetPriorityGrouping+0x44>)
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	60d3      	str	r3, [r2, #12]
}
 8000b0c:	bf00      	nop
 8000b0e:	3714      	adds	r7, #20
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bc80      	pop	{r7}
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b20:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <__NVIC_GetPriorityGrouping+0x18>)
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	0a1b      	lsrs	r3, r3, #8
 8000b26:	f003 0307 	and.w	r3, r3, #7
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bc80      	pop	{r7}
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	db0b      	blt.n	8000b62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	f003 021f 	and.w	r2, r3, #31
 8000b50:	4906      	ldr	r1, [pc, #24]	; (8000b6c <__NVIC_EnableIRQ+0x34>)
 8000b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b56:	095b      	lsrs	r3, r3, #5
 8000b58:	2001      	movs	r0, #1
 8000b5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr
 8000b6c:	e000e100 	.word	0xe000e100

08000b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	6039      	str	r1, [r7, #0]
 8000b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	db0a      	blt.n	8000b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	b2da      	uxtb	r2, r3
 8000b88:	490c      	ldr	r1, [pc, #48]	; (8000bbc <__NVIC_SetPriority+0x4c>)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	0112      	lsls	r2, r2, #4
 8000b90:	b2d2      	uxtb	r2, r2
 8000b92:	440b      	add	r3, r1
 8000b94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b98:	e00a      	b.n	8000bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	4908      	ldr	r1, [pc, #32]	; (8000bc0 <__NVIC_SetPriority+0x50>)
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	f003 030f 	and.w	r3, r3, #15
 8000ba6:	3b04      	subs	r3, #4
 8000ba8:	0112      	lsls	r2, r2, #4
 8000baa:	b2d2      	uxtb	r2, r2
 8000bac:	440b      	add	r3, r1
 8000bae:	761a      	strb	r2, [r3, #24]
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bc80      	pop	{r7}
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000e100 	.word	0xe000e100
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b089      	sub	sp, #36	; 0x24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	f1c3 0307 	rsb	r3, r3, #7
 8000bde:	2b04      	cmp	r3, #4
 8000be0:	bf28      	it	cs
 8000be2:	2304      	movcs	r3, #4
 8000be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	3304      	adds	r3, #4
 8000bea:	2b06      	cmp	r3, #6
 8000bec:	d902      	bls.n	8000bf4 <NVIC_EncodePriority+0x30>
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	3b03      	subs	r3, #3
 8000bf2:	e000      	b.n	8000bf6 <NVIC_EncodePriority+0x32>
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	43da      	mvns	r2, r3
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	401a      	ands	r2, r3
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	fa01 f303 	lsl.w	r3, r1, r3
 8000c16:	43d9      	mvns	r1, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c1c:	4313      	orrs	r3, r2
         );
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3724      	adds	r7, #36	; 0x24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr

08000c28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3b01      	subs	r3, #1
 8000c34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c38:	d301      	bcc.n	8000c3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e00f      	b.n	8000c5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c3e:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <SysTick_Config+0x40>)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c46:	210f      	movs	r1, #15
 8000c48:	f04f 30ff 	mov.w	r0, #4294967295
 8000c4c:	f7ff ff90 	bl	8000b70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <SysTick_Config+0x40>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c56:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <SysTick_Config+0x40>)
 8000c58:	2207      	movs	r2, #7
 8000c5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	e000e010 	.word	0xe000e010

08000c6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff ff2d 	bl	8000ad4 <__NVIC_SetPriorityGrouping>
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b086      	sub	sp, #24
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	4603      	mov	r3, r0
 8000c8a:	60b9      	str	r1, [r7, #8]
 8000c8c:	607a      	str	r2, [r7, #4]
 8000c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c94:	f7ff ff42 	bl	8000b1c <__NVIC_GetPriorityGrouping>
 8000c98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	68b9      	ldr	r1, [r7, #8]
 8000c9e:	6978      	ldr	r0, [r7, #20]
 8000ca0:	f7ff ff90 	bl	8000bc4 <NVIC_EncodePriority>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000caa:	4611      	mov	r1, r2
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff ff5f 	bl	8000b70 <__NVIC_SetPriority>
}
 8000cb2:	bf00      	nop
 8000cb4:	3718      	adds	r7, #24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff ff35 	bl	8000b38 <__NVIC_EnableIRQ>
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff ffa2 	bl	8000c28 <SysTick_Config>
 8000ce4:	4603      	mov	r3, r0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
	...

08000cf0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d101      	bne.n	8000d06 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e043      	b.n	8000d8e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	4b22      	ldr	r3, [pc, #136]	; (8000d98 <HAL_DMA_Init+0xa8>)
 8000d0e:	4413      	add	r3, r2
 8000d10:	4a22      	ldr	r2, [pc, #136]	; (8000d9c <HAL_DMA_Init+0xac>)
 8000d12:	fba2 2303 	umull	r2, r3, r2, r3
 8000d16:	091b      	lsrs	r3, r3, #4
 8000d18:	009a      	lsls	r2, r3, #2
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4a1f      	ldr	r2, [pc, #124]	; (8000da0 <HAL_DMA_Init+0xb0>)
 8000d22:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2202      	movs	r2, #2
 8000d28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000d3a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000d3e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000d48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	68db      	ldr	r3, [r3, #12]
 8000d4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	695b      	ldr	r3, [r3, #20]
 8000d5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	69db      	ldr	r3, [r3, #28]
 8000d66:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d68:	68fa      	ldr	r2, [r7, #12]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	68fa      	ldr	r2, [r7, #12]
 8000d74:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2201      	movs	r2, #1
 8000d80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2200      	movs	r2, #0
 8000d88:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000d8c:	2300      	movs	r3, #0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3714      	adds	r7, #20
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr
 8000d98:	bffdfff8 	.word	0xbffdfff8
 8000d9c:	cccccccd 	.word	0xcccccccd
 8000da0:	40020000 	.word	0x40020000

08000da4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
 8000db0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000db2:	2300      	movs	r3, #0
 8000db4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d101      	bne.n	8000dc4 <HAL_DMA_Start_IT+0x20>
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	e04a      	b.n	8000e5a <HAL_DMA_Start_IT+0xb6>
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d13a      	bne.n	8000e4c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	2202      	movs	r2, #2
 8000dda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	2200      	movs	r2, #0
 8000de2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f022 0201 	bic.w	r2, r2, #1
 8000df2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	68b9      	ldr	r1, [r7, #8]
 8000dfa:	68f8      	ldr	r0, [r7, #12]
 8000dfc:	f000 f9f6 	bl	80011ec <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d008      	beq.n	8000e1a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f042 020e 	orr.w	r2, r2, #14
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	e00f      	b.n	8000e3a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f022 0204 	bic.w	r2, r2, #4
 8000e28:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f042 020a 	orr.w	r2, r2, #10
 8000e38:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f042 0201 	orr.w	r2, r2, #1
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	e005      	b.n	8000e58 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000e54:	2302      	movs	r3, #2
 8000e56:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000e58:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3718      	adds	r7, #24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d005      	beq.n	8000e86 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2204      	movs	r2, #4
 8000e7e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	73fb      	strb	r3, [r7, #15]
 8000e84:	e051      	b.n	8000f2a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f022 020e 	bic.w	r2, r2, #14
 8000e94:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f022 0201 	bic.w	r2, r2, #1
 8000ea4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a22      	ldr	r2, [pc, #136]	; (8000f34 <HAL_DMA_Abort_IT+0xd0>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d029      	beq.n	8000f04 <HAL_DMA_Abort_IT+0xa0>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a20      	ldr	r2, [pc, #128]	; (8000f38 <HAL_DMA_Abort_IT+0xd4>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d022      	beq.n	8000f00 <HAL_DMA_Abort_IT+0x9c>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a1f      	ldr	r2, [pc, #124]	; (8000f3c <HAL_DMA_Abort_IT+0xd8>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d01a      	beq.n	8000efa <HAL_DMA_Abort_IT+0x96>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a1d      	ldr	r2, [pc, #116]	; (8000f40 <HAL_DMA_Abort_IT+0xdc>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d012      	beq.n	8000ef4 <HAL_DMA_Abort_IT+0x90>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a1c      	ldr	r2, [pc, #112]	; (8000f44 <HAL_DMA_Abort_IT+0xe0>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d00a      	beq.n	8000eee <HAL_DMA_Abort_IT+0x8a>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a1a      	ldr	r2, [pc, #104]	; (8000f48 <HAL_DMA_Abort_IT+0xe4>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d102      	bne.n	8000ee8 <HAL_DMA_Abort_IT+0x84>
 8000ee2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ee6:	e00e      	b.n	8000f06 <HAL_DMA_Abort_IT+0xa2>
 8000ee8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000eec:	e00b      	b.n	8000f06 <HAL_DMA_Abort_IT+0xa2>
 8000eee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ef2:	e008      	b.n	8000f06 <HAL_DMA_Abort_IT+0xa2>
 8000ef4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef8:	e005      	b.n	8000f06 <HAL_DMA_Abort_IT+0xa2>
 8000efa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000efe:	e002      	b.n	8000f06 <HAL_DMA_Abort_IT+0xa2>
 8000f00:	2310      	movs	r3, #16
 8000f02:	e000      	b.n	8000f06 <HAL_DMA_Abort_IT+0xa2>
 8000f04:	2301      	movs	r3, #1
 8000f06:	4a11      	ldr	r2, [pc, #68]	; (8000f4c <HAL_DMA_Abort_IT+0xe8>)
 8000f08:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d003      	beq.n	8000f2a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	4798      	blx	r3
    } 
  }
  return status;
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40020008 	.word	0x40020008
 8000f38:	4002001c 	.word	0x4002001c
 8000f3c:	40020030 	.word	0x40020030
 8000f40:	40020044 	.word	0x40020044
 8000f44:	40020058 	.word	0x40020058
 8000f48:	4002006c 	.word	0x4002006c
 8000f4c:	40020000 	.word	0x40020000

08000f50 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6c:	2204      	movs	r2, #4
 8000f6e:	409a      	lsls	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4013      	ands	r3, r2
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d04f      	beq.n	8001018 <HAL_DMA_IRQHandler+0xc8>
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	f003 0304 	and.w	r3, r3, #4
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d04a      	beq.n	8001018 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f003 0320 	and.w	r3, r3, #32
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d107      	bne.n	8000fa0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f022 0204 	bic.w	r2, r2, #4
 8000f9e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a66      	ldr	r2, [pc, #408]	; (8001140 <HAL_DMA_IRQHandler+0x1f0>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d029      	beq.n	8000ffe <HAL_DMA_IRQHandler+0xae>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a65      	ldr	r2, [pc, #404]	; (8001144 <HAL_DMA_IRQHandler+0x1f4>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d022      	beq.n	8000ffa <HAL_DMA_IRQHandler+0xaa>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a63      	ldr	r2, [pc, #396]	; (8001148 <HAL_DMA_IRQHandler+0x1f8>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d01a      	beq.n	8000ff4 <HAL_DMA_IRQHandler+0xa4>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a62      	ldr	r2, [pc, #392]	; (800114c <HAL_DMA_IRQHandler+0x1fc>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d012      	beq.n	8000fee <HAL_DMA_IRQHandler+0x9e>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a60      	ldr	r2, [pc, #384]	; (8001150 <HAL_DMA_IRQHandler+0x200>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d00a      	beq.n	8000fe8 <HAL_DMA_IRQHandler+0x98>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a5f      	ldr	r2, [pc, #380]	; (8001154 <HAL_DMA_IRQHandler+0x204>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d102      	bne.n	8000fe2 <HAL_DMA_IRQHandler+0x92>
 8000fdc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fe0:	e00e      	b.n	8001000 <HAL_DMA_IRQHandler+0xb0>
 8000fe2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000fe6:	e00b      	b.n	8001000 <HAL_DMA_IRQHandler+0xb0>
 8000fe8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000fec:	e008      	b.n	8001000 <HAL_DMA_IRQHandler+0xb0>
 8000fee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ff2:	e005      	b.n	8001000 <HAL_DMA_IRQHandler+0xb0>
 8000ff4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ff8:	e002      	b.n	8001000 <HAL_DMA_IRQHandler+0xb0>
 8000ffa:	2340      	movs	r3, #64	; 0x40
 8000ffc:	e000      	b.n	8001000 <HAL_DMA_IRQHandler+0xb0>
 8000ffe:	2304      	movs	r3, #4
 8001000:	4a55      	ldr	r2, [pc, #340]	; (8001158 <HAL_DMA_IRQHandler+0x208>)
 8001002:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001008:	2b00      	cmp	r3, #0
 800100a:	f000 8094 	beq.w	8001136 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001016:	e08e      	b.n	8001136 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101c:	2202      	movs	r2, #2
 800101e:	409a      	lsls	r2, r3
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	4013      	ands	r3, r2
 8001024:	2b00      	cmp	r3, #0
 8001026:	d056      	beq.n	80010d6 <HAL_DMA_IRQHandler+0x186>
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	2b00      	cmp	r3, #0
 8001030:	d051      	beq.n	80010d6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 0320 	and.w	r3, r3, #32
 800103c:	2b00      	cmp	r3, #0
 800103e:	d10b      	bne.n	8001058 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f022 020a 	bic.w	r2, r2, #10
 800104e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2201      	movs	r2, #1
 8001054:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a38      	ldr	r2, [pc, #224]	; (8001140 <HAL_DMA_IRQHandler+0x1f0>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d029      	beq.n	80010b6 <HAL_DMA_IRQHandler+0x166>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a37      	ldr	r2, [pc, #220]	; (8001144 <HAL_DMA_IRQHandler+0x1f4>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d022      	beq.n	80010b2 <HAL_DMA_IRQHandler+0x162>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a35      	ldr	r2, [pc, #212]	; (8001148 <HAL_DMA_IRQHandler+0x1f8>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d01a      	beq.n	80010ac <HAL_DMA_IRQHandler+0x15c>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a34      	ldr	r2, [pc, #208]	; (800114c <HAL_DMA_IRQHandler+0x1fc>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d012      	beq.n	80010a6 <HAL_DMA_IRQHandler+0x156>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a32      	ldr	r2, [pc, #200]	; (8001150 <HAL_DMA_IRQHandler+0x200>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d00a      	beq.n	80010a0 <HAL_DMA_IRQHandler+0x150>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a31      	ldr	r2, [pc, #196]	; (8001154 <HAL_DMA_IRQHandler+0x204>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d102      	bne.n	800109a <HAL_DMA_IRQHandler+0x14a>
 8001094:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001098:	e00e      	b.n	80010b8 <HAL_DMA_IRQHandler+0x168>
 800109a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800109e:	e00b      	b.n	80010b8 <HAL_DMA_IRQHandler+0x168>
 80010a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010a4:	e008      	b.n	80010b8 <HAL_DMA_IRQHandler+0x168>
 80010a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010aa:	e005      	b.n	80010b8 <HAL_DMA_IRQHandler+0x168>
 80010ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010b0:	e002      	b.n	80010b8 <HAL_DMA_IRQHandler+0x168>
 80010b2:	2320      	movs	r3, #32
 80010b4:	e000      	b.n	80010b8 <HAL_DMA_IRQHandler+0x168>
 80010b6:	2302      	movs	r3, #2
 80010b8:	4a27      	ldr	r2, [pc, #156]	; (8001158 <HAL_DMA_IRQHandler+0x208>)
 80010ba:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d034      	beq.n	8001136 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80010d4:	e02f      	b.n	8001136 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	2208      	movs	r2, #8
 80010dc:	409a      	lsls	r2, r3
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	4013      	ands	r3, r2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d028      	beq.n	8001138 <HAL_DMA_IRQHandler+0x1e8>
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	f003 0308 	and.w	r3, r3, #8
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d023      	beq.n	8001138 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f022 020e 	bic.w	r2, r2, #14
 80010fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001108:	2101      	movs	r1, #1
 800110a:	fa01 f202 	lsl.w	r2, r1, r2
 800110e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2201      	movs	r2, #1
 8001114:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2201      	movs	r2, #1
 800111a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	2b00      	cmp	r3, #0
 800112c:	d004      	beq.n	8001138 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	4798      	blx	r3
    }
  }
  return;
 8001136:	bf00      	nop
 8001138:	bf00      	nop
}
 800113a:	3710      	adds	r7, #16
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40020008 	.word	0x40020008
 8001144:	4002001c 	.word	0x4002001c
 8001148:	40020030 	.word	0x40020030
 800114c:	40020044 	.word	0x40020044
 8001150:	40020058 	.word	0x40020058
 8001154:	4002006c 	.word	0x4002006c
 8001158:	40020000 	.word	0x40020000

0800115c <HAL_DMA_RegisterCallback>:
  * @param pCallback: pointer to private callbacsk function which has pointer to 
  *                   a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                          
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 800115c:	b480      	push	{r7}
 800115e:	b087      	sub	sp, #28
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	460b      	mov	r3, r1
 8001166:	607a      	str	r2, [r7, #4]
 8001168:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800116a:	2300      	movs	r3, #0
 800116c:	75fb      	strb	r3, [r7, #23]
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d101      	bne.n	800117c <HAL_DMA_RegisterCallback+0x20>
 8001178:	2302      	movs	r3, #2
 800117a:	e031      	b.n	80011e0 <HAL_DMA_RegisterCallback+0x84>
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2201      	movs	r2, #1
 8001180:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800118a:	2b01      	cmp	r3, #1
 800118c:	d121      	bne.n	80011d2 <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 800118e:	7afb      	ldrb	r3, [r7, #11]
 8001190:	2b03      	cmp	r3, #3
 8001192:	d81b      	bhi.n	80011cc <HAL_DMA_RegisterCallback+0x70>
 8001194:	a201      	add	r2, pc, #4	; (adr r2, 800119c <HAL_DMA_RegisterCallback+0x40>)
 8001196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800119a:	bf00      	nop
 800119c:	080011ad 	.word	0x080011ad
 80011a0:	080011b5 	.word	0x080011b5
 80011a4:	080011bd 	.word	0x080011bd
 80011a8:	080011c5 	.word	0x080011c5
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80011b2:	e010      	b.n	80011d6 <HAL_DMA_RegisterCallback+0x7a>
      
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	62da      	str	r2, [r3, #44]	; 0x2c
      break;         
 80011ba:	e00c      	b.n	80011d6 <HAL_DMA_RegisterCallback+0x7a>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	631a      	str	r2, [r3, #48]	; 0x30
      break;         
 80011c2:	e008      	b.n	80011d6 <HAL_DMA_RegisterCallback+0x7a>
      
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	635a      	str	r2, [r3, #52]	; 0x34
      break; 
 80011ca:	e004      	b.n	80011d6 <HAL_DMA_RegisterCallback+0x7a>
      
    default:
      status = HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	75fb      	strb	r3, [r7, #23]
      break;                                                            
 80011d0:	e001      	b.n	80011d6 <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	75fb      	strb	r3, [r7, #23]
  } 
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2200      	movs	r2, #0
 80011da:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status;
 80011de:	7dfb      	ldrb	r3, [r7, #23]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	371c      	adds	r7, #28
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop

080011ec <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
 80011f8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001202:	2101      	movs	r1, #1
 8001204:	fa01 f202 	lsl.w	r2, r1, r2
 8001208:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	683a      	ldr	r2, [r7, #0]
 8001210:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	2b10      	cmp	r3, #16
 8001218:	d108      	bne.n	800122c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	68ba      	ldr	r2, [r7, #8]
 8001228:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800122a:	e007      	b.n	800123c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	68ba      	ldr	r2, [r7, #8]
 8001232:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	60da      	str	r2, [r3, #12]
}
 800123c:	bf00      	nop
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	bc80      	pop	{r7}
 8001244:	4770      	bx	lr
	...

08001248 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001248:	b480      	push	{r7}
 800124a:	b08b      	sub	sp, #44	; 0x2c
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001252:	2300      	movs	r3, #0
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001256:	2300      	movs	r3, #0
 8001258:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800125a:	e169      	b.n	8001530 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800125c:	2201      	movs	r2, #1
 800125e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	69fa      	ldr	r2, [r7, #28]
 800126c:	4013      	ands	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	429a      	cmp	r2, r3
 8001276:	f040 8158 	bne.w	800152a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	4a9a      	ldr	r2, [pc, #616]	; (80014e8 <HAL_GPIO_Init+0x2a0>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d05e      	beq.n	8001342 <HAL_GPIO_Init+0xfa>
 8001284:	4a98      	ldr	r2, [pc, #608]	; (80014e8 <HAL_GPIO_Init+0x2a0>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d875      	bhi.n	8001376 <HAL_GPIO_Init+0x12e>
 800128a:	4a98      	ldr	r2, [pc, #608]	; (80014ec <HAL_GPIO_Init+0x2a4>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d058      	beq.n	8001342 <HAL_GPIO_Init+0xfa>
 8001290:	4a96      	ldr	r2, [pc, #600]	; (80014ec <HAL_GPIO_Init+0x2a4>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d86f      	bhi.n	8001376 <HAL_GPIO_Init+0x12e>
 8001296:	4a96      	ldr	r2, [pc, #600]	; (80014f0 <HAL_GPIO_Init+0x2a8>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d052      	beq.n	8001342 <HAL_GPIO_Init+0xfa>
 800129c:	4a94      	ldr	r2, [pc, #592]	; (80014f0 <HAL_GPIO_Init+0x2a8>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d869      	bhi.n	8001376 <HAL_GPIO_Init+0x12e>
 80012a2:	4a94      	ldr	r2, [pc, #592]	; (80014f4 <HAL_GPIO_Init+0x2ac>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d04c      	beq.n	8001342 <HAL_GPIO_Init+0xfa>
 80012a8:	4a92      	ldr	r2, [pc, #584]	; (80014f4 <HAL_GPIO_Init+0x2ac>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d863      	bhi.n	8001376 <HAL_GPIO_Init+0x12e>
 80012ae:	4a92      	ldr	r2, [pc, #584]	; (80014f8 <HAL_GPIO_Init+0x2b0>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d046      	beq.n	8001342 <HAL_GPIO_Init+0xfa>
 80012b4:	4a90      	ldr	r2, [pc, #576]	; (80014f8 <HAL_GPIO_Init+0x2b0>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d85d      	bhi.n	8001376 <HAL_GPIO_Init+0x12e>
 80012ba:	2b12      	cmp	r3, #18
 80012bc:	d82a      	bhi.n	8001314 <HAL_GPIO_Init+0xcc>
 80012be:	2b12      	cmp	r3, #18
 80012c0:	d859      	bhi.n	8001376 <HAL_GPIO_Init+0x12e>
 80012c2:	a201      	add	r2, pc, #4	; (adr r2, 80012c8 <HAL_GPIO_Init+0x80>)
 80012c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c8:	08001343 	.word	0x08001343
 80012cc:	0800131d 	.word	0x0800131d
 80012d0:	0800132f 	.word	0x0800132f
 80012d4:	08001371 	.word	0x08001371
 80012d8:	08001377 	.word	0x08001377
 80012dc:	08001377 	.word	0x08001377
 80012e0:	08001377 	.word	0x08001377
 80012e4:	08001377 	.word	0x08001377
 80012e8:	08001377 	.word	0x08001377
 80012ec:	08001377 	.word	0x08001377
 80012f0:	08001377 	.word	0x08001377
 80012f4:	08001377 	.word	0x08001377
 80012f8:	08001377 	.word	0x08001377
 80012fc:	08001377 	.word	0x08001377
 8001300:	08001377 	.word	0x08001377
 8001304:	08001377 	.word	0x08001377
 8001308:	08001377 	.word	0x08001377
 800130c:	08001325 	.word	0x08001325
 8001310:	08001339 	.word	0x08001339
 8001314:	4a79      	ldr	r2, [pc, #484]	; (80014fc <HAL_GPIO_Init+0x2b4>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d013      	beq.n	8001342 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800131a:	e02c      	b.n	8001376 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	623b      	str	r3, [r7, #32]
          break;
 8001322:	e029      	b.n	8001378 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	3304      	adds	r3, #4
 800132a:	623b      	str	r3, [r7, #32]
          break;
 800132c:	e024      	b.n	8001378 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	3308      	adds	r3, #8
 8001334:	623b      	str	r3, [r7, #32]
          break;
 8001336:	e01f      	b.n	8001378 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	330c      	adds	r3, #12
 800133e:	623b      	str	r3, [r7, #32]
          break;
 8001340:	e01a      	b.n	8001378 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d102      	bne.n	8001350 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800134a:	2304      	movs	r3, #4
 800134c:	623b      	str	r3, [r7, #32]
          break;
 800134e:	e013      	b.n	8001378 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d105      	bne.n	8001364 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001358:	2308      	movs	r3, #8
 800135a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	69fa      	ldr	r2, [r7, #28]
 8001360:	611a      	str	r2, [r3, #16]
          break;
 8001362:	e009      	b.n	8001378 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001364:	2308      	movs	r3, #8
 8001366:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	69fa      	ldr	r2, [r7, #28]
 800136c:	615a      	str	r2, [r3, #20]
          break;
 800136e:	e003      	b.n	8001378 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001370:	2300      	movs	r3, #0
 8001372:	623b      	str	r3, [r7, #32]
          break;
 8001374:	e000      	b.n	8001378 <HAL_GPIO_Init+0x130>
          break;
 8001376:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	2bff      	cmp	r3, #255	; 0xff
 800137c:	d801      	bhi.n	8001382 <HAL_GPIO_Init+0x13a>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	e001      	b.n	8001386 <HAL_GPIO_Init+0x13e>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	3304      	adds	r3, #4
 8001386:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	2bff      	cmp	r3, #255	; 0xff
 800138c:	d802      	bhi.n	8001394 <HAL_GPIO_Init+0x14c>
 800138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	e002      	b.n	800139a <HAL_GPIO_Init+0x152>
 8001394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001396:	3b08      	subs	r3, #8
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	210f      	movs	r1, #15
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	fa01 f303 	lsl.w	r3, r1, r3
 80013a8:	43db      	mvns	r3, r3
 80013aa:	401a      	ands	r2, r3
 80013ac:	6a39      	ldr	r1, [r7, #32]
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	fa01 f303 	lsl.w	r3, r1, r3
 80013b4:	431a      	orrs	r2, r3
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	f000 80b1 	beq.w	800152a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013c8:	4b4d      	ldr	r3, [pc, #308]	; (8001500 <HAL_GPIO_Init+0x2b8>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	4a4c      	ldr	r2, [pc, #304]	; (8001500 <HAL_GPIO_Init+0x2b8>)
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	6193      	str	r3, [r2, #24]
 80013d4:	4b4a      	ldr	r3, [pc, #296]	; (8001500 <HAL_GPIO_Init+0x2b8>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	60bb      	str	r3, [r7, #8]
 80013de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013e0:	4a48      	ldr	r2, [pc, #288]	; (8001504 <HAL_GPIO_Init+0x2bc>)
 80013e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e4:	089b      	lsrs	r3, r3, #2
 80013e6:	3302      	adds	r3, #2
 80013e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f0:	f003 0303 	and.w	r3, r3, #3
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	220f      	movs	r2, #15
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	43db      	mvns	r3, r3
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	4013      	ands	r3, r2
 8001402:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4a40      	ldr	r2, [pc, #256]	; (8001508 <HAL_GPIO_Init+0x2c0>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d013      	beq.n	8001434 <HAL_GPIO_Init+0x1ec>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a3f      	ldr	r2, [pc, #252]	; (800150c <HAL_GPIO_Init+0x2c4>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d00d      	beq.n	8001430 <HAL_GPIO_Init+0x1e8>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4a3e      	ldr	r2, [pc, #248]	; (8001510 <HAL_GPIO_Init+0x2c8>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d007      	beq.n	800142c <HAL_GPIO_Init+0x1e4>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4a3d      	ldr	r2, [pc, #244]	; (8001514 <HAL_GPIO_Init+0x2cc>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d101      	bne.n	8001428 <HAL_GPIO_Init+0x1e0>
 8001424:	2303      	movs	r3, #3
 8001426:	e006      	b.n	8001436 <HAL_GPIO_Init+0x1ee>
 8001428:	2304      	movs	r3, #4
 800142a:	e004      	b.n	8001436 <HAL_GPIO_Init+0x1ee>
 800142c:	2302      	movs	r3, #2
 800142e:	e002      	b.n	8001436 <HAL_GPIO_Init+0x1ee>
 8001430:	2301      	movs	r3, #1
 8001432:	e000      	b.n	8001436 <HAL_GPIO_Init+0x1ee>
 8001434:	2300      	movs	r3, #0
 8001436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001438:	f002 0203 	and.w	r2, r2, #3
 800143c:	0092      	lsls	r2, r2, #2
 800143e:	4093      	lsls	r3, r2
 8001440:	68fa      	ldr	r2, [r7, #12]
 8001442:	4313      	orrs	r3, r2
 8001444:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001446:	492f      	ldr	r1, [pc, #188]	; (8001504 <HAL_GPIO_Init+0x2bc>)
 8001448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144a:	089b      	lsrs	r3, r3, #2
 800144c:	3302      	adds	r3, #2
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d006      	beq.n	800146e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001460:	4b2d      	ldr	r3, [pc, #180]	; (8001518 <HAL_GPIO_Init+0x2d0>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	492c      	ldr	r1, [pc, #176]	; (8001518 <HAL_GPIO_Init+0x2d0>)
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	4313      	orrs	r3, r2
 800146a:	600b      	str	r3, [r1, #0]
 800146c:	e006      	b.n	800147c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800146e:	4b2a      	ldr	r3, [pc, #168]	; (8001518 <HAL_GPIO_Init+0x2d0>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	43db      	mvns	r3, r3
 8001476:	4928      	ldr	r1, [pc, #160]	; (8001518 <HAL_GPIO_Init+0x2d0>)
 8001478:	4013      	ands	r3, r2
 800147a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d006      	beq.n	8001496 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001488:	4b23      	ldr	r3, [pc, #140]	; (8001518 <HAL_GPIO_Init+0x2d0>)
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	4922      	ldr	r1, [pc, #136]	; (8001518 <HAL_GPIO_Init+0x2d0>)
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	4313      	orrs	r3, r2
 8001492:	604b      	str	r3, [r1, #4]
 8001494:	e006      	b.n	80014a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001496:	4b20      	ldr	r3, [pc, #128]	; (8001518 <HAL_GPIO_Init+0x2d0>)
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	43db      	mvns	r3, r3
 800149e:	491e      	ldr	r1, [pc, #120]	; (8001518 <HAL_GPIO_Init+0x2d0>)
 80014a0:	4013      	ands	r3, r2
 80014a2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d006      	beq.n	80014be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014b0:	4b19      	ldr	r3, [pc, #100]	; (8001518 <HAL_GPIO_Init+0x2d0>)
 80014b2:	689a      	ldr	r2, [r3, #8]
 80014b4:	4918      	ldr	r1, [pc, #96]	; (8001518 <HAL_GPIO_Init+0x2d0>)
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	608b      	str	r3, [r1, #8]
 80014bc:	e006      	b.n	80014cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014be:	4b16      	ldr	r3, [pc, #88]	; (8001518 <HAL_GPIO_Init+0x2d0>)
 80014c0:	689a      	ldr	r2, [r3, #8]
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	43db      	mvns	r3, r3
 80014c6:	4914      	ldr	r1, [pc, #80]	; (8001518 <HAL_GPIO_Init+0x2d0>)
 80014c8:	4013      	ands	r3, r2
 80014ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d021      	beq.n	800151c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014d8:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <HAL_GPIO_Init+0x2d0>)
 80014da:	68da      	ldr	r2, [r3, #12]
 80014dc:	490e      	ldr	r1, [pc, #56]	; (8001518 <HAL_GPIO_Init+0x2d0>)
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	60cb      	str	r3, [r1, #12]
 80014e4:	e021      	b.n	800152a <HAL_GPIO_Init+0x2e2>
 80014e6:	bf00      	nop
 80014e8:	10320000 	.word	0x10320000
 80014ec:	10310000 	.word	0x10310000
 80014f0:	10220000 	.word	0x10220000
 80014f4:	10210000 	.word	0x10210000
 80014f8:	10120000 	.word	0x10120000
 80014fc:	10110000 	.word	0x10110000
 8001500:	40021000 	.word	0x40021000
 8001504:	40010000 	.word	0x40010000
 8001508:	40010800 	.word	0x40010800
 800150c:	40010c00 	.word	0x40010c00
 8001510:	40011000 	.word	0x40011000
 8001514:	40011400 	.word	0x40011400
 8001518:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800151c:	4b0b      	ldr	r3, [pc, #44]	; (800154c <HAL_GPIO_Init+0x304>)
 800151e:	68da      	ldr	r2, [r3, #12]
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	43db      	mvns	r3, r3
 8001524:	4909      	ldr	r1, [pc, #36]	; (800154c <HAL_GPIO_Init+0x304>)
 8001526:	4013      	ands	r3, r2
 8001528:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800152a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152c:	3301      	adds	r3, #1
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001536:	fa22 f303 	lsr.w	r3, r2, r3
 800153a:	2b00      	cmp	r3, #0
 800153c:	f47f ae8e 	bne.w	800125c <HAL_GPIO_Init+0x14>
  }
}
 8001540:	bf00      	nop
 8001542:	bf00      	nop
 8001544:	372c      	adds	r7, #44	; 0x2c
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr
 800154c:	40010400 	.word	0x40010400

08001550 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	460b      	mov	r3, r1
 800155a:	807b      	strh	r3, [r7, #2]
 800155c:	4613      	mov	r3, r2
 800155e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001560:	787b      	ldrb	r3, [r7, #1]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001566:	887a      	ldrh	r2, [r7, #2]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800156c:	e003      	b.n	8001576 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800156e:	887b      	ldrh	r3, [r7, #2]
 8001570:	041a      	lsls	r2, r3, #16
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	611a      	str	r2, [r3, #16]
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr

08001580 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001592:	887a      	ldrh	r2, [r7, #2]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4013      	ands	r3, r2
 8001598:	041a      	lsls	r2, r3, #16
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	43d9      	mvns	r1, r3
 800159e:	887b      	ldrh	r3, [r7, #2]
 80015a0:	400b      	ands	r3, r1
 80015a2:	431a      	orrs	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	611a      	str	r2, [r3, #16]
}
 80015a8:	bf00      	nop
 80015aa:	3714      	adds	r7, #20
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr
	...

080015b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80015be:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015c0:	695a      	ldr	r2, [r3, #20]
 80015c2:	88fb      	ldrh	r3, [r7, #6]
 80015c4:	4013      	ands	r3, r2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d006      	beq.n	80015d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015ca:	4a05      	ldr	r2, [pc, #20]	; (80015e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015cc:	88fb      	ldrh	r3, [r7, #6]
 80015ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015d0:	88fb      	ldrh	r3, [r7, #6]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 f806 	bl	80015e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80015d8:	bf00      	nop
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40010400 	.word	0x40010400

080015e4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr

080015f8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80015f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015fa:	b08b      	sub	sp, #44	; 0x2c
 80015fc:	af06      	add	r7, sp, #24
 80015fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e0fd      	b.n	8001806 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d106      	bne.n	8001624 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f006 f93e 	bl	80078a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2203      	movs	r2, #3
 8001628:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f002 faa1 	bl	8003b78 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	603b      	str	r3, [r7, #0]
 800163c:	687e      	ldr	r6, [r7, #4]
 800163e:	466d      	mov	r5, sp
 8001640:	f106 0410 	add.w	r4, r6, #16
 8001644:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001646:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001648:	6823      	ldr	r3, [r4, #0]
 800164a:	602b      	str	r3, [r5, #0]
 800164c:	1d33      	adds	r3, r6, #4
 800164e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001650:	6838      	ldr	r0, [r7, #0]
 8001652:	f002 fa6b 	bl	8003b2c <USB_CoreInit>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d005      	beq.n	8001668 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2202      	movs	r2, #2
 8001660:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e0ce      	b.n	8001806 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2100      	movs	r1, #0
 800166e:	4618      	mov	r0, r3
 8001670:	f002 fa9c 	bl	8003bac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001674:	2300      	movs	r3, #0
 8001676:	73fb      	strb	r3, [r7, #15]
 8001678:	e04c      	b.n	8001714 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800167a:	7bfb      	ldrb	r3, [r7, #15]
 800167c:	6879      	ldr	r1, [r7, #4]
 800167e:	1c5a      	adds	r2, r3, #1
 8001680:	4613      	mov	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	00db      	lsls	r3, r3, #3
 8001688:	440b      	add	r3, r1
 800168a:	3301      	adds	r3, #1
 800168c:	2201      	movs	r2, #1
 800168e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001690:	7bfb      	ldrb	r3, [r7, #15]
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	1c5a      	adds	r2, r3, #1
 8001696:	4613      	mov	r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	4413      	add	r3, r2
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	440b      	add	r3, r1
 80016a0:	7bfa      	ldrb	r2, [r7, #15]
 80016a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80016a4:	7bfa      	ldrb	r2, [r7, #15]
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
 80016a8:	b298      	uxth	r0, r3
 80016aa:	6879      	ldr	r1, [r7, #4]
 80016ac:	4613      	mov	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	440b      	add	r3, r1
 80016b6:	3336      	adds	r3, #54	; 0x36
 80016b8:	4602      	mov	r2, r0
 80016ba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80016bc:	7bfb      	ldrb	r3, [r7, #15]
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	1c5a      	adds	r2, r3, #1
 80016c2:	4613      	mov	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	440b      	add	r3, r1
 80016cc:	3303      	adds	r3, #3
 80016ce:	2200      	movs	r2, #0
 80016d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80016d2:	7bfa      	ldrb	r2, [r7, #15]
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	4613      	mov	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4413      	add	r3, r2
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	440b      	add	r3, r1
 80016e0:	3338      	adds	r3, #56	; 0x38
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80016e6:	7bfa      	ldrb	r2, [r7, #15]
 80016e8:	6879      	ldr	r1, [r7, #4]
 80016ea:	4613      	mov	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4413      	add	r3, r2
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	440b      	add	r3, r1
 80016f4:	333c      	adds	r3, #60	; 0x3c
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80016fa:	7bfa      	ldrb	r2, [r7, #15]
 80016fc:	6879      	ldr	r1, [r7, #4]
 80016fe:	4613      	mov	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4413      	add	r3, r2
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	440b      	add	r3, r1
 8001708:	3340      	adds	r3, #64	; 0x40
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800170e:	7bfb      	ldrb	r3, [r7, #15]
 8001710:	3301      	adds	r3, #1
 8001712:	73fb      	strb	r3, [r7, #15]
 8001714:	7bfa      	ldrb	r2, [r7, #15]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	429a      	cmp	r2, r3
 800171c:	d3ad      	bcc.n	800167a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800171e:	2300      	movs	r3, #0
 8001720:	73fb      	strb	r3, [r7, #15]
 8001722:	e044      	b.n	80017ae <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001724:	7bfa      	ldrb	r2, [r7, #15]
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	4613      	mov	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4413      	add	r3, r2
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	440b      	add	r3, r1
 8001732:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001736:	2200      	movs	r2, #0
 8001738:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800173a:	7bfa      	ldrb	r2, [r7, #15]
 800173c:	6879      	ldr	r1, [r7, #4]
 800173e:	4613      	mov	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	440b      	add	r3, r1
 8001748:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800174c:	7bfa      	ldrb	r2, [r7, #15]
 800174e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001750:	7bfa      	ldrb	r2, [r7, #15]
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	4613      	mov	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	4413      	add	r3, r2
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	440b      	add	r3, r1
 800175e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001766:	7bfa      	ldrb	r2, [r7, #15]
 8001768:	6879      	ldr	r1, [r7, #4]
 800176a:	4613      	mov	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	440b      	add	r3, r1
 8001774:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800177c:	7bfa      	ldrb	r2, [r7, #15]
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	4613      	mov	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	440b      	add	r3, r1
 800178a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001792:	7bfa      	ldrb	r2, [r7, #15]
 8001794:	6879      	ldr	r1, [r7, #4]
 8001796:	4613      	mov	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4413      	add	r3, r2
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	440b      	add	r3, r1
 80017a0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
 80017aa:	3301      	adds	r3, #1
 80017ac:	73fb      	strb	r3, [r7, #15]
 80017ae:	7bfa      	ldrb	r2, [r7, #15]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d3b5      	bcc.n	8001724 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	603b      	str	r3, [r7, #0]
 80017be:	687e      	ldr	r6, [r7, #4]
 80017c0:	466d      	mov	r5, sp
 80017c2:	f106 0410 	add.w	r4, r6, #16
 80017c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017ca:	6823      	ldr	r3, [r4, #0]
 80017cc:	602b      	str	r3, [r5, #0]
 80017ce:	1d33      	adds	r3, r6, #4
 80017d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017d2:	6838      	ldr	r0, [r7, #0]
 80017d4:	f002 f9f6 	bl	8003bc4 <USB_DevInit>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d005      	beq.n	80017ea <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2202      	movs	r2, #2
 80017e2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e00d      	b.n	8001806 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2201      	movs	r2, #1
 80017f6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f004 f990 	bl	8005b24 <USB_DevDisconnect>

  return HAL_OK;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3714      	adds	r7, #20
 800180a:	46bd      	mov	sp, r7
 800180c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800180e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800181c:	2b01      	cmp	r3, #1
 800181e:	d101      	bne.n	8001824 <HAL_PCD_Start+0x16>
 8001820:	2302      	movs	r3, #2
 8001822:	e016      	b.n	8001852 <HAL_PCD_Start+0x44>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2201      	movs	r2, #1
 8001828:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f002 f98b 	bl	8003b4c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001836:	2101      	movs	r1, #1
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f006 faa4 	bl	8007d86 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f004 f964 	bl	8005b10 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b088      	sub	sp, #32
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f004 f966 	bl	8005b38 <USB_ReadInterrupts>
 800186c:	4603      	mov	r3, r0
 800186e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001872:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001876:	d102      	bne.n	800187e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 fb61 	bl	8001f40 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f004 f958 	bl	8005b38 <USB_ReadInterrupts>
 8001888:	4603      	mov	r3, r0
 800188a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800188e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001892:	d112      	bne.n	80018ba <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800189c:	b29a      	uxth	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018a6:	b292      	uxth	r2, r2
 80018a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f006 f872 	bl	8007996 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80018b2:	2100      	movs	r1, #0
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f000 f925 	bl	8001b04 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f004 f93a 	bl	8005b38 <USB_ReadInterrupts>
 80018c4:	4603      	mov	r3, r0
 80018c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018ce:	d10b      	bne.n	80018e8 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018d8:	b29a      	uxth	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80018e2:	b292      	uxth	r2, r2
 80018e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f004 f923 	bl	8005b38 <USB_ReadInterrupts>
 80018f2:	4603      	mov	r3, r0
 80018f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018fc:	d10b      	bne.n	8001916 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001906:	b29a      	uxth	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001910:	b292      	uxth	r2, r2
 8001912:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f004 f90c 	bl	8005b38 <USB_ReadInterrupts>
 8001920:	4603      	mov	r3, r0
 8001922:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800192a:	d126      	bne.n	800197a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001934:	b29a      	uxth	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f022 0204 	bic.w	r2, r2, #4
 800193e:	b292      	uxth	r2, r2
 8001940:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800194c:	b29a      	uxth	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f022 0208 	bic.w	r2, r2, #8
 8001956:	b292      	uxth	r2, r2
 8001958:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f006 f853 	bl	8007a08 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800196a:	b29a      	uxth	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001974:	b292      	uxth	r2, r2
 8001976:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f004 f8da 	bl	8005b38 <USB_ReadInterrupts>
 8001984:	4603      	mov	r3, r0
 8001986:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800198a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800198e:	f040 8084 	bne.w	8001a9a <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001992:	2300      	movs	r3, #0
 8001994:	77fb      	strb	r3, [r7, #31]
 8001996:	e011      	b.n	80019bc <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	461a      	mov	r2, r3
 800199e:	7ffb      	ldrb	r3, [r7, #31]
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	441a      	add	r2, r3
 80019a4:	7ffb      	ldrb	r3, [r7, #31]
 80019a6:	8812      	ldrh	r2, [r2, #0]
 80019a8:	b292      	uxth	r2, r2
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	f107 0120 	add.w	r1, r7, #32
 80019b0:	440b      	add	r3, r1
 80019b2:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80019b6:	7ffb      	ldrb	r3, [r7, #31]
 80019b8:	3301      	adds	r3, #1
 80019ba:	77fb      	strb	r3, [r7, #31]
 80019bc:	7ffb      	ldrb	r3, [r7, #31]
 80019be:	2b07      	cmp	r3, #7
 80019c0:	d9ea      	bls.n	8001998 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f042 0201 	orr.w	r2, r2, #1
 80019d4:	b292      	uxth	r2, r2
 80019d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f022 0201 	bic.w	r2, r2, #1
 80019ec:	b292      	uxth	r2, r2
 80019ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80019f2:	bf00      	nop
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d0f6      	beq.n	80019f4 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a18:	b292      	uxth	r2, r2
 8001a1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001a1e:	2300      	movs	r3, #0
 8001a20:	77fb      	strb	r3, [r7, #31]
 8001a22:	e010      	b.n	8001a46 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001a24:	7ffb      	ldrb	r3, [r7, #31]
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	6812      	ldr	r2, [r2, #0]
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	7ffa      	ldrb	r2, [r7, #31]
 8001a2e:	0092      	lsls	r2, r2, #2
 8001a30:	440a      	add	r2, r1
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	f107 0120 	add.w	r1, r7, #32
 8001a38:	440b      	add	r3, r1
 8001a3a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001a3e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001a40:	7ffb      	ldrb	r3, [r7, #31]
 8001a42:	3301      	adds	r3, #1
 8001a44:	77fb      	strb	r3, [r7, #31]
 8001a46:	7ffb      	ldrb	r3, [r7, #31]
 8001a48:	2b07      	cmp	r3, #7
 8001a4a:	d9eb      	bls.n	8001a24 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f042 0208 	orr.w	r2, r2, #8
 8001a5e:	b292      	uxth	r2, r2
 8001a60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a76:	b292      	uxth	r2, r2
 8001a78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f042 0204 	orr.w	r2, r2, #4
 8001a8e:	b292      	uxth	r2, r2
 8001a90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f005 ff9d 	bl	80079d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f004 f84a 	bl	8005b38 <USB_ReadInterrupts>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aae:	d10e      	bne.n	8001ace <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ac2:	b292      	uxth	r2, r2
 8001ac4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f005 ff56 	bl	800797a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f004 f830 	bl	8005b38 <USB_ReadInterrupts>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ade:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ae2:	d10b      	bne.n	8001afc <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001af6:	b292      	uxth	r2, r2
 8001af8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001afc:	bf00      	nop
 8001afe:	3720      	adds	r7, #32
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d101      	bne.n	8001b1e <HAL_PCD_SetAddress+0x1a>
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	e013      	b.n	8001b46 <HAL_PCD_SetAddress+0x42>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2201      	movs	r2, #1
 8001b22:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	78fa      	ldrb	r2, [r7, #3]
 8001b2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	78fa      	ldrb	r2, [r7, #3]
 8001b34:	4611      	mov	r1, r2
 8001b36:	4618      	mov	r0, r3
 8001b38:	f003 ffd7 	bl	8005aea <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b084      	sub	sp, #16
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
 8001b56:	4608      	mov	r0, r1
 8001b58:	4611      	mov	r1, r2
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	70fb      	strb	r3, [r7, #3]
 8001b60:	460b      	mov	r3, r1
 8001b62:	803b      	strh	r3, [r7, #0]
 8001b64:	4613      	mov	r3, r2
 8001b66:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	da0e      	bge.n	8001b92 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b74:	78fb      	ldrb	r3, [r7, #3]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	1c5a      	adds	r2, r3, #1
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	4413      	add	r3, r2
 8001b88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	705a      	strb	r2, [r3, #1]
 8001b90:	e00e      	b.n	8001bb0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b92:	78fb      	ldrb	r3, [r7, #3]
 8001b94:	f003 0207 	and.w	r2, r3, #7
 8001b98:	4613      	mov	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2200      	movs	r2, #0
 8001bae:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001bb0:	78fb      	ldrb	r3, [r7, #3]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001bbc:	883a      	ldrh	r2, [r7, #0]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	78ba      	ldrb	r2, [r7, #2]
 8001bc6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	785b      	ldrb	r3, [r3, #1]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d004      	beq.n	8001bda <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001bda:	78bb      	ldrb	r3, [r7, #2]
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d102      	bne.n	8001be6 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2200      	movs	r2, #0
 8001be4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d101      	bne.n	8001bf4 <HAL_PCD_EP_Open+0xa6>
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	e00e      	b.n	8001c12 <HAL_PCD_EP_Open+0xc4>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68f9      	ldr	r1, [r7, #12]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f001 fffe 	bl	8003c04 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001c10:	7afb      	ldrb	r3, [r7, #11]
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b084      	sub	sp, #16
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
 8001c22:	460b      	mov	r3, r1
 8001c24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	da0e      	bge.n	8001c4c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c2e:	78fb      	ldrb	r3, [r7, #3]
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	1c5a      	adds	r2, r3, #1
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	4413      	add	r3, r2
 8001c42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2201      	movs	r2, #1
 8001c48:	705a      	strb	r2, [r3, #1]
 8001c4a:	e00e      	b.n	8001c6a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c4c:	78fb      	ldrb	r3, [r7, #3]
 8001c4e:	f003 0207 	and.w	r2, r3, #7
 8001c52:	4613      	mov	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2200      	movs	r2, #0
 8001c68:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001c6a:	78fb      	ldrb	r3, [r7, #3]
 8001c6c:	f003 0307 	and.w	r3, r3, #7
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d101      	bne.n	8001c84 <HAL_PCD_EP_Close+0x6a>
 8001c80:	2302      	movs	r3, #2
 8001c82:	e00e      	b.n	8001ca2 <HAL_PCD_EP_Close+0x88>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68f9      	ldr	r1, [r7, #12]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f002 fb20 	bl	80042d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b086      	sub	sp, #24
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	60f8      	str	r0, [r7, #12]
 8001cb2:	607a      	str	r2, [r7, #4]
 8001cb4:	603b      	str	r3, [r7, #0]
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cba:	7afb      	ldrb	r3, [r7, #11]
 8001cbc:	f003 0207 	and.w	r2, r3, #7
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4413      	add	r3, r2
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	4413      	add	r3, r2
 8001cd0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cea:	7afb      	ldrb	r3, [r7, #11]
 8001cec:	f003 0307 	and.w	r3, r3, #7
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cf6:	7afb      	ldrb	r3, [r7, #11]
 8001cf8:	f003 0307 	and.w	r3, r3, #7
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d106      	bne.n	8001d0e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6979      	ldr	r1, [r7, #20]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f002 fcd2 	bl	80046b0 <USB_EPStartXfer>
 8001d0c:	e005      	b.n	8001d1a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6979      	ldr	r1, [r7, #20]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f002 fccb 	bl	80046b0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d30:	78fb      	ldrb	r3, [r7, #3]
 8001d32:	f003 0207 	and.w	r2, r3, #7
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	440b      	add	r3, r1
 8001d42:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001d46:	681b      	ldr	r3, [r3, #0]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bc80      	pop	{r7}
 8001d50:	4770      	bx	lr

08001d52 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b086      	sub	sp, #24
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	60f8      	str	r0, [r7, #12]
 8001d5a:	607a      	str	r2, [r7, #4]
 8001d5c:	603b      	str	r3, [r7, #0]
 8001d5e:	460b      	mov	r3, r1
 8001d60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d62:	7afb      	ldrb	r3, [r7, #11]
 8001d64:	f003 0307 	and.w	r3, r3, #7
 8001d68:	1c5a      	adds	r2, r3, #1
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	4413      	add	r3, r2
 8001d76:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	2200      	movs	r2, #0
 8001d96:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d9e:	7afb      	ldrb	r3, [r7, #11]
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001daa:	7afb      	ldrb	r3, [r7, #11]
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d106      	bne.n	8001dc2 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6979      	ldr	r1, [r7, #20]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f002 fc78 	bl	80046b0 <USB_EPStartXfer>
 8001dc0:	e005      	b.n	8001dce <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6979      	ldr	r1, [r7, #20]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f002 fc71 	bl	80046b0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3718      	adds	r7, #24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	460b      	mov	r3, r1
 8001de2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001de4:	78fb      	ldrb	r3, [r7, #3]
 8001de6:	f003 0207 	and.w	r2, r3, #7
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d901      	bls.n	8001df6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e04c      	b.n	8001e90 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001df6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	da0e      	bge.n	8001e1c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dfe:	78fb      	ldrb	r3, [r7, #3]
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	1c5a      	adds	r2, r3, #1
 8001e06:	4613      	mov	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	4413      	add	r3, r2
 8001e12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2201      	movs	r2, #1
 8001e18:	705a      	strb	r2, [r3, #1]
 8001e1a:	e00c      	b.n	8001e36 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e1c:	78fa      	ldrb	r2, [r7, #3]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2200      	movs	r2, #0
 8001e34:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e3c:	78fb      	ldrb	r3, [r7, #3]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d101      	bne.n	8001e56 <HAL_PCD_EP_SetStall+0x7e>
 8001e52:	2302      	movs	r3, #2
 8001e54:	e01c      	b.n	8001e90 <HAL_PCD_EP_SetStall+0xb8>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68f9      	ldr	r1, [r7, #12]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f003 fd43 	bl	80058f0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e6a:	78fb      	ldrb	r3, [r7, #3]
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d108      	bne.n	8001e86 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4610      	mov	r0, r2
 8001e82:	f003 fe68 	bl	8005b56 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001ea4:	78fb      	ldrb	r3, [r7, #3]
 8001ea6:	f003 020f 	and.w	r2, r3, #15
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d901      	bls.n	8001eb6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e040      	b.n	8001f38 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001eb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	da0e      	bge.n	8001edc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ebe:	78fb      	ldrb	r3, [r7, #3]
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	1c5a      	adds	r2, r3, #1
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	705a      	strb	r2, [r3, #1]
 8001eda:	e00e      	b.n	8001efa <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001edc:	78fb      	ldrb	r3, [r7, #3]
 8001ede:	f003 0207 	and.w	r2, r3, #7
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2200      	movs	r2, #0
 8001efe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f00:	78fb      	ldrb	r3, [r7, #3]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	b2da      	uxtb	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d101      	bne.n	8001f1a <HAL_PCD_EP_ClrStall+0x82>
 8001f16:	2302      	movs	r3, #2
 8001f18:	e00e      	b.n	8001f38 <HAL_PCD_EP_ClrStall+0xa0>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68f9      	ldr	r1, [r7, #12]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f003 fd31 	bl	8005990 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08e      	sub	sp, #56	; 0x38
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f48:	e2df      	b.n	800250a <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f52:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001f54:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	f003 030f 	and.w	r3, r3, #15
 8001f5c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001f60:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f040 8158 	bne.w	800221a <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001f6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f6c:	f003 0310 	and.w	r3, r3, #16
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d152      	bne.n	800201a <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	881b      	ldrh	r3, [r3, #0]
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001f80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f84:	81fb      	strh	r3, [r7, #14]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	89fb      	ldrh	r3, [r7, #14]
 8001f8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3328      	adds	r3, #40	; 0x28
 8001f9c:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	461a      	mov	r2, r3
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	3302      	adds	r3, #2
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	6812      	ldr	r2, [r2, #0]
 8001fba:	4413      	add	r3, r2
 8001fbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fc0:	881b      	ldrh	r3, [r3, #0]
 8001fc2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	695a      	ldr	r2, [r3, #20]
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	441a      	add	r2, r3
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001fd8:	2100      	movs	r1, #0
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f005 fcb3 	bl	8007946 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f000 828e 	beq.w	800250a <PCD_EP_ISR_Handler+0x5ca>
 8001fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f040 8289 	bne.w	800250a <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002004:	b2da      	uxtb	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	b292      	uxth	r2, r2
 800200c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002018:	e277      	b.n	800250a <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002020:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	881b      	ldrh	r3, [r3, #0]
 8002028:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800202a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800202c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002030:	2b00      	cmp	r3, #0
 8002032:	d034      	beq.n	800209e <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800203c:	b29b      	uxth	r3, r3
 800203e:	461a      	mov	r2, r3
 8002040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	4413      	add	r3, r2
 8002048:	3306      	adds	r3, #6
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6812      	ldr	r2, [r2, #0]
 8002050:	4413      	add	r3, r2
 8002052:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002056:	881b      	ldrh	r3, [r3, #0]
 8002058:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6818      	ldr	r0, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002072:	b29b      	uxth	r3, r3
 8002074:	f003 fdbf 	bl	8005bf6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	881b      	ldrh	r3, [r3, #0]
 800207e:	b29a      	uxth	r2, r3
 8002080:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002084:	4013      	ands	r3, r2
 8002086:	823b      	strh	r3, [r7, #16]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	8a3a      	ldrh	r2, [r7, #16]
 800208e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002092:	b292      	uxth	r2, r2
 8002094:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f005 fc28 	bl	80078ec <HAL_PCD_SetupStageCallback>
 800209c:	e235      	b.n	800250a <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800209e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f280 8231 	bge.w	800250a <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	881b      	ldrh	r3, [r3, #0]
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80020b4:	4013      	ands	r3, r2
 80020b6:	83bb      	strh	r3, [r7, #28]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	8bba      	ldrh	r2, [r7, #28]
 80020be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020c2:	b292      	uxth	r2, r2
 80020c4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	461a      	mov	r2, r3
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	4413      	add	r3, r2
 80020da:	3306      	adds	r3, #6
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	6812      	ldr	r2, [r2, #0]
 80020e2:	4413      	add	r3, r2
 80020e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020e8:	881b      	ldrh	r3, [r3, #0]
 80020ea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d019      	beq.n	800212e <PCD_EP_ISR_Handler+0x1ee>
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d015      	beq.n	800212e <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6818      	ldr	r0, [r3, #0]
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	6959      	ldr	r1, [r3, #20]
 800210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002112:	b29b      	uxth	r3, r3
 8002114:	f003 fd6f 	bl	8005bf6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211a:	695a      	ldr	r2, [r3, #20]
 800211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211e:	69db      	ldr	r3, [r3, #28]
 8002120:	441a      	add	r2, r3
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002126:	2100      	movs	r1, #0
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f005 fbf1 	bl	8007910 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	61bb      	str	r3, [r7, #24]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800213c:	b29b      	uxth	r3, r3
 800213e:	461a      	mov	r2, r3
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	4413      	add	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800214c:	617b      	str	r3, [r7, #20]
 800214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d112      	bne.n	800217c <PCD_EP_ISR_Handler+0x23c>
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	881b      	ldrh	r3, [r3, #0]
 800215a:	b29b      	uxth	r3, r3
 800215c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002160:	b29a      	uxth	r2, r3
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	801a      	strh	r2, [r3, #0]
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	881b      	ldrh	r3, [r3, #0]
 800216a:	b29b      	uxth	r3, r3
 800216c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002170:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002174:	b29a      	uxth	r2, r3
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	801a      	strh	r2, [r3, #0]
 800217a:	e02f      	b.n	80021dc <PCD_EP_ISR_Handler+0x29c>
 800217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	2b3e      	cmp	r3, #62	; 0x3e
 8002182:	d813      	bhi.n	80021ac <PCD_EP_ISR_Handler+0x26c>
 8002184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	085b      	lsrs	r3, r3, #1
 800218a:	633b      	str	r3, [r7, #48]	; 0x30
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	2b00      	cmp	r3, #0
 8002196:	d002      	beq.n	800219e <PCD_EP_ISR_Handler+0x25e>
 8002198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800219a:	3301      	adds	r3, #1
 800219c:	633b      	str	r3, [r7, #48]	; 0x30
 800219e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	029b      	lsls	r3, r3, #10
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	801a      	strh	r2, [r3, #0]
 80021aa:	e017      	b.n	80021dc <PCD_EP_ISR_Handler+0x29c>
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	095b      	lsrs	r3, r3, #5
 80021b2:	633b      	str	r3, [r7, #48]	; 0x30
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	f003 031f 	and.w	r3, r3, #31
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d102      	bne.n	80021c6 <PCD_EP_ISR_Handler+0x286>
 80021c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c2:	3b01      	subs	r3, #1
 80021c4:	633b      	str	r3, [r7, #48]	; 0x30
 80021c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	029b      	lsls	r3, r3, #10
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	881b      	ldrh	r3, [r3, #0]
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ec:	827b      	strh	r3, [r7, #18]
 80021ee:	8a7b      	ldrh	r3, [r7, #18]
 80021f0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80021f4:	827b      	strh	r3, [r7, #18]
 80021f6:	8a7b      	ldrh	r3, [r7, #18]
 80021f8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80021fc:	827b      	strh	r3, [r7, #18]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	8a7b      	ldrh	r3, [r7, #18]
 8002204:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002208:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800220c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002214:	b29b      	uxth	r3, r3
 8002216:	8013      	strh	r3, [r2, #0]
 8002218:	e177      	b.n	800250a <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	461a      	mov	r2, r3
 8002220:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800222c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002230:	2b00      	cmp	r3, #0
 8002232:	f280 80ea 	bge.w	800240a <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	461a      	mov	r2, r3
 800223c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	881b      	ldrh	r3, [r3, #0]
 8002246:	b29a      	uxth	r2, r3
 8002248:	f640 738f 	movw	r3, #3983	; 0xf8f
 800224c:	4013      	ands	r3, r2
 800224e:	853b      	strh	r3, [r7, #40]	; 0x28
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	461a      	mov	r2, r3
 8002256:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002260:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002264:	b292      	uxth	r2, r2
 8002266:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002268:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800226c:	4613      	mov	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	4413      	add	r3, r2
 800227c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	7b1b      	ldrb	r3, [r3, #12]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d122      	bne.n	80022cc <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800228e:	b29b      	uxth	r3, r3
 8002290:	461a      	mov	r2, r3
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	4413      	add	r3, r2
 800229a:	3306      	adds	r3, #6
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	6812      	ldr	r2, [r2, #0]
 80022a2:	4413      	add	r3, r2
 80022a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022a8:	881b      	ldrh	r3, [r3, #0]
 80022aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022ae:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80022b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f000 8087 	beq.w	80023c6 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6818      	ldr	r0, [r3, #0]
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	6959      	ldr	r1, [r3, #20]
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	88da      	ldrh	r2, [r3, #6]
 80022c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022c6:	f003 fc96 	bl	8005bf6 <USB_ReadPMA>
 80022ca:	e07c      	b.n	80023c6 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80022cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ce:	78db      	ldrb	r3, [r3, #3]
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d108      	bne.n	80022e6 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80022d4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80022d6:	461a      	mov	r2, r3
 80022d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f923 	bl	8002526 <HAL_PCD_EP_DB_Receive>
 80022e0:	4603      	mov	r3, r0
 80022e2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80022e4:	e06f      	b.n	80023c6 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	461a      	mov	r2, r3
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	4413      	add	r3, r2
 80022f4:	881b      	ldrh	r3, [r3, #0]
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002300:	847b      	strh	r3, [r7, #34]	; 0x22
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	461a      	mov	r2, r3
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	441a      	add	r2, r3
 8002310:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002312:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002316:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800231a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800231e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002322:	b29b      	uxth	r3, r3
 8002324:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	461a      	mov	r2, r3
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	b29b      	uxth	r3, r3
 8002338:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d021      	beq.n	8002384 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002348:	b29b      	uxth	r3, r3
 800234a:	461a      	mov	r2, r3
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	4413      	add	r3, r2
 8002354:	3302      	adds	r3, #2
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6812      	ldr	r2, [r2, #0]
 800235c:	4413      	add	r3, r2
 800235e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002362:	881b      	ldrh	r3, [r3, #0]
 8002364:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002368:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800236a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800236c:	2b00      	cmp	r3, #0
 800236e:	d02a      	beq.n	80023c6 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6818      	ldr	r0, [r3, #0]
 8002374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002376:	6959      	ldr	r1, [r3, #20]
 8002378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237a:	891a      	ldrh	r2, [r3, #8]
 800237c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800237e:	f003 fc3a 	bl	8005bf6 <USB_ReadPMA>
 8002382:	e020      	b.n	80023c6 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800238c:	b29b      	uxth	r3, r3
 800238e:	461a      	mov	r2, r3
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	4413      	add	r3, r2
 8002398:	3306      	adds	r3, #6
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6812      	ldr	r2, [r2, #0]
 80023a0:	4413      	add	r3, r2
 80023a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023a6:	881b      	ldrh	r3, [r3, #0]
 80023a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023ac:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80023ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d008      	beq.n	80023c6 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6818      	ldr	r0, [r3, #0]
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	6959      	ldr	r1, [r3, #20]
 80023bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023be:	895a      	ldrh	r2, [r3, #10]
 80023c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023c2:	f003 fc18 	bl	8005bf6 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	69da      	ldr	r2, [r3, #28]
 80023ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023cc:	441a      	add	r2, r3
 80023ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	695a      	ldr	r2, [r3, #20]
 80023d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023d8:	441a      	add	r2, r3
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80023de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d004      	beq.n	80023f0 <PCD_EP_ISR_Handler+0x4b0>
 80023e6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d206      	bcs.n	80023fe <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	4619      	mov	r1, r3
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f005 fa8a 	bl	8007910 <HAL_PCD_DataOutStageCallback>
 80023fc:	e005      	b.n	800240a <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002404:	4618      	mov	r0, r3
 8002406:	f002 f953 	bl	80046b0 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800240a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800240c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002410:	2b00      	cmp	r3, #0
 8002412:	d07a      	beq.n	800250a <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8002414:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002418:	1c5a      	adds	r2, r3, #1
 800241a:	4613      	mov	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	4413      	add	r3, r2
 8002426:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	461a      	mov	r2, r3
 800242e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	881b      	ldrh	r3, [r3, #0]
 8002438:	b29b      	uxth	r3, r3
 800243a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800243e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002442:	843b      	strh	r3, [r7, #32]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	461a      	mov	r2, r3
 800244a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	441a      	add	r2, r3
 8002452:	8c3b      	ldrh	r3, [r7, #32]
 8002454:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002458:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800245c:	b29b      	uxth	r3, r3
 800245e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002462:	78db      	ldrb	r3, [r3, #3]
 8002464:	2b02      	cmp	r3, #2
 8002466:	d108      	bne.n	800247a <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246a:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800246c:	2b02      	cmp	r3, #2
 800246e:	d146      	bne.n	80024fe <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002470:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002476:	2b00      	cmp	r3, #0
 8002478:	d141      	bne.n	80024fe <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002482:	b29b      	uxth	r3, r3
 8002484:	461a      	mov	r2, r3
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	4413      	add	r3, r2
 800248e:	3302      	adds	r3, #2
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6812      	ldr	r2, [r2, #0]
 8002496:	4413      	add	r3, r2
 8002498:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800249c:	881b      	ldrh	r3, [r3, #0]
 800249e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024a2:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80024a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a6:	699a      	ldr	r2, [r3, #24]
 80024a8:	8bfb      	ldrh	r3, [r7, #30]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d906      	bls.n	80024bc <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	699a      	ldr	r2, [r3, #24]
 80024b2:	8bfb      	ldrh	r3, [r7, #30]
 80024b4:	1ad2      	subs	r2, r2, r3
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	619a      	str	r2, [r3, #24]
 80024ba:	e002      	b.n	80024c2 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 80024bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024be:	2200      	movs	r2, #0
 80024c0:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d106      	bne.n	80024d8 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	4619      	mov	r1, r3
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f005 fa38 	bl	8007946 <HAL_PCD_DataInStageCallback>
 80024d6:	e018      	b.n	800250a <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80024d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024da:	695a      	ldr	r2, [r3, #20]
 80024dc:	8bfb      	ldrh	r3, [r7, #30]
 80024de:	441a      	add	r2, r3
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	69da      	ldr	r2, [r3, #28]
 80024e8:	8bfb      	ldrh	r3, [r7, #30]
 80024ea:	441a      	add	r2, r3
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024f6:	4618      	mov	r0, r3
 80024f8:	f002 f8da 	bl	80046b0 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80024fc:	e005      	b.n	800250a <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80024fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002500:	461a      	mov	r2, r3
 8002502:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f000 f91b 	bl	8002740 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002512:	b29b      	uxth	r3, r3
 8002514:	b21b      	sxth	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	f6ff ad17 	blt.w	8001f4a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3738      	adds	r7, #56	; 0x38
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b088      	sub	sp, #32
 800252a:	af00      	add	r7, sp, #0
 800252c:	60f8      	str	r0, [r7, #12]
 800252e:	60b9      	str	r1, [r7, #8]
 8002530:	4613      	mov	r3, r2
 8002532:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002534:	88fb      	ldrh	r3, [r7, #6]
 8002536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d07e      	beq.n	800263c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002546:	b29b      	uxth	r3, r3
 8002548:	461a      	mov	r2, r3
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	4413      	add	r3, r2
 8002552:	3302      	adds	r3, #2
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	6812      	ldr	r2, [r2, #0]
 800255a:	4413      	add	r3, r2
 800255c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002566:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	699a      	ldr	r2, [r3, #24]
 800256c:	8b7b      	ldrh	r3, [r7, #26]
 800256e:	429a      	cmp	r2, r3
 8002570:	d306      	bcc.n	8002580 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	699a      	ldr	r2, [r3, #24]
 8002576:	8b7b      	ldrh	r3, [r7, #26]
 8002578:	1ad2      	subs	r2, r2, r3
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	619a      	str	r2, [r3, #24]
 800257e:	e002      	b.n	8002586 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	2200      	movs	r2, #0
 8002584:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d123      	bne.n	80025d6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	461a      	mov	r2, r3
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4413      	add	r3, r2
 800259c:	881b      	ldrh	r3, [r3, #0]
 800259e:	b29b      	uxth	r3, r3
 80025a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025a8:	833b      	strh	r3, [r7, #24]
 80025aa:	8b3b      	ldrh	r3, [r7, #24]
 80025ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80025b0:	833b      	strh	r3, [r7, #24]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	461a      	mov	r2, r3
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	441a      	add	r2, r3
 80025c0:	8b3b      	ldrh	r3, [r7, #24]
 80025c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80025d6:	88fb      	ldrh	r3, [r7, #6]
 80025d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d01f      	beq.n	8002620 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	461a      	mov	r2, r3
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	881b      	ldrh	r3, [r3, #0]
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025fa:	82fb      	strh	r3, [r7, #22]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	461a      	mov	r2, r3
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	441a      	add	r2, r3
 800260a:	8afb      	ldrh	r3, [r7, #22]
 800260c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002610:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002614:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002618:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800261c:	b29b      	uxth	r3, r3
 800261e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002620:	8b7b      	ldrh	r3, [r7, #26]
 8002622:	2b00      	cmp	r3, #0
 8002624:	f000 8087 	beq.w	8002736 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6818      	ldr	r0, [r3, #0]
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	6959      	ldr	r1, [r3, #20]
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	891a      	ldrh	r2, [r3, #8]
 8002634:	8b7b      	ldrh	r3, [r7, #26]
 8002636:	f003 fade 	bl	8005bf6 <USB_ReadPMA>
 800263a:	e07c      	b.n	8002736 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002644:	b29b      	uxth	r3, r3
 8002646:	461a      	mov	r2, r3
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	4413      	add	r3, r2
 8002650:	3306      	adds	r3, #6
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	6812      	ldr	r2, [r2, #0]
 8002658:	4413      	add	r3, r2
 800265a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002664:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	699a      	ldr	r2, [r3, #24]
 800266a:	8b7b      	ldrh	r3, [r7, #26]
 800266c:	429a      	cmp	r2, r3
 800266e:	d306      	bcc.n	800267e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	699a      	ldr	r2, [r3, #24]
 8002674:	8b7b      	ldrh	r3, [r7, #26]
 8002676:	1ad2      	subs	r2, r2, r3
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	619a      	str	r2, [r3, #24]
 800267c:	e002      	b.n	8002684 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	2200      	movs	r2, #0
 8002682:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d123      	bne.n	80026d4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	461a      	mov	r2, r3
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	881b      	ldrh	r3, [r3, #0]
 800269c:	b29b      	uxth	r3, r3
 800269e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026a6:	83fb      	strh	r3, [r7, #30]
 80026a8:	8bfb      	ldrh	r3, [r7, #30]
 80026aa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80026ae:	83fb      	strh	r3, [r7, #30]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	461a      	mov	r2, r3
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	441a      	add	r2, r3
 80026be:	8bfb      	ldrh	r3, [r7, #30]
 80026c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80026d4:	88fb      	ldrh	r3, [r7, #6]
 80026d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d11f      	bne.n	800271e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	461a      	mov	r2, r3
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	4413      	add	r3, r2
 80026ec:	881b      	ldrh	r3, [r3, #0]
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026f8:	83bb      	strh	r3, [r7, #28]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	461a      	mov	r2, r3
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	441a      	add	r2, r3
 8002708:	8bbb      	ldrh	r3, [r7, #28]
 800270a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800270e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002712:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002716:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800271a:	b29b      	uxth	r3, r3
 800271c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800271e:	8b7b      	ldrh	r3, [r7, #26]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d008      	beq.n	8002736 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6818      	ldr	r0, [r3, #0]
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	6959      	ldr	r1, [r3, #20]
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	895a      	ldrh	r2, [r3, #10]
 8002730:	8b7b      	ldrh	r3, [r7, #26]
 8002732:	f003 fa60 	bl	8005bf6 <USB_ReadPMA>
    }
  }

  return count;
 8002736:	8b7b      	ldrh	r3, [r7, #26]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3720      	adds	r7, #32
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b094      	sub	sp, #80	; 0x50
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	4613      	mov	r3, r2
 800274c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800274e:	88fb      	ldrh	r3, [r7, #6]
 8002750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 8138 	beq.w	80029ca <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002762:	b29b      	uxth	r3, r3
 8002764:	461a      	mov	r2, r3
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	4413      	add	r3, r2
 800276e:	3302      	adds	r3, #2
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	6812      	ldr	r2, [r2, #0]
 8002776:	4413      	add	r3, r2
 8002778:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800277c:	881b      	ldrh	r3, [r3, #0]
 800277e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002782:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	699a      	ldr	r2, [r3, #24]
 800278a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800278e:	429a      	cmp	r2, r3
 8002790:	d907      	bls.n	80027a2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	699a      	ldr	r2, [r3, #24]
 8002796:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800279a:	1ad2      	subs	r2, r2, r3
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	619a      	str	r2, [r3, #24]
 80027a0:	e002      	b.n	80027a8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	2200      	movs	r2, #0
 80027a6:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d12c      	bne.n	800280a <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	4619      	mov	r1, r3
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f005 f8c5 	bl	8007946 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80027bc:	88fb      	ldrh	r3, [r7, #6]
 80027be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f000 823a 	beq.w	8002c3c <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	461a      	mov	r2, r3
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	881b      	ldrh	r3, [r3, #0]
 80027d8:	b29b      	uxth	r3, r3
 80027da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027e2:	82fb      	strh	r3, [r7, #22]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	461a      	mov	r2, r3
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	441a      	add	r2, r3
 80027f2:	8afb      	ldrh	r3, [r7, #22]
 80027f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002804:	b29b      	uxth	r3, r3
 8002806:	8013      	strh	r3, [r2, #0]
 8002808:	e218      	b.n	8002c3c <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800280a:	88fb      	ldrh	r3, [r7, #6]
 800280c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d01f      	beq.n	8002854 <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	461a      	mov	r2, r3
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	881b      	ldrh	r3, [r3, #0]
 8002824:	b29b      	uxth	r3, r3
 8002826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800282a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800282e:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	461a      	mov	r2, r3
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	441a      	add	r2, r3
 800283e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002840:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002844:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002848:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800284c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002850:	b29b      	uxth	r3, r3
 8002852:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800285a:	2b01      	cmp	r3, #1
 800285c:	f040 81ee 	bne.w	8002c3c <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	695a      	ldr	r2, [r3, #20]
 8002864:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002868:	441a      	add	r2, r3
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	69da      	ldr	r2, [r3, #28]
 8002872:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002876:	441a      	add	r2, r3
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	6a1a      	ldr	r2, [r3, #32]
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	429a      	cmp	r2, r3
 8002886:	d309      	bcc.n	800289c <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	6a1a      	ldr	r2, [r3, #32]
 8002892:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002894:	1ad2      	subs	r2, r2, r3
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	621a      	str	r2, [r3, #32]
 800289a:	e015      	b.n	80028c8 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d107      	bne.n	80028b4 <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 80028a4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80028a8:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80028b2:	e009      	b.n	80028c8 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	2200      	movs	r2, #0
 80028c6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	785b      	ldrb	r3, [r3, #1]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d155      	bne.n	800297c <HAL_PCD_EP_DB_Transmit+0x23c>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	61fb      	str	r3, [r7, #28]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028de:	b29b      	uxth	r3, r3
 80028e0:	461a      	mov	r2, r3
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	4413      	add	r3, r2
 80028e6:	61fb      	str	r3, [r7, #28]
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	011a      	lsls	r2, r3, #4
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	4413      	add	r3, r2
 80028f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80028f6:	61bb      	str	r3, [r7, #24]
 80028f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d112      	bne.n	8002924 <HAL_PCD_EP_DB_Transmit+0x1e4>
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	881b      	ldrh	r3, [r3, #0]
 8002902:	b29b      	uxth	r3, r3
 8002904:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002908:	b29a      	uxth	r2, r3
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	801a      	strh	r2, [r3, #0]
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	881b      	ldrh	r3, [r3, #0]
 8002912:	b29b      	uxth	r3, r3
 8002914:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002918:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800291c:	b29a      	uxth	r2, r3
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	801a      	strh	r2, [r3, #0]
 8002922:	e047      	b.n	80029b4 <HAL_PCD_EP_DB_Transmit+0x274>
 8002924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002926:	2b3e      	cmp	r3, #62	; 0x3e
 8002928:	d811      	bhi.n	800294e <HAL_PCD_EP_DB_Transmit+0x20e>
 800292a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800292c:	085b      	lsrs	r3, r3, #1
 800292e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d002      	beq.n	8002940 <HAL_PCD_EP_DB_Transmit+0x200>
 800293a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800293c:	3301      	adds	r3, #1
 800293e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002942:	b29b      	uxth	r3, r3
 8002944:	029b      	lsls	r3, r3, #10
 8002946:	b29a      	uxth	r2, r3
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	801a      	strh	r2, [r3, #0]
 800294c:	e032      	b.n	80029b4 <HAL_PCD_EP_DB_Transmit+0x274>
 800294e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002950:	095b      	lsrs	r3, r3, #5
 8002952:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002956:	f003 031f 	and.w	r3, r3, #31
 800295a:	2b00      	cmp	r3, #0
 800295c:	d102      	bne.n	8002964 <HAL_PCD_EP_DB_Transmit+0x224>
 800295e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002960:	3b01      	subs	r3, #1
 8002962:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002966:	b29b      	uxth	r3, r3
 8002968:	029b      	lsls	r3, r3, #10
 800296a:	b29b      	uxth	r3, r3
 800296c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002970:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002974:	b29a      	uxth	r2, r3
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	801a      	strh	r2, [r3, #0]
 800297a:	e01b      	b.n	80029b4 <HAL_PCD_EP_DB_Transmit+0x274>
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	785b      	ldrb	r3, [r3, #1]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d117      	bne.n	80029b4 <HAL_PCD_EP_DB_Transmit+0x274>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	627b      	str	r3, [r7, #36]	; 0x24
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002992:	b29b      	uxth	r3, r3
 8002994:	461a      	mov	r2, r3
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	4413      	add	r3, r2
 800299a:	627b      	str	r3, [r7, #36]	; 0x24
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	011a      	lsls	r2, r3, #4
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	4413      	add	r3, r2
 80029a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80029aa:	623b      	str	r3, [r7, #32]
 80029ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	6a3b      	ldr	r3, [r7, #32]
 80029b2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6818      	ldr	r0, [r3, #0]
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	6959      	ldr	r1, [r3, #20]
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	891a      	ldrh	r2, [r3, #8]
 80029c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	f003 f8d2 	bl	8005b6c <USB_WritePMA>
 80029c8:	e138      	b.n	8002c3c <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	461a      	mov	r2, r3
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	4413      	add	r3, r2
 80029de:	3306      	adds	r3, #6
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	6812      	ldr	r2, [r2, #0]
 80029e6:	4413      	add	r3, r2
 80029e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029f2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	699a      	ldr	r2, [r3, #24]
 80029fa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d307      	bcc.n	8002a12 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	699a      	ldr	r2, [r3, #24]
 8002a06:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002a0a:	1ad2      	subs	r2, r2, r3
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	619a      	str	r2, [r3, #24]
 8002a10:	e002      	b.n	8002a18 <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	2200      	movs	r2, #0
 8002a16:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d12e      	bne.n	8002a7e <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	4619      	mov	r1, r3
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f004 ff8d 	bl	8007946 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a2c:	88fb      	ldrh	r3, [r7, #6]
 8002a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f040 8102 	bne.w	8002c3c <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	881b      	ldrh	r3, [r3, #0]
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a52:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	441a      	add	r2, r3
 8002a64:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002a68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	8013      	strh	r3, [r2, #0]
 8002a7c:	e0de      	b.n	8002c3c <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a7e:	88fb      	ldrh	r3, [r7, #6]
 8002a80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d11f      	bne.n	8002ac8 <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	881b      	ldrh	r3, [r3, #0]
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aa2:	867b      	strh	r3, [r7, #50]	; 0x32
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	441a      	add	r2, r3
 8002ab2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002ab4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ab8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002abc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	f040 80b4 	bne.w	8002c3c <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	695a      	ldr	r2, [r3, #20]
 8002ad8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002adc:	441a      	add	r2, r3
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	69da      	ldr	r2, [r3, #28]
 8002ae6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002aea:	441a      	add	r2, r3
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	6a1a      	ldr	r2, [r3, #32]
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d309      	bcc.n	8002b10 <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	6a1a      	ldr	r2, [r3, #32]
 8002b06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b08:	1ad2      	subs	r2, r2, r3
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	621a      	str	r2, [r3, #32]
 8002b0e:	e015      	b.n	8002b3c <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	6a1b      	ldr	r3, [r3, #32]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d107      	bne.n	8002b28 <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 8002b18:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002b1c:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002b26:	e009      	b.n	8002b3c <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	2200      	movs	r2, #0
 8002b32:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	643b      	str	r3, [r7, #64]	; 0x40
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	785b      	ldrb	r3, [r3, #1]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d155      	bne.n	8002bf6 <HAL_PCD_EP_DB_Transmit+0x4b6>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b5e:	4413      	add	r3, r2
 8002b60:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	011a      	lsls	r2, r3, #4
 8002b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b70:	637b      	str	r3, [r7, #52]	; 0x34
 8002b72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d112      	bne.n	8002b9e <HAL_PCD_EP_DB_Transmit+0x45e>
 8002b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b7a:	881b      	ldrh	r3, [r3, #0]
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b86:	801a      	strh	r2, [r3, #0]
 8002b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b8a:	881b      	ldrh	r3, [r3, #0]
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b9a:	801a      	strh	r2, [r3, #0]
 8002b9c:	e044      	b.n	8002c28 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002b9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ba0:	2b3e      	cmp	r3, #62	; 0x3e
 8002ba2:	d811      	bhi.n	8002bc8 <HAL_PCD_EP_DB_Transmit+0x488>
 8002ba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ba6:	085b      	lsrs	r3, r3, #1
 8002ba8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002baa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d002      	beq.n	8002bba <HAL_PCD_EP_DB_Transmit+0x47a>
 8002bb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	029b      	lsls	r3, r3, #10
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc4:	801a      	strh	r2, [r3, #0]
 8002bc6:	e02f      	b.n	8002c28 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002bc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bca:	095b      	lsrs	r3, r3, #5
 8002bcc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bd0:	f003 031f 	and.w	r3, r3, #31
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d102      	bne.n	8002bde <HAL_PCD_EP_DB_Transmit+0x49e>
 8002bd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	029b      	lsls	r3, r3, #10
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf2:	801a      	strh	r2, [r3, #0]
 8002bf4:	e018      	b.n	8002c28 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	785b      	ldrb	r3, [r3, #1]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d114      	bne.n	8002c28 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	461a      	mov	r2, r3
 8002c0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c0c:	4413      	add	r3, r2
 8002c0e:	643b      	str	r3, [r7, #64]	; 0x40
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	011a      	lsls	r2, r3, #4
 8002c16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c18:	4413      	add	r3, r2
 8002c1a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c26:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6818      	ldr	r0, [r3, #0]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	6959      	ldr	r1, [r3, #20]
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	895a      	ldrh	r2, [r3, #10]
 8002c34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	f002 ff98 	bl	8005b6c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	461a      	mov	r2, r3
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4413      	add	r3, r2
 8002c4a:	881b      	ldrh	r3, [r3, #0]
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c56:	82bb      	strh	r3, [r7, #20]
 8002c58:	8abb      	ldrh	r3, [r7, #20]
 8002c5a:	f083 0310 	eor.w	r3, r3, #16
 8002c5e:	82bb      	strh	r3, [r7, #20]
 8002c60:	8abb      	ldrh	r3, [r7, #20]
 8002c62:	f083 0320 	eor.w	r3, r3, #32
 8002c66:	82bb      	strh	r3, [r7, #20]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	441a      	add	r2, r3
 8002c76:	8abb      	ldrh	r3, [r7, #20]
 8002c78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3750      	adds	r7, #80	; 0x50
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b087      	sub	sp, #28
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	60f8      	str	r0, [r7, #12]
 8002c9e:	607b      	str	r3, [r7, #4]
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	817b      	strh	r3, [r7, #10]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002ca8:	897b      	ldrh	r3, [r7, #10]
 8002caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00b      	beq.n	8002ccc <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cb4:	897b      	ldrh	r3, [r7, #10]
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	1c5a      	adds	r2, r3, #1
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4413      	add	r3, r2
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	617b      	str	r3, [r7, #20]
 8002cca:	e009      	b.n	8002ce0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ccc:	897a      	ldrh	r2, [r7, #10]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4413      	add	r3, r2
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	4413      	add	r3, r2
 8002cde:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002ce0:	893b      	ldrh	r3, [r7, #8]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d107      	bne.n	8002cf6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	80da      	strh	r2, [r3, #6]
 8002cf4:	e00b      	b.n	8002d0e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	0c1b      	lsrs	r3, r3, #16
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	371c      	adds	r7, #28
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bc80      	pop	{r7}
 8002d18:	4770      	bx	lr
	...

08002d1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e26c      	b.n	8003208 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f000 8087 	beq.w	8002e4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d3c:	4b92      	ldr	r3, [pc, #584]	; (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f003 030c 	and.w	r3, r3, #12
 8002d44:	2b04      	cmp	r3, #4
 8002d46:	d00c      	beq.n	8002d62 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d48:	4b8f      	ldr	r3, [pc, #572]	; (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f003 030c 	and.w	r3, r3, #12
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	d112      	bne.n	8002d7a <HAL_RCC_OscConfig+0x5e>
 8002d54:	4b8c      	ldr	r3, [pc, #560]	; (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d60:	d10b      	bne.n	8002d7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d62:	4b89      	ldr	r3, [pc, #548]	; (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d06c      	beq.n	8002e48 <HAL_RCC_OscConfig+0x12c>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d168      	bne.n	8002e48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e246      	b.n	8003208 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d82:	d106      	bne.n	8002d92 <HAL_RCC_OscConfig+0x76>
 8002d84:	4b80      	ldr	r3, [pc, #512]	; (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a7f      	ldr	r2, [pc, #508]	; (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002d8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d8e:	6013      	str	r3, [r2, #0]
 8002d90:	e02e      	b.n	8002df0 <HAL_RCC_OscConfig+0xd4>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10c      	bne.n	8002db4 <HAL_RCC_OscConfig+0x98>
 8002d9a:	4b7b      	ldr	r3, [pc, #492]	; (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a7a      	ldr	r2, [pc, #488]	; (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002da0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002da4:	6013      	str	r3, [r2, #0]
 8002da6:	4b78      	ldr	r3, [pc, #480]	; (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a77      	ldr	r2, [pc, #476]	; (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002dac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	e01d      	b.n	8002df0 <HAL_RCC_OscConfig+0xd4>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dbc:	d10c      	bne.n	8002dd8 <HAL_RCC_OscConfig+0xbc>
 8002dbe:	4b72      	ldr	r3, [pc, #456]	; (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a71      	ldr	r2, [pc, #452]	; (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002dc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dc8:	6013      	str	r3, [r2, #0]
 8002dca:	4b6f      	ldr	r3, [pc, #444]	; (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a6e      	ldr	r2, [pc, #440]	; (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	e00b      	b.n	8002df0 <HAL_RCC_OscConfig+0xd4>
 8002dd8:	4b6b      	ldr	r3, [pc, #428]	; (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a6a      	ldr	r2, [pc, #424]	; (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002de2:	6013      	str	r3, [r2, #0]
 8002de4:	4b68      	ldr	r3, [pc, #416]	; (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a67      	ldr	r2, [pc, #412]	; (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002dea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d013      	beq.n	8002e20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df8:	f7fd fe3e 	bl	8000a78 <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e00:	f7fd fe3a 	bl	8000a78 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b64      	cmp	r3, #100	; 0x64
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e1fa      	b.n	8003208 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e12:	4b5d      	ldr	r3, [pc, #372]	; (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d0f0      	beq.n	8002e00 <HAL_RCC_OscConfig+0xe4>
 8002e1e:	e014      	b.n	8002e4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e20:	f7fd fe2a 	bl	8000a78 <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e28:	f7fd fe26 	bl	8000a78 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b64      	cmp	r3, #100	; 0x64
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e1e6      	b.n	8003208 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e3a:	4b53      	ldr	r3, [pc, #332]	; (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1f0      	bne.n	8002e28 <HAL_RCC_OscConfig+0x10c>
 8002e46:	e000      	b.n	8002e4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d063      	beq.n	8002f1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e56:	4b4c      	ldr	r3, [pc, #304]	; (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f003 030c 	and.w	r3, r3, #12
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00b      	beq.n	8002e7a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e62:	4b49      	ldr	r3, [pc, #292]	; (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f003 030c 	and.w	r3, r3, #12
 8002e6a:	2b08      	cmp	r3, #8
 8002e6c:	d11c      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x18c>
 8002e6e:	4b46      	ldr	r3, [pc, #280]	; (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d116      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e7a:	4b43      	ldr	r3, [pc, #268]	; (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d005      	beq.n	8002e92 <HAL_RCC_OscConfig+0x176>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d001      	beq.n	8002e92 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e1ba      	b.n	8003208 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e92:	4b3d      	ldr	r3, [pc, #244]	; (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	4939      	ldr	r1, [pc, #228]	; (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ea6:	e03a      	b.n	8002f1e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d020      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eb0:	4b36      	ldr	r3, [pc, #216]	; (8002f8c <HAL_RCC_OscConfig+0x270>)
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb6:	f7fd fddf 	bl	8000a78 <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ebc:	e008      	b.n	8002ed0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ebe:	f7fd fddb 	bl	8000a78 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e19b      	b.n	8003208 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed0:	4b2d      	ldr	r3, [pc, #180]	; (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d0f0      	beq.n	8002ebe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002edc:	4b2a      	ldr	r3, [pc, #168]	; (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	4927      	ldr	r1, [pc, #156]	; (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	600b      	str	r3, [r1, #0]
 8002ef0:	e015      	b.n	8002f1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ef2:	4b26      	ldr	r3, [pc, #152]	; (8002f8c <HAL_RCC_OscConfig+0x270>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef8:	f7fd fdbe 	bl	8000a78 <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f00:	f7fd fdba 	bl	8000a78 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e17a      	b.n	8003208 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f12:	4b1d      	ldr	r3, [pc, #116]	; (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1f0      	bne.n	8002f00 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0308 	and.w	r3, r3, #8
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d03a      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d019      	beq.n	8002f66 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f32:	4b17      	ldr	r3, [pc, #92]	; (8002f90 <HAL_RCC_OscConfig+0x274>)
 8002f34:	2201      	movs	r2, #1
 8002f36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f38:	f7fd fd9e 	bl	8000a78 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f40:	f7fd fd9a 	bl	8000a78 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e15a      	b.n	8003208 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f52:	4b0d      	ldr	r3, [pc, #52]	; (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d0f0      	beq.n	8002f40 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f5e:	2001      	movs	r0, #1
 8002f60:	f000 faa6 	bl	80034b0 <RCC_Delay>
 8002f64:	e01c      	b.n	8002fa0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f66:	4b0a      	ldr	r3, [pc, #40]	; (8002f90 <HAL_RCC_OscConfig+0x274>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f6c:	f7fd fd84 	bl	8000a78 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f72:	e00f      	b.n	8002f94 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f74:	f7fd fd80 	bl	8000a78 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d908      	bls.n	8002f94 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e140      	b.n	8003208 <HAL_RCC_OscConfig+0x4ec>
 8002f86:	bf00      	nop
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	42420000 	.word	0x42420000
 8002f90:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f94:	4b9e      	ldr	r3, [pc, #632]	; (8003210 <HAL_RCC_OscConfig+0x4f4>)
 8002f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1e9      	bne.n	8002f74 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0304 	and.w	r3, r3, #4
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f000 80a6 	beq.w	80030fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fb2:	4b97      	ldr	r3, [pc, #604]	; (8003210 <HAL_RCC_OscConfig+0x4f4>)
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10d      	bne.n	8002fda <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fbe:	4b94      	ldr	r3, [pc, #592]	; (8003210 <HAL_RCC_OscConfig+0x4f4>)
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	4a93      	ldr	r2, [pc, #588]	; (8003210 <HAL_RCC_OscConfig+0x4f4>)
 8002fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fc8:	61d3      	str	r3, [r2, #28]
 8002fca:	4b91      	ldr	r3, [pc, #580]	; (8003210 <HAL_RCC_OscConfig+0x4f4>)
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd2:	60bb      	str	r3, [r7, #8]
 8002fd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fda:	4b8e      	ldr	r3, [pc, #568]	; (8003214 <HAL_RCC_OscConfig+0x4f8>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d118      	bne.n	8003018 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fe6:	4b8b      	ldr	r3, [pc, #556]	; (8003214 <HAL_RCC_OscConfig+0x4f8>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a8a      	ldr	r2, [pc, #552]	; (8003214 <HAL_RCC_OscConfig+0x4f8>)
 8002fec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ff2:	f7fd fd41 	bl	8000a78 <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff8:	e008      	b.n	800300c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ffa:	f7fd fd3d 	bl	8000a78 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b64      	cmp	r3, #100	; 0x64
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e0fd      	b.n	8003208 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800300c:	4b81      	ldr	r3, [pc, #516]	; (8003214 <HAL_RCC_OscConfig+0x4f8>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0f0      	beq.n	8002ffa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d106      	bne.n	800302e <HAL_RCC_OscConfig+0x312>
 8003020:	4b7b      	ldr	r3, [pc, #492]	; (8003210 <HAL_RCC_OscConfig+0x4f4>)
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	4a7a      	ldr	r2, [pc, #488]	; (8003210 <HAL_RCC_OscConfig+0x4f4>)
 8003026:	f043 0301 	orr.w	r3, r3, #1
 800302a:	6213      	str	r3, [r2, #32]
 800302c:	e02d      	b.n	800308a <HAL_RCC_OscConfig+0x36e>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10c      	bne.n	8003050 <HAL_RCC_OscConfig+0x334>
 8003036:	4b76      	ldr	r3, [pc, #472]	; (8003210 <HAL_RCC_OscConfig+0x4f4>)
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	4a75      	ldr	r2, [pc, #468]	; (8003210 <HAL_RCC_OscConfig+0x4f4>)
 800303c:	f023 0301 	bic.w	r3, r3, #1
 8003040:	6213      	str	r3, [r2, #32]
 8003042:	4b73      	ldr	r3, [pc, #460]	; (8003210 <HAL_RCC_OscConfig+0x4f4>)
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	4a72      	ldr	r2, [pc, #456]	; (8003210 <HAL_RCC_OscConfig+0x4f4>)
 8003048:	f023 0304 	bic.w	r3, r3, #4
 800304c:	6213      	str	r3, [r2, #32]
 800304e:	e01c      	b.n	800308a <HAL_RCC_OscConfig+0x36e>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	2b05      	cmp	r3, #5
 8003056:	d10c      	bne.n	8003072 <HAL_RCC_OscConfig+0x356>
 8003058:	4b6d      	ldr	r3, [pc, #436]	; (8003210 <HAL_RCC_OscConfig+0x4f4>)
 800305a:	6a1b      	ldr	r3, [r3, #32]
 800305c:	4a6c      	ldr	r2, [pc, #432]	; (8003210 <HAL_RCC_OscConfig+0x4f4>)
 800305e:	f043 0304 	orr.w	r3, r3, #4
 8003062:	6213      	str	r3, [r2, #32]
 8003064:	4b6a      	ldr	r3, [pc, #424]	; (8003210 <HAL_RCC_OscConfig+0x4f4>)
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	4a69      	ldr	r2, [pc, #420]	; (8003210 <HAL_RCC_OscConfig+0x4f4>)
 800306a:	f043 0301 	orr.w	r3, r3, #1
 800306e:	6213      	str	r3, [r2, #32]
 8003070:	e00b      	b.n	800308a <HAL_RCC_OscConfig+0x36e>
 8003072:	4b67      	ldr	r3, [pc, #412]	; (8003210 <HAL_RCC_OscConfig+0x4f4>)
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	4a66      	ldr	r2, [pc, #408]	; (8003210 <HAL_RCC_OscConfig+0x4f4>)
 8003078:	f023 0301 	bic.w	r3, r3, #1
 800307c:	6213      	str	r3, [r2, #32]
 800307e:	4b64      	ldr	r3, [pc, #400]	; (8003210 <HAL_RCC_OscConfig+0x4f4>)
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	4a63      	ldr	r2, [pc, #396]	; (8003210 <HAL_RCC_OscConfig+0x4f4>)
 8003084:	f023 0304 	bic.w	r3, r3, #4
 8003088:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d015      	beq.n	80030be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003092:	f7fd fcf1 	bl	8000a78 <HAL_GetTick>
 8003096:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003098:	e00a      	b.n	80030b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800309a:	f7fd fced 	bl	8000a78 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e0ab      	b.n	8003208 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b0:	4b57      	ldr	r3, [pc, #348]	; (8003210 <HAL_RCC_OscConfig+0x4f4>)
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d0ee      	beq.n	800309a <HAL_RCC_OscConfig+0x37e>
 80030bc:	e014      	b.n	80030e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030be:	f7fd fcdb 	bl	8000a78 <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030c4:	e00a      	b.n	80030dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030c6:	f7fd fcd7 	bl	8000a78 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e095      	b.n	8003208 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030dc:	4b4c      	ldr	r3, [pc, #304]	; (8003210 <HAL_RCC_OscConfig+0x4f4>)
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1ee      	bne.n	80030c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030e8:	7dfb      	ldrb	r3, [r7, #23]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d105      	bne.n	80030fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ee:	4b48      	ldr	r3, [pc, #288]	; (8003210 <HAL_RCC_OscConfig+0x4f4>)
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	4a47      	ldr	r2, [pc, #284]	; (8003210 <HAL_RCC_OscConfig+0x4f4>)
 80030f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 8081 	beq.w	8003206 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003104:	4b42      	ldr	r3, [pc, #264]	; (8003210 <HAL_RCC_OscConfig+0x4f4>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f003 030c 	and.w	r3, r3, #12
 800310c:	2b08      	cmp	r3, #8
 800310e:	d061      	beq.n	80031d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	69db      	ldr	r3, [r3, #28]
 8003114:	2b02      	cmp	r3, #2
 8003116:	d146      	bne.n	80031a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003118:	4b3f      	ldr	r3, [pc, #252]	; (8003218 <HAL_RCC_OscConfig+0x4fc>)
 800311a:	2200      	movs	r2, #0
 800311c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311e:	f7fd fcab 	bl	8000a78 <HAL_GetTick>
 8003122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003124:	e008      	b.n	8003138 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003126:	f7fd fca7 	bl	8000a78 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d901      	bls.n	8003138 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e067      	b.n	8003208 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003138:	4b35      	ldr	r3, [pc, #212]	; (8003210 <HAL_RCC_OscConfig+0x4f4>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1f0      	bne.n	8003126 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800314c:	d108      	bne.n	8003160 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800314e:	4b30      	ldr	r3, [pc, #192]	; (8003210 <HAL_RCC_OscConfig+0x4f4>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	492d      	ldr	r1, [pc, #180]	; (8003210 <HAL_RCC_OscConfig+0x4f4>)
 800315c:	4313      	orrs	r3, r2
 800315e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003160:	4b2b      	ldr	r3, [pc, #172]	; (8003210 <HAL_RCC_OscConfig+0x4f4>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a19      	ldr	r1, [r3, #32]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003170:	430b      	orrs	r3, r1
 8003172:	4927      	ldr	r1, [pc, #156]	; (8003210 <HAL_RCC_OscConfig+0x4f4>)
 8003174:	4313      	orrs	r3, r2
 8003176:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003178:	4b27      	ldr	r3, [pc, #156]	; (8003218 <HAL_RCC_OscConfig+0x4fc>)
 800317a:	2201      	movs	r2, #1
 800317c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317e:	f7fd fc7b 	bl	8000a78 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003186:	f7fd fc77 	bl	8000a78 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e037      	b.n	8003208 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003198:	4b1d      	ldr	r3, [pc, #116]	; (8003210 <HAL_RCC_OscConfig+0x4f4>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0f0      	beq.n	8003186 <HAL_RCC_OscConfig+0x46a>
 80031a4:	e02f      	b.n	8003206 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a6:	4b1c      	ldr	r3, [pc, #112]	; (8003218 <HAL_RCC_OscConfig+0x4fc>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ac:	f7fd fc64 	bl	8000a78 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b4:	f7fd fc60 	bl	8000a78 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e020      	b.n	8003208 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031c6:	4b12      	ldr	r3, [pc, #72]	; (8003210 <HAL_RCC_OscConfig+0x4f4>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f0      	bne.n	80031b4 <HAL_RCC_OscConfig+0x498>
 80031d2:	e018      	b.n	8003206 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	69db      	ldr	r3, [r3, #28]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d101      	bne.n	80031e0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e013      	b.n	8003208 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031e0:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <HAL_RCC_OscConfig+0x4f4>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d106      	bne.n	8003202 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031fe:	429a      	cmp	r2, r3
 8003200:	d001      	beq.n	8003206 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e000      	b.n	8003208 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3718      	adds	r7, #24
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40021000 	.word	0x40021000
 8003214:	40007000 	.word	0x40007000
 8003218:	42420060 	.word	0x42420060

0800321c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e0d0      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003230:	4b6a      	ldr	r3, [pc, #424]	; (80033dc <HAL_RCC_ClockConfig+0x1c0>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	429a      	cmp	r2, r3
 800323c:	d910      	bls.n	8003260 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800323e:	4b67      	ldr	r3, [pc, #412]	; (80033dc <HAL_RCC_ClockConfig+0x1c0>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f023 0207 	bic.w	r2, r3, #7
 8003246:	4965      	ldr	r1, [pc, #404]	; (80033dc <HAL_RCC_ClockConfig+0x1c0>)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	4313      	orrs	r3, r2
 800324c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800324e:	4b63      	ldr	r3, [pc, #396]	; (80033dc <HAL_RCC_ClockConfig+0x1c0>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	429a      	cmp	r2, r3
 800325a:	d001      	beq.n	8003260 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e0b8      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d020      	beq.n	80032ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	2b00      	cmp	r3, #0
 8003276:	d005      	beq.n	8003284 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003278:	4b59      	ldr	r3, [pc, #356]	; (80033e0 <HAL_RCC_ClockConfig+0x1c4>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	4a58      	ldr	r2, [pc, #352]	; (80033e0 <HAL_RCC_ClockConfig+0x1c4>)
 800327e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003282:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0308 	and.w	r3, r3, #8
 800328c:	2b00      	cmp	r3, #0
 800328e:	d005      	beq.n	800329c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003290:	4b53      	ldr	r3, [pc, #332]	; (80033e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	4a52      	ldr	r2, [pc, #328]	; (80033e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003296:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800329a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800329c:	4b50      	ldr	r3, [pc, #320]	; (80033e0 <HAL_RCC_ClockConfig+0x1c4>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	494d      	ldr	r1, [pc, #308]	; (80033e0 <HAL_RCC_ClockConfig+0x1c4>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d040      	beq.n	800333c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d107      	bne.n	80032d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c2:	4b47      	ldr	r3, [pc, #284]	; (80033e0 <HAL_RCC_ClockConfig+0x1c4>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d115      	bne.n	80032fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e07f      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d107      	bne.n	80032ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032da:	4b41      	ldr	r3, [pc, #260]	; (80033e0 <HAL_RCC_ClockConfig+0x1c4>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d109      	bne.n	80032fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e073      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ea:	4b3d      	ldr	r3, [pc, #244]	; (80033e0 <HAL_RCC_ClockConfig+0x1c4>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e06b      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032fa:	4b39      	ldr	r3, [pc, #228]	; (80033e0 <HAL_RCC_ClockConfig+0x1c4>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f023 0203 	bic.w	r2, r3, #3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	4936      	ldr	r1, [pc, #216]	; (80033e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003308:	4313      	orrs	r3, r2
 800330a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800330c:	f7fd fbb4 	bl	8000a78 <HAL_GetTick>
 8003310:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003312:	e00a      	b.n	800332a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003314:	f7fd fbb0 	bl	8000a78 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003322:	4293      	cmp	r3, r2
 8003324:	d901      	bls.n	800332a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e053      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800332a:	4b2d      	ldr	r3, [pc, #180]	; (80033e0 <HAL_RCC_ClockConfig+0x1c4>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f003 020c 	and.w	r2, r3, #12
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	429a      	cmp	r2, r3
 800333a:	d1eb      	bne.n	8003314 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800333c:	4b27      	ldr	r3, [pc, #156]	; (80033dc <HAL_RCC_ClockConfig+0x1c0>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	429a      	cmp	r2, r3
 8003348:	d210      	bcs.n	800336c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800334a:	4b24      	ldr	r3, [pc, #144]	; (80033dc <HAL_RCC_ClockConfig+0x1c0>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f023 0207 	bic.w	r2, r3, #7
 8003352:	4922      	ldr	r1, [pc, #136]	; (80033dc <HAL_RCC_ClockConfig+0x1c0>)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	4313      	orrs	r3, r2
 8003358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800335a:	4b20      	ldr	r3, [pc, #128]	; (80033dc <HAL_RCC_ClockConfig+0x1c0>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	429a      	cmp	r2, r3
 8003366:	d001      	beq.n	800336c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e032      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	d008      	beq.n	800338a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003378:	4b19      	ldr	r3, [pc, #100]	; (80033e0 <HAL_RCC_ClockConfig+0x1c4>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	4916      	ldr	r1, [pc, #88]	; (80033e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003386:	4313      	orrs	r3, r2
 8003388:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0308 	and.w	r3, r3, #8
 8003392:	2b00      	cmp	r3, #0
 8003394:	d009      	beq.n	80033aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003396:	4b12      	ldr	r3, [pc, #72]	; (80033e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	490e      	ldr	r1, [pc, #56]	; (80033e0 <HAL_RCC_ClockConfig+0x1c4>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033aa:	f000 f821 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 80033ae:	4602      	mov	r2, r0
 80033b0:	4b0b      	ldr	r3, [pc, #44]	; (80033e0 <HAL_RCC_ClockConfig+0x1c4>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	091b      	lsrs	r3, r3, #4
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	490a      	ldr	r1, [pc, #40]	; (80033e4 <HAL_RCC_ClockConfig+0x1c8>)
 80033bc:	5ccb      	ldrb	r3, [r1, r3]
 80033be:	fa22 f303 	lsr.w	r3, r2, r3
 80033c2:	4a09      	ldr	r2, [pc, #36]	; (80033e8 <HAL_RCC_ClockConfig+0x1cc>)
 80033c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033c6:	4b09      	ldr	r3, [pc, #36]	; (80033ec <HAL_RCC_ClockConfig+0x1d0>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7fd fb12 	bl	80009f4 <HAL_InitTick>

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	40022000 	.word	0x40022000
 80033e0:	40021000 	.word	0x40021000
 80033e4:	08008ee4 	.word	0x08008ee4
 80033e8:	20000004 	.word	0x20000004
 80033ec:	20000008 	.word	0x20000008

080033f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033f0:	b490      	push	{r4, r7}
 80033f2:	b08a      	sub	sp, #40	; 0x28
 80033f4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80033f6:	4b2a      	ldr	r3, [pc, #168]	; (80034a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 80033f8:	1d3c      	adds	r4, r7, #4
 80033fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003400:	f240 2301 	movw	r3, #513	; 0x201
 8003404:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003406:	2300      	movs	r3, #0
 8003408:	61fb      	str	r3, [r7, #28]
 800340a:	2300      	movs	r3, #0
 800340c:	61bb      	str	r3, [r7, #24]
 800340e:	2300      	movs	r3, #0
 8003410:	627b      	str	r3, [r7, #36]	; 0x24
 8003412:	2300      	movs	r3, #0
 8003414:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003416:	2300      	movs	r3, #0
 8003418:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800341a:	4b22      	ldr	r3, [pc, #136]	; (80034a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	f003 030c 	and.w	r3, r3, #12
 8003426:	2b04      	cmp	r3, #4
 8003428:	d002      	beq.n	8003430 <HAL_RCC_GetSysClockFreq+0x40>
 800342a:	2b08      	cmp	r3, #8
 800342c:	d003      	beq.n	8003436 <HAL_RCC_GetSysClockFreq+0x46>
 800342e:	e02d      	b.n	800348c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003430:	4b1d      	ldr	r3, [pc, #116]	; (80034a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003432:	623b      	str	r3, [r7, #32]
      break;
 8003434:	e02d      	b.n	8003492 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	0c9b      	lsrs	r3, r3, #18
 800343a:	f003 030f 	and.w	r3, r3, #15
 800343e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003442:	4413      	add	r3, r2
 8003444:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003448:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d013      	beq.n	800347c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003454:	4b13      	ldr	r3, [pc, #76]	; (80034a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	0c5b      	lsrs	r3, r3, #17
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003462:	4413      	add	r3, r2
 8003464:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003468:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	4a0e      	ldr	r2, [pc, #56]	; (80034a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800346e:	fb02 f203 	mul.w	r2, r2, r3
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	fbb2 f3f3 	udiv	r3, r2, r3
 8003478:	627b      	str	r3, [r7, #36]	; 0x24
 800347a:	e004      	b.n	8003486 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	4a0b      	ldr	r2, [pc, #44]	; (80034ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8003480:	fb02 f303 	mul.w	r3, r2, r3
 8003484:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003488:	623b      	str	r3, [r7, #32]
      break;
 800348a:	e002      	b.n	8003492 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800348c:	4b06      	ldr	r3, [pc, #24]	; (80034a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800348e:	623b      	str	r3, [r7, #32]
      break;
 8003490:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003492:	6a3b      	ldr	r3, [r7, #32]
}
 8003494:	4618      	mov	r0, r3
 8003496:	3728      	adds	r7, #40	; 0x28
 8003498:	46bd      	mov	sp, r7
 800349a:	bc90      	pop	{r4, r7}
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	08008e58 	.word	0x08008e58
 80034a4:	40021000 	.word	0x40021000
 80034a8:	007a1200 	.word	0x007a1200
 80034ac:	003d0900 	.word	0x003d0900

080034b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80034b8:	4b0a      	ldr	r3, [pc, #40]	; (80034e4 <RCC_Delay+0x34>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a0a      	ldr	r2, [pc, #40]	; (80034e8 <RCC_Delay+0x38>)
 80034be:	fba2 2303 	umull	r2, r3, r2, r3
 80034c2:	0a5b      	lsrs	r3, r3, #9
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	fb02 f303 	mul.w	r3, r2, r3
 80034ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80034cc:	bf00      	nop
  }
  while (Delay --);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	1e5a      	subs	r2, r3, #1
 80034d2:	60fa      	str	r2, [r7, #12]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1f9      	bne.n	80034cc <RCC_Delay+0x1c>
}
 80034d8:	bf00      	nop
 80034da:	bf00      	nop
 80034dc:	3714      	adds	r7, #20
 80034de:	46bd      	mov	sp, r7
 80034e0:	bc80      	pop	{r7}
 80034e2:	4770      	bx	lr
 80034e4:	20000004 	.word	0x20000004
 80034e8:	10624dd3 	.word	0x10624dd3

080034ec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80034f4:	2300      	movs	r3, #0
 80034f6:	613b      	str	r3, [r7, #16]
 80034f8:	2300      	movs	r3, #0
 80034fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b00      	cmp	r3, #0
 8003506:	d07d      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003508:	2300      	movs	r3, #0
 800350a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800350c:	4b4f      	ldr	r3, [pc, #316]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800350e:	69db      	ldr	r3, [r3, #28]
 8003510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10d      	bne.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003518:	4b4c      	ldr	r3, [pc, #304]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800351a:	69db      	ldr	r3, [r3, #28]
 800351c:	4a4b      	ldr	r2, [pc, #300]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800351e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003522:	61d3      	str	r3, [r2, #28]
 8003524:	4b49      	ldr	r3, [pc, #292]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003526:	69db      	ldr	r3, [r3, #28]
 8003528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800352c:	60bb      	str	r3, [r7, #8]
 800352e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003530:	2301      	movs	r3, #1
 8003532:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003534:	4b46      	ldr	r3, [pc, #280]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353c:	2b00      	cmp	r3, #0
 800353e:	d118      	bne.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003540:	4b43      	ldr	r3, [pc, #268]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a42      	ldr	r2, [pc, #264]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800354a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800354c:	f7fd fa94 	bl	8000a78 <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003552:	e008      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003554:	f7fd fa90 	bl	8000a78 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b64      	cmp	r3, #100	; 0x64
 8003560:	d901      	bls.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e06d      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003566:	4b3a      	ldr	r3, [pc, #232]	; (8003650 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0f0      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003572:	4b36      	ldr	r3, [pc, #216]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800357a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d02e      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	429a      	cmp	r2, r3
 800358e:	d027      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003590:	4b2e      	ldr	r3, [pc, #184]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003598:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800359a:	4b2e      	ldr	r3, [pc, #184]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800359c:	2201      	movs	r2, #1
 800359e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035a0:	4b2c      	ldr	r3, [pc, #176]	; (8003654 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80035a6:	4a29      	ldr	r2, [pc, #164]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d014      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b6:	f7fd fa5f 	bl	8000a78 <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035bc:	e00a      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035be:	f7fd fa5b 	bl	8000a78 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e036      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d4:	4b1d      	ldr	r3, [pc, #116]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0ee      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035e0:	4b1a      	ldr	r3, [pc, #104]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	4917      	ldr	r1, [pc, #92]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035f2:	7dfb      	ldrb	r3, [r7, #23]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d105      	bne.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035f8:	4b14      	ldr	r3, [pc, #80]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035fa:	69db      	ldr	r3, [r3, #28]
 80035fc:	4a13      	ldr	r2, [pc, #76]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003602:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d008      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003610:	4b0e      	ldr	r3, [pc, #56]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	490b      	ldr	r1, [pc, #44]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800361e:	4313      	orrs	r3, r2
 8003620:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0310 	and.w	r3, r3, #16
 800362a:	2b00      	cmp	r3, #0
 800362c:	d008      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800362e:	4b07      	ldr	r3, [pc, #28]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	4904      	ldr	r1, [pc, #16]	; (800364c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800363c:	4313      	orrs	r3, r2
 800363e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3718      	adds	r7, #24
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	40021000 	.word	0x40021000
 8003650:	40007000 	.word	0x40007000
 8003654:	42420440 	.word	0x42420440

08003658 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e041      	b.n	80036ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d106      	bne.n	8003684 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f7fd f8dc 	bl	800083c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2202      	movs	r2, #2
 8003688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	3304      	adds	r3, #4
 8003694:	4619      	mov	r1, r3
 8003696:	4610      	mov	r0, r2
 8003698:	f000 f8f2 	bl	8003880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b084      	sub	sp, #16
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
 80036fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003706:	2b01      	cmp	r3, #1
 8003708:	d101      	bne.n	800370e <HAL_TIM_ConfigClockSource+0x18>
 800370a:	2302      	movs	r3, #2
 800370c:	e0b3      	b.n	8003876 <HAL_TIM_ConfigClockSource+0x180>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2202      	movs	r2, #2
 800371a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800372c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003734:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003746:	d03e      	beq.n	80037c6 <HAL_TIM_ConfigClockSource+0xd0>
 8003748:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800374c:	f200 8087 	bhi.w	800385e <HAL_TIM_ConfigClockSource+0x168>
 8003750:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003754:	f000 8085 	beq.w	8003862 <HAL_TIM_ConfigClockSource+0x16c>
 8003758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800375c:	d87f      	bhi.n	800385e <HAL_TIM_ConfigClockSource+0x168>
 800375e:	2b70      	cmp	r3, #112	; 0x70
 8003760:	d01a      	beq.n	8003798 <HAL_TIM_ConfigClockSource+0xa2>
 8003762:	2b70      	cmp	r3, #112	; 0x70
 8003764:	d87b      	bhi.n	800385e <HAL_TIM_ConfigClockSource+0x168>
 8003766:	2b60      	cmp	r3, #96	; 0x60
 8003768:	d050      	beq.n	800380c <HAL_TIM_ConfigClockSource+0x116>
 800376a:	2b60      	cmp	r3, #96	; 0x60
 800376c:	d877      	bhi.n	800385e <HAL_TIM_ConfigClockSource+0x168>
 800376e:	2b50      	cmp	r3, #80	; 0x50
 8003770:	d03c      	beq.n	80037ec <HAL_TIM_ConfigClockSource+0xf6>
 8003772:	2b50      	cmp	r3, #80	; 0x50
 8003774:	d873      	bhi.n	800385e <HAL_TIM_ConfigClockSource+0x168>
 8003776:	2b40      	cmp	r3, #64	; 0x40
 8003778:	d058      	beq.n	800382c <HAL_TIM_ConfigClockSource+0x136>
 800377a:	2b40      	cmp	r3, #64	; 0x40
 800377c:	d86f      	bhi.n	800385e <HAL_TIM_ConfigClockSource+0x168>
 800377e:	2b30      	cmp	r3, #48	; 0x30
 8003780:	d064      	beq.n	800384c <HAL_TIM_ConfigClockSource+0x156>
 8003782:	2b30      	cmp	r3, #48	; 0x30
 8003784:	d86b      	bhi.n	800385e <HAL_TIM_ConfigClockSource+0x168>
 8003786:	2b20      	cmp	r3, #32
 8003788:	d060      	beq.n	800384c <HAL_TIM_ConfigClockSource+0x156>
 800378a:	2b20      	cmp	r3, #32
 800378c:	d867      	bhi.n	800385e <HAL_TIM_ConfigClockSource+0x168>
 800378e:	2b00      	cmp	r3, #0
 8003790:	d05c      	beq.n	800384c <HAL_TIM_ConfigClockSource+0x156>
 8003792:	2b10      	cmp	r3, #16
 8003794:	d05a      	beq.n	800384c <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003796:	e062      	b.n	800385e <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6818      	ldr	r0, [r3, #0]
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	6899      	ldr	r1, [r3, #8]
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f000 f943 	bl	8003a32 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037ba:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	609a      	str	r2, [r3, #8]
      break;
 80037c4:	e04e      	b.n	8003864 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6818      	ldr	r0, [r3, #0]
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	6899      	ldr	r1, [r3, #8]
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	f000 f92c 	bl	8003a32 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037e8:	609a      	str	r2, [r3, #8]
      break;
 80037ea:	e03b      	b.n	8003864 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6818      	ldr	r0, [r3, #0]
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	6859      	ldr	r1, [r3, #4]
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	461a      	mov	r2, r3
 80037fa:	f000 f8a3 	bl	8003944 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2150      	movs	r1, #80	; 0x50
 8003804:	4618      	mov	r0, r3
 8003806:	f000 f8fa 	bl	80039fe <TIM_ITRx_SetConfig>
      break;
 800380a:	e02b      	b.n	8003864 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6818      	ldr	r0, [r3, #0]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	6859      	ldr	r1, [r3, #4]
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	461a      	mov	r2, r3
 800381a:	f000 f8c1 	bl	80039a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2160      	movs	r1, #96	; 0x60
 8003824:	4618      	mov	r0, r3
 8003826:	f000 f8ea 	bl	80039fe <TIM_ITRx_SetConfig>
      break;
 800382a:	e01b      	b.n	8003864 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6818      	ldr	r0, [r3, #0]
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	6859      	ldr	r1, [r3, #4]
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	461a      	mov	r2, r3
 800383a:	f000 f883 	bl	8003944 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2140      	movs	r1, #64	; 0x40
 8003844:	4618      	mov	r0, r3
 8003846:	f000 f8da 	bl	80039fe <TIM_ITRx_SetConfig>
      break;
 800384a:	e00b      	b.n	8003864 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4619      	mov	r1, r3
 8003856:	4610      	mov	r0, r2
 8003858:	f000 f8d1 	bl	80039fe <TIM_ITRx_SetConfig>
        break;
 800385c:	e002      	b.n	8003864 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800385e:	bf00      	nop
 8003860:	e000      	b.n	8003864 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003862:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
	...

08003880 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a29      	ldr	r2, [pc, #164]	; (8003938 <TIM_Base_SetConfig+0xb8>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d00b      	beq.n	80038b0 <TIM_Base_SetConfig+0x30>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800389e:	d007      	beq.n	80038b0 <TIM_Base_SetConfig+0x30>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a26      	ldr	r2, [pc, #152]	; (800393c <TIM_Base_SetConfig+0xbc>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d003      	beq.n	80038b0 <TIM_Base_SetConfig+0x30>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a25      	ldr	r2, [pc, #148]	; (8003940 <TIM_Base_SetConfig+0xc0>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d108      	bne.n	80038c2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	4313      	orrs	r3, r2
 80038c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a1c      	ldr	r2, [pc, #112]	; (8003938 <TIM_Base_SetConfig+0xb8>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d00b      	beq.n	80038e2 <TIM_Base_SetConfig+0x62>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d0:	d007      	beq.n	80038e2 <TIM_Base_SetConfig+0x62>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a19      	ldr	r2, [pc, #100]	; (800393c <TIM_Base_SetConfig+0xbc>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d003      	beq.n	80038e2 <TIM_Base_SetConfig+0x62>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a18      	ldr	r2, [pc, #96]	; (8003940 <TIM_Base_SetConfig+0xc0>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d108      	bne.n	80038f4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	4313      	orrs	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a07      	ldr	r2, [pc, #28]	; (8003938 <TIM_Base_SetConfig+0xb8>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d103      	bne.n	8003928 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	691a      	ldr	r2, [r3, #16]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	615a      	str	r2, [r3, #20]
}
 800392e:	bf00      	nop
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr
 8003938:	40012c00 	.word	0x40012c00
 800393c:	40000400 	.word	0x40000400
 8003940:	40000800 	.word	0x40000800

08003944 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003944:	b480      	push	{r7}
 8003946:	b087      	sub	sp, #28
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	f023 0201 	bic.w	r2, r3, #1
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800396e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	011b      	lsls	r3, r3, #4
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	4313      	orrs	r3, r2
 8003978:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f023 030a 	bic.w	r3, r3, #10
 8003980:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	4313      	orrs	r3, r2
 8003988:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	621a      	str	r2, [r3, #32]
}
 8003996:	bf00      	nop
 8003998:	371c      	adds	r7, #28
 800399a:	46bd      	mov	sp, r7
 800399c:	bc80      	pop	{r7}
 800399e:	4770      	bx	lr

080039a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b087      	sub	sp, #28
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	f023 0210 	bic.w	r2, r3, #16
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	031b      	lsls	r3, r3, #12
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	011b      	lsls	r3, r3, #4
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	621a      	str	r2, [r3, #32]
}
 80039f4:	bf00      	nop
 80039f6:	371c      	adds	r7, #28
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bc80      	pop	{r7}
 80039fc:	4770      	bx	lr

080039fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039fe:	b480      	push	{r7}
 8003a00:	b085      	sub	sp, #20
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
 8003a06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	f043 0307 	orr.w	r3, r3, #7
 8003a20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	609a      	str	r2, [r3, #8]
}
 8003a28:	bf00      	nop
 8003a2a:	3714      	adds	r7, #20
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bc80      	pop	{r7}
 8003a30:	4770      	bx	lr

08003a32 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b087      	sub	sp, #28
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	60f8      	str	r0, [r7, #12]
 8003a3a:	60b9      	str	r1, [r7, #8]
 8003a3c:	607a      	str	r2, [r7, #4]
 8003a3e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a4c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	021a      	lsls	r2, r3, #8
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	431a      	orrs	r2, r3
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	609a      	str	r2, [r3, #8]
}
 8003a66:	bf00      	nop
 8003a68:	371c      	adds	r7, #28
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bc80      	pop	{r7}
 8003a6e:	4770      	bx	lr

08003a70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d101      	bne.n	8003a88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a84:	2302      	movs	r3, #2
 8003a86:	e046      	b.n	8003b16 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2202      	movs	r2, #2
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a16      	ldr	r2, [pc, #88]	; (8003b20 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d00e      	beq.n	8003aea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ad4:	d009      	beq.n	8003aea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a12      	ldr	r2, [pc, #72]	; (8003b24 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d004      	beq.n	8003aea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a10      	ldr	r2, [pc, #64]	; (8003b28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d10c      	bne.n	8003b04 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003af0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	68ba      	ldr	r2, [r7, #8]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3714      	adds	r7, #20
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bc80      	pop	{r7}
 8003b1e:	4770      	bx	lr
 8003b20:	40012c00 	.word	0x40012c00
 8003b24:	40000400 	.word	0x40000400
 8003b28:	40000800 	.word	0x40000800

08003b2c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003b2c:	b084      	sub	sp, #16
 8003b2e:	b480      	push	{r7}
 8003b30:	b083      	sub	sp, #12
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
 8003b36:	f107 0014 	add.w	r0, r7, #20
 8003b3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bc80      	pop	{r7}
 8003b48:	b004      	add	sp, #16
 8003b4a:	4770      	bx	lr

08003b4c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003b5c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003b60:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3714      	adds	r7, #20
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bc80      	pop	{r7}
 8003b76:	4770      	bx	lr

08003b78 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003b80:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003b84:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	43db      	mvns	r3, r3
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	4013      	ands	r3, r2
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3714      	adds	r7, #20
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bc80      	pop	{r7}
 8003baa:	4770      	bx	lr

08003bac <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bc80      	pop	{r7}
 8003bc2:	4770      	bx	lr

08003bc4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003bc4:	b084      	sub	sp, #16
 8003bc6:	b480      	push	{r7}
 8003bc8:	b083      	sub	sp, #12
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
 8003bce:	f107 0014 	add.w	r0, r7, #20
 8003bd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bc80      	pop	{r7}
 8003c00:	b004      	add	sp, #16
 8003c02:	4770      	bx	lr

08003c04 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b09b      	sub	sp, #108	; 0x6c
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4413      	add	r3, r2
 8003c1e:	881b      	ldrh	r3, [r3, #0]
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c2a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	78db      	ldrb	r3, [r3, #3]
 8003c32:	2b03      	cmp	r3, #3
 8003c34:	d81f      	bhi.n	8003c76 <USB_ActivateEndpoint+0x72>
 8003c36:	a201      	add	r2, pc, #4	; (adr r2, 8003c3c <USB_ActivateEndpoint+0x38>)
 8003c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c3c:	08003c4d 	.word	0x08003c4d
 8003c40:	08003c69 	.word	0x08003c69
 8003c44:	08003c7f 	.word	0x08003c7f
 8003c48:	08003c5b 	.word	0x08003c5b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003c4c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003c50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c54:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003c58:	e012      	b.n	8003c80 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003c5a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003c5e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003c62:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003c66:	e00b      	b.n	8003c80 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003c68:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003c6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c70:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003c74:	e004      	b.n	8003c80 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003c7c:	e000      	b.n	8003c80 <USB_ActivateEndpoint+0x7c>
      break;
 8003c7e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	441a      	add	r2, r3
 8003c8a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003c8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	4413      	add	r3, r2
 8003cac:	881b      	ldrh	r3, [r3, #0]
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	441a      	add	r2, r3
 8003cd0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003cd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	7b1b      	ldrb	r3, [r3, #12]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f040 8149 	bne.w	8003f84 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	785b      	ldrb	r3, [r3, #1]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f000 8084 	beq.w	8003e04 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	617b      	str	r3, [r7, #20]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	461a      	mov	r2, r3
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	617b      	str	r3, [r7, #20]
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	011a      	lsls	r2, r3, #4
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	4413      	add	r3, r2
 8003d1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d1e:	613b      	str	r3, [r7, #16]
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	88db      	ldrh	r3, [r3, #6]
 8003d24:	085b      	lsrs	r3, r3, #1
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	005b      	lsls	r3, r3, #1
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4413      	add	r3, r2
 8003d3a:	881b      	ldrh	r3, [r3, #0]
 8003d3c:	81fb      	strh	r3, [r7, #14]
 8003d3e:	89fb      	ldrh	r3, [r7, #14]
 8003d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d01b      	beq.n	8003d80 <USB_ActivateEndpoint+0x17c>
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	4413      	add	r3, r2
 8003d52:	881b      	ldrh	r3, [r3, #0]
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d5e:	81bb      	strh	r3, [r7, #12]
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	441a      	add	r2, r3
 8003d6a:	89bb      	ldrh	r3, [r7, #12]
 8003d6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	78db      	ldrb	r3, [r3, #3]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d020      	beq.n	8003dca <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4413      	add	r3, r2
 8003d92:	881b      	ldrh	r3, [r3, #0]
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d9e:	813b      	strh	r3, [r7, #8]
 8003da0:	893b      	ldrh	r3, [r7, #8]
 8003da2:	f083 0320 	eor.w	r3, r3, #32
 8003da6:	813b      	strh	r3, [r7, #8]
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	441a      	add	r2, r3
 8003db2:	893b      	ldrh	r3, [r7, #8]
 8003db4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003db8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	8013      	strh	r3, [r2, #0]
 8003dc8:	e27f      	b.n	80042ca <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	4413      	add	r3, r2
 8003dd4:	881b      	ldrh	r3, [r3, #0]
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ddc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003de0:	817b      	strh	r3, [r7, #10]
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	441a      	add	r2, r3
 8003dec:	897b      	ldrh	r3, [r7, #10]
 8003dee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003df2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003df6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	8013      	strh	r3, [r2, #0]
 8003e02:	e262      	b.n	80042ca <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	461a      	mov	r2, r3
 8003e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e14:	4413      	add	r3, r2
 8003e16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	011a      	lsls	r2, r3, #4
 8003e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e20:	4413      	add	r3, r2
 8003e22:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003e26:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	88db      	ldrh	r3, [r3, #6]
 8003e2c:	085b      	lsrs	r3, r3, #1
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e36:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	461a      	mov	r2, r3
 8003e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e48:	4413      	add	r3, r2
 8003e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	011a      	lsls	r2, r3, #4
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	4413      	add	r3, r2
 8003e56:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e5a:	623b      	str	r3, [r7, #32]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d112      	bne.n	8003e8a <USB_ActivateEndpoint+0x286>
 8003e64:	6a3b      	ldr	r3, [r7, #32]
 8003e66:	881b      	ldrh	r3, [r3, #0]
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	6a3b      	ldr	r3, [r7, #32]
 8003e72:	801a      	strh	r2, [r3, #0]
 8003e74:	6a3b      	ldr	r3, [r7, #32]
 8003e76:	881b      	ldrh	r3, [r3, #0]
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	6a3b      	ldr	r3, [r7, #32]
 8003e86:	801a      	strh	r2, [r3, #0]
 8003e88:	e02f      	b.n	8003eea <USB_ActivateEndpoint+0x2e6>
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	2b3e      	cmp	r3, #62	; 0x3e
 8003e90:	d813      	bhi.n	8003eba <USB_ActivateEndpoint+0x2b6>
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	085b      	lsrs	r3, r3, #1
 8003e98:	663b      	str	r3, [r7, #96]	; 0x60
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d002      	beq.n	8003eac <USB_ActivateEndpoint+0x2a8>
 8003ea6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	663b      	str	r3, [r7, #96]	; 0x60
 8003eac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	029b      	lsls	r3, r3, #10
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	6a3b      	ldr	r3, [r7, #32]
 8003eb6:	801a      	strh	r2, [r3, #0]
 8003eb8:	e017      	b.n	8003eea <USB_ActivateEndpoint+0x2e6>
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	095b      	lsrs	r3, r3, #5
 8003ec0:	663b      	str	r3, [r7, #96]	; 0x60
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	f003 031f 	and.w	r3, r3, #31
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d102      	bne.n	8003ed4 <USB_ActivateEndpoint+0x2d0>
 8003ece:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	663b      	str	r3, [r7, #96]	; 0x60
 8003ed4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	029b      	lsls	r3, r3, #10
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ee0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	6a3b      	ldr	r3, [r7, #32]
 8003ee8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	4413      	add	r3, r2
 8003ef4:	881b      	ldrh	r3, [r3, #0]
 8003ef6:	83fb      	strh	r3, [r7, #30]
 8003ef8:	8bfb      	ldrh	r3, [r7, #30]
 8003efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d01b      	beq.n	8003f3a <USB_ActivateEndpoint+0x336>
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	4413      	add	r3, r2
 8003f0c:	881b      	ldrh	r3, [r3, #0]
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f18:	83bb      	strh	r3, [r7, #28]
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	441a      	add	r2, r3
 8003f24:	8bbb      	ldrh	r3, [r7, #28]
 8003f26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4413      	add	r3, r2
 8003f44:	881b      	ldrh	r3, [r3, #0]
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f50:	837b      	strh	r3, [r7, #26]
 8003f52:	8b7b      	ldrh	r3, [r7, #26]
 8003f54:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003f58:	837b      	strh	r3, [r7, #26]
 8003f5a:	8b7b      	ldrh	r3, [r7, #26]
 8003f5c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003f60:	837b      	strh	r3, [r7, #26]
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	441a      	add	r2, r3
 8003f6c:	8b7b      	ldrh	r3, [r7, #26]
 8003f6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	8013      	strh	r3, [r2, #0]
 8003f82:	e1a2      	b.n	80042ca <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	4413      	add	r3, r2
 8003f8e:	881b      	ldrh	r3, [r3, #0]
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f9a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	441a      	add	r2, r3
 8003fa8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003fac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fb4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	65bb      	str	r3, [r7, #88]	; 0x58
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	461a      	mov	r2, r3
 8003fce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fd0:	4413      	add	r3, r2
 8003fd2:	65bb      	str	r3, [r7, #88]	; 0x58
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	011a      	lsls	r2, r3, #4
 8003fda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fdc:	4413      	add	r3, r2
 8003fde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fe2:	657b      	str	r3, [r7, #84]	; 0x54
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	891b      	ldrh	r3, [r3, #8]
 8003fe8:	085b      	lsrs	r3, r3, #1
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	005b      	lsls	r3, r3, #1
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ff2:	801a      	strh	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	653b      	str	r3, [r7, #80]	; 0x50
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	461a      	mov	r2, r3
 8004002:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004004:	4413      	add	r3, r2
 8004006:	653b      	str	r3, [r7, #80]	; 0x50
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	011a      	lsls	r2, r3, #4
 800400e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004010:	4413      	add	r3, r2
 8004012:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004016:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	895b      	ldrh	r3, [r3, #10]
 800401c:	085b      	lsrs	r3, r3, #1
 800401e:	b29b      	uxth	r3, r3
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	b29a      	uxth	r2, r3
 8004024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004026:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	785b      	ldrb	r3, [r3, #1]
 800402c:	2b00      	cmp	r3, #0
 800402e:	f040 8091 	bne.w	8004154 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	4413      	add	r3, r2
 800403c:	881b      	ldrh	r3, [r3, #0]
 800403e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004040:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d01b      	beq.n	8004082 <USB_ActivateEndpoint+0x47e>
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4413      	add	r3, r2
 8004054:	881b      	ldrh	r3, [r3, #0]
 8004056:	b29b      	uxth	r3, r3
 8004058:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800405c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004060:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	441a      	add	r2, r3
 800406c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800406e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004072:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004076:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800407a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800407e:	b29b      	uxth	r3, r3
 8004080:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	881b      	ldrh	r3, [r3, #0]
 800408e:	873b      	strh	r3, [r7, #56]	; 0x38
 8004090:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004096:	2b00      	cmp	r3, #0
 8004098:	d01b      	beq.n	80040d2 <USB_ActivateEndpoint+0x4ce>
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4413      	add	r3, r2
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	441a      	add	r2, r3
 80040bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80040be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	4413      	add	r3, r2
 80040dc:	881b      	ldrh	r3, [r3, #0]
 80040de:	b29b      	uxth	r3, r3
 80040e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040e8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80040ea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80040ec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80040f0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80040f2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80040f4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80040f8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	441a      	add	r2, r3
 8004104:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004106:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800410a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800410e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004112:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004116:	b29b      	uxth	r3, r3
 8004118:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	4413      	add	r3, r2
 8004124:	881b      	ldrh	r3, [r3, #0]
 8004126:	b29b      	uxth	r3, r3
 8004128:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800412c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004130:	867b      	strh	r3, [r7, #50]	; 0x32
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	441a      	add	r2, r3
 800413c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800413e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004142:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004146:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800414a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800414e:	b29b      	uxth	r3, r3
 8004150:	8013      	strh	r3, [r2, #0]
 8004152:	e0ba      	b.n	80042ca <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4413      	add	r3, r2
 800415e:	881b      	ldrh	r3, [r3, #0]
 8004160:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004164:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004168:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d01d      	beq.n	80041ac <USB_ActivateEndpoint+0x5a8>
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4413      	add	r3, r2
 800417a:	881b      	ldrh	r3, [r3, #0]
 800417c:	b29b      	uxth	r3, r3
 800417e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004186:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	441a      	add	r2, r3
 8004194:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004198:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800419c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	881b      	ldrh	r3, [r3, #0]
 80041b8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80041bc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80041c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d01d      	beq.n	8004204 <USB_ActivateEndpoint+0x600>
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4413      	add	r3, r2
 80041d2:	881b      	ldrh	r3, [r3, #0]
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041de:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	441a      	add	r2, r3
 80041ec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80041f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004200:	b29b      	uxth	r3, r3
 8004202:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	78db      	ldrb	r3, [r3, #3]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d024      	beq.n	8004256 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	881b      	ldrh	r3, [r3, #0]
 8004218:	b29b      	uxth	r3, r3
 800421a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800421e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004222:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004226:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800422a:	f083 0320 	eor.w	r3, r3, #32
 800422e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	441a      	add	r2, r3
 800423c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004240:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004244:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004248:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800424c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004250:	b29b      	uxth	r3, r3
 8004252:	8013      	strh	r3, [r2, #0]
 8004254:	e01d      	b.n	8004292 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	4413      	add	r3, r2
 8004260:	881b      	ldrh	r3, [r3, #0]
 8004262:	b29b      	uxth	r3, r3
 8004264:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004268:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800426c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	441a      	add	r2, r3
 800427a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800427e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004282:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004286:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800428a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800428e:	b29b      	uxth	r3, r3
 8004290:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	4413      	add	r3, r2
 800429c:	881b      	ldrh	r3, [r3, #0]
 800429e:	b29b      	uxth	r3, r3
 80042a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	441a      	add	r2, r3
 80042b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80042b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80042ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	376c      	adds	r7, #108	; 0x6c
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bc80      	pop	{r7}
 80042d6:	4770      	bx	lr

080042d8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80042d8:	b480      	push	{r7}
 80042da:	b08d      	sub	sp, #52	; 0x34
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	7b1b      	ldrb	r3, [r3, #12]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f040 808e 	bne.w	8004408 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	785b      	ldrb	r3, [r3, #1]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d044      	beq.n	800437e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	881b      	ldrh	r3, [r3, #0]
 8004300:	81bb      	strh	r3, [r7, #12]
 8004302:	89bb      	ldrh	r3, [r7, #12]
 8004304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004308:	2b00      	cmp	r3, #0
 800430a:	d01b      	beq.n	8004344 <USB_DeactivateEndpoint+0x6c>
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	4413      	add	r3, r2
 8004316:	881b      	ldrh	r3, [r3, #0]
 8004318:	b29b      	uxth	r3, r3
 800431a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800431e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004322:	817b      	strh	r3, [r7, #10]
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	441a      	add	r2, r3
 800432e:	897b      	ldrh	r3, [r7, #10]
 8004330:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004334:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004338:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800433c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004340:	b29b      	uxth	r3, r3
 8004342:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	4413      	add	r3, r2
 800434e:	881b      	ldrh	r3, [r3, #0]
 8004350:	b29b      	uxth	r3, r3
 8004352:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004356:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800435a:	813b      	strh	r3, [r7, #8]
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	441a      	add	r2, r3
 8004366:	893b      	ldrh	r3, [r7, #8]
 8004368:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800436c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004370:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004378:	b29b      	uxth	r3, r3
 800437a:	8013      	strh	r3, [r2, #0]
 800437c:	e192      	b.n	80046a4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	4413      	add	r3, r2
 8004388:	881b      	ldrh	r3, [r3, #0]
 800438a:	827b      	strh	r3, [r7, #18]
 800438c:	8a7b      	ldrh	r3, [r7, #18]
 800438e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d01b      	beq.n	80043ce <USB_DeactivateEndpoint+0xf6>
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	4413      	add	r3, r2
 80043a0:	881b      	ldrh	r3, [r3, #0]
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ac:	823b      	strh	r3, [r7, #16]
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	441a      	add	r2, r3
 80043b8:	8a3b      	ldrh	r3, [r7, #16]
 80043ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	4413      	add	r3, r2
 80043d8:	881b      	ldrh	r3, [r3, #0]
 80043da:	b29b      	uxth	r3, r3
 80043dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043e4:	81fb      	strh	r3, [r7, #14]
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	441a      	add	r2, r3
 80043f0:	89fb      	ldrh	r3, [r7, #14]
 80043f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004402:	b29b      	uxth	r3, r3
 8004404:	8013      	strh	r3, [r2, #0]
 8004406:	e14d      	b.n	80046a4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	785b      	ldrb	r3, [r3, #1]
 800440c:	2b00      	cmp	r3, #0
 800440e:	f040 80a5 	bne.w	800455c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4413      	add	r3, r2
 800441c:	881b      	ldrh	r3, [r3, #0]
 800441e:	843b      	strh	r3, [r7, #32]
 8004420:	8c3b      	ldrh	r3, [r7, #32]
 8004422:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d01b      	beq.n	8004462 <USB_DeactivateEndpoint+0x18a>
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4413      	add	r3, r2
 8004434:	881b      	ldrh	r3, [r3, #0]
 8004436:	b29b      	uxth	r3, r3
 8004438:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800443c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004440:	83fb      	strh	r3, [r7, #30]
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	441a      	add	r2, r3
 800444c:	8bfb      	ldrh	r3, [r7, #30]
 800444e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004452:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004456:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800445a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800445e:	b29b      	uxth	r3, r3
 8004460:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4413      	add	r3, r2
 800446c:	881b      	ldrh	r3, [r3, #0]
 800446e:	83bb      	strh	r3, [r7, #28]
 8004470:	8bbb      	ldrh	r3, [r7, #28]
 8004472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004476:	2b00      	cmp	r3, #0
 8004478:	d01b      	beq.n	80044b2 <USB_DeactivateEndpoint+0x1da>
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	4413      	add	r3, r2
 8004484:	881b      	ldrh	r3, [r3, #0]
 8004486:	b29b      	uxth	r3, r3
 8004488:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800448c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004490:	837b      	strh	r3, [r7, #26]
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	441a      	add	r2, r3
 800449c:	8b7b      	ldrh	r3, [r7, #26]
 800449e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4413      	add	r3, r2
 80044bc:	881b      	ldrh	r3, [r3, #0]
 80044be:	b29b      	uxth	r3, r3
 80044c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044c8:	833b      	strh	r3, [r7, #24]
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	441a      	add	r2, r3
 80044d4:	8b3b      	ldrh	r3, [r7, #24]
 80044d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	4413      	add	r3, r2
 80044f4:	881b      	ldrh	r3, [r3, #0]
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004500:	82fb      	strh	r3, [r7, #22]
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	441a      	add	r2, r3
 800450c:	8afb      	ldrh	r3, [r7, #22]
 800450e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004512:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004516:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800451a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800451e:	b29b      	uxth	r3, r3
 8004520:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	4413      	add	r3, r2
 800452c:	881b      	ldrh	r3, [r3, #0]
 800452e:	b29b      	uxth	r3, r3
 8004530:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004534:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004538:	82bb      	strh	r3, [r7, #20]
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	441a      	add	r2, r3
 8004544:	8abb      	ldrh	r3, [r7, #20]
 8004546:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800454a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800454e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004556:	b29b      	uxth	r3, r3
 8004558:	8013      	strh	r3, [r2, #0]
 800455a:	e0a3      	b.n	80046a4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	4413      	add	r3, r2
 8004566:	881b      	ldrh	r3, [r3, #0]
 8004568:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800456a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800456c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d01b      	beq.n	80045ac <USB_DeactivateEndpoint+0x2d4>
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	4413      	add	r3, r2
 800457e:	881b      	ldrh	r3, [r3, #0]
 8004580:	b29b      	uxth	r3, r3
 8004582:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800458a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	441a      	add	r2, r3
 8004596:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004598:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800459c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	4413      	add	r3, r2
 80045b6:	881b      	ldrh	r3, [r3, #0]
 80045b8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80045ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80045bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d01b      	beq.n	80045fc <USB_DeactivateEndpoint+0x324>
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4413      	add	r3, r2
 80045ce:	881b      	ldrh	r3, [r3, #0]
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045da:	853b      	strh	r3, [r7, #40]	; 0x28
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	441a      	add	r2, r3
 80045e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80045e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	4413      	add	r3, r2
 8004606:	881b      	ldrh	r3, [r3, #0]
 8004608:	b29b      	uxth	r3, r3
 800460a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800460e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004612:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	441a      	add	r2, r3
 800461e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004620:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004624:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004628:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800462c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004630:	b29b      	uxth	r3, r3
 8004632:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4413      	add	r3, r2
 800463e:	881b      	ldrh	r3, [r3, #0]
 8004640:	b29b      	uxth	r3, r3
 8004642:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004646:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800464a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	441a      	add	r2, r3
 8004656:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004658:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800465c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004660:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004668:	b29b      	uxth	r3, r3
 800466a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4413      	add	r3, r2
 8004676:	881b      	ldrh	r3, [r3, #0]
 8004678:	b29b      	uxth	r3, r3
 800467a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800467e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004682:	847b      	strh	r3, [r7, #34]	; 0x22
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	441a      	add	r2, r3
 800468e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004690:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004694:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004698:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800469c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3734      	adds	r7, #52	; 0x34
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bc80      	pop	{r7}
 80046ae:	4770      	bx	lr

080046b0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b0c4      	sub	sp, #272	; 0x110
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	1d3b      	adds	r3, r7, #4
 80046b8:	6018      	str	r0, [r3, #0]
 80046ba:	463b      	mov	r3, r7
 80046bc:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80046be:	463b      	mov	r3, r7
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	785b      	ldrb	r3, [r3, #1]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	f040 8557 	bne.w	8005178 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80046ca:	463b      	mov	r3, r7
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	699a      	ldr	r2, [r3, #24]
 80046d0:	463b      	mov	r3, r7
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d905      	bls.n	80046e6 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80046da:	463b      	mov	r3, r7
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80046e4:	e004      	b.n	80046f0 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80046e6:	463b      	mov	r3, r7
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80046f0:	463b      	mov	r3, r7
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	7b1b      	ldrb	r3, [r3, #12]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d12c      	bne.n	8004754 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80046fa:	463b      	mov	r3, r7
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	6959      	ldr	r1, [r3, #20]
 8004700:	463b      	mov	r3, r7
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	88da      	ldrh	r2, [r3, #6]
 8004706:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800470a:	b29b      	uxth	r3, r3
 800470c:	1d38      	adds	r0, r7, #4
 800470e:	6800      	ldr	r0, [r0, #0]
 8004710:	f001 fa2c 	bl	8005b6c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004714:	1d3b      	adds	r3, r7, #4
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	617b      	str	r3, [r7, #20]
 800471a:	1d3b      	adds	r3, r7, #4
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004722:	b29b      	uxth	r3, r3
 8004724:	461a      	mov	r2, r3
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	4413      	add	r3, r2
 800472a:	617b      	str	r3, [r7, #20]
 800472c:	463b      	mov	r3, r7
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	011a      	lsls	r2, r3, #4
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	4413      	add	r3, r2
 8004738:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800473c:	f107 0310 	add.w	r3, r7, #16
 8004740:	601a      	str	r2, [r3, #0]
 8004742:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004746:	b29a      	uxth	r2, r3
 8004748:	f107 0310 	add.w	r3, r7, #16
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	801a      	strh	r2, [r3, #0]
 8004750:	f000 bcdd 	b.w	800510e <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004754:	463b      	mov	r3, r7
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	78db      	ldrb	r3, [r3, #3]
 800475a:	2b02      	cmp	r3, #2
 800475c:	f040 8347 	bne.w	8004dee <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004760:	463b      	mov	r3, r7
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	6a1a      	ldr	r2, [r3, #32]
 8004766:	463b      	mov	r3, r7
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	429a      	cmp	r2, r3
 800476e:	f240 82eb 	bls.w	8004d48 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004772:	1d3b      	adds	r3, r7, #4
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	463b      	mov	r3, r7
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	4413      	add	r3, r2
 8004780:	881b      	ldrh	r3, [r3, #0]
 8004782:	b29b      	uxth	r3, r3
 8004784:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800478c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8004790:	1d3b      	adds	r3, r7, #4
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	463b      	mov	r3, r7
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	441a      	add	r2, r3
 800479e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80047a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047aa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80047ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80047b6:	463b      	mov	r3, r7
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	6a1a      	ldr	r2, [r3, #32]
 80047bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047c0:	1ad2      	subs	r2, r2, r3
 80047c2:	463b      	mov	r3, r7
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80047c8:	1d3b      	adds	r3, r7, #4
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	463b      	mov	r3, r7
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	4413      	add	r3, r2
 80047d6:	881b      	ldrh	r3, [r3, #0]
 80047d8:	b29b      	uxth	r3, r3
 80047da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f000 8159 	beq.w	8004a96 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80047e4:	1d3b      	adds	r3, r7, #4
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	637b      	str	r3, [r7, #52]	; 0x34
 80047ea:	463b      	mov	r3, r7
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	785b      	ldrb	r3, [r3, #1]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d164      	bne.n	80048be <USB_EPStartXfer+0x20e>
 80047f4:	1d3b      	adds	r3, r7, #4
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047fa:	1d3b      	adds	r3, r7, #4
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004802:	b29b      	uxth	r3, r3
 8004804:	461a      	mov	r2, r3
 8004806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004808:	4413      	add	r3, r2
 800480a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800480c:	463b      	mov	r3, r7
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	011a      	lsls	r2, r3, #4
 8004814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004816:	4413      	add	r3, r2
 8004818:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800481c:	62bb      	str	r3, [r7, #40]	; 0x28
 800481e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004822:	2b00      	cmp	r3, #0
 8004824:	d112      	bne.n	800484c <USB_EPStartXfer+0x19c>
 8004826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004828:	881b      	ldrh	r3, [r3, #0]
 800482a:	b29b      	uxth	r3, r3
 800482c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004830:	b29a      	uxth	r2, r3
 8004832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004834:	801a      	strh	r2, [r3, #0]
 8004836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004838:	881b      	ldrh	r3, [r3, #0]
 800483a:	b29b      	uxth	r3, r3
 800483c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004840:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004844:	b29a      	uxth	r2, r3
 8004846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004848:	801a      	strh	r2, [r3, #0]
 800484a:	e054      	b.n	80048f6 <USB_EPStartXfer+0x246>
 800484c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004850:	2b3e      	cmp	r3, #62	; 0x3e
 8004852:	d817      	bhi.n	8004884 <USB_EPStartXfer+0x1d4>
 8004854:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004858:	085b      	lsrs	r3, r3, #1
 800485a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800485e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b00      	cmp	r3, #0
 8004868:	d004      	beq.n	8004874 <USB_EPStartXfer+0x1c4>
 800486a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800486e:	3301      	adds	r3, #1
 8004870:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004874:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004878:	b29b      	uxth	r3, r3
 800487a:	029b      	lsls	r3, r3, #10
 800487c:	b29a      	uxth	r2, r3
 800487e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004880:	801a      	strh	r2, [r3, #0]
 8004882:	e038      	b.n	80048f6 <USB_EPStartXfer+0x246>
 8004884:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004888:	095b      	lsrs	r3, r3, #5
 800488a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800488e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004892:	f003 031f 	and.w	r3, r3, #31
 8004896:	2b00      	cmp	r3, #0
 8004898:	d104      	bne.n	80048a4 <USB_EPStartXfer+0x1f4>
 800489a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800489e:	3b01      	subs	r3, #1
 80048a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80048a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	029b      	lsls	r3, r3, #10
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ba:	801a      	strh	r2, [r3, #0]
 80048bc:	e01b      	b.n	80048f6 <USB_EPStartXfer+0x246>
 80048be:	463b      	mov	r3, r7
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	785b      	ldrb	r3, [r3, #1]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d116      	bne.n	80048f6 <USB_EPStartXfer+0x246>
 80048c8:	1d3b      	adds	r3, r7, #4
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	461a      	mov	r2, r3
 80048d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048d6:	4413      	add	r3, r2
 80048d8:	637b      	str	r3, [r7, #52]	; 0x34
 80048da:	463b      	mov	r3, r7
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	011a      	lsls	r2, r3, #4
 80048e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048e4:	4413      	add	r3, r2
 80048e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80048ea:	633b      	str	r3, [r7, #48]	; 0x30
 80048ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80048f6:	463b      	mov	r3, r7
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	895b      	ldrh	r3, [r3, #10]
 80048fc:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004900:	463b      	mov	r3, r7
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6959      	ldr	r1, [r3, #20]
 8004906:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800490a:	b29b      	uxth	r3, r3
 800490c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004910:	1d38      	adds	r0, r7, #4
 8004912:	6800      	ldr	r0, [r0, #0]
 8004914:	f001 f92a 	bl	8005b6c <USB_WritePMA>
            ep->xfer_buff += len;
 8004918:	463b      	mov	r3, r7
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	695a      	ldr	r2, [r3, #20]
 800491e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004922:	441a      	add	r2, r3
 8004924:	463b      	mov	r3, r7
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800492a:	463b      	mov	r3, r7
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	6a1a      	ldr	r2, [r3, #32]
 8004930:	463b      	mov	r3, r7
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	429a      	cmp	r2, r3
 8004938:	d909      	bls.n	800494e <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 800493a:	463b      	mov	r3, r7
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	6a1a      	ldr	r2, [r3, #32]
 8004940:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004944:	1ad2      	subs	r2, r2, r3
 8004946:	463b      	mov	r3, r7
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	621a      	str	r2, [r3, #32]
 800494c:	e008      	b.n	8004960 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800494e:	463b      	mov	r3, r7
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	6a1b      	ldr	r3, [r3, #32]
 8004954:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004958:	463b      	mov	r3, r7
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2200      	movs	r2, #0
 800495e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004960:	463b      	mov	r3, r7
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	785b      	ldrb	r3, [r3, #1]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d164      	bne.n	8004a34 <USB_EPStartXfer+0x384>
 800496a:	1d3b      	adds	r3, r7, #4
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	61fb      	str	r3, [r7, #28]
 8004970:	1d3b      	adds	r3, r7, #4
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004978:	b29b      	uxth	r3, r3
 800497a:	461a      	mov	r2, r3
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	4413      	add	r3, r2
 8004980:	61fb      	str	r3, [r7, #28]
 8004982:	463b      	mov	r3, r7
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	011a      	lsls	r2, r3, #4
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	4413      	add	r3, r2
 800498e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004992:	61bb      	str	r3, [r7, #24]
 8004994:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004998:	2b00      	cmp	r3, #0
 800499a:	d112      	bne.n	80049c2 <USB_EPStartXfer+0x312>
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	881b      	ldrh	r3, [r3, #0]
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	801a      	strh	r2, [r3, #0]
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	881b      	ldrh	r3, [r3, #0]
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	801a      	strh	r2, [r3, #0]
 80049c0:	e057      	b.n	8004a72 <USB_EPStartXfer+0x3c2>
 80049c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049c6:	2b3e      	cmp	r3, #62	; 0x3e
 80049c8:	d817      	bhi.n	80049fa <USB_EPStartXfer+0x34a>
 80049ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049ce:	085b      	lsrs	r3, r3, #1
 80049d0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80049d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049d8:	f003 0301 	and.w	r3, r3, #1
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d004      	beq.n	80049ea <USB_EPStartXfer+0x33a>
 80049e0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80049e4:	3301      	adds	r3, #1
 80049e6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80049ea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	029b      	lsls	r3, r3, #10
 80049f2:	b29a      	uxth	r2, r3
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	801a      	strh	r2, [r3, #0]
 80049f8:	e03b      	b.n	8004a72 <USB_EPStartXfer+0x3c2>
 80049fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049fe:	095b      	lsrs	r3, r3, #5
 8004a00:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004a04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a08:	f003 031f 	and.w	r3, r3, #31
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d104      	bne.n	8004a1a <USB_EPStartXfer+0x36a>
 8004a10:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004a14:	3b01      	subs	r3, #1
 8004a16:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004a1a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	029b      	lsls	r3, r3, #10
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	801a      	strh	r2, [r3, #0]
 8004a32:	e01e      	b.n	8004a72 <USB_EPStartXfer+0x3c2>
 8004a34:	463b      	mov	r3, r7
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	785b      	ldrb	r3, [r3, #1]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d119      	bne.n	8004a72 <USB_EPStartXfer+0x3c2>
 8004a3e:	1d3b      	adds	r3, r7, #4
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	627b      	str	r3, [r7, #36]	; 0x24
 8004a44:	1d3b      	adds	r3, r7, #4
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	461a      	mov	r2, r3
 8004a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a52:	4413      	add	r3, r2
 8004a54:	627b      	str	r3, [r7, #36]	; 0x24
 8004a56:	463b      	mov	r3, r7
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	011a      	lsls	r2, r3, #4
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a60:	4413      	add	r3, r2
 8004a62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a66:	623b      	str	r3, [r7, #32]
 8004a68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	6a3b      	ldr	r3, [r7, #32]
 8004a70:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004a72:	463b      	mov	r3, r7
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	891b      	ldrh	r3, [r3, #8]
 8004a78:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a7c:	463b      	mov	r3, r7
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	6959      	ldr	r1, [r3, #20]
 8004a82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004a8c:	1d38      	adds	r0, r7, #4
 8004a8e:	6800      	ldr	r0, [r0, #0]
 8004a90:	f001 f86c 	bl	8005b6c <USB_WritePMA>
 8004a94:	e33b      	b.n	800510e <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004a96:	463b      	mov	r3, r7
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	785b      	ldrb	r3, [r3, #1]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d164      	bne.n	8004b6a <USB_EPStartXfer+0x4ba>
 8004aa0:	1d3b      	adds	r3, r7, #4
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004aa6:	1d3b      	adds	r3, r7, #4
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ab4:	4413      	add	r3, r2
 8004ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ab8:	463b      	mov	r3, r7
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	011a      	lsls	r2, r3, #4
 8004ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ac8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004aca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d112      	bne.n	8004af8 <USB_EPStartXfer+0x448>
 8004ad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ad4:	881b      	ldrh	r3, [r3, #0]
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ae0:	801a      	strh	r2, [r3, #0]
 8004ae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ae4:	881b      	ldrh	r3, [r3, #0]
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004aec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004af0:	b29a      	uxth	r2, r3
 8004af2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004af4:	801a      	strh	r2, [r3, #0]
 8004af6:	e057      	b.n	8004ba8 <USB_EPStartXfer+0x4f8>
 8004af8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004afc:	2b3e      	cmp	r3, #62	; 0x3e
 8004afe:	d817      	bhi.n	8004b30 <USB_EPStartXfer+0x480>
 8004b00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b04:	085b      	lsrs	r3, r3, #1
 8004b06:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004b0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d004      	beq.n	8004b20 <USB_EPStartXfer+0x470>
 8004b16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004b20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	029b      	lsls	r3, r3, #10
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b2c:	801a      	strh	r2, [r3, #0]
 8004b2e:	e03b      	b.n	8004ba8 <USB_EPStartXfer+0x4f8>
 8004b30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b34:	095b      	lsrs	r3, r3, #5
 8004b36:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004b3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b3e:	f003 031f 	and.w	r3, r3, #31
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d104      	bne.n	8004b50 <USB_EPStartXfer+0x4a0>
 8004b46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004b50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	029b      	lsls	r3, r3, #10
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b66:	801a      	strh	r2, [r3, #0]
 8004b68:	e01e      	b.n	8004ba8 <USB_EPStartXfer+0x4f8>
 8004b6a:	463b      	mov	r3, r7
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	785b      	ldrb	r3, [r3, #1]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d119      	bne.n	8004ba8 <USB_EPStartXfer+0x4f8>
 8004b74:	1d3b      	adds	r3, r7, #4
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	657b      	str	r3, [r7, #84]	; 0x54
 8004b7a:	1d3b      	adds	r3, r7, #4
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	461a      	mov	r2, r3
 8004b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b88:	4413      	add	r3, r2
 8004b8a:	657b      	str	r3, [r7, #84]	; 0x54
 8004b8c:	463b      	mov	r3, r7
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	011a      	lsls	r2, r3, #4
 8004b94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b96:	4413      	add	r3, r2
 8004b98:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b9c:	653b      	str	r3, [r7, #80]	; 0x50
 8004b9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ba6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004ba8:	463b      	mov	r3, r7
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	891b      	ldrh	r3, [r3, #8]
 8004bae:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004bb2:	463b      	mov	r3, r7
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	6959      	ldr	r1, [r3, #20]
 8004bb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004bc2:	1d38      	adds	r0, r7, #4
 8004bc4:	6800      	ldr	r0, [r0, #0]
 8004bc6:	f000 ffd1 	bl	8005b6c <USB_WritePMA>
            ep->xfer_buff += len;
 8004bca:	463b      	mov	r3, r7
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	695a      	ldr	r2, [r3, #20]
 8004bd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bd4:	441a      	add	r2, r3
 8004bd6:	463b      	mov	r3, r7
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004bdc:	463b      	mov	r3, r7
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6a1a      	ldr	r2, [r3, #32]
 8004be2:	463b      	mov	r3, r7
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d909      	bls.n	8004c00 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8004bec:	463b      	mov	r3, r7
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6a1a      	ldr	r2, [r3, #32]
 8004bf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bf6:	1ad2      	subs	r2, r2, r3
 8004bf8:	463b      	mov	r3, r7
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	621a      	str	r2, [r3, #32]
 8004bfe:	e008      	b.n	8004c12 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8004c00:	463b      	mov	r3, r7
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004c0a:	463b      	mov	r3, r7
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004c12:	1d3b      	adds	r3, r7, #4
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	647b      	str	r3, [r7, #68]	; 0x44
 8004c18:	463b      	mov	r3, r7
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	785b      	ldrb	r3, [r3, #1]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d164      	bne.n	8004cec <USB_EPStartXfer+0x63c>
 8004c22:	1d3b      	adds	r3, r7, #4
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c28:	1d3b      	adds	r3, r7, #4
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	461a      	mov	r2, r3
 8004c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c36:	4413      	add	r3, r2
 8004c38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c3a:	463b      	mov	r3, r7
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	011a      	lsls	r2, r3, #4
 8004c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c44:	4413      	add	r3, r2
 8004c46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d112      	bne.n	8004c7a <USB_EPStartXfer+0x5ca>
 8004c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c56:	881b      	ldrh	r3, [r3, #0]
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c62:	801a      	strh	r2, [r3, #0]
 8004c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c66:	881b      	ldrh	r3, [r3, #0]
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c76:	801a      	strh	r2, [r3, #0]
 8004c78:	e054      	b.n	8004d24 <USB_EPStartXfer+0x674>
 8004c7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c7e:	2b3e      	cmp	r3, #62	; 0x3e
 8004c80:	d817      	bhi.n	8004cb2 <USB_EPStartXfer+0x602>
 8004c82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c86:	085b      	lsrs	r3, r3, #1
 8004c88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004c8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c90:	f003 0301 	and.w	r3, r3, #1
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d004      	beq.n	8004ca2 <USB_EPStartXfer+0x5f2>
 8004c98:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004ca2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	029b      	lsls	r3, r3, #10
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cae:	801a      	strh	r2, [r3, #0]
 8004cb0:	e038      	b.n	8004d24 <USB_EPStartXfer+0x674>
 8004cb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cb6:	095b      	lsrs	r3, r3, #5
 8004cb8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004cbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cc0:	f003 031f 	and.w	r3, r3, #31
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d104      	bne.n	8004cd2 <USB_EPStartXfer+0x622>
 8004cc8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004cd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	029b      	lsls	r3, r3, #10
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ce0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce8:	801a      	strh	r2, [r3, #0]
 8004cea:	e01b      	b.n	8004d24 <USB_EPStartXfer+0x674>
 8004cec:	463b      	mov	r3, r7
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	785b      	ldrb	r3, [r3, #1]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d116      	bne.n	8004d24 <USB_EPStartXfer+0x674>
 8004cf6:	1d3b      	adds	r3, r7, #4
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	461a      	mov	r2, r3
 8004d02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d04:	4413      	add	r3, r2
 8004d06:	647b      	str	r3, [r7, #68]	; 0x44
 8004d08:	463b      	mov	r3, r7
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	011a      	lsls	r2, r3, #4
 8004d10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d12:	4413      	add	r3, r2
 8004d14:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d18:	643b      	str	r3, [r7, #64]	; 0x40
 8004d1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d22:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004d24:	463b      	mov	r3, r7
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	895b      	ldrh	r3, [r3, #10]
 8004d2a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d2e:	463b      	mov	r3, r7
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	6959      	ldr	r1, [r3, #20]
 8004d34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004d3e:	1d38      	adds	r0, r7, #4
 8004d40:	6800      	ldr	r0, [r0, #0]
 8004d42:	f000 ff13 	bl	8005b6c <USB_WritePMA>
 8004d46:	e1e2      	b.n	800510e <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004d48:	463b      	mov	r3, r7
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004d52:	1d3b      	adds	r3, r7, #4
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	463b      	mov	r3, r7
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4413      	add	r3, r2
 8004d60:	881b      	ldrh	r3, [r3, #0]
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d6c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004d70:	1d3b      	adds	r3, r7, #4
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	463b      	mov	r3, r7
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	441a      	add	r2, r3
 8004d7e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004d82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004d96:	1d3b      	adds	r3, r7, #4
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	663b      	str	r3, [r7, #96]	; 0x60
 8004d9c:	1d3b      	adds	r3, r7, #4
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	461a      	mov	r2, r3
 8004da8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004daa:	4413      	add	r3, r2
 8004dac:	663b      	str	r3, [r7, #96]	; 0x60
 8004dae:	463b      	mov	r3, r7
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	011a      	lsls	r2, r3, #4
 8004db6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004db8:	4413      	add	r3, r2
 8004dba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004dbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dc8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004dca:	463b      	mov	r3, r7
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	891b      	ldrh	r3, [r3, #8]
 8004dd0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004dd4:	463b      	mov	r3, r7
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6959      	ldr	r1, [r3, #20]
 8004dda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004de4:	1d38      	adds	r0, r7, #4
 8004de6:	6800      	ldr	r0, [r0, #0]
 8004de8:	f000 fec0 	bl	8005b6c <USB_WritePMA>
 8004dec:	e18f      	b.n	800510e <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004dee:	1d3b      	adds	r3, r7, #4
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	463b      	mov	r3, r7
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	4413      	add	r3, r2
 8004dfc:	881b      	ldrh	r3, [r3, #0]
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f000 808f 	beq.w	8004f28 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004e0a:	1d3b      	adds	r3, r7, #4
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e10:	463b      	mov	r3, r7
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	785b      	ldrb	r3, [r3, #1]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d164      	bne.n	8004ee4 <USB_EPStartXfer+0x834>
 8004e1a:	1d3b      	adds	r3, r7, #4
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	673b      	str	r3, [r7, #112]	; 0x70
 8004e20:	1d3b      	adds	r3, r7, #4
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e2e:	4413      	add	r3, r2
 8004e30:	673b      	str	r3, [r7, #112]	; 0x70
 8004e32:	463b      	mov	r3, r7
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	011a      	lsls	r2, r3, #4
 8004e3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e3c:	4413      	add	r3, r2
 8004e3e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d112      	bne.n	8004e72 <USB_EPStartXfer+0x7c2>
 8004e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e4e:	881b      	ldrh	r3, [r3, #0]
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e5a:	801a      	strh	r2, [r3, #0]
 8004e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e5e:	881b      	ldrh	r3, [r3, #0]
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e6a:	b29a      	uxth	r2, r3
 8004e6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e6e:	801a      	strh	r2, [r3, #0]
 8004e70:	e054      	b.n	8004f1c <USB_EPStartXfer+0x86c>
 8004e72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e76:	2b3e      	cmp	r3, #62	; 0x3e
 8004e78:	d817      	bhi.n	8004eaa <USB_EPStartXfer+0x7fa>
 8004e7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e7e:	085b      	lsrs	r3, r3, #1
 8004e80:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004e84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e88:	f003 0301 	and.w	r3, r3, #1
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d004      	beq.n	8004e9a <USB_EPStartXfer+0x7ea>
 8004e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e94:	3301      	adds	r3, #1
 8004e96:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	029b      	lsls	r3, r3, #10
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ea6:	801a      	strh	r2, [r3, #0]
 8004ea8:	e038      	b.n	8004f1c <USB_EPStartXfer+0x86c>
 8004eaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004eae:	095b      	lsrs	r3, r3, #5
 8004eb0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004eb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004eb8:	f003 031f 	and.w	r3, r3, #31
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d104      	bne.n	8004eca <USB_EPStartXfer+0x81a>
 8004ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	029b      	lsls	r3, r3, #10
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ed8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ee0:	801a      	strh	r2, [r3, #0]
 8004ee2:	e01b      	b.n	8004f1c <USB_EPStartXfer+0x86c>
 8004ee4:	463b      	mov	r3, r7
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	785b      	ldrb	r3, [r3, #1]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d116      	bne.n	8004f1c <USB_EPStartXfer+0x86c>
 8004eee:	1d3b      	adds	r3, r7, #4
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	461a      	mov	r2, r3
 8004efa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004efc:	4413      	add	r3, r2
 8004efe:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f00:	463b      	mov	r3, r7
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	011a      	lsls	r2, r3, #4
 8004f08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f10:	677b      	str	r3, [r7, #116]	; 0x74
 8004f12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f1a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004f1c:	463b      	mov	r3, r7
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	895b      	ldrh	r3, [r3, #10]
 8004f22:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8004f26:	e097      	b.n	8005058 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004f28:	463b      	mov	r3, r7
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	785b      	ldrb	r3, [r3, #1]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d168      	bne.n	8005004 <USB_EPStartXfer+0x954>
 8004f32:	1d3b      	adds	r3, r7, #4
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f3a:	1d3b      	adds	r3, r7, #4
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	461a      	mov	r2, r3
 8004f46:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f4a:	4413      	add	r3, r2
 8004f4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f50:	463b      	mov	r3, r7
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	011a      	lsls	r2, r3, #4
 8004f58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f5c:	4413      	add	r3, r2
 8004f5e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f62:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004f64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d112      	bne.n	8004f92 <USB_EPStartXfer+0x8e2>
 8004f6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f6e:	881b      	ldrh	r3, [r3, #0]
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f7a:	801a      	strh	r2, [r3, #0]
 8004f7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f7e:	881b      	ldrh	r3, [r3, #0]
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f8e:	801a      	strh	r2, [r3, #0]
 8004f90:	e05d      	b.n	800504e <USB_EPStartXfer+0x99e>
 8004f92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f96:	2b3e      	cmp	r3, #62	; 0x3e
 8004f98:	d817      	bhi.n	8004fca <USB_EPStartXfer+0x91a>
 8004f9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f9e:	085b      	lsrs	r3, r3, #1
 8004fa0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004fa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fa8:	f003 0301 	and.w	r3, r3, #1
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d004      	beq.n	8004fba <USB_EPStartXfer+0x90a>
 8004fb0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004fba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	029b      	lsls	r3, r3, #10
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fc6:	801a      	strh	r2, [r3, #0]
 8004fc8:	e041      	b.n	800504e <USB_EPStartXfer+0x99e>
 8004fca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fce:	095b      	lsrs	r3, r3, #5
 8004fd0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004fd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fd8:	f003 031f 	and.w	r3, r3, #31
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d104      	bne.n	8004fea <USB_EPStartXfer+0x93a>
 8004fe0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004fea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	029b      	lsls	r3, r3, #10
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ff8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005000:	801a      	strh	r2, [r3, #0]
 8005002:	e024      	b.n	800504e <USB_EPStartXfer+0x99e>
 8005004:	463b      	mov	r3, r7
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	785b      	ldrb	r3, [r3, #1]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d11f      	bne.n	800504e <USB_EPStartXfer+0x99e>
 800500e:	1d3b      	adds	r3, r7, #4
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005016:	1d3b      	adds	r3, r7, #4
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800501e:	b29b      	uxth	r3, r3
 8005020:	461a      	mov	r2, r3
 8005022:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005026:	4413      	add	r3, r2
 8005028:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800502c:	463b      	mov	r3, r7
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	011a      	lsls	r2, r3, #4
 8005034:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005038:	4413      	add	r3, r2
 800503a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800503e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005042:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005046:	b29a      	uxth	r2, r3
 8005048:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800504c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800504e:	463b      	mov	r3, r7
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	891b      	ldrh	r3, [r3, #8]
 8005054:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005058:	463b      	mov	r3, r7
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	6959      	ldr	r1, [r3, #20]
 800505e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005062:	b29b      	uxth	r3, r3
 8005064:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005068:	1d38      	adds	r0, r7, #4
 800506a:	6800      	ldr	r0, [r0, #0]
 800506c:	f000 fd7e 	bl	8005b6c <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005070:	463b      	mov	r3, r7
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	785b      	ldrb	r3, [r3, #1]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d122      	bne.n	80050c0 <USB_EPStartXfer+0xa10>
 800507a:	1d3b      	adds	r3, r7, #4
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	463b      	mov	r3, r7
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4413      	add	r3, r2
 8005088:	881b      	ldrh	r3, [r3, #0]
 800508a:	b29b      	uxth	r3, r3
 800508c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005094:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8005098:	1d3b      	adds	r3, r7, #4
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	463b      	mov	r3, r7
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	441a      	add	r2, r3
 80050a6:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80050aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	8013      	strh	r3, [r2, #0]
 80050be:	e026      	b.n	800510e <USB_EPStartXfer+0xa5e>
 80050c0:	463b      	mov	r3, r7
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	785b      	ldrb	r3, [r3, #1]
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d121      	bne.n	800510e <USB_EPStartXfer+0xa5e>
 80050ca:	1d3b      	adds	r3, r7, #4
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	463b      	mov	r3, r7
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	4413      	add	r3, r2
 80050d8:	881b      	ldrh	r3, [r3, #0]
 80050da:	b29b      	uxth	r3, r3
 80050dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e4:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80050e8:	1d3b      	adds	r3, r7, #4
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	463b      	mov	r3, r7
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	441a      	add	r2, r3
 80050f6:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80050fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005102:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005106:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800510a:	b29b      	uxth	r3, r3
 800510c:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800510e:	1d3b      	adds	r3, r7, #4
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	463b      	mov	r3, r7
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	4413      	add	r3, r2
 800511c:	881b      	ldrh	r3, [r3, #0]
 800511e:	b29b      	uxth	r3, r3
 8005120:	f107 020e 	add.w	r2, r7, #14
 8005124:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005128:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800512c:	8013      	strh	r3, [r2, #0]
 800512e:	f107 030e 	add.w	r3, r7, #14
 8005132:	f107 020e 	add.w	r2, r7, #14
 8005136:	8812      	ldrh	r2, [r2, #0]
 8005138:	f082 0210 	eor.w	r2, r2, #16
 800513c:	801a      	strh	r2, [r3, #0]
 800513e:	f107 030e 	add.w	r3, r7, #14
 8005142:	f107 020e 	add.w	r2, r7, #14
 8005146:	8812      	ldrh	r2, [r2, #0]
 8005148:	f082 0220 	eor.w	r2, r2, #32
 800514c:	801a      	strh	r2, [r3, #0]
 800514e:	1d3b      	adds	r3, r7, #4
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	463b      	mov	r3, r7
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	441a      	add	r2, r3
 800515c:	f107 030e 	add.w	r3, r7, #14
 8005160:	881b      	ldrh	r3, [r3, #0]
 8005162:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005166:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800516a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800516e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005172:	b29b      	uxth	r3, r3
 8005174:	8013      	strh	r3, [r2, #0]
 8005176:	e3b5      	b.n	80058e4 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005178:	463b      	mov	r3, r7
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	7b1b      	ldrb	r3, [r3, #12]
 800517e:	2b00      	cmp	r3, #0
 8005180:	f040 8090 	bne.w	80052a4 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005184:	463b      	mov	r3, r7
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	699a      	ldr	r2, [r3, #24]
 800518a:	463b      	mov	r3, r7
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	429a      	cmp	r2, r3
 8005192:	d90e      	bls.n	80051b2 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8005194:	463b      	mov	r3, r7
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 800519e:	463b      	mov	r3, r7
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	699a      	ldr	r2, [r3, #24]
 80051a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051a8:	1ad2      	subs	r2, r2, r3
 80051aa:	463b      	mov	r3, r7
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	619a      	str	r2, [r3, #24]
 80051b0:	e008      	b.n	80051c4 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 80051b2:	463b      	mov	r3, r7
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 80051bc:	463b      	mov	r3, r7
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2200      	movs	r2, #0
 80051c2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80051c4:	1d3b      	adds	r3, r7, #4
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80051cc:	1d3b      	adds	r3, r7, #4
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	461a      	mov	r2, r3
 80051d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80051dc:	4413      	add	r3, r2
 80051de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80051e2:	463b      	mov	r3, r7
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	011a      	lsls	r2, r3, #4
 80051ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80051ee:	4413      	add	r3, r2
 80051f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80051f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80051f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d116      	bne.n	800522e <USB_EPStartXfer+0xb7e>
 8005200:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005204:	881b      	ldrh	r3, [r3, #0]
 8005206:	b29b      	uxth	r3, r3
 8005208:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800520c:	b29a      	uxth	r2, r3
 800520e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005212:	801a      	strh	r2, [r3, #0]
 8005214:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005218:	881b      	ldrh	r3, [r3, #0]
 800521a:	b29b      	uxth	r3, r3
 800521c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005220:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005224:	b29a      	uxth	r2, r3
 8005226:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800522a:	801a      	strh	r2, [r3, #0]
 800522c:	e32c      	b.n	8005888 <USB_EPStartXfer+0x11d8>
 800522e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005232:	2b3e      	cmp	r3, #62	; 0x3e
 8005234:	d818      	bhi.n	8005268 <USB_EPStartXfer+0xbb8>
 8005236:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800523a:	085b      	lsrs	r3, r3, #1
 800523c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005240:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005244:	f003 0301 	and.w	r3, r3, #1
 8005248:	2b00      	cmp	r3, #0
 800524a:	d004      	beq.n	8005256 <USB_EPStartXfer+0xba6>
 800524c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005250:	3301      	adds	r3, #1
 8005252:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005256:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800525a:	b29b      	uxth	r3, r3
 800525c:	029b      	lsls	r3, r3, #10
 800525e:	b29a      	uxth	r2, r3
 8005260:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005264:	801a      	strh	r2, [r3, #0]
 8005266:	e30f      	b.n	8005888 <USB_EPStartXfer+0x11d8>
 8005268:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800526c:	095b      	lsrs	r3, r3, #5
 800526e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005272:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005276:	f003 031f 	and.w	r3, r3, #31
 800527a:	2b00      	cmp	r3, #0
 800527c:	d104      	bne.n	8005288 <USB_EPStartXfer+0xbd8>
 800527e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005282:	3b01      	subs	r3, #1
 8005284:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005288:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800528c:	b29b      	uxth	r3, r3
 800528e:	029b      	lsls	r3, r3, #10
 8005290:	b29b      	uxth	r3, r3
 8005292:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005296:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800529a:	b29a      	uxth	r2, r3
 800529c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80052a0:	801a      	strh	r2, [r3, #0]
 80052a2:	e2f1      	b.n	8005888 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80052a4:	463b      	mov	r3, r7
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	78db      	ldrb	r3, [r3, #3]
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	f040 818f 	bne.w	80055ce <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80052b0:	463b      	mov	r3, r7
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	785b      	ldrb	r3, [r3, #1]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d175      	bne.n	80053a6 <USB_EPStartXfer+0xcf6>
 80052ba:	1d3b      	adds	r3, r7, #4
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052c2:	1d3b      	adds	r3, r7, #4
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	461a      	mov	r2, r3
 80052ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80052d2:	4413      	add	r3, r2
 80052d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052d8:	463b      	mov	r3, r7
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	011a      	lsls	r2, r3, #4
 80052e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80052e4:	4413      	add	r3, r2
 80052e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80052ee:	463b      	mov	r3, r7
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d116      	bne.n	8005326 <USB_EPStartXfer+0xc76>
 80052f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80052fc:	881b      	ldrh	r3, [r3, #0]
 80052fe:	b29b      	uxth	r3, r3
 8005300:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005304:	b29a      	uxth	r2, r3
 8005306:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800530a:	801a      	strh	r2, [r3, #0]
 800530c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005310:	881b      	ldrh	r3, [r3, #0]
 8005312:	b29b      	uxth	r3, r3
 8005314:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005318:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800531c:	b29a      	uxth	r2, r3
 800531e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005322:	801a      	strh	r2, [r3, #0]
 8005324:	e065      	b.n	80053f2 <USB_EPStartXfer+0xd42>
 8005326:	463b      	mov	r3, r7
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	2b3e      	cmp	r3, #62	; 0x3e
 800532e:	d81a      	bhi.n	8005366 <USB_EPStartXfer+0xcb6>
 8005330:	463b      	mov	r3, r7
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	085b      	lsrs	r3, r3, #1
 8005338:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800533c:	463b      	mov	r3, r7
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	f003 0301 	and.w	r3, r3, #1
 8005346:	2b00      	cmp	r3, #0
 8005348:	d004      	beq.n	8005354 <USB_EPStartXfer+0xca4>
 800534a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800534e:	3301      	adds	r3, #1
 8005350:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005354:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005358:	b29b      	uxth	r3, r3
 800535a:	029b      	lsls	r3, r3, #10
 800535c:	b29a      	uxth	r2, r3
 800535e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005362:	801a      	strh	r2, [r3, #0]
 8005364:	e045      	b.n	80053f2 <USB_EPStartXfer+0xd42>
 8005366:	463b      	mov	r3, r7
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	095b      	lsrs	r3, r3, #5
 800536e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005372:	463b      	mov	r3, r7
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	f003 031f 	and.w	r3, r3, #31
 800537c:	2b00      	cmp	r3, #0
 800537e:	d104      	bne.n	800538a <USB_EPStartXfer+0xcda>
 8005380:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005384:	3b01      	subs	r3, #1
 8005386:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800538a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800538e:	b29b      	uxth	r3, r3
 8005390:	029b      	lsls	r3, r3, #10
 8005392:	b29b      	uxth	r3, r3
 8005394:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005398:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800539c:	b29a      	uxth	r2, r3
 800539e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80053a2:	801a      	strh	r2, [r3, #0]
 80053a4:	e025      	b.n	80053f2 <USB_EPStartXfer+0xd42>
 80053a6:	463b      	mov	r3, r7
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	785b      	ldrb	r3, [r3, #1]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d120      	bne.n	80053f2 <USB_EPStartXfer+0xd42>
 80053b0:	1d3b      	adds	r3, r7, #4
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80053b8:	1d3b      	adds	r3, r7, #4
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	461a      	mov	r2, r3
 80053c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80053c8:	4413      	add	r3, r2
 80053ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80053ce:	463b      	mov	r3, r7
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	011a      	lsls	r2, r3, #4
 80053d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80053da:	4413      	add	r3, r2
 80053dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80053e4:	463b      	mov	r3, r7
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80053f0:	801a      	strh	r2, [r3, #0]
 80053f2:	1d3b      	adds	r3, r7, #4
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80053fa:	463b      	mov	r3, r7
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	785b      	ldrb	r3, [r3, #1]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d175      	bne.n	80054f0 <USB_EPStartXfer+0xe40>
 8005404:	1d3b      	adds	r3, r7, #4
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800540c:	1d3b      	adds	r3, r7, #4
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005414:	b29b      	uxth	r3, r3
 8005416:	461a      	mov	r2, r3
 8005418:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800541c:	4413      	add	r3, r2
 800541e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005422:	463b      	mov	r3, r7
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	011a      	lsls	r2, r3, #4
 800542a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800542e:	4413      	add	r3, r2
 8005430:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005434:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005438:	463b      	mov	r3, r7
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d116      	bne.n	8005470 <USB_EPStartXfer+0xdc0>
 8005442:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005446:	881b      	ldrh	r3, [r3, #0]
 8005448:	b29b      	uxth	r3, r3
 800544a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800544e:	b29a      	uxth	r2, r3
 8005450:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005454:	801a      	strh	r2, [r3, #0]
 8005456:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800545a:	881b      	ldrh	r3, [r3, #0]
 800545c:	b29b      	uxth	r3, r3
 800545e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005462:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005466:	b29a      	uxth	r2, r3
 8005468:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800546c:	801a      	strh	r2, [r3, #0]
 800546e:	e061      	b.n	8005534 <USB_EPStartXfer+0xe84>
 8005470:	463b      	mov	r3, r7
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	2b3e      	cmp	r3, #62	; 0x3e
 8005478:	d81a      	bhi.n	80054b0 <USB_EPStartXfer+0xe00>
 800547a:	463b      	mov	r3, r7
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	085b      	lsrs	r3, r3, #1
 8005482:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005486:	463b      	mov	r3, r7
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	f003 0301 	and.w	r3, r3, #1
 8005490:	2b00      	cmp	r3, #0
 8005492:	d004      	beq.n	800549e <USB_EPStartXfer+0xdee>
 8005494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005498:	3301      	adds	r3, #1
 800549a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800549e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	029b      	lsls	r3, r3, #10
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80054ac:	801a      	strh	r2, [r3, #0]
 80054ae:	e041      	b.n	8005534 <USB_EPStartXfer+0xe84>
 80054b0:	463b      	mov	r3, r7
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	095b      	lsrs	r3, r3, #5
 80054b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80054bc:	463b      	mov	r3, r7
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	f003 031f 	and.w	r3, r3, #31
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d104      	bne.n	80054d4 <USB_EPStartXfer+0xe24>
 80054ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054ce:	3b01      	subs	r3, #1
 80054d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80054d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054d8:	b29b      	uxth	r3, r3
 80054da:	029b      	lsls	r3, r3, #10
 80054dc:	b29b      	uxth	r3, r3
 80054de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80054ec:	801a      	strh	r2, [r3, #0]
 80054ee:	e021      	b.n	8005534 <USB_EPStartXfer+0xe84>
 80054f0:	463b      	mov	r3, r7
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	785b      	ldrb	r3, [r3, #1]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d11c      	bne.n	8005534 <USB_EPStartXfer+0xe84>
 80054fa:	1d3b      	adds	r3, r7, #4
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005502:	b29b      	uxth	r3, r3
 8005504:	461a      	mov	r2, r3
 8005506:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800550a:	4413      	add	r3, r2
 800550c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005510:	463b      	mov	r3, r7
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	011a      	lsls	r2, r3, #4
 8005518:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800551c:	4413      	add	r3, r2
 800551e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005522:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005526:	463b      	mov	r3, r7
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	b29a      	uxth	r2, r3
 800552e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005532:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005534:	463b      	mov	r3, r7
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	69db      	ldr	r3, [r3, #28]
 800553a:	2b00      	cmp	r3, #0
 800553c:	f000 81a4 	beq.w	8005888 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005540:	1d3b      	adds	r3, r7, #4
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	463b      	mov	r3, r7
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	4413      	add	r3, r2
 800554e:	881b      	ldrh	r3, [r3, #0]
 8005550:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005554:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005558:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d005      	beq.n	800556c <USB_EPStartXfer+0xebc>
 8005560:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005568:	2b00      	cmp	r3, #0
 800556a:	d10d      	bne.n	8005588 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800556c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005570:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005574:	2b00      	cmp	r3, #0
 8005576:	f040 8187 	bne.w	8005888 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800557a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800557e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005582:	2b00      	cmp	r3, #0
 8005584:	f040 8180 	bne.w	8005888 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005588:	1d3b      	adds	r3, r7, #4
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	463b      	mov	r3, r7
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4413      	add	r3, r2
 8005596:	881b      	ldrh	r3, [r3, #0]
 8005598:	b29b      	uxth	r3, r3
 800559a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800559e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a2:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80055a6:	1d3b      	adds	r3, r7, #4
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	463b      	mov	r3, r7
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	441a      	add	r2, r3
 80055b4:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80055b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	8013      	strh	r3, [r2, #0]
 80055cc:	e15c      	b.n	8005888 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80055ce:	463b      	mov	r3, r7
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	78db      	ldrb	r3, [r3, #3]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	f040 8155 	bne.w	8005884 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80055da:	463b      	mov	r3, r7
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	699a      	ldr	r2, [r3, #24]
 80055e0:	463b      	mov	r3, r7
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d90e      	bls.n	8005608 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 80055ea:	463b      	mov	r3, r7
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 80055f4:	463b      	mov	r3, r7
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	699a      	ldr	r2, [r3, #24]
 80055fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055fe:	1ad2      	subs	r2, r2, r3
 8005600:	463b      	mov	r3, r7
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	619a      	str	r2, [r3, #24]
 8005606:	e008      	b.n	800561a <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8005608:	463b      	mov	r3, r7
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8005612:	463b      	mov	r3, r7
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2200      	movs	r2, #0
 8005618:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800561a:	463b      	mov	r3, r7
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	785b      	ldrb	r3, [r3, #1]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d16f      	bne.n	8005704 <USB_EPStartXfer+0x1054>
 8005624:	1d3b      	adds	r3, r7, #4
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800562c:	1d3b      	adds	r3, r7, #4
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005634:	b29b      	uxth	r3, r3
 8005636:	461a      	mov	r2, r3
 8005638:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800563c:	4413      	add	r3, r2
 800563e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005642:	463b      	mov	r3, r7
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	011a      	lsls	r2, r3, #4
 800564a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800564e:	4413      	add	r3, r2
 8005650:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005654:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005658:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800565c:	2b00      	cmp	r3, #0
 800565e:	d116      	bne.n	800568e <USB_EPStartXfer+0xfde>
 8005660:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005664:	881b      	ldrh	r3, [r3, #0]
 8005666:	b29b      	uxth	r3, r3
 8005668:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800566c:	b29a      	uxth	r2, r3
 800566e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005672:	801a      	strh	r2, [r3, #0]
 8005674:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005678:	881b      	ldrh	r3, [r3, #0]
 800567a:	b29b      	uxth	r3, r3
 800567c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005680:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005684:	b29a      	uxth	r2, r3
 8005686:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800568a:	801a      	strh	r2, [r3, #0]
 800568c:	e05f      	b.n	800574e <USB_EPStartXfer+0x109e>
 800568e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005692:	2b3e      	cmp	r3, #62	; 0x3e
 8005694:	d818      	bhi.n	80056c8 <USB_EPStartXfer+0x1018>
 8005696:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800569a:	085b      	lsrs	r3, r3, #1
 800569c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80056a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056a4:	f003 0301 	and.w	r3, r3, #1
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d004      	beq.n	80056b6 <USB_EPStartXfer+0x1006>
 80056ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056b0:	3301      	adds	r3, #1
 80056b2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80056b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	029b      	lsls	r3, r3, #10
 80056be:	b29a      	uxth	r2, r3
 80056c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80056c4:	801a      	strh	r2, [r3, #0]
 80056c6:	e042      	b.n	800574e <USB_EPStartXfer+0x109e>
 80056c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056cc:	095b      	lsrs	r3, r3, #5
 80056ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80056d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056d6:	f003 031f 	and.w	r3, r3, #31
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d104      	bne.n	80056e8 <USB_EPStartXfer+0x1038>
 80056de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056e2:	3b01      	subs	r3, #1
 80056e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80056e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	029b      	lsls	r3, r3, #10
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005700:	801a      	strh	r2, [r3, #0]
 8005702:	e024      	b.n	800574e <USB_EPStartXfer+0x109e>
 8005704:	463b      	mov	r3, r7
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	785b      	ldrb	r3, [r3, #1]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d11f      	bne.n	800574e <USB_EPStartXfer+0x109e>
 800570e:	1d3b      	adds	r3, r7, #4
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005716:	1d3b      	adds	r3, r7, #4
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800571e:	b29b      	uxth	r3, r3
 8005720:	461a      	mov	r2, r3
 8005722:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005726:	4413      	add	r3, r2
 8005728:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800572c:	463b      	mov	r3, r7
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	011a      	lsls	r2, r3, #4
 8005734:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005738:	4413      	add	r3, r2
 800573a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800573e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005742:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005746:	b29a      	uxth	r2, r3
 8005748:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800574c:	801a      	strh	r2, [r3, #0]
 800574e:	1d3b      	adds	r3, r7, #4
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005756:	463b      	mov	r3, r7
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	785b      	ldrb	r3, [r3, #1]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d16f      	bne.n	8005840 <USB_EPStartXfer+0x1190>
 8005760:	1d3b      	adds	r3, r7, #4
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005768:	1d3b      	adds	r3, r7, #4
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005770:	b29b      	uxth	r3, r3
 8005772:	461a      	mov	r2, r3
 8005774:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005778:	4413      	add	r3, r2
 800577a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800577e:	463b      	mov	r3, r7
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	011a      	lsls	r2, r3, #4
 8005786:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800578a:	4413      	add	r3, r2
 800578c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005790:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005794:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005798:	2b00      	cmp	r3, #0
 800579a:	d116      	bne.n	80057ca <USB_EPStartXfer+0x111a>
 800579c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80057a0:	881b      	ldrh	r3, [r3, #0]
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057a8:	b29a      	uxth	r2, r3
 80057aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80057ae:	801a      	strh	r2, [r3, #0]
 80057b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80057b4:	881b      	ldrh	r3, [r3, #0]
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80057c6:	801a      	strh	r2, [r3, #0]
 80057c8:	e05e      	b.n	8005888 <USB_EPStartXfer+0x11d8>
 80057ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057ce:	2b3e      	cmp	r3, #62	; 0x3e
 80057d0:	d818      	bhi.n	8005804 <USB_EPStartXfer+0x1154>
 80057d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057d6:	085b      	lsrs	r3, r3, #1
 80057d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80057dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057e0:	f003 0301 	and.w	r3, r3, #1
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d004      	beq.n	80057f2 <USB_EPStartXfer+0x1142>
 80057e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057ec:	3301      	adds	r3, #1
 80057ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80057f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	029b      	lsls	r3, r3, #10
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005800:	801a      	strh	r2, [r3, #0]
 8005802:	e041      	b.n	8005888 <USB_EPStartXfer+0x11d8>
 8005804:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005808:	095b      	lsrs	r3, r3, #5
 800580a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800580e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005812:	f003 031f 	and.w	r3, r3, #31
 8005816:	2b00      	cmp	r3, #0
 8005818:	d104      	bne.n	8005824 <USB_EPStartXfer+0x1174>
 800581a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800581e:	3b01      	subs	r3, #1
 8005820:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005824:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005828:	b29b      	uxth	r3, r3
 800582a:	029b      	lsls	r3, r3, #10
 800582c:	b29b      	uxth	r3, r3
 800582e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005832:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005836:	b29a      	uxth	r2, r3
 8005838:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800583c:	801a      	strh	r2, [r3, #0]
 800583e:	e023      	b.n	8005888 <USB_EPStartXfer+0x11d8>
 8005840:	463b      	mov	r3, r7
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	785b      	ldrb	r3, [r3, #1]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d11e      	bne.n	8005888 <USB_EPStartXfer+0x11d8>
 800584a:	1d3b      	adds	r3, r7, #4
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005852:	b29b      	uxth	r3, r3
 8005854:	461a      	mov	r2, r3
 8005856:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800585a:	4413      	add	r3, r2
 800585c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005860:	463b      	mov	r3, r7
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	011a      	lsls	r2, r3, #4
 8005868:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800586c:	4413      	add	r3, r2
 800586e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005872:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005876:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800587a:	b29a      	uxth	r2, r3
 800587c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005880:	801a      	strh	r2, [r3, #0]
 8005882:	e001      	b.n	8005888 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e02e      	b.n	80058e6 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005888:	1d3b      	adds	r3, r7, #4
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	463b      	mov	r3, r7
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	4413      	add	r3, r2
 8005896:	881b      	ldrh	r3, [r3, #0]
 8005898:	b29b      	uxth	r3, r3
 800589a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800589e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058a2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80058a6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80058aa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80058ae:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80058b2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80058b6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80058ba:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80058be:	1d3b      	adds	r3, r7, #4
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	463b      	mov	r3, r7
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	441a      	add	r2, r3
 80058cc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80058d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b085      	sub	sp, #20
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	785b      	ldrb	r3, [r3, #1]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d020      	beq.n	8005944 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	4413      	add	r3, r2
 800590c:	881b      	ldrh	r3, [r3, #0]
 800590e:	b29b      	uxth	r3, r3
 8005910:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005914:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005918:	81bb      	strh	r3, [r7, #12]
 800591a:	89bb      	ldrh	r3, [r7, #12]
 800591c:	f083 0310 	eor.w	r3, r3, #16
 8005920:	81bb      	strh	r3, [r7, #12]
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	441a      	add	r2, r3
 800592c:	89bb      	ldrh	r3, [r7, #12]
 800592e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005932:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005936:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800593a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800593e:	b29b      	uxth	r3, r3
 8005940:	8013      	strh	r3, [r2, #0]
 8005942:	e01f      	b.n	8005984 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	4413      	add	r3, r2
 800594e:	881b      	ldrh	r3, [r3, #0]
 8005950:	b29b      	uxth	r3, r3
 8005952:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800595a:	81fb      	strh	r3, [r7, #14]
 800595c:	89fb      	ldrh	r3, [r7, #14]
 800595e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005962:	81fb      	strh	r3, [r7, #14]
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	441a      	add	r2, r3
 800596e:	89fb      	ldrh	r3, [r7, #14]
 8005970:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005974:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005978:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800597c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005980:	b29b      	uxth	r3, r3
 8005982:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3714      	adds	r7, #20
 800598a:	46bd      	mov	sp, r7
 800598c:	bc80      	pop	{r7}
 800598e:	4770      	bx	lr

08005990 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005990:	b480      	push	{r7}
 8005992:	b087      	sub	sp, #28
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	7b1b      	ldrb	r3, [r3, #12]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	f040 809d 	bne.w	8005ade <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	785b      	ldrb	r3, [r3, #1]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d04c      	beq.n	8005a46 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	4413      	add	r3, r2
 80059b6:	881b      	ldrh	r3, [r3, #0]
 80059b8:	823b      	strh	r3, [r7, #16]
 80059ba:	8a3b      	ldrh	r3, [r7, #16]
 80059bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d01b      	beq.n	80059fc <USB_EPClearStall+0x6c>
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	4413      	add	r3, r2
 80059ce:	881b      	ldrh	r3, [r3, #0]
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059da:	81fb      	strh	r3, [r7, #14]
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	441a      	add	r2, r3
 80059e6:	89fb      	ldrh	r3, [r7, #14]
 80059e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	78db      	ldrb	r3, [r3, #3]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d06c      	beq.n	8005ade <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	4413      	add	r3, r2
 8005a0e:	881b      	ldrh	r3, [r3, #0]
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a1a:	81bb      	strh	r3, [r7, #12]
 8005a1c:	89bb      	ldrh	r3, [r7, #12]
 8005a1e:	f083 0320 	eor.w	r3, r3, #32
 8005a22:	81bb      	strh	r3, [r7, #12]
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	441a      	add	r2, r3
 8005a2e:	89bb      	ldrh	r3, [r7, #12]
 8005a30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	8013      	strh	r3, [r2, #0]
 8005a44:	e04b      	b.n	8005ade <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	4413      	add	r3, r2
 8005a50:	881b      	ldrh	r3, [r3, #0]
 8005a52:	82fb      	strh	r3, [r7, #22]
 8005a54:	8afb      	ldrh	r3, [r7, #22]
 8005a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d01b      	beq.n	8005a96 <USB_EPClearStall+0x106>
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	4413      	add	r3, r2
 8005a68:	881b      	ldrh	r3, [r3, #0]
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a74:	82bb      	strh	r3, [r7, #20]
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	441a      	add	r2, r3
 8005a80:	8abb      	ldrh	r3, [r7, #20]
 8005a82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	4413      	add	r3, r2
 8005aa0:	881b      	ldrh	r3, [r3, #0]
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aac:	827b      	strh	r3, [r7, #18]
 8005aae:	8a7b      	ldrh	r3, [r7, #18]
 8005ab0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005ab4:	827b      	strh	r3, [r7, #18]
 8005ab6:	8a7b      	ldrh	r3, [r7, #18]
 8005ab8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005abc:	827b      	strh	r3, [r7, #18]
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	441a      	add	r2, r3
 8005ac8:	8a7b      	ldrh	r3, [r7, #18]
 8005aca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	371c      	adds	r7, #28
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bc80      	pop	{r7}
 8005ae8:	4770      	bx	lr

08005aea <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005aea:	b480      	push	{r7}
 8005aec:	b083      	sub	sp, #12
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
 8005af2:	460b      	mov	r3, r1
 8005af4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005af6:	78fb      	ldrb	r3, [r7, #3]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d103      	bne.n	8005b04 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2280      	movs	r2, #128	; 0x80
 8005b00:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	370c      	adds	r7, #12
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bc80      	pop	{r7}
 8005b0e:	4770      	bx	lr

08005b10 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	370c      	adds	r7, #12
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bc80      	pop	{r7}
 8005b22:	4770      	bx	lr

08005b24 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	370c      	adds	r7, #12
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bc80      	pop	{r7}
 8005b36:	4770      	bx	lr

08005b38 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b085      	sub	sp, #20
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3714      	adds	r7, #20
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bc80      	pop	{r7}
 8005b54:	4770      	bx	lr

08005b56 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005b56:	b480      	push	{r7}
 8005b58:	b083      	sub	sp, #12
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
 8005b5e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	370c      	adds	r7, #12
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bc80      	pop	{r7}
 8005b6a:	4770      	bx	lr

08005b6c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b08d      	sub	sp, #52	; 0x34
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	4611      	mov	r1, r2
 8005b78:	461a      	mov	r2, r3
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	80fb      	strh	r3, [r7, #6]
 8005b7e:	4613      	mov	r3, r2
 8005b80:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005b82:	88bb      	ldrh	r3, [r7, #4]
 8005b84:	3301      	adds	r3, #1
 8005b86:	085b      	lsrs	r3, r3, #1
 8005b88:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005b92:	88fb      	ldrh	r3, [r7, #6]
 8005b94:	005a      	lsls	r2, r3, #1
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	4413      	add	r3, r2
 8005b9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b9e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005ba0:	6a3b      	ldr	r3, [r7, #32]
 8005ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ba4:	e01e      	b.n	8005be4 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bae:	3301      	adds	r3, #1
 8005bb0:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	021b      	lsls	r3, r3, #8
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bca:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bce:	3302      	adds	r3, #2
 8005bd0:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd4:	3302      	adds	r3, #2
 8005bd6:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bda:	3301      	adds	r3, #1
 8005bdc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be0:	3b01      	subs	r3, #1
 8005be2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1dd      	bne.n	8005ba6 <USB_WritePMA+0x3a>
  }
}
 8005bea:	bf00      	nop
 8005bec:	bf00      	nop
 8005bee:	3734      	adds	r7, #52	; 0x34
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bc80      	pop	{r7}
 8005bf4:	4770      	bx	lr

08005bf6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	b08b      	sub	sp, #44	; 0x2c
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	60f8      	str	r0, [r7, #12]
 8005bfe:	60b9      	str	r1, [r7, #8]
 8005c00:	4611      	mov	r1, r2
 8005c02:	461a      	mov	r2, r3
 8005c04:	460b      	mov	r3, r1
 8005c06:	80fb      	strh	r3, [r7, #6]
 8005c08:	4613      	mov	r3, r2
 8005c0a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005c0c:	88bb      	ldrh	r3, [r7, #4]
 8005c0e:	085b      	lsrs	r3, r3, #1
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005c1c:	88fb      	ldrh	r3, [r7, #6]
 8005c1e:	005a      	lsls	r2, r3, #1
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	4413      	add	r3, r2
 8005c24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c28:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c2e:	e01b      	b.n	8005c68 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005c30:	6a3b      	ldr	r3, [r7, #32]
 8005c32:	881b      	ldrh	r3, [r3, #0]
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005c38:	6a3b      	ldr	r3, [r7, #32]
 8005c3a:	3302      	adds	r3, #2
 8005c3c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	3301      	adds	r3, #1
 8005c4a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	0a1b      	lsrs	r3, r3, #8
 8005c50:	b2da      	uxtb	r2, r3
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005c5c:	6a3b      	ldr	r3, [r7, #32]
 8005c5e:	3302      	adds	r3, #2
 8005c60:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8005c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c64:	3b01      	subs	r3, #1
 8005c66:	627b      	str	r3, [r7, #36]	; 0x24
 8005c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1e0      	bne.n	8005c30 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005c6e:	88bb      	ldrh	r3, [r7, #4]
 8005c70:	f003 0301 	and.w	r3, r3, #1
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d007      	beq.n	8005c8a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8005c7a:	6a3b      	ldr	r3, [r7, #32]
 8005c7c:	881b      	ldrh	r3, [r3, #0]
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	b2da      	uxtb	r2, r3
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	701a      	strb	r2, [r3, #0]
  }
}
 8005c8a:	bf00      	nop
 8005c8c:	372c      	adds	r7, #44	; 0x2c
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bc80      	pop	{r7}
 8005c92:	4770      	bx	lr

08005c94 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	7c1b      	ldrb	r3, [r3, #16]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d115      	bne.n	8005cd8 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005cac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cb0:	2202      	movs	r2, #2
 8005cb2:	2181      	movs	r1, #129	; 0x81
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f001 ff2a 	bl	8007b0e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005cc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cc4:	2202      	movs	r2, #2
 8005cc6:	2101      	movs	r1, #1
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f001 ff20 	bl	8007b0e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8005cd6:	e012      	b.n	8005cfe <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005cd8:	2340      	movs	r3, #64	; 0x40
 8005cda:	2202      	movs	r2, #2
 8005cdc:	2181      	movs	r1, #129	; 0x81
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f001 ff15 	bl	8007b0e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005cea:	2340      	movs	r3, #64	; 0x40
 8005cec:	2202      	movs	r2, #2
 8005cee:	2101      	movs	r1, #1
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f001 ff0c 	bl	8007b0e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005cfe:	2308      	movs	r3, #8
 8005d00:	2203      	movs	r2, #3
 8005d02:	2182      	movs	r1, #130	; 0x82
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f001 ff02 	bl	8007b0e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005d10:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005d14:	f002 f822 	bl	8007d5c <USBD_static_malloc>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d102      	bne.n	8005d30 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	73fb      	strb	r3, [r7, #15]
 8005d2e:	e026      	b.n	8005d7e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d36:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	7c1b      	ldrb	r3, [r3, #16]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d109      	bne.n	8005d6e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d64:	2101      	movs	r1, #1
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f001 ffc2 	bl	8007cf0 <USBD_LL_PrepareReceive>
 8005d6c:	e007      	b.n	8005d7e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d74:	2340      	movs	r3, #64	; 0x40
 8005d76:	2101      	movs	r1, #1
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f001 ffb9 	bl	8007cf0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3710      	adds	r7, #16
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	460b      	mov	r3, r1
 8005d92:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005d94:	2300      	movs	r3, #0
 8005d96:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005d98:	2181      	movs	r1, #129	; 0x81
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f001 fedd 	bl	8007b5a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005da6:	2101      	movs	r1, #1
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f001 fed6 	bl	8007b5a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005db6:	2182      	movs	r1, #130	; 0x82
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f001 fece 	bl	8007b5a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00e      	beq.n	8005dec <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dde:	4618      	mov	r0, r3
 8005de0:	f001 ffc8 	bl	8007d74 <USBD_static_free>
    pdev->pClassData = NULL;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}

08005df6 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005df6:	b580      	push	{r7, lr}
 8005df8:	b086      	sub	sp, #24
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
 8005dfe:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e06:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005e10:	2300      	movs	r3, #0
 8005e12:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d039      	beq.n	8005e94 <USBD_CDC_Setup+0x9e>
 8005e20:	2b20      	cmp	r3, #32
 8005e22:	d17f      	bne.n	8005f24 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	88db      	ldrh	r3, [r3, #6]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d029      	beq.n	8005e80 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	b25b      	sxtb	r3, r3
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	da11      	bge.n	8005e5a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	683a      	ldr	r2, [r7, #0]
 8005e40:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005e42:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005e44:	683a      	ldr	r2, [r7, #0]
 8005e46:	88d2      	ldrh	r2, [r2, #6]
 8005e48:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005e4a:	6939      	ldr	r1, [r7, #16]
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	88db      	ldrh	r3, [r3, #6]
 8005e50:	461a      	mov	r2, r3
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f001 fa23 	bl	800729e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005e58:	e06b      	b.n	8005f32 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	785a      	ldrb	r2, [r3, #1]
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	88db      	ldrh	r3, [r3, #6]
 8005e68:	b2da      	uxtb	r2, r3
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005e70:	6939      	ldr	r1, [r7, #16]
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	88db      	ldrh	r3, [r3, #6]
 8005e76:	461a      	mov	r2, r3
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f001 fa3e 	bl	80072fa <USBD_CtlPrepareRx>
      break;
 8005e7e:	e058      	b.n	8005f32 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	683a      	ldr	r2, [r7, #0]
 8005e8a:	7850      	ldrb	r0, [r2, #1]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	6839      	ldr	r1, [r7, #0]
 8005e90:	4798      	blx	r3
      break;
 8005e92:	e04e      	b.n	8005f32 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	785b      	ldrb	r3, [r3, #1]
 8005e98:	2b0b      	cmp	r3, #11
 8005e9a:	d02e      	beq.n	8005efa <USBD_CDC_Setup+0x104>
 8005e9c:	2b0b      	cmp	r3, #11
 8005e9e:	dc38      	bgt.n	8005f12 <USBD_CDC_Setup+0x11c>
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d002      	beq.n	8005eaa <USBD_CDC_Setup+0xb4>
 8005ea4:	2b0a      	cmp	r3, #10
 8005ea6:	d014      	beq.n	8005ed2 <USBD_CDC_Setup+0xdc>
 8005ea8:	e033      	b.n	8005f12 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005eb0:	2b03      	cmp	r3, #3
 8005eb2:	d107      	bne.n	8005ec4 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005eb4:	f107 030c 	add.w	r3, r7, #12
 8005eb8:	2202      	movs	r2, #2
 8005eba:	4619      	mov	r1, r3
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f001 f9ee 	bl	800729e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ec2:	e02e      	b.n	8005f22 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8005ec4:	6839      	ldr	r1, [r7, #0]
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f001 f97f 	bl	80071ca <USBD_CtlError>
            ret = USBD_FAIL;
 8005ecc:	2302      	movs	r3, #2
 8005ece:	75fb      	strb	r3, [r7, #23]
          break;
 8005ed0:	e027      	b.n	8005f22 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ed8:	2b03      	cmp	r3, #3
 8005eda:	d107      	bne.n	8005eec <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005edc:	f107 030f 	add.w	r3, r7, #15
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f001 f9da 	bl	800729e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005eea:	e01a      	b.n	8005f22 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8005eec:	6839      	ldr	r1, [r7, #0]
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f001 f96b 	bl	80071ca <USBD_CtlError>
            ret = USBD_FAIL;
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	75fb      	strb	r3, [r7, #23]
          break;
 8005ef8:	e013      	b.n	8005f22 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f00:	2b03      	cmp	r3, #3
 8005f02:	d00d      	beq.n	8005f20 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8005f04:	6839      	ldr	r1, [r7, #0]
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f001 f95f 	bl	80071ca <USBD_CtlError>
            ret = USBD_FAIL;
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005f10:	e006      	b.n	8005f20 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8005f12:	6839      	ldr	r1, [r7, #0]
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f001 f958 	bl	80071ca <USBD_CtlError>
          ret = USBD_FAIL;
 8005f1a:	2302      	movs	r3, #2
 8005f1c:	75fb      	strb	r3, [r7, #23]
          break;
 8005f1e:	e000      	b.n	8005f22 <USBD_CDC_Setup+0x12c>
          break;
 8005f20:	bf00      	nop
      }
      break;
 8005f22:	e006      	b.n	8005f32 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005f24:	6839      	ldr	r1, [r7, #0]
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f001 f94f 	bl	80071ca <USBD_CtlError>
      ret = USBD_FAIL;
 8005f2c:	2302      	movs	r3, #2
 8005f2e:	75fb      	strb	r3, [r7, #23]
      break;
 8005f30:	bf00      	nop
  }

  return ret;
 8005f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3718      	adds	r7, #24
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	460b      	mov	r3, r1
 8005f46:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f4e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f56:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d03a      	beq.n	8005fd8 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005f62:	78fa      	ldrb	r2, [r7, #3]
 8005f64:	6879      	ldr	r1, [r7, #4]
 8005f66:	4613      	mov	r3, r2
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	4413      	add	r3, r2
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	440b      	add	r3, r1
 8005f70:	331c      	adds	r3, #28
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d029      	beq.n	8005fcc <USBD_CDC_DataIn+0x90>
 8005f78:	78fa      	ldrb	r2, [r7, #3]
 8005f7a:	6879      	ldr	r1, [r7, #4]
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	4413      	add	r3, r2
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	440b      	add	r3, r1
 8005f86:	331c      	adds	r3, #28
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	78f9      	ldrb	r1, [r7, #3]
 8005f8c:	68b8      	ldr	r0, [r7, #8]
 8005f8e:	460b      	mov	r3, r1
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	440b      	add	r3, r1
 8005f94:	00db      	lsls	r3, r3, #3
 8005f96:	4403      	add	r3, r0
 8005f98:	3338      	adds	r3, #56	; 0x38
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005fa0:	fb03 f301 	mul.w	r3, r3, r1
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d110      	bne.n	8005fcc <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005faa:	78fa      	ldrb	r2, [r7, #3]
 8005fac:	6879      	ldr	r1, [r7, #4]
 8005fae:	4613      	mov	r3, r2
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	4413      	add	r3, r2
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	440b      	add	r3, r1
 8005fb8:	331c      	adds	r3, #28
 8005fba:	2200      	movs	r2, #0
 8005fbc:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005fbe:	78f9      	ldrb	r1, [r7, #3]
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f001 fe70 	bl	8007caa <USBD_LL_Transmit>
 8005fca:	e003      	b.n	8005fd4 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	e000      	b.n	8005fda <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005fd8:	2302      	movs	r3, #2
  }
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b084      	sub	sp, #16
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
 8005fea:	460b      	mov	r3, r1
 8005fec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ff4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005ff6:	78fb      	ldrb	r3, [r7, #3]
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f001 fe9b 	bl	8007d36 <USBD_LL_GetRxDataSize>
 8006000:	4602      	mov	r2, r0
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00d      	beq.n	800602e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006020:	68fa      	ldr	r2, [r7, #12]
 8006022:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006026:	4611      	mov	r1, r2
 8006028:	4798      	blx	r3

    return USBD_OK;
 800602a:	2300      	movs	r3, #0
 800602c:	e000      	b.n	8006030 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800602e:	2302      	movs	r3, #2
  }
}
 8006030:	4618      	mov	r0, r3
 8006032:	3710      	adds	r7, #16
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006046:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800604e:	2b00      	cmp	r3, #0
 8006050:	d015      	beq.n	800607e <USBD_CDC_EP0_RxReady+0x46>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006058:	2bff      	cmp	r3, #255	; 0xff
 800605a:	d010      	beq.n	800607e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800606a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006072:	b292      	uxth	r2, r2
 8006074:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	22ff      	movs	r2, #255	; 0xff
 800607a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2243      	movs	r2, #67	; 0x43
 8006094:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006096:	4b03      	ldr	r3, [pc, #12]	; (80060a4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006098:	4618      	mov	r0, r3
 800609a:	370c      	adds	r7, #12
 800609c:	46bd      	mov	sp, r7
 800609e:	bc80      	pop	{r7}
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop
 80060a4:	20000098 	.word	0x20000098

080060a8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2243      	movs	r2, #67	; 0x43
 80060b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80060b6:	4b03      	ldr	r3, [pc, #12]	; (80060c4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	bc80      	pop	{r7}
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	20000054 	.word	0x20000054

080060c8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2243      	movs	r2, #67	; 0x43
 80060d4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80060d6:	4b03      	ldr	r3, [pc, #12]	; (80060e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80060d8:	4618      	mov	r0, r3
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	bc80      	pop	{r7}
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	200000dc 	.word	0x200000dc

080060e8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	220a      	movs	r2, #10
 80060f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80060f6:	4b03      	ldr	r3, [pc, #12]	; (8006104 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bc80      	pop	{r7}
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	20000010 	.word	0x20000010

08006108 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006108:	b480      	push	{r7}
 800610a:	b085      	sub	sp, #20
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006112:	2302      	movs	r3, #2
 8006114:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d005      	beq.n	8006128 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	683a      	ldr	r2, [r7, #0]
 8006120:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006124:	2300      	movs	r3, #0
 8006126:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006128:	7bfb      	ldrb	r3, [r7, #15]
}
 800612a:	4618      	mov	r0, r3
 800612c:	3714      	adds	r7, #20
 800612e:	46bd      	mov	sp, r7
 8006130:	bc80      	pop	{r7}
 8006132:	4770      	bx	lr

08006134 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006134:	b480      	push	{r7}
 8006136:	b087      	sub	sp, #28
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	4613      	mov	r3, r2
 8006140:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006148:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006152:	88fa      	ldrh	r2, [r7, #6]
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800615a:	2300      	movs	r3, #0
}
 800615c:	4618      	mov	r0, r3
 800615e:	371c      	adds	r7, #28
 8006160:	46bd      	mov	sp, r7
 8006162:	bc80      	pop	{r7}
 8006164:	4770      	bx	lr

08006166 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006166:	b480      	push	{r7}
 8006168:	b085      	sub	sp, #20
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
 800616e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006176:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	683a      	ldr	r2, [r7, #0]
 800617c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3714      	adds	r7, #20
 8006186:	46bd      	mov	sp, r7
 8006188:	bc80      	pop	{r7}
 800618a:	4770      	bx	lr

0800618c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800619a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d01c      	beq.n	80061e0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d115      	bne.n	80061dc <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	2181      	movs	r1, #129	; 0x81
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f001 fd69 	bl	8007caa <USBD_LL_Transmit>

      return USBD_OK;
 80061d8:	2300      	movs	r3, #0
 80061da:	e002      	b.n	80061e2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80061dc:	2301      	movs	r3, #1
 80061de:	e000      	b.n	80061e2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80061e0:	2302      	movs	r3, #2
  }
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b084      	sub	sp, #16
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061f8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006200:	2b00      	cmp	r3, #0
 8006202:	d017      	beq.n	8006234 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	7c1b      	ldrb	r3, [r3, #16]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d109      	bne.n	8006220 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006212:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006216:	2101      	movs	r1, #1
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f001 fd69 	bl	8007cf0 <USBD_LL_PrepareReceive>
 800621e:	e007      	b.n	8006230 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006226:	2340      	movs	r3, #64	; 0x40
 8006228:	2101      	movs	r1, #1
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f001 fd60 	bl	8007cf0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006230:	2300      	movs	r3, #0
 8006232:	e000      	b.n	8006236 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006234:	2302      	movs	r3, #2
  }
}
 8006236:	4618      	mov	r0, r3
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
	...

08006240 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	4613      	mov	r3, r2
 800624c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d10a      	bne.n	800626a <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8006254:	4814      	ldr	r0, [pc, #80]	; (80062a8 <USBD_Init+0x68>)
 8006256:	f001 fdf9 	bl	8007e4c <iprintf>
 800625a:	4814      	ldr	r0, [pc, #80]	; (80062ac <USBD_Init+0x6c>)
 800625c:	f001 fdf6 	bl	8007e4c <iprintf>
 8006260:	200a      	movs	r0, #10
 8006262:	f001 fe0b 	bl	8007e7c <putchar>
#endif
    return USBD_FAIL;
 8006266:	2302      	movs	r3, #2
 8006268:	e01a      	b.n	80062a0 <USBD_Init+0x60>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006270:	2b00      	cmp	r3, #0
 8006272:	d003      	beq.n	800627c <USBD_Init+0x3c>
  {
    pdev->pClass = NULL;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d003      	beq.n	800628a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	68ba      	ldr	r2, [r7, #8]
 8006286:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2201      	movs	r2, #1
 800628e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	79fa      	ldrb	r2, [r7, #7]
 8006296:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f001 fbc3 	bl	8007a24 <USBD_LL_Init>

  return USBD_OK;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3710      	adds	r7, #16
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	08008e68 	.word	0x08008e68
 80062ac:	08008e70 	.word	0x08008e70

080062b0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80062ba:	2300      	movs	r3, #0
 80062bc:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d006      	beq.n	80062d2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	683a      	ldr	r2, [r7, #0]
 80062c8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80062cc:	2300      	movs	r3, #0
 80062ce:	73fb      	strb	r3, [r7, #15]
 80062d0:	e00a      	b.n	80062e8 <USBD_RegisterClass+0x38>
  }
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 80062d2:	4808      	ldr	r0, [pc, #32]	; (80062f4 <USBD_RegisterClass+0x44>)
 80062d4:	f001 fdba 	bl	8007e4c <iprintf>
 80062d8:	4807      	ldr	r0, [pc, #28]	; (80062f8 <USBD_RegisterClass+0x48>)
 80062da:	f001 fdb7 	bl	8007e4c <iprintf>
 80062de:	200a      	movs	r0, #10
 80062e0:	f001 fdcc 	bl	8007e7c <putchar>
#endif
    status = USBD_FAIL;
 80062e4:	2302      	movs	r3, #2
 80062e6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80062e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	08008e68 	.word	0x08008e68
 80062f8:	08008e88 	.word	0x08008e88

080062fc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f001 fbe7 	bl	8007ad8 <USBD_LL_Start>

  return USBD_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3708      	adds	r7, #8
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	370c      	adds	r7, #12
 8006322:	46bd      	mov	sp, r7
 8006324:	bc80      	pop	{r7}
 8006326:	4770      	bx	lr

08006328 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	460b      	mov	r3, r1
 8006332:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006334:	2302      	movs	r3, #2
 8006336:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00c      	beq.n	800635c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	78fa      	ldrb	r2, [r7, #3]
 800634c:	4611      	mov	r1, r2
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	4798      	blx	r3
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d101      	bne.n	800635c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006358:	2300      	movs	r3, #0
 800635a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800635c:	7bfb      	ldrb	r3, [r7, #15]
}
 800635e:	4618      	mov	r0, r3
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b082      	sub	sp, #8
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
 800636e:	460b      	mov	r3, r1
 8006370:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	78fa      	ldrb	r2, [r7, #3]
 800637c:	4611      	mov	r1, r2
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	4798      	blx	r3

  return USBD_OK;
 8006382:	2300      	movs	r3, #0
}
 8006384:	4618      	mov	r0, r3
 8006386:	3708      	adds	r7, #8
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800639c:	6839      	ldr	r1, [r7, #0]
 800639e:	4618      	mov	r0, r3
 80063a0:	f000 fed7 	bl	8007152 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80063b2:	461a      	mov	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80063c0:	f003 031f 	and.w	r3, r3, #31
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d016      	beq.n	80063f6 <USBD_LL_SetupStage+0x6a>
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d81c      	bhi.n	8006406 <USBD_LL_SetupStage+0x7a>
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d002      	beq.n	80063d6 <USBD_LL_SetupStage+0x4a>
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d008      	beq.n	80063e6 <USBD_LL_SetupStage+0x5a>
 80063d4:	e017      	b.n	8006406 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80063dc:	4619      	mov	r1, r3
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 f9ca 	bl	8006778 <USBD_StdDevReq>
      break;
 80063e4:	e01a      	b.n	800641c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80063ec:	4619      	mov	r1, r3
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 fa2c 	bl	800684c <USBD_StdItfReq>
      break;
 80063f4:	e012      	b.n	800641c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80063fc:	4619      	mov	r1, r3
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 fa6c 	bl	80068dc <USBD_StdEPReq>
      break;
 8006404:	e00a      	b.n	800641c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800640c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006410:	b2db      	uxtb	r3, r3
 8006412:	4619      	mov	r1, r3
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f001 fbbf 	bl	8007b98 <USBD_LL_StallEP>
      break;
 800641a:	bf00      	nop
  }

  return USBD_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3708      	adds	r7, #8
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}

08006426 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006426:	b580      	push	{r7, lr}
 8006428:	b086      	sub	sp, #24
 800642a:	af00      	add	r7, sp, #0
 800642c:	60f8      	str	r0, [r7, #12]
 800642e:	460b      	mov	r3, r1
 8006430:	607a      	str	r2, [r7, #4]
 8006432:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006434:	7afb      	ldrb	r3, [r7, #11]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d14b      	bne.n	80064d2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006440:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006448:	2b03      	cmp	r3, #3
 800644a:	d134      	bne.n	80064b6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	68da      	ldr	r2, [r3, #12]
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	429a      	cmp	r2, r3
 8006456:	d919      	bls.n	800648c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	68da      	ldr	r2, [r3, #12]
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	1ad2      	subs	r2, r2, r3
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	68da      	ldr	r2, [r3, #12]
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800646e:	429a      	cmp	r2, r3
 8006470:	d203      	bcs.n	800647a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006476:	b29b      	uxth	r3, r3
 8006478:	e002      	b.n	8006480 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800647e:	b29b      	uxth	r3, r3
 8006480:	461a      	mov	r2, r3
 8006482:	6879      	ldr	r1, [r7, #4]
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f000 ff56 	bl	8007336 <USBD_CtlContinueRx>
 800648a:	e038      	b.n	80064fe <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00a      	beq.n	80064ae <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800649e:	2b03      	cmp	r3, #3
 80064a0:	d105      	bne.n	80064ae <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80064ae:	68f8      	ldr	r0, [r7, #12]
 80064b0:	f000 ff53 	bl	800735a <USBD_CtlSendStatus>
 80064b4:	e023      	b.n	80064fe <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80064bc:	2b05      	cmp	r3, #5
 80064be:	d11e      	bne.n	80064fe <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80064c8:	2100      	movs	r1, #0
 80064ca:	68f8      	ldr	r0, [r7, #12]
 80064cc:	f001 fb64 	bl	8007b98 <USBD_LL_StallEP>
 80064d0:	e015      	b.n	80064fe <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064d8:	699b      	ldr	r3, [r3, #24]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00d      	beq.n	80064fa <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80064e4:	2b03      	cmp	r3, #3
 80064e6:	d108      	bne.n	80064fa <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	7afa      	ldrb	r2, [r7, #11]
 80064f2:	4611      	mov	r1, r2
 80064f4:	68f8      	ldr	r0, [r7, #12]
 80064f6:	4798      	blx	r3
 80064f8:	e001      	b.n	80064fe <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80064fa:	2302      	movs	r3, #2
 80064fc:	e000      	b.n	8006500 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3718      	adds	r7, #24
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b086      	sub	sp, #24
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	460b      	mov	r3, r1
 8006512:	607a      	str	r2, [r7, #4]
 8006514:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006516:	7afb      	ldrb	r3, [r7, #11]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d17f      	bne.n	800661c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	3314      	adds	r3, #20
 8006520:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006528:	2b02      	cmp	r3, #2
 800652a:	d15c      	bne.n	80065e6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	68da      	ldr	r2, [r3, #12]
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	429a      	cmp	r2, r3
 8006536:	d915      	bls.n	8006564 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	68da      	ldr	r2, [r3, #12]
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	1ad2      	subs	r2, r2, r3
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	b29b      	uxth	r3, r3
 800654c:	461a      	mov	r2, r3
 800654e:	6879      	ldr	r1, [r7, #4]
 8006550:	68f8      	ldr	r0, [r7, #12]
 8006552:	f000 fec0 	bl	80072d6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006556:	2300      	movs	r3, #0
 8006558:	2200      	movs	r2, #0
 800655a:	2100      	movs	r1, #0
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f001 fbc7 	bl	8007cf0 <USBD_LL_PrepareReceive>
 8006562:	e04e      	b.n	8006602 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	697a      	ldr	r2, [r7, #20]
 800656a:	6912      	ldr	r2, [r2, #16]
 800656c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006570:	fb02 f201 	mul.w	r2, r2, r1
 8006574:	1a9b      	subs	r3, r3, r2
 8006576:	2b00      	cmp	r3, #0
 8006578:	d11c      	bne.n	80065b4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	689a      	ldr	r2, [r3, #8]
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006582:	429a      	cmp	r2, r3
 8006584:	d316      	bcc.n	80065b4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	689a      	ldr	r2, [r3, #8]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006590:	429a      	cmp	r2, r3
 8006592:	d20f      	bcs.n	80065b4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006594:	2200      	movs	r2, #0
 8006596:	2100      	movs	r1, #0
 8006598:	68f8      	ldr	r0, [r7, #12]
 800659a:	f000 fe9c 	bl	80072d6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80065a6:	2300      	movs	r3, #0
 80065a8:	2200      	movs	r2, #0
 80065aa:	2100      	movs	r1, #0
 80065ac:	68f8      	ldr	r0, [r7, #12]
 80065ae:	f001 fb9f 	bl	8007cf0 <USBD_LL_PrepareReceive>
 80065b2:	e026      	b.n	8006602 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00a      	beq.n	80065d6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80065c6:	2b03      	cmp	r3, #3
 80065c8:	d105      	bne.n	80065d6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80065d6:	2180      	movs	r1, #128	; 0x80
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	f001 fadd 	bl	8007b98 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	f000 fece 	bl	8007380 <USBD_CtlReceiveStatus>
 80065e4:	e00d      	b.n	8006602 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80065ec:	2b04      	cmp	r3, #4
 80065ee:	d004      	beq.n	80065fa <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d103      	bne.n	8006602 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80065fa:	2180      	movs	r1, #128	; 0x80
 80065fc:	68f8      	ldr	r0, [r7, #12]
 80065fe:	f001 facb 	bl	8007b98 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006608:	2b01      	cmp	r3, #1
 800660a:	d11d      	bne.n	8006648 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f7ff fe81 	bl	8006314 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800661a:	e015      	b.n	8006648 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006622:	695b      	ldr	r3, [r3, #20]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d00d      	beq.n	8006644 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800662e:	2b03      	cmp	r3, #3
 8006630:	d108      	bne.n	8006644 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	7afa      	ldrb	r2, [r7, #11]
 800663c:	4611      	mov	r1, r2
 800663e:	68f8      	ldr	r0, [r7, #12]
 8006640:	4798      	blx	r3
 8006642:	e001      	b.n	8006648 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006644:	2302      	movs	r3, #2
 8006646:	e000      	b.n	800664a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3718      	adds	r7, #24
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}

08006652 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006652:	b580      	push	{r7, lr}
 8006654:	b082      	sub	sp, #8
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800665a:	2340      	movs	r3, #64	; 0x40
 800665c:	2200      	movs	r2, #0
 800665e:	2100      	movs	r1, #0
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f001 fa54 	bl	8007b0e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2201      	movs	r2, #1
 800666a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2240      	movs	r2, #64	; 0x40
 8006672:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006676:	2340      	movs	r3, #64	; 0x40
 8006678:	2200      	movs	r2, #0
 800667a:	2180      	movs	r1, #128	; 0x80
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f001 fa46 	bl	8007b0e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2201      	movs	r2, #1
 8006686:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2240      	movs	r2, #64	; 0x40
 800668c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d009      	beq.n	80066ca <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	6852      	ldr	r2, [r2, #4]
 80066c2:	b2d2      	uxtb	r2, r2
 80066c4:	4611      	mov	r1, r2
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	4798      	blx	r3
  }

  return USBD_OK;
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3708      	adds	r7, #8
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	460b      	mov	r3, r1
 80066de:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	78fa      	ldrb	r2, [r7, #3]
 80066e4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bc80      	pop	{r7}
 80066f0:	4770      	bx	lr

080066f2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80066f2:	b480      	push	{r7}
 80066f4:	b083      	sub	sp, #12
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2204      	movs	r2, #4
 800670a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800670e:	2300      	movs	r3, #0
}
 8006710:	4618      	mov	r0, r3
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	bc80      	pop	{r7}
 8006718:	4770      	bx	lr

0800671a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800671a:	b480      	push	{r7}
 800671c:	b083      	sub	sp, #12
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006728:	2b04      	cmp	r3, #4
 800672a:	d105      	bne.n	8006738 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	370c      	adds	r7, #12
 800673e:	46bd      	mov	sp, r7
 8006740:	bc80      	pop	{r7}
 8006742:	4770      	bx	lr

08006744 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006752:	2b03      	cmp	r3, #3
 8006754:	d10b      	bne.n	800676e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800675c:	69db      	ldr	r3, [r3, #28]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d005      	beq.n	800676e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006768:	69db      	ldr	r3, [r3, #28]
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	3708      	adds	r7, #8
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006782:	2300      	movs	r3, #0
 8006784:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800678e:	2b40      	cmp	r3, #64	; 0x40
 8006790:	d005      	beq.n	800679e <USBD_StdDevReq+0x26>
 8006792:	2b40      	cmp	r3, #64	; 0x40
 8006794:	d84f      	bhi.n	8006836 <USBD_StdDevReq+0xbe>
 8006796:	2b00      	cmp	r3, #0
 8006798:	d009      	beq.n	80067ae <USBD_StdDevReq+0x36>
 800679a:	2b20      	cmp	r3, #32
 800679c:	d14b      	bne.n	8006836 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	6839      	ldr	r1, [r7, #0]
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	4798      	blx	r3
      break;
 80067ac:	e048      	b.n	8006840 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	785b      	ldrb	r3, [r3, #1]
 80067b2:	2b09      	cmp	r3, #9
 80067b4:	d839      	bhi.n	800682a <USBD_StdDevReq+0xb2>
 80067b6:	a201      	add	r2, pc, #4	; (adr r2, 80067bc <USBD_StdDevReq+0x44>)
 80067b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067bc:	0800680d 	.word	0x0800680d
 80067c0:	08006821 	.word	0x08006821
 80067c4:	0800682b 	.word	0x0800682b
 80067c8:	08006817 	.word	0x08006817
 80067cc:	0800682b 	.word	0x0800682b
 80067d0:	080067ef 	.word	0x080067ef
 80067d4:	080067e5 	.word	0x080067e5
 80067d8:	0800682b 	.word	0x0800682b
 80067dc:	08006803 	.word	0x08006803
 80067e0:	080067f9 	.word	0x080067f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80067e4:	6839      	ldr	r1, [r7, #0]
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f9dc 	bl	8006ba4 <USBD_GetDescriptor>
          break;
 80067ec:	e022      	b.n	8006834 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80067ee:	6839      	ldr	r1, [r7, #0]
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 fb3f 	bl	8006e74 <USBD_SetAddress>
          break;
 80067f6:	e01d      	b.n	8006834 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80067f8:	6839      	ldr	r1, [r7, #0]
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 fb7e 	bl	8006efc <USBD_SetConfig>
          break;
 8006800:	e018      	b.n	8006834 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006802:	6839      	ldr	r1, [r7, #0]
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 fc07 	bl	8007018 <USBD_GetConfig>
          break;
 800680a:	e013      	b.n	8006834 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800680c:	6839      	ldr	r1, [r7, #0]
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 fc37 	bl	8007082 <USBD_GetStatus>
          break;
 8006814:	e00e      	b.n	8006834 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006816:	6839      	ldr	r1, [r7, #0]
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 fc65 	bl	80070e8 <USBD_SetFeature>
          break;
 800681e:	e009      	b.n	8006834 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006820:	6839      	ldr	r1, [r7, #0]
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 fc74 	bl	8007110 <USBD_ClrFeature>
          break;
 8006828:	e004      	b.n	8006834 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800682a:	6839      	ldr	r1, [r7, #0]
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 fccc 	bl	80071ca <USBD_CtlError>
          break;
 8006832:	bf00      	nop
      }
      break;
 8006834:	e004      	b.n	8006840 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006836:	6839      	ldr	r1, [r7, #0]
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 fcc6 	bl	80071ca <USBD_CtlError>
      break;
 800683e:	bf00      	nop
  }

  return ret;
 8006840:	7bfb      	ldrb	r3, [r7, #15]
}
 8006842:	4618      	mov	r0, r3
 8006844:	3710      	adds	r7, #16
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop

0800684c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006856:	2300      	movs	r3, #0
 8006858:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006862:	2b40      	cmp	r3, #64	; 0x40
 8006864:	d005      	beq.n	8006872 <USBD_StdItfReq+0x26>
 8006866:	2b40      	cmp	r3, #64	; 0x40
 8006868:	d82e      	bhi.n	80068c8 <USBD_StdItfReq+0x7c>
 800686a:	2b00      	cmp	r3, #0
 800686c:	d001      	beq.n	8006872 <USBD_StdItfReq+0x26>
 800686e:	2b20      	cmp	r3, #32
 8006870:	d12a      	bne.n	80068c8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006878:	3b01      	subs	r3, #1
 800687a:	2b02      	cmp	r3, #2
 800687c:	d81d      	bhi.n	80068ba <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	889b      	ldrh	r3, [r3, #4]
 8006882:	b2db      	uxtb	r3, r3
 8006884:	2b01      	cmp	r3, #1
 8006886:	d813      	bhi.n	80068b0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	6839      	ldr	r1, [r7, #0]
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	4798      	blx	r3
 8006896:	4603      	mov	r3, r0
 8006898:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	88db      	ldrh	r3, [r3, #6]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d110      	bne.n	80068c4 <USBD_StdItfReq+0x78>
 80068a2:	7bfb      	ldrb	r3, [r7, #15]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d10d      	bne.n	80068c4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 fd56 	bl	800735a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80068ae:	e009      	b.n	80068c4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80068b0:	6839      	ldr	r1, [r7, #0]
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 fc89 	bl	80071ca <USBD_CtlError>
          break;
 80068b8:	e004      	b.n	80068c4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80068ba:	6839      	ldr	r1, [r7, #0]
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 fc84 	bl	80071ca <USBD_CtlError>
          break;
 80068c2:	e000      	b.n	80068c6 <USBD_StdItfReq+0x7a>
          break;
 80068c4:	bf00      	nop
      }
      break;
 80068c6:	e004      	b.n	80068d2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80068c8:	6839      	ldr	r1, [r7, #0]
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 fc7d 	bl	80071ca <USBD_CtlError>
      break;
 80068d0:	bf00      	nop
  }

  return USBD_OK;
 80068d2:	2300      	movs	r3, #0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3710      	adds	r7, #16
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80068e6:	2300      	movs	r3, #0
 80068e8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	889b      	ldrh	r3, [r3, #4]
 80068ee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068f8:	2b40      	cmp	r3, #64	; 0x40
 80068fa:	d007      	beq.n	800690c <USBD_StdEPReq+0x30>
 80068fc:	2b40      	cmp	r3, #64	; 0x40
 80068fe:	f200 8146 	bhi.w	8006b8e <USBD_StdEPReq+0x2b2>
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00a      	beq.n	800691c <USBD_StdEPReq+0x40>
 8006906:	2b20      	cmp	r3, #32
 8006908:	f040 8141 	bne.w	8006b8e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	6839      	ldr	r1, [r7, #0]
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	4798      	blx	r3
      break;
 800691a:	e13d      	b.n	8006b98 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006924:	2b20      	cmp	r3, #32
 8006926:	d10a      	bne.n	800693e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	6839      	ldr	r1, [r7, #0]
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	4798      	blx	r3
 8006936:	4603      	mov	r3, r0
 8006938:	73fb      	strb	r3, [r7, #15]

        return ret;
 800693a:	7bfb      	ldrb	r3, [r7, #15]
 800693c:	e12d      	b.n	8006b9a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	785b      	ldrb	r3, [r3, #1]
 8006942:	2b03      	cmp	r3, #3
 8006944:	d007      	beq.n	8006956 <USBD_StdEPReq+0x7a>
 8006946:	2b03      	cmp	r3, #3
 8006948:	f300 811b 	bgt.w	8006b82 <USBD_StdEPReq+0x2a6>
 800694c:	2b00      	cmp	r3, #0
 800694e:	d072      	beq.n	8006a36 <USBD_StdEPReq+0x15a>
 8006950:	2b01      	cmp	r3, #1
 8006952:	d03a      	beq.n	80069ca <USBD_StdEPReq+0xee>
 8006954:	e115      	b.n	8006b82 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800695c:	2b02      	cmp	r3, #2
 800695e:	d002      	beq.n	8006966 <USBD_StdEPReq+0x8a>
 8006960:	2b03      	cmp	r3, #3
 8006962:	d015      	beq.n	8006990 <USBD_StdEPReq+0xb4>
 8006964:	e02b      	b.n	80069be <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006966:	7bbb      	ldrb	r3, [r7, #14]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00c      	beq.n	8006986 <USBD_StdEPReq+0xaa>
 800696c:	7bbb      	ldrb	r3, [r7, #14]
 800696e:	2b80      	cmp	r3, #128	; 0x80
 8006970:	d009      	beq.n	8006986 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006972:	7bbb      	ldrb	r3, [r7, #14]
 8006974:	4619      	mov	r1, r3
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f001 f90e 	bl	8007b98 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800697c:	2180      	movs	r1, #128	; 0x80
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f001 f90a 	bl	8007b98 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006984:	e020      	b.n	80069c8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006986:	6839      	ldr	r1, [r7, #0]
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 fc1e 	bl	80071ca <USBD_CtlError>
              break;
 800698e:	e01b      	b.n	80069c8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	885b      	ldrh	r3, [r3, #2]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d10e      	bne.n	80069b6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006998:	7bbb      	ldrb	r3, [r7, #14]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00b      	beq.n	80069b6 <USBD_StdEPReq+0xda>
 800699e:	7bbb      	ldrb	r3, [r7, #14]
 80069a0:	2b80      	cmp	r3, #128	; 0x80
 80069a2:	d008      	beq.n	80069b6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	88db      	ldrh	r3, [r3, #6]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d104      	bne.n	80069b6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80069ac:	7bbb      	ldrb	r3, [r7, #14]
 80069ae:	4619      	mov	r1, r3
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f001 f8f1 	bl	8007b98 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 fccf 	bl	800735a <USBD_CtlSendStatus>

              break;
 80069bc:	e004      	b.n	80069c8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80069be:	6839      	ldr	r1, [r7, #0]
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 fc02 	bl	80071ca <USBD_CtlError>
              break;
 80069c6:	bf00      	nop
          }
          break;
 80069c8:	e0e0      	b.n	8006b8c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d002      	beq.n	80069da <USBD_StdEPReq+0xfe>
 80069d4:	2b03      	cmp	r3, #3
 80069d6:	d015      	beq.n	8006a04 <USBD_StdEPReq+0x128>
 80069d8:	e026      	b.n	8006a28 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80069da:	7bbb      	ldrb	r3, [r7, #14]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00c      	beq.n	80069fa <USBD_StdEPReq+0x11e>
 80069e0:	7bbb      	ldrb	r3, [r7, #14]
 80069e2:	2b80      	cmp	r3, #128	; 0x80
 80069e4:	d009      	beq.n	80069fa <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80069e6:	7bbb      	ldrb	r3, [r7, #14]
 80069e8:	4619      	mov	r1, r3
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f001 f8d4 	bl	8007b98 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80069f0:	2180      	movs	r1, #128	; 0x80
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f001 f8d0 	bl	8007b98 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80069f8:	e01c      	b.n	8006a34 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80069fa:	6839      	ldr	r1, [r7, #0]
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 fbe4 	bl	80071ca <USBD_CtlError>
              break;
 8006a02:	e017      	b.n	8006a34 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	885b      	ldrh	r3, [r3, #2]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d112      	bne.n	8006a32 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006a0c:	7bbb      	ldrb	r3, [r7, #14]
 8006a0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d004      	beq.n	8006a20 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006a16:	7bbb      	ldrb	r3, [r7, #14]
 8006a18:	4619      	mov	r1, r3
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f001 f8db 	bl	8007bd6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 fc9a 	bl	800735a <USBD_CtlSendStatus>
              }
              break;
 8006a26:	e004      	b.n	8006a32 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006a28:	6839      	ldr	r1, [r7, #0]
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 fbcd 	bl	80071ca <USBD_CtlError>
              break;
 8006a30:	e000      	b.n	8006a34 <USBD_StdEPReq+0x158>
              break;
 8006a32:	bf00      	nop
          }
          break;
 8006a34:	e0aa      	b.n	8006b8c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d002      	beq.n	8006a46 <USBD_StdEPReq+0x16a>
 8006a40:	2b03      	cmp	r3, #3
 8006a42:	d032      	beq.n	8006aaa <USBD_StdEPReq+0x1ce>
 8006a44:	e097      	b.n	8006b76 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a46:	7bbb      	ldrb	r3, [r7, #14]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d007      	beq.n	8006a5c <USBD_StdEPReq+0x180>
 8006a4c:	7bbb      	ldrb	r3, [r7, #14]
 8006a4e:	2b80      	cmp	r3, #128	; 0x80
 8006a50:	d004      	beq.n	8006a5c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8006a52:	6839      	ldr	r1, [r7, #0]
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 fbb8 	bl	80071ca <USBD_CtlError>
                break;
 8006a5a:	e091      	b.n	8006b80 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	da0b      	bge.n	8006a7c <USBD_StdEPReq+0x1a0>
 8006a64:	7bbb      	ldrb	r3, [r7, #14]
 8006a66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	4413      	add	r3, r2
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	3310      	adds	r3, #16
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	4413      	add	r3, r2
 8006a78:	3304      	adds	r3, #4
 8006a7a:	e00b      	b.n	8006a94 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a7c:	7bbb      	ldrb	r3, [r7, #14]
 8006a7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a82:	4613      	mov	r3, r2
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	4413      	add	r3, r2
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	4413      	add	r3, r2
 8006a92:	3304      	adds	r3, #4
 8006a94:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	2202      	movs	r2, #2
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 fbfb 	bl	800729e <USBD_CtlSendData>
              break;
 8006aa8:	e06a      	b.n	8006b80 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006aaa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	da11      	bge.n	8006ad6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006ab2:	7bbb      	ldrb	r3, [r7, #14]
 8006ab4:	f003 020f 	and.w	r2, r3, #15
 8006ab8:	6879      	ldr	r1, [r7, #4]
 8006aba:	4613      	mov	r3, r2
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	4413      	add	r3, r2
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	440b      	add	r3, r1
 8006ac4:	3318      	adds	r3, #24
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d117      	bne.n	8006afc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006acc:	6839      	ldr	r1, [r7, #0]
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 fb7b 	bl	80071ca <USBD_CtlError>
                  break;
 8006ad4:	e054      	b.n	8006b80 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006ad6:	7bbb      	ldrb	r3, [r7, #14]
 8006ad8:	f003 020f 	and.w	r2, r3, #15
 8006adc:	6879      	ldr	r1, [r7, #4]
 8006ade:	4613      	mov	r3, r2
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	4413      	add	r3, r2
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	440b      	add	r3, r1
 8006ae8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d104      	bne.n	8006afc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006af2:	6839      	ldr	r1, [r7, #0]
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 fb68 	bl	80071ca <USBD_CtlError>
                  break;
 8006afa:	e041      	b.n	8006b80 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006afc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	da0b      	bge.n	8006b1c <USBD_StdEPReq+0x240>
 8006b04:	7bbb      	ldrb	r3, [r7, #14]
 8006b06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	4413      	add	r3, r2
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	3310      	adds	r3, #16
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	4413      	add	r3, r2
 8006b18:	3304      	adds	r3, #4
 8006b1a:	e00b      	b.n	8006b34 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b1c:	7bbb      	ldrb	r3, [r7, #14]
 8006b1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b22:	4613      	mov	r3, r2
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	4413      	add	r3, r2
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	4413      	add	r3, r2
 8006b32:	3304      	adds	r3, #4
 8006b34:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006b36:	7bbb      	ldrb	r3, [r7, #14]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d002      	beq.n	8006b42 <USBD_StdEPReq+0x266>
 8006b3c:	7bbb      	ldrb	r3, [r7, #14]
 8006b3e:	2b80      	cmp	r3, #128	; 0x80
 8006b40:	d103      	bne.n	8006b4a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	2200      	movs	r2, #0
 8006b46:	601a      	str	r2, [r3, #0]
 8006b48:	e00e      	b.n	8006b68 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006b4a:	7bbb      	ldrb	r3, [r7, #14]
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f001 f860 	bl	8007c14 <USBD_LL_IsStallEP>
 8006b54:	4603      	mov	r3, r0
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d003      	beq.n	8006b62 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	601a      	str	r2, [r3, #0]
 8006b60:	e002      	b.n	8006b68 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	2200      	movs	r2, #0
 8006b66:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	2202      	movs	r2, #2
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 fb95 	bl	800729e <USBD_CtlSendData>
              break;
 8006b74:	e004      	b.n	8006b80 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8006b76:	6839      	ldr	r1, [r7, #0]
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 fb26 	bl	80071ca <USBD_CtlError>
              break;
 8006b7e:	bf00      	nop
          }
          break;
 8006b80:	e004      	b.n	8006b8c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8006b82:	6839      	ldr	r1, [r7, #0]
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 fb20 	bl	80071ca <USBD_CtlError>
          break;
 8006b8a:	bf00      	nop
      }
      break;
 8006b8c:	e004      	b.n	8006b98 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006b8e:	6839      	ldr	r1, [r7, #0]
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 fb1a 	bl	80071ca <USBD_CtlError>
      break;
 8006b96:	bf00      	nop
  }

  return ret;
 8006b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3710      	adds	r7, #16
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
	...

08006ba4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	885b      	ldrh	r3, [r3, #2]
 8006bbe:	0a1b      	lsrs	r3, r3, #8
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	2b06      	cmp	r3, #6
 8006bc6:	f200 8128 	bhi.w	8006e1a <USBD_GetDescriptor+0x276>
 8006bca:	a201      	add	r2, pc, #4	; (adr r2, 8006bd0 <USBD_GetDescriptor+0x2c>)
 8006bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd0:	08006bed 	.word	0x08006bed
 8006bd4:	08006c05 	.word	0x08006c05
 8006bd8:	08006c45 	.word	0x08006c45
 8006bdc:	08006e1b 	.word	0x08006e1b
 8006be0:	08006e1b 	.word	0x08006e1b
 8006be4:	08006dbb 	.word	0x08006dbb
 8006be8:	08006de7 	.word	0x08006de7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	7c12      	ldrb	r2, [r2, #16]
 8006bf8:	f107 0108 	add.w	r1, r7, #8
 8006bfc:	4610      	mov	r0, r2
 8006bfe:	4798      	blx	r3
 8006c00:	60f8      	str	r0, [r7, #12]
      break;
 8006c02:	e112      	b.n	8006e2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	7c1b      	ldrb	r3, [r3, #16]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d10d      	bne.n	8006c28 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c14:	f107 0208 	add.w	r2, r7, #8
 8006c18:	4610      	mov	r0, r2
 8006c1a:	4798      	blx	r3
 8006c1c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	3301      	adds	r3, #1
 8006c22:	2202      	movs	r2, #2
 8006c24:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006c26:	e100      	b.n	8006e2a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c30:	f107 0208 	add.w	r2, r7, #8
 8006c34:	4610      	mov	r0, r2
 8006c36:	4798      	blx	r3
 8006c38:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	2202      	movs	r2, #2
 8006c40:	701a      	strb	r2, [r3, #0]
      break;
 8006c42:	e0f2      	b.n	8006e2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	885b      	ldrh	r3, [r3, #2]
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	2b05      	cmp	r3, #5
 8006c4c:	f200 80ac 	bhi.w	8006da8 <USBD_GetDescriptor+0x204>
 8006c50:	a201      	add	r2, pc, #4	; (adr r2, 8006c58 <USBD_GetDescriptor+0xb4>)
 8006c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c56:	bf00      	nop
 8006c58:	08006c71 	.word	0x08006c71
 8006c5c:	08006ca5 	.word	0x08006ca5
 8006c60:	08006cd9 	.word	0x08006cd9
 8006c64:	08006d0d 	.word	0x08006d0d
 8006c68:	08006d41 	.word	0x08006d41
 8006c6c:	08006d75 	.word	0x08006d75
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00b      	beq.n	8006c94 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	7c12      	ldrb	r2, [r2, #16]
 8006c88:	f107 0108 	add.w	r1, r7, #8
 8006c8c:	4610      	mov	r0, r2
 8006c8e:	4798      	blx	r3
 8006c90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c92:	e091      	b.n	8006db8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c94:	6839      	ldr	r1, [r7, #0]
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 fa97 	bl	80071ca <USBD_CtlError>
            err++;
 8006c9c:	7afb      	ldrb	r3, [r7, #11]
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	72fb      	strb	r3, [r7, #11]
          break;
 8006ca2:	e089      	b.n	8006db8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d00b      	beq.n	8006cc8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	7c12      	ldrb	r2, [r2, #16]
 8006cbc:	f107 0108 	add.w	r1, r7, #8
 8006cc0:	4610      	mov	r0, r2
 8006cc2:	4798      	blx	r3
 8006cc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cc6:	e077      	b.n	8006db8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006cc8:	6839      	ldr	r1, [r7, #0]
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 fa7d 	bl	80071ca <USBD_CtlError>
            err++;
 8006cd0:	7afb      	ldrb	r3, [r7, #11]
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	72fb      	strb	r3, [r7, #11]
          break;
 8006cd6:	e06f      	b.n	8006db8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00b      	beq.n	8006cfc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	7c12      	ldrb	r2, [r2, #16]
 8006cf0:	f107 0108 	add.w	r1, r7, #8
 8006cf4:	4610      	mov	r0, r2
 8006cf6:	4798      	blx	r3
 8006cf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cfa:	e05d      	b.n	8006db8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006cfc:	6839      	ldr	r1, [r7, #0]
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 fa63 	bl	80071ca <USBD_CtlError>
            err++;
 8006d04:	7afb      	ldrb	r3, [r7, #11]
 8006d06:	3301      	adds	r3, #1
 8006d08:	72fb      	strb	r3, [r7, #11]
          break;
 8006d0a:	e055      	b.n	8006db8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d00b      	beq.n	8006d30 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	7c12      	ldrb	r2, [r2, #16]
 8006d24:	f107 0108 	add.w	r1, r7, #8
 8006d28:	4610      	mov	r0, r2
 8006d2a:	4798      	blx	r3
 8006d2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d2e:	e043      	b.n	8006db8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d30:	6839      	ldr	r1, [r7, #0]
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 fa49 	bl	80071ca <USBD_CtlError>
            err++;
 8006d38:	7afb      	ldrb	r3, [r7, #11]
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	72fb      	strb	r3, [r7, #11]
          break;
 8006d3e:	e03b      	b.n	8006db8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d46:	695b      	ldr	r3, [r3, #20]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d00b      	beq.n	8006d64 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d52:	695b      	ldr	r3, [r3, #20]
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	7c12      	ldrb	r2, [r2, #16]
 8006d58:	f107 0108 	add.w	r1, r7, #8
 8006d5c:	4610      	mov	r0, r2
 8006d5e:	4798      	blx	r3
 8006d60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d62:	e029      	b.n	8006db8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d64:	6839      	ldr	r1, [r7, #0]
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 fa2f 	bl	80071ca <USBD_CtlError>
            err++;
 8006d6c:	7afb      	ldrb	r3, [r7, #11]
 8006d6e:	3301      	adds	r3, #1
 8006d70:	72fb      	strb	r3, [r7, #11]
          break;
 8006d72:	e021      	b.n	8006db8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d7a:	699b      	ldr	r3, [r3, #24]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d00b      	beq.n	8006d98 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d86:	699b      	ldr	r3, [r3, #24]
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	7c12      	ldrb	r2, [r2, #16]
 8006d8c:	f107 0108 	add.w	r1, r7, #8
 8006d90:	4610      	mov	r0, r2
 8006d92:	4798      	blx	r3
 8006d94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d96:	e00f      	b.n	8006db8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d98:	6839      	ldr	r1, [r7, #0]
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 fa15 	bl	80071ca <USBD_CtlError>
            err++;
 8006da0:	7afb      	ldrb	r3, [r7, #11]
 8006da2:	3301      	adds	r3, #1
 8006da4:	72fb      	strb	r3, [r7, #11]
          break;
 8006da6:	e007      	b.n	8006db8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006da8:	6839      	ldr	r1, [r7, #0]
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 fa0d 	bl	80071ca <USBD_CtlError>
          err++;
 8006db0:	7afb      	ldrb	r3, [r7, #11]
 8006db2:	3301      	adds	r3, #1
 8006db4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006db6:	e038      	b.n	8006e2a <USBD_GetDescriptor+0x286>
 8006db8:	e037      	b.n	8006e2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	7c1b      	ldrb	r3, [r3, #16]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d109      	bne.n	8006dd6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dca:	f107 0208 	add.w	r2, r7, #8
 8006dce:	4610      	mov	r0, r2
 8006dd0:	4798      	blx	r3
 8006dd2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006dd4:	e029      	b.n	8006e2a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006dd6:	6839      	ldr	r1, [r7, #0]
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 f9f6 	bl	80071ca <USBD_CtlError>
        err++;
 8006dde:	7afb      	ldrb	r3, [r7, #11]
 8006de0:	3301      	adds	r3, #1
 8006de2:	72fb      	strb	r3, [r7, #11]
      break;
 8006de4:	e021      	b.n	8006e2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	7c1b      	ldrb	r3, [r3, #16]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d10d      	bne.n	8006e0a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df6:	f107 0208 	add.w	r2, r7, #8
 8006dfa:	4610      	mov	r0, r2
 8006dfc:	4798      	blx	r3
 8006dfe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	3301      	adds	r3, #1
 8006e04:	2207      	movs	r2, #7
 8006e06:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e08:	e00f      	b.n	8006e2a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006e0a:	6839      	ldr	r1, [r7, #0]
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 f9dc 	bl	80071ca <USBD_CtlError>
        err++;
 8006e12:	7afb      	ldrb	r3, [r7, #11]
 8006e14:	3301      	adds	r3, #1
 8006e16:	72fb      	strb	r3, [r7, #11]
      break;
 8006e18:	e007      	b.n	8006e2a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006e1a:	6839      	ldr	r1, [r7, #0]
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 f9d4 	bl	80071ca <USBD_CtlError>
      err++;
 8006e22:	7afb      	ldrb	r3, [r7, #11]
 8006e24:	3301      	adds	r3, #1
 8006e26:	72fb      	strb	r3, [r7, #11]
      break;
 8006e28:	bf00      	nop
  }

  if (err != 0U)
 8006e2a:	7afb      	ldrb	r3, [r7, #11]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d11c      	bne.n	8006e6a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006e30:	893b      	ldrh	r3, [r7, #8]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d011      	beq.n	8006e5a <USBD_GetDescriptor+0x2b6>
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	88db      	ldrh	r3, [r3, #6]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00d      	beq.n	8006e5a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	88da      	ldrh	r2, [r3, #6]
 8006e42:	893b      	ldrh	r3, [r7, #8]
 8006e44:	4293      	cmp	r3, r2
 8006e46:	bf28      	it	cs
 8006e48:	4613      	movcs	r3, r2
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006e4e:	893b      	ldrh	r3, [r7, #8]
 8006e50:	461a      	mov	r2, r3
 8006e52:	68f9      	ldr	r1, [r7, #12]
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 fa22 	bl	800729e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	88db      	ldrh	r3, [r3, #6]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d104      	bne.n	8006e6c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 fa79 	bl	800735a <USBD_CtlSendStatus>
 8006e68:	e000      	b.n	8006e6c <USBD_GetDescriptor+0x2c8>
    return;
 8006e6a:	bf00      	nop
    }
  }
}
 8006e6c:	3710      	adds	r7, #16
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop

08006e74 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	889b      	ldrh	r3, [r3, #4]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d130      	bne.n	8006ee8 <USBD_SetAddress+0x74>
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	88db      	ldrh	r3, [r3, #6]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d12c      	bne.n	8006ee8 <USBD_SetAddress+0x74>
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	885b      	ldrh	r3, [r3, #2]
 8006e92:	2b7f      	cmp	r3, #127	; 0x7f
 8006e94:	d828      	bhi.n	8006ee8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	885b      	ldrh	r3, [r3, #2]
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ea0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ea8:	2b03      	cmp	r3, #3
 8006eaa:	d104      	bne.n	8006eb6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006eac:	6839      	ldr	r1, [r7, #0]
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 f98b 	bl	80071ca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eb4:	e01d      	b.n	8006ef2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	7bfa      	ldrb	r2, [r7, #15]
 8006eba:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006ebe:	7bfb      	ldrb	r3, [r7, #15]
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 fed2 	bl	8007c6c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 fa46 	bl	800735a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006ece:	7bfb      	ldrb	r3, [r7, #15]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d004      	beq.n	8006ede <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2202      	movs	r2, #2
 8006ed8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006edc:	e009      	b.n	8006ef2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ee6:	e004      	b.n	8006ef2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006ee8:	6839      	ldr	r1, [r7, #0]
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 f96d 	bl	80071ca <USBD_CtlError>
  }
}
 8006ef0:	bf00      	nop
 8006ef2:	bf00      	nop
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
	...

08006efc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b082      	sub	sp, #8
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	885b      	ldrh	r3, [r3, #2]
 8006f0a:	b2da      	uxtb	r2, r3
 8006f0c:	4b41      	ldr	r3, [pc, #260]	; (8007014 <USBD_SetConfig+0x118>)
 8006f0e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006f10:	4b40      	ldr	r3, [pc, #256]	; (8007014 <USBD_SetConfig+0x118>)
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d904      	bls.n	8006f22 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006f18:	6839      	ldr	r1, [r7, #0]
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 f955 	bl	80071ca <USBD_CtlError>
 8006f20:	e075      	b.n	800700e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	d002      	beq.n	8006f32 <USBD_SetConfig+0x36>
 8006f2c:	2b03      	cmp	r3, #3
 8006f2e:	d023      	beq.n	8006f78 <USBD_SetConfig+0x7c>
 8006f30:	e062      	b.n	8006ff8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006f32:	4b38      	ldr	r3, [pc, #224]	; (8007014 <USBD_SetConfig+0x118>)
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d01a      	beq.n	8006f70 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006f3a:	4b36      	ldr	r3, [pc, #216]	; (8007014 <USBD_SetConfig+0x118>)
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	461a      	mov	r2, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2203      	movs	r2, #3
 8006f48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006f4c:	4b31      	ldr	r3, [pc, #196]	; (8007014 <USBD_SetConfig+0x118>)
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	4619      	mov	r1, r3
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f7ff f9e8 	bl	8006328 <USBD_SetClassConfig>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	d104      	bne.n	8006f68 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006f5e:	6839      	ldr	r1, [r7, #0]
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 f932 	bl	80071ca <USBD_CtlError>
            return;
 8006f66:	e052      	b.n	800700e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 f9f6 	bl	800735a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006f6e:	e04e      	b.n	800700e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 f9f2 	bl	800735a <USBD_CtlSendStatus>
        break;
 8006f76:	e04a      	b.n	800700e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006f78:	4b26      	ldr	r3, [pc, #152]	; (8007014 <USBD_SetConfig+0x118>)
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d112      	bne.n	8006fa6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2202      	movs	r2, #2
 8006f84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006f88:	4b22      	ldr	r3, [pc, #136]	; (8007014 <USBD_SetConfig+0x118>)
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006f92:	4b20      	ldr	r3, [pc, #128]	; (8007014 <USBD_SetConfig+0x118>)
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	4619      	mov	r1, r3
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f7ff f9e4 	bl	8006366 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 f9db 	bl	800735a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006fa4:	e033      	b.n	800700e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006fa6:	4b1b      	ldr	r3, [pc, #108]	; (8007014 <USBD_SetConfig+0x118>)
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	461a      	mov	r2, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d01d      	beq.n	8006ff0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	4619      	mov	r1, r3
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f7ff f9d2 	bl	8006366 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006fc2:	4b14      	ldr	r3, [pc, #80]	; (8007014 <USBD_SetConfig+0x118>)
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006fcc:	4b11      	ldr	r3, [pc, #68]	; (8007014 <USBD_SetConfig+0x118>)
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f7ff f9a8 	bl	8006328 <USBD_SetClassConfig>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b02      	cmp	r3, #2
 8006fdc:	d104      	bne.n	8006fe8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006fde:	6839      	ldr	r1, [r7, #0]
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 f8f2 	bl	80071ca <USBD_CtlError>
            return;
 8006fe6:	e012      	b.n	800700e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 f9b6 	bl	800735a <USBD_CtlSendStatus>
        break;
 8006fee:	e00e      	b.n	800700e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 f9b2 	bl	800735a <USBD_CtlSendStatus>
        break;
 8006ff6:	e00a      	b.n	800700e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006ff8:	6839      	ldr	r1, [r7, #0]
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 f8e5 	bl	80071ca <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007000:	4b04      	ldr	r3, [pc, #16]	; (8007014 <USBD_SetConfig+0x118>)
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	4619      	mov	r1, r3
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f7ff f9ad 	bl	8006366 <USBD_ClrClassConfig>
        break;
 800700c:	bf00      	nop
    }
  }
}
 800700e:	3708      	adds	r7, #8
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}
 8007014:	20000201 	.word	0x20000201

08007018 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b082      	sub	sp, #8
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	88db      	ldrh	r3, [r3, #6]
 8007026:	2b01      	cmp	r3, #1
 8007028:	d004      	beq.n	8007034 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800702a:	6839      	ldr	r1, [r7, #0]
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 f8cc 	bl	80071ca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007032:	e022      	b.n	800707a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800703a:	2b02      	cmp	r3, #2
 800703c:	dc02      	bgt.n	8007044 <USBD_GetConfig+0x2c>
 800703e:	2b00      	cmp	r3, #0
 8007040:	dc03      	bgt.n	800704a <USBD_GetConfig+0x32>
 8007042:	e015      	b.n	8007070 <USBD_GetConfig+0x58>
 8007044:	2b03      	cmp	r3, #3
 8007046:	d00b      	beq.n	8007060 <USBD_GetConfig+0x48>
 8007048:	e012      	b.n	8007070 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	3308      	adds	r3, #8
 8007054:	2201      	movs	r2, #1
 8007056:	4619      	mov	r1, r3
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 f920 	bl	800729e <USBD_CtlSendData>
        break;
 800705e:	e00c      	b.n	800707a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	3304      	adds	r3, #4
 8007064:	2201      	movs	r2, #1
 8007066:	4619      	mov	r1, r3
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 f918 	bl	800729e <USBD_CtlSendData>
        break;
 800706e:	e004      	b.n	800707a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007070:	6839      	ldr	r1, [r7, #0]
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 f8a9 	bl	80071ca <USBD_CtlError>
        break;
 8007078:	bf00      	nop
}
 800707a:	bf00      	nop
 800707c:	3708      	adds	r7, #8
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b082      	sub	sp, #8
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
 800708a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007092:	3b01      	subs	r3, #1
 8007094:	2b02      	cmp	r3, #2
 8007096:	d81e      	bhi.n	80070d6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	88db      	ldrh	r3, [r3, #6]
 800709c:	2b02      	cmp	r3, #2
 800709e:	d004      	beq.n	80070aa <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80070a0:	6839      	ldr	r1, [r7, #0]
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 f891 	bl	80071ca <USBD_CtlError>
        break;
 80070a8:	e01a      	b.n	80070e0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	60da      	str	r2, [r3, #12]
#endif

      if (pdev->dev_remote_wakeup)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d005      	beq.n	80070c6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	68db      	ldr	r3, [r3, #12]
 80070be:	f043 0202 	orr.w	r2, r3, #2
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	330c      	adds	r3, #12
 80070ca:	2202      	movs	r2, #2
 80070cc:	4619      	mov	r1, r3
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 f8e5 	bl	800729e <USBD_CtlSendData>
      break;
 80070d4:	e004      	b.n	80070e0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80070d6:	6839      	ldr	r1, [r7, #0]
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 f876 	bl	80071ca <USBD_CtlError>
      break;
 80070de:	bf00      	nop
  }
}
 80070e0:	bf00      	nop
 80070e2:	3708      	adds	r7, #8
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	885b      	ldrh	r3, [r3, #2]
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d106      	bne.n	8007108 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2201      	movs	r2, #1
 80070fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 f929 	bl	800735a <USBD_CtlSendStatus>
  }
}
 8007108:	bf00      	nop
 800710a:	3708      	adds	r7, #8
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007120:	3b01      	subs	r3, #1
 8007122:	2b02      	cmp	r3, #2
 8007124:	d80b      	bhi.n	800713e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	885b      	ldrh	r3, [r3, #2]
 800712a:	2b01      	cmp	r3, #1
 800712c:	d10c      	bne.n	8007148 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 f90f 	bl	800735a <USBD_CtlSendStatus>
      }
      break;
 800713c:	e004      	b.n	8007148 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800713e:	6839      	ldr	r1, [r7, #0]
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 f842 	bl	80071ca <USBD_CtlError>
      break;
 8007146:	e000      	b.n	800714a <USBD_ClrFeature+0x3a>
      break;
 8007148:	bf00      	nop
  }
}
 800714a:	bf00      	nop
 800714c:	3708      	adds	r7, #8
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}

08007152 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007152:	b480      	push	{r7}
 8007154:	b083      	sub	sp, #12
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
 800715a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	781a      	ldrb	r2, [r3, #0]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	785a      	ldrb	r2, [r3, #1]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	3302      	adds	r3, #2
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	b29a      	uxth	r2, r3
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	3303      	adds	r3, #3
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	b29b      	uxth	r3, r3
 800717c:	021b      	lsls	r3, r3, #8
 800717e:	b29b      	uxth	r3, r3
 8007180:	4413      	add	r3, r2
 8007182:	b29a      	uxth	r2, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	3304      	adds	r3, #4
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	b29a      	uxth	r2, r3
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	3305      	adds	r3, #5
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	b29b      	uxth	r3, r3
 8007198:	021b      	lsls	r3, r3, #8
 800719a:	b29b      	uxth	r3, r3
 800719c:	4413      	add	r3, r2
 800719e:	b29a      	uxth	r2, r3
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	3306      	adds	r3, #6
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	b29a      	uxth	r2, r3
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	3307      	adds	r3, #7
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	021b      	lsls	r3, r3, #8
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	4413      	add	r3, r2
 80071ba:	b29a      	uxth	r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	80da      	strh	r2, [r3, #6]

}
 80071c0:	bf00      	nop
 80071c2:	370c      	adds	r7, #12
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bc80      	pop	{r7}
 80071c8:	4770      	bx	lr

080071ca <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b082      	sub	sp, #8
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
 80071d2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80071d4:	2180      	movs	r1, #128	; 0x80
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 fcde 	bl	8007b98 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80071dc:	2100      	movs	r1, #0
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 fcda 	bl	8007b98 <USBD_LL_StallEP>
}
 80071e4:	bf00      	nop
 80071e6:	3708      	adds	r7, #8
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b086      	sub	sp, #24
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80071f8:	2300      	movs	r3, #0
 80071fa:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d032      	beq.n	8007268 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f000 f834 	bl	8007270 <USBD_GetLen>
 8007208:	4603      	mov	r3, r0
 800720a:	3301      	adds	r3, #1
 800720c:	b29b      	uxth	r3, r3
 800720e:	005b      	lsls	r3, r3, #1
 8007210:	b29a      	uxth	r2, r3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007216:	7dfb      	ldrb	r3, [r7, #23]
 8007218:	1c5a      	adds	r2, r3, #1
 800721a:	75fa      	strb	r2, [r7, #23]
 800721c:	461a      	mov	r2, r3
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	4413      	add	r3, r2
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	7812      	ldrb	r2, [r2, #0]
 8007226:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007228:	7dfb      	ldrb	r3, [r7, #23]
 800722a:	1c5a      	adds	r2, r3, #1
 800722c:	75fa      	strb	r2, [r7, #23]
 800722e:	461a      	mov	r2, r3
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	4413      	add	r3, r2
 8007234:	2203      	movs	r2, #3
 8007236:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007238:	e012      	b.n	8007260 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	1c5a      	adds	r2, r3, #1
 800723e:	60fa      	str	r2, [r7, #12]
 8007240:	7dfa      	ldrb	r2, [r7, #23]
 8007242:	1c51      	adds	r1, r2, #1
 8007244:	75f9      	strb	r1, [r7, #23]
 8007246:	4611      	mov	r1, r2
 8007248:	68ba      	ldr	r2, [r7, #8]
 800724a:	440a      	add	r2, r1
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007250:	7dfb      	ldrb	r3, [r7, #23]
 8007252:	1c5a      	adds	r2, r3, #1
 8007254:	75fa      	strb	r2, [r7, #23]
 8007256:	461a      	mov	r2, r3
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	4413      	add	r3, r2
 800725c:	2200      	movs	r2, #0
 800725e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d1e8      	bne.n	800723a <USBD_GetString+0x4e>
    }
  }
}
 8007268:	bf00      	nop
 800726a:	3718      	adds	r7, #24
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007270:	b480      	push	{r7}
 8007272:	b085      	sub	sp, #20
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007278:	2300      	movs	r3, #0
 800727a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800727c:	e005      	b.n	800728a <USBD_GetLen+0x1a>
  {
    len++;
 800727e:	7bfb      	ldrb	r3, [r7, #15]
 8007280:	3301      	adds	r3, #1
 8007282:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	3301      	adds	r3, #1
 8007288:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d1f5      	bne.n	800727e <USBD_GetLen+0xe>
  }

  return len;
 8007292:	7bfb      	ldrb	r3, [r7, #15]
}
 8007294:	4618      	mov	r0, r3
 8007296:	3714      	adds	r7, #20
 8007298:	46bd      	mov	sp, r7
 800729a:	bc80      	pop	{r7}
 800729c:	4770      	bx	lr

0800729e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800729e:	b580      	push	{r7, lr}
 80072a0:	b084      	sub	sp, #16
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	60f8      	str	r0, [r7, #12]
 80072a6:	60b9      	str	r1, [r7, #8]
 80072a8:	4613      	mov	r3, r2
 80072aa:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2202      	movs	r2, #2
 80072b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80072b4:	88fa      	ldrh	r2, [r7, #6]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80072ba:	88fa      	ldrh	r2, [r7, #6]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80072c0:	88fb      	ldrh	r3, [r7, #6]
 80072c2:	68ba      	ldr	r2, [r7, #8]
 80072c4:	2100      	movs	r1, #0
 80072c6:	68f8      	ldr	r0, [r7, #12]
 80072c8:	f000 fcef 	bl	8007caa <USBD_LL_Transmit>

  return USBD_OK;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3710      	adds	r7, #16
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}

080072d6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80072d6:	b580      	push	{r7, lr}
 80072d8:	b084      	sub	sp, #16
 80072da:	af00      	add	r7, sp, #0
 80072dc:	60f8      	str	r0, [r7, #12]
 80072de:	60b9      	str	r1, [r7, #8]
 80072e0:	4613      	mov	r3, r2
 80072e2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80072e4:	88fb      	ldrh	r3, [r7, #6]
 80072e6:	68ba      	ldr	r2, [r7, #8]
 80072e8:	2100      	movs	r1, #0
 80072ea:	68f8      	ldr	r0, [r7, #12]
 80072ec:	f000 fcdd 	bl	8007caa <USBD_LL_Transmit>

  return USBD_OK;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3710      	adds	r7, #16
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b084      	sub	sp, #16
 80072fe:	af00      	add	r7, sp, #0
 8007300:	60f8      	str	r0, [r7, #12]
 8007302:	60b9      	str	r1, [r7, #8]
 8007304:	4613      	mov	r3, r2
 8007306:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2203      	movs	r2, #3
 800730c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007310:	88fa      	ldrh	r2, [r7, #6]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007318:	88fa      	ldrh	r2, [r7, #6]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007320:	88fb      	ldrh	r3, [r7, #6]
 8007322:	68ba      	ldr	r2, [r7, #8]
 8007324:	2100      	movs	r1, #0
 8007326:	68f8      	ldr	r0, [r7, #12]
 8007328:	f000 fce2 	bl	8007cf0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800732c:	2300      	movs	r3, #0
}
 800732e:	4618      	mov	r0, r3
 8007330:	3710      	adds	r7, #16
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b084      	sub	sp, #16
 800733a:	af00      	add	r7, sp, #0
 800733c:	60f8      	str	r0, [r7, #12]
 800733e:	60b9      	str	r1, [r7, #8]
 8007340:	4613      	mov	r3, r2
 8007342:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007344:	88fb      	ldrh	r3, [r7, #6]
 8007346:	68ba      	ldr	r2, [r7, #8]
 8007348:	2100      	movs	r1, #0
 800734a:	68f8      	ldr	r0, [r7, #12]
 800734c:	f000 fcd0 	bl	8007cf0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	3710      	adds	r7, #16
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}

0800735a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800735a:	b580      	push	{r7, lr}
 800735c:	b082      	sub	sp, #8
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2204      	movs	r2, #4
 8007366:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800736a:	2300      	movs	r3, #0
 800736c:	2200      	movs	r2, #0
 800736e:	2100      	movs	r1, #0
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 fc9a 	bl	8007caa <USBD_LL_Transmit>

  return USBD_OK;
 8007376:	2300      	movs	r3, #0
}
 8007378:	4618      	mov	r0, r3
 800737a:	3708      	adds	r7, #8
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2205      	movs	r2, #5
 800738c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007390:	2300      	movs	r3, #0
 8007392:	2200      	movs	r2, #0
 8007394:	2100      	movs	r1, #0
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 fcaa 	bl	8007cf0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3708      	adds	r7, #8
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
	...

080073a8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80073ac:	2200      	movs	r2, #0
 80073ae:	4912      	ldr	r1, [pc, #72]	; (80073f8 <MX_USB_DEVICE_Init+0x50>)
 80073b0:	4812      	ldr	r0, [pc, #72]	; (80073fc <MX_USB_DEVICE_Init+0x54>)
 80073b2:	f7fe ff45 	bl	8006240 <USBD_Init>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d001      	beq.n	80073c0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80073bc:	f7f9 fa06 	bl	80007cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80073c0:	490f      	ldr	r1, [pc, #60]	; (8007400 <MX_USB_DEVICE_Init+0x58>)
 80073c2:	480e      	ldr	r0, [pc, #56]	; (80073fc <MX_USB_DEVICE_Init+0x54>)
 80073c4:	f7fe ff74 	bl	80062b0 <USBD_RegisterClass>
 80073c8:	4603      	mov	r3, r0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d001      	beq.n	80073d2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80073ce:	f7f9 f9fd 	bl	80007cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80073d2:	490c      	ldr	r1, [pc, #48]	; (8007404 <MX_USB_DEVICE_Init+0x5c>)
 80073d4:	4809      	ldr	r0, [pc, #36]	; (80073fc <MX_USB_DEVICE_Init+0x54>)
 80073d6:	f7fe fe97 	bl	8006108 <USBD_CDC_RegisterInterface>
 80073da:	4603      	mov	r3, r0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d001      	beq.n	80073e4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80073e0:	f7f9 f9f4 	bl	80007cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80073e4:	4805      	ldr	r0, [pc, #20]	; (80073fc <MX_USB_DEVICE_Init+0x54>)
 80073e6:	f7fe ff89 	bl	80062fc <USBD_Start>
 80073ea:	4603      	mov	r3, r0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d001      	beq.n	80073f4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80073f0:	f7f9 f9ec 	bl	80007cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80073f4:	bf00      	nop
 80073f6:	bd80      	pop	{r7, pc}
 80073f8:	20000130 	.word	0x20000130
 80073fc:	200007a0 	.word	0x200007a0
 8007400:	2000001c 	.word	0x2000001c
 8007404:	20000120 	.word	0x20000120

08007408 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800740c:	2200      	movs	r2, #0
 800740e:	4905      	ldr	r1, [pc, #20]	; (8007424 <CDC_Init_FS+0x1c>)
 8007410:	4805      	ldr	r0, [pc, #20]	; (8007428 <CDC_Init_FS+0x20>)
 8007412:	f7fe fe8f 	bl	8006134 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007416:	4905      	ldr	r1, [pc, #20]	; (800742c <CDC_Init_FS+0x24>)
 8007418:	4803      	ldr	r0, [pc, #12]	; (8007428 <CDC_Init_FS+0x20>)
 800741a:	f7fe fea4 	bl	8006166 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800741e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007420:	4618      	mov	r0, r3
 8007422:	bd80      	pop	{r7, pc}
 8007424:	20000e54 	.word	0x20000e54
 8007428:	200007a0 	.word	0x200007a0
 800742c:	20000a6c 	.word	0x20000a6c

08007430 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007430:	b480      	push	{r7}
 8007432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007434:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007436:	4618      	mov	r0, r3
 8007438:	46bd      	mov	sp, r7
 800743a:	bc80      	pop	{r7}
 800743c:	4770      	bx	lr
	...

08007440 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
 8007446:	4603      	mov	r3, r0
 8007448:	6039      	str	r1, [r7, #0]
 800744a:	71fb      	strb	r3, [r7, #7]
 800744c:	4613      	mov	r3, r2
 800744e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007450:	79fb      	ldrb	r3, [r7, #7]
 8007452:	2b23      	cmp	r3, #35	; 0x23
 8007454:	d84a      	bhi.n	80074ec <CDC_Control_FS+0xac>
 8007456:	a201      	add	r2, pc, #4	; (adr r2, 800745c <CDC_Control_FS+0x1c>)
 8007458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800745c:	080074ed 	.word	0x080074ed
 8007460:	080074ed 	.word	0x080074ed
 8007464:	080074ed 	.word	0x080074ed
 8007468:	080074ed 	.word	0x080074ed
 800746c:	080074ed 	.word	0x080074ed
 8007470:	080074ed 	.word	0x080074ed
 8007474:	080074ed 	.word	0x080074ed
 8007478:	080074ed 	.word	0x080074ed
 800747c:	080074ed 	.word	0x080074ed
 8007480:	080074ed 	.word	0x080074ed
 8007484:	080074ed 	.word	0x080074ed
 8007488:	080074ed 	.word	0x080074ed
 800748c:	080074ed 	.word	0x080074ed
 8007490:	080074ed 	.word	0x080074ed
 8007494:	080074ed 	.word	0x080074ed
 8007498:	080074ed 	.word	0x080074ed
 800749c:	080074ed 	.word	0x080074ed
 80074a0:	080074ed 	.word	0x080074ed
 80074a4:	080074ed 	.word	0x080074ed
 80074a8:	080074ed 	.word	0x080074ed
 80074ac:	080074ed 	.word	0x080074ed
 80074b0:	080074ed 	.word	0x080074ed
 80074b4:	080074ed 	.word	0x080074ed
 80074b8:	080074ed 	.word	0x080074ed
 80074bc:	080074ed 	.word	0x080074ed
 80074c0:	080074ed 	.word	0x080074ed
 80074c4:	080074ed 	.word	0x080074ed
 80074c8:	080074ed 	.word	0x080074ed
 80074cc:	080074ed 	.word	0x080074ed
 80074d0:	080074ed 	.word	0x080074ed
 80074d4:	080074ed 	.word	0x080074ed
 80074d8:	080074ed 	.word	0x080074ed
 80074dc:	080074ed 	.word	0x080074ed
 80074e0:	080074ed 	.word	0x080074ed
 80074e4:	080074ed 	.word	0x080074ed
 80074e8:	080074ed 	.word	0x080074ed
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80074ec:	bf00      	nop
  }

  return (USBD_OK);
 80074ee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bc80      	pop	{r7}
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop

080074fc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b086      	sub	sp, #24
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007506:	6879      	ldr	r1, [r7, #4]
 8007508:	4844      	ldr	r0, [pc, #272]	; (800761c <CDC_Receive_FS+0x120>)
 800750a:	f7fe fe2c 	bl	8006166 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800750e:	4843      	ldr	r0, [pc, #268]	; (800761c <CDC_Receive_FS+0x120>)
 8007510:	f7fe fe6b 	bl	80061ea <USBD_CDC_ReceivePacket>
  if(*Len == 61) // There is data received
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	2b3d      	cmp	r3, #61	; 0x3d
 800751a:	d129      	bne.n	8007570 <CDC_Receive_FS+0x74>
  {
//	  __HAL_RCC_TIM1_CLK_DISABLE();//stop clocking interrupt timer
	  // 8 bits buffer to 16 bits buffer transfer
	 for (int i = 0, j = 0; i < 30; ++i, j+= 2)
 800751c:	2300      	movs	r3, #0
 800751e:	617b      	str	r3, [r7, #20]
 8007520:	2300      	movs	r3, #0
 8007522:	613b      	str	r3, [r7, #16]
 8007524:	e021      	b.n	800756a <CDC_Receive_FS+0x6e>
	 {
		 aOutputWave[i+(UserRxBufferFS[60]*30)] =
				 (UserRxBufferFS[j] << 8) | UserRxBufferFS[j + 1];
 8007526:	4a3e      	ldr	r2, [pc, #248]	; (8007620 <CDC_Receive_FS+0x124>)
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	4413      	add	r3, r2
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	021b      	lsls	r3, r3, #8
 8007530:	b21a      	sxth	r2, r3
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	3301      	adds	r3, #1
 8007536:	493a      	ldr	r1, [pc, #232]	; (8007620 <CDC_Receive_FS+0x124>)
 8007538:	5ccb      	ldrb	r3, [r1, r3]
 800753a:	b21b      	sxth	r3, r3
 800753c:	4313      	orrs	r3, r2
 800753e:	b219      	sxth	r1, r3
		 aOutputWave[i+(UserRxBufferFS[60]*30)] =
 8007540:	4b37      	ldr	r3, [pc, #220]	; (8007620 <CDC_Receive_FS+0x124>)
 8007542:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007546:	461a      	mov	r2, r3
 8007548:	4613      	mov	r3, r2
 800754a:	011b      	lsls	r3, r3, #4
 800754c:	1a9b      	subs	r3, r3, r2
 800754e:	005b      	lsls	r3, r3, #1
 8007550:	461a      	mov	r2, r3
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	4413      	add	r3, r2
				 (UserRxBufferFS[j] << 8) | UserRxBufferFS[j + 1];
 8007556:	b289      	uxth	r1, r1
		 aOutputWave[i+(UserRxBufferFS[60]*30)] =
 8007558:	4a32      	ldr	r2, [pc, #200]	; (8007624 <CDC_Receive_FS+0x128>)
 800755a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	 for (int i = 0, j = 0; i < 30; ++i, j+= 2)
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	3301      	adds	r3, #1
 8007562:	617b      	str	r3, [r7, #20]
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	3302      	adds	r3, #2
 8007568:	613b      	str	r3, [r7, #16]
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	2b1d      	cmp	r3, #29
 800756e:	ddda      	ble.n	8007526 <CDC_Receive_FS+0x2a>
	 }
//	  CDC_Transmit_FS(buffer, sizeof(buffer));
//	  NewDataFromUsb = 0;
//	  __HAL_RCC_TIM1_CLK_ENABLE();//start clocking interrupt timer
  }
  if(*Len == 1) // There is command received
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2b01      	cmp	r3, #1
 8007576:	d135      	bne.n	80075e4 <CDC_Receive_FS+0xe8>
  {
	  if(UserRxBufferFS[0] == USB_DEVICE_START)
 8007578:	4b29      	ldr	r3, [pc, #164]	; (8007620 <CDC_Receive_FS+0x124>)
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	2b55      	cmp	r3, #85	; 0x55
 800757e:	d115      	bne.n	80075ac <CDC_Receive_FS+0xb0>
	  {
		  __HAL_RCC_TIM1_CLK_ENABLE();//start clocking interrupt timer
 8007580:	4b29      	ldr	r3, [pc, #164]	; (8007628 <CDC_Receive_FS+0x12c>)
 8007582:	699b      	ldr	r3, [r3, #24]
 8007584:	4a28      	ldr	r2, [pc, #160]	; (8007628 <CDC_Receive_FS+0x12c>)
 8007586:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800758a:	6193      	str	r3, [r2, #24]
 800758c:	4b26      	ldr	r3, [pc, #152]	; (8007628 <CDC_Receive_FS+0x12c>)
 800758e:	699b      	ldr	r3, [r3, #24]
 8007590:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007594:	60bb      	str	r3, [r7, #8]
 8007596:	68bb      	ldr	r3, [r7, #8]
		  ReturnedCommand = USB_DEVICE_START;
 8007598:	4b24      	ldr	r3, [pc, #144]	; (800762c <CDC_Receive_FS+0x130>)
 800759a:	2255      	movs	r2, #85	; 0x55
 800759c:	701a      	strb	r2, [r3, #0]
		  CDC_Transmit_FS(&ReturnedCommand, 0x01); //issue feedback to PC
 800759e:	2101      	movs	r1, #1
 80075a0:	4822      	ldr	r0, [pc, #136]	; (800762c <CDC_Receive_FS+0x130>)
 80075a2:	f000 f849 	bl	8007638 <CDC_Transmit_FS>
		  retWave = 1; // notification for wave return
 80075a6:	4b22      	ldr	r3, [pc, #136]	; (8007630 <CDC_Receive_FS+0x134>)
 80075a8:	2201      	movs	r2, #1
 80075aa:	701a      	strb	r2, [r3, #0]
	  }
	  if(UserRxBufferFS[0] == USB_DEVICE_STOP)
 80075ac:	4b1c      	ldr	r3, [pc, #112]	; (8007620 <CDC_Receive_FS+0x124>)
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	2baa      	cmp	r3, #170	; 0xaa
 80075b2:	d10c      	bne.n	80075ce <CDC_Receive_FS+0xd2>
	  {
		  __HAL_RCC_TIM1_CLK_DISABLE();//stop clocking interrupt timer
 80075b4:	4b1c      	ldr	r3, [pc, #112]	; (8007628 <CDC_Receive_FS+0x12c>)
 80075b6:	699b      	ldr	r3, [r3, #24]
 80075b8:	4a1b      	ldr	r2, [pc, #108]	; (8007628 <CDC_Receive_FS+0x12c>)
 80075ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80075be:	6193      	str	r3, [r2, #24]
		  ReturnedCommand = USB_DEVICE_STOP;
 80075c0:	4b1a      	ldr	r3, [pc, #104]	; (800762c <CDC_Receive_FS+0x130>)
 80075c2:	22aa      	movs	r2, #170	; 0xaa
 80075c4:	701a      	strb	r2, [r3, #0]
		  CDC_Transmit_FS(&ReturnedCommand, 0x01);
 80075c6:	2101      	movs	r1, #1
 80075c8:	4818      	ldr	r0, [pc, #96]	; (800762c <CDC_Receive_FS+0x130>)
 80075ca:	f000 f835 	bl	8007638 <CDC_Transmit_FS>
		  //issue feedback to PC
	  }
	  if(UserRxBufferFS[0] == USB_DEVICE_TYPE)
 80075ce:	4b14      	ldr	r3, [pc, #80]	; (8007620 <CDC_Receive_FS+0x124>)
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d106      	bne.n	80075e4 <CDC_Receive_FS+0xe8>
	  {
		  ReturnedCommand = USB_DEVICE_TYPE;
 80075d6:	4b15      	ldr	r3, [pc, #84]	; (800762c <CDC_Receive_FS+0x130>)
 80075d8:	2200      	movs	r2, #0
 80075da:	701a      	strb	r2, [r3, #0]
		  CDC_Transmit_FS(&ReturnedCommand, 0x01);
 80075dc:	2101      	movs	r1, #1
 80075de:	4813      	ldr	r0, [pc, #76]	; (800762c <CDC_Receive_FS+0x130>)
 80075e0:	f000 f82a 	bl	8007638 <CDC_Transmit_FS>
	  	  // Say to PC that this is "Lite"
	  }
  }
  if(*Len==8) //There is configuration received
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2b08      	cmp	r3, #8
 80075ea:	d111      	bne.n	8007610 <CDC_Receive_FS+0x114>
  {
	  for(int i =0; i<8; ++i)
 80075ec:	2300      	movs	r3, #0
 80075ee:	60fb      	str	r3, [r7, #12]
 80075f0:	e00b      	b.n	800760a <CDC_Receive_FS+0x10e>
		  aConfig[i]= UserRxBufferFS[i];
 80075f2:	4a0b      	ldr	r2, [pc, #44]	; (8007620 <CDC_Receive_FS+0x124>)
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	4413      	add	r3, r2
 80075f8:	7819      	ldrb	r1, [r3, #0]
 80075fa:	4a0e      	ldr	r2, [pc, #56]	; (8007634 <CDC_Receive_FS+0x138>)
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	4413      	add	r3, r2
 8007600:	460a      	mov	r2, r1
 8007602:	701a      	strb	r2, [r3, #0]
	  for(int i =0; i<8; ++i)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	3301      	adds	r3, #1
 8007608:	60fb      	str	r3, [r7, #12]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2b07      	cmp	r3, #7
 800760e:	ddf0      	ble.n	80075f2 <CDC_Receive_FS+0xf6>
  }
  return (USBD_OK);
 8007610:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007612:	4618      	mov	r0, r3
 8007614:	3718      	adds	r7, #24
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
 800761a:	bf00      	nop
 800761c:	200007a0 	.word	0x200007a0
 8007620:	20000a6c 	.word	0x20000a6c
 8007624:	20000204 	.word	0x20000204
 8007628:	40021000 	.word	0x40021000
 800762c:	2000123c 	.word	0x2000123c
 8007630:	200004d4 	.word	0x200004d4
 8007634:	20000a64 	.word	0x20000a64

08007638 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	460b      	mov	r3, r1
 8007642:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007644:	2300      	movs	r3, #0
 8007646:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007648:	4b0d      	ldr	r3, [pc, #52]	; (8007680 <CDC_Transmit_FS+0x48>)
 800764a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800764e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007656:	2b00      	cmp	r3, #0
 8007658:	d001      	beq.n	800765e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800765a:	2301      	movs	r3, #1
 800765c:	e00b      	b.n	8007676 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800765e:	887b      	ldrh	r3, [r7, #2]
 8007660:	461a      	mov	r2, r3
 8007662:	6879      	ldr	r1, [r7, #4]
 8007664:	4806      	ldr	r0, [pc, #24]	; (8007680 <CDC_Transmit_FS+0x48>)
 8007666:	f7fe fd65 	bl	8006134 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800766a:	4805      	ldr	r0, [pc, #20]	; (8007680 <CDC_Transmit_FS+0x48>)
 800766c:	f7fe fd8e 	bl	800618c <USBD_CDC_TransmitPacket>
 8007670:	4603      	mov	r3, r0
 8007672:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007674:	7bfb      	ldrb	r3, [r7, #15]
}
 8007676:	4618      	mov	r0, r3
 8007678:	3710      	adds	r7, #16
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	200007a0 	.word	0x200007a0

08007684 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	4603      	mov	r3, r0
 800768c:	6039      	str	r1, [r7, #0]
 800768e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	2212      	movs	r2, #18
 8007694:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007696:	4b03      	ldr	r3, [pc, #12]	; (80076a4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007698:	4618      	mov	r0, r3
 800769a:	370c      	adds	r7, #12
 800769c:	46bd      	mov	sp, r7
 800769e:	bc80      	pop	{r7}
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	2000014c 	.word	0x2000014c

080076a8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	4603      	mov	r3, r0
 80076b0:	6039      	str	r1, [r7, #0]
 80076b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	2204      	movs	r2, #4
 80076b8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80076ba:	4b03      	ldr	r3, [pc, #12]	; (80076c8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80076bc:	4618      	mov	r0, r3
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bc80      	pop	{r7}
 80076c4:	4770      	bx	lr
 80076c6:	bf00      	nop
 80076c8:	20000160 	.word	0x20000160

080076cc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b082      	sub	sp, #8
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	4603      	mov	r3, r0
 80076d4:	6039      	str	r1, [r7, #0]
 80076d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80076d8:	79fb      	ldrb	r3, [r7, #7]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d105      	bne.n	80076ea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80076de:	683a      	ldr	r2, [r7, #0]
 80076e0:	4907      	ldr	r1, [pc, #28]	; (8007700 <USBD_FS_ProductStrDescriptor+0x34>)
 80076e2:	4808      	ldr	r0, [pc, #32]	; (8007704 <USBD_FS_ProductStrDescriptor+0x38>)
 80076e4:	f7ff fd82 	bl	80071ec <USBD_GetString>
 80076e8:	e004      	b.n	80076f4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80076ea:	683a      	ldr	r2, [r7, #0]
 80076ec:	4904      	ldr	r1, [pc, #16]	; (8007700 <USBD_FS_ProductStrDescriptor+0x34>)
 80076ee:	4805      	ldr	r0, [pc, #20]	; (8007704 <USBD_FS_ProductStrDescriptor+0x38>)
 80076f0:	f7ff fd7c 	bl	80071ec <USBD_GetString>
  }
  return USBD_StrDesc;
 80076f4:	4b02      	ldr	r3, [pc, #8]	; (8007700 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3708      	adds	r7, #8
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	20001240 	.word	0x20001240
 8007704:	08008ea0 	.word	0x08008ea0

08007708 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
 800770e:	4603      	mov	r3, r0
 8007710:	6039      	str	r1, [r7, #0]
 8007712:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007714:	683a      	ldr	r2, [r7, #0]
 8007716:	4904      	ldr	r1, [pc, #16]	; (8007728 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007718:	4804      	ldr	r0, [pc, #16]	; (800772c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800771a:	f7ff fd67 	bl	80071ec <USBD_GetString>
  return USBD_StrDesc;
 800771e:	4b02      	ldr	r3, [pc, #8]	; (8007728 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007720:	4618      	mov	r0, r3
 8007722:	3708      	adds	r7, #8
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	20001240 	.word	0x20001240
 800772c:	08008eb8 	.word	0x08008eb8

08007730 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	4603      	mov	r3, r0
 8007738:	6039      	str	r1, [r7, #0]
 800773a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	221a      	movs	r2, #26
 8007740:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007742:	f000 f843 	bl	80077cc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007746:	4b02      	ldr	r3, [pc, #8]	; (8007750 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007748:	4618      	mov	r0, r3
 800774a:	3708      	adds	r7, #8
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}
 8007750:	20000164 	.word	0x20000164

08007754 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b082      	sub	sp, #8
 8007758:	af00      	add	r7, sp, #0
 800775a:	4603      	mov	r3, r0
 800775c:	6039      	str	r1, [r7, #0]
 800775e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007760:	79fb      	ldrb	r3, [r7, #7]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d105      	bne.n	8007772 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007766:	683a      	ldr	r2, [r7, #0]
 8007768:	4907      	ldr	r1, [pc, #28]	; (8007788 <USBD_FS_ConfigStrDescriptor+0x34>)
 800776a:	4808      	ldr	r0, [pc, #32]	; (800778c <USBD_FS_ConfigStrDescriptor+0x38>)
 800776c:	f7ff fd3e 	bl	80071ec <USBD_GetString>
 8007770:	e004      	b.n	800777c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007772:	683a      	ldr	r2, [r7, #0]
 8007774:	4904      	ldr	r1, [pc, #16]	; (8007788 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007776:	4805      	ldr	r0, [pc, #20]	; (800778c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007778:	f7ff fd38 	bl	80071ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800777c:	4b02      	ldr	r3, [pc, #8]	; (8007788 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800777e:	4618      	mov	r0, r3
 8007780:	3708      	adds	r7, #8
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	20001240 	.word	0x20001240
 800778c:	08008ec8 	.word	0x08008ec8

08007790 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b082      	sub	sp, #8
 8007794:	af00      	add	r7, sp, #0
 8007796:	4603      	mov	r3, r0
 8007798:	6039      	str	r1, [r7, #0]
 800779a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800779c:	79fb      	ldrb	r3, [r7, #7]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d105      	bne.n	80077ae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80077a2:	683a      	ldr	r2, [r7, #0]
 80077a4:	4907      	ldr	r1, [pc, #28]	; (80077c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80077a6:	4808      	ldr	r0, [pc, #32]	; (80077c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80077a8:	f7ff fd20 	bl	80071ec <USBD_GetString>
 80077ac:	e004      	b.n	80077b8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80077ae:	683a      	ldr	r2, [r7, #0]
 80077b0:	4904      	ldr	r1, [pc, #16]	; (80077c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80077b2:	4805      	ldr	r0, [pc, #20]	; (80077c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80077b4:	f7ff fd1a 	bl	80071ec <USBD_GetString>
  }
  return USBD_StrDesc;
 80077b8:	4b02      	ldr	r3, [pc, #8]	; (80077c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3708      	adds	r7, #8
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	20001240 	.word	0x20001240
 80077c8:	08008ed4 	.word	0x08008ed4

080077cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80077d2:	4b0f      	ldr	r3, [pc, #60]	; (8007810 <Get_SerialNum+0x44>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80077d8:	4b0e      	ldr	r3, [pc, #56]	; (8007814 <Get_SerialNum+0x48>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80077de:	4b0e      	ldr	r3, [pc, #56]	; (8007818 <Get_SerialNum+0x4c>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80077e4:	68fa      	ldr	r2, [r7, #12]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	4413      	add	r3, r2
 80077ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d009      	beq.n	8007806 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80077f2:	2208      	movs	r2, #8
 80077f4:	4909      	ldr	r1, [pc, #36]	; (800781c <Get_SerialNum+0x50>)
 80077f6:	68f8      	ldr	r0, [r7, #12]
 80077f8:	f000 f814 	bl	8007824 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80077fc:	2204      	movs	r2, #4
 80077fe:	4908      	ldr	r1, [pc, #32]	; (8007820 <Get_SerialNum+0x54>)
 8007800:	68b8      	ldr	r0, [r7, #8]
 8007802:	f000 f80f 	bl	8007824 <IntToUnicode>
  }
}
 8007806:	bf00      	nop
 8007808:	3710      	adds	r7, #16
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	1ffff7e8 	.word	0x1ffff7e8
 8007814:	1ffff7ec 	.word	0x1ffff7ec
 8007818:	1ffff7f0 	.word	0x1ffff7f0
 800781c:	20000166 	.word	0x20000166
 8007820:	20000176 	.word	0x20000176

08007824 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007824:	b480      	push	{r7}
 8007826:	b087      	sub	sp, #28
 8007828:	af00      	add	r7, sp, #0
 800782a:	60f8      	str	r0, [r7, #12]
 800782c:	60b9      	str	r1, [r7, #8]
 800782e:	4613      	mov	r3, r2
 8007830:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007832:	2300      	movs	r3, #0
 8007834:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007836:	2300      	movs	r3, #0
 8007838:	75fb      	strb	r3, [r7, #23]
 800783a:	e027      	b.n	800788c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	0f1b      	lsrs	r3, r3, #28
 8007840:	2b09      	cmp	r3, #9
 8007842:	d80b      	bhi.n	800785c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	0f1b      	lsrs	r3, r3, #28
 8007848:	b2da      	uxtb	r2, r3
 800784a:	7dfb      	ldrb	r3, [r7, #23]
 800784c:	005b      	lsls	r3, r3, #1
 800784e:	4619      	mov	r1, r3
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	440b      	add	r3, r1
 8007854:	3230      	adds	r2, #48	; 0x30
 8007856:	b2d2      	uxtb	r2, r2
 8007858:	701a      	strb	r2, [r3, #0]
 800785a:	e00a      	b.n	8007872 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	0f1b      	lsrs	r3, r3, #28
 8007860:	b2da      	uxtb	r2, r3
 8007862:	7dfb      	ldrb	r3, [r7, #23]
 8007864:	005b      	lsls	r3, r3, #1
 8007866:	4619      	mov	r1, r3
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	440b      	add	r3, r1
 800786c:	3237      	adds	r2, #55	; 0x37
 800786e:	b2d2      	uxtb	r2, r2
 8007870:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	011b      	lsls	r3, r3, #4
 8007876:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007878:	7dfb      	ldrb	r3, [r7, #23]
 800787a:	005b      	lsls	r3, r3, #1
 800787c:	3301      	adds	r3, #1
 800787e:	68ba      	ldr	r2, [r7, #8]
 8007880:	4413      	add	r3, r2
 8007882:	2200      	movs	r2, #0
 8007884:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007886:	7dfb      	ldrb	r3, [r7, #23]
 8007888:	3301      	adds	r3, #1
 800788a:	75fb      	strb	r3, [r7, #23]
 800788c:	7dfa      	ldrb	r2, [r7, #23]
 800788e:	79fb      	ldrb	r3, [r7, #7]
 8007890:	429a      	cmp	r2, r3
 8007892:	d3d3      	bcc.n	800783c <IntToUnicode+0x18>
  }
}
 8007894:	bf00      	nop
 8007896:	bf00      	nop
 8007898:	371c      	adds	r7, #28
 800789a:	46bd      	mov	sp, r7
 800789c:	bc80      	pop	{r7}
 800789e:	4770      	bx	lr

080078a0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b084      	sub	sp, #16
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a0d      	ldr	r2, [pc, #52]	; (80078e4 <HAL_PCD_MspInit+0x44>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d113      	bne.n	80078da <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80078b2:	4b0d      	ldr	r3, [pc, #52]	; (80078e8 <HAL_PCD_MspInit+0x48>)
 80078b4:	69db      	ldr	r3, [r3, #28]
 80078b6:	4a0c      	ldr	r2, [pc, #48]	; (80078e8 <HAL_PCD_MspInit+0x48>)
 80078b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80078bc:	61d3      	str	r3, [r2, #28]
 80078be:	4b0a      	ldr	r3, [pc, #40]	; (80078e8 <HAL_PCD_MspInit+0x48>)
 80078c0:	69db      	ldr	r3, [r3, #28]
 80078c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078c6:	60fb      	str	r3, [r7, #12]
 80078c8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80078ca:	2200      	movs	r2, #0
 80078cc:	2100      	movs	r1, #0
 80078ce:	2014      	movs	r0, #20
 80078d0:	f7f9 f9d7 	bl	8000c82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80078d4:	2014      	movs	r0, #20
 80078d6:	f7f9 f9f0 	bl	8000cba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80078da:	bf00      	nop
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	bf00      	nop
 80078e4:	40005c00 	.word	0x40005c00
 80078e8:	40021000 	.word	0x40021000

080078ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007900:	4619      	mov	r1, r3
 8007902:	4610      	mov	r0, r2
 8007904:	f7fe fd42 	bl	800638c <USBD_LL_SetupStage>
}
 8007908:	bf00      	nop
 800790a:	3708      	adds	r7, #8
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	460b      	mov	r3, r1
 800791a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007922:	78fa      	ldrb	r2, [r7, #3]
 8007924:	6879      	ldr	r1, [r7, #4]
 8007926:	4613      	mov	r3, r2
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	4413      	add	r3, r2
 800792c:	00db      	lsls	r3, r3, #3
 800792e:	440b      	add	r3, r1
 8007930:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	78fb      	ldrb	r3, [r7, #3]
 8007938:	4619      	mov	r1, r3
 800793a:	f7fe fd74 	bl	8006426 <USBD_LL_DataOutStage>
}
 800793e:	bf00      	nop
 8007940:	3708      	adds	r7, #8
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}

08007946 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007946:	b580      	push	{r7, lr}
 8007948:	b082      	sub	sp, #8
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
 800794e:	460b      	mov	r3, r1
 8007950:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007958:	78fa      	ldrb	r2, [r7, #3]
 800795a:	6879      	ldr	r1, [r7, #4]
 800795c:	4613      	mov	r3, r2
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	4413      	add	r3, r2
 8007962:	00db      	lsls	r3, r3, #3
 8007964:	440b      	add	r3, r1
 8007966:	333c      	adds	r3, #60	; 0x3c
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	78fb      	ldrb	r3, [r7, #3]
 800796c:	4619      	mov	r1, r3
 800796e:	f7fe fdcb 	bl	8006508 <USBD_LL_DataInStage>
}
 8007972:	bf00      	nop
 8007974:	3708      	adds	r7, #8
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800797a:	b580      	push	{r7, lr}
 800797c:	b082      	sub	sp, #8
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007988:	4618      	mov	r0, r3
 800798a:	f7fe fedb 	bl	8006744 <USBD_LL_SOF>
}
 800798e:	bf00      	nop
 8007990:	3708      	adds	r7, #8
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007996:	b580      	push	{r7, lr}
 8007998:	b084      	sub	sp, #16
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800799e:	2301      	movs	r3, #1
 80079a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	2b02      	cmp	r3, #2
 80079a8:	d001      	beq.n	80079ae <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80079aa:	f7f8 ff0f 	bl	80007cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80079b4:	7bfa      	ldrb	r2, [r7, #15]
 80079b6:	4611      	mov	r1, r2
 80079b8:	4618      	mov	r0, r3
 80079ba:	f7fe fe8b 	bl	80066d4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80079c4:	4618      	mov	r0, r3
 80079c6:	f7fe fe44 	bl	8006652 <USBD_LL_Reset>
}
 80079ca:	bf00      	nop
 80079cc:	3710      	adds	r7, #16
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
	...

080079d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80079e2:	4618      	mov	r0, r3
 80079e4:	f7fe fe85 	bl	80066f2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	699b      	ldr	r3, [r3, #24]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d005      	beq.n	80079fc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80079f0:	4b04      	ldr	r3, [pc, #16]	; (8007a04 <HAL_PCD_SuspendCallback+0x30>)
 80079f2:	691b      	ldr	r3, [r3, #16]
 80079f4:	4a03      	ldr	r2, [pc, #12]	; (8007a04 <HAL_PCD_SuspendCallback+0x30>)
 80079f6:	f043 0306 	orr.w	r3, r3, #6
 80079fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80079fc:	bf00      	nop
 80079fe:	3708      	adds	r7, #8
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}
 8007a04:	e000ed00 	.word	0xe000ed00

08007a08 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7fe fe7f 	bl	800671a <USBD_LL_Resume>
}
 8007a1c:	bf00      	nop
 8007a1e:	3708      	adds	r7, #8
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007a2c:	4a28      	ldr	r2, [pc, #160]	; (8007ad0 <USBD_LL_Init+0xac>)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4a26      	ldr	r2, [pc, #152]	; (8007ad0 <USBD_LL_Init+0xac>)
 8007a38:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007a3c:	4b24      	ldr	r3, [pc, #144]	; (8007ad0 <USBD_LL_Init+0xac>)
 8007a3e:	4a25      	ldr	r2, [pc, #148]	; (8007ad4 <USBD_LL_Init+0xb0>)
 8007a40:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007a42:	4b23      	ldr	r3, [pc, #140]	; (8007ad0 <USBD_LL_Init+0xac>)
 8007a44:	2208      	movs	r2, #8
 8007a46:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007a48:	4b21      	ldr	r3, [pc, #132]	; (8007ad0 <USBD_LL_Init+0xac>)
 8007a4a:	2202      	movs	r2, #2
 8007a4c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007a4e:	4b20      	ldr	r3, [pc, #128]	; (8007ad0 <USBD_LL_Init+0xac>)
 8007a50:	2200      	movs	r2, #0
 8007a52:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007a54:	4b1e      	ldr	r3, [pc, #120]	; (8007ad0 <USBD_LL_Init+0xac>)
 8007a56:	2200      	movs	r2, #0
 8007a58:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007a5a:	4b1d      	ldr	r3, [pc, #116]	; (8007ad0 <USBD_LL_Init+0xac>)
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007a60:	481b      	ldr	r0, [pc, #108]	; (8007ad0 <USBD_LL_Init+0xac>)
 8007a62:	f7f9 fdc9 	bl	80015f8 <HAL_PCD_Init>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d001      	beq.n	8007a70 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007a6c:	f7f8 feae 	bl	80007cc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007a76:	2318      	movs	r3, #24
 8007a78:	2200      	movs	r2, #0
 8007a7a:	2100      	movs	r1, #0
 8007a7c:	f7fb f90b 	bl	8002c96 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007a86:	2358      	movs	r3, #88	; 0x58
 8007a88:	2200      	movs	r2, #0
 8007a8a:	2180      	movs	r1, #128	; 0x80
 8007a8c:	f7fb f903 	bl	8002c96 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007a96:	23c0      	movs	r3, #192	; 0xc0
 8007a98:	2200      	movs	r2, #0
 8007a9a:	2181      	movs	r1, #129	; 0x81
 8007a9c:	f7fb f8fb 	bl	8002c96 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007aa6:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007aaa:	2200      	movs	r2, #0
 8007aac:	2101      	movs	r1, #1
 8007aae:	f7fb f8f2 	bl	8002c96 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007ab8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007abc:	2200      	movs	r2, #0
 8007abe:	2182      	movs	r1, #130	; 0x82
 8007ac0:	f7fb f8e9 	bl	8002c96 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007ac4:	2300      	movs	r3, #0
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3708      	adds	r7, #8
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	20001440 	.word	0x20001440
 8007ad4:	40005c00 	.word	0x40005c00

08007ad8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007aee:	4618      	mov	r0, r3
 8007af0:	f7f9 fe8d 	bl	800180e <HAL_PCD_Start>
 8007af4:	4603      	mov	r3, r0
 8007af6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007af8:	7bfb      	ldrb	r3, [r7, #15]
 8007afa:	4618      	mov	r0, r3
 8007afc:	f000 f94e 	bl	8007d9c <USBD_Get_USB_Status>
 8007b00:	4603      	mov	r3, r0
 8007b02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b04:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3710      	adds	r7, #16
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}

08007b0e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b084      	sub	sp, #16
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
 8007b16:	4608      	mov	r0, r1
 8007b18:	4611      	mov	r1, r2
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	70fb      	strb	r3, [r7, #3]
 8007b20:	460b      	mov	r3, r1
 8007b22:	70bb      	strb	r3, [r7, #2]
 8007b24:	4613      	mov	r3, r2
 8007b26:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007b36:	78bb      	ldrb	r3, [r7, #2]
 8007b38:	883a      	ldrh	r2, [r7, #0]
 8007b3a:	78f9      	ldrb	r1, [r7, #3]
 8007b3c:	f7fa f807 	bl	8001b4e <HAL_PCD_EP_Open>
 8007b40:	4603      	mov	r3, r0
 8007b42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b44:	7bfb      	ldrb	r3, [r7, #15]
 8007b46:	4618      	mov	r0, r3
 8007b48:	f000 f928 	bl	8007d9c <USBD_Get_USB_Status>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b50:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3710      	adds	r7, #16
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}

08007b5a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b084      	sub	sp, #16
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
 8007b62:	460b      	mov	r3, r1
 8007b64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b66:	2300      	movs	r3, #0
 8007b68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b74:	78fa      	ldrb	r2, [r7, #3]
 8007b76:	4611      	mov	r1, r2
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f7fa f84e 	bl	8001c1a <HAL_PCD_EP_Close>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b82:	7bfb      	ldrb	r3, [r7, #15]
 8007b84:	4618      	mov	r0, r3
 8007b86:	f000 f909 	bl	8007d9c <USBD_Get_USB_Status>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3710      	adds	r7, #16
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007bb2:	78fa      	ldrb	r2, [r7, #3]
 8007bb4:	4611      	mov	r1, r2
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f7fa f90e 	bl	8001dd8 <HAL_PCD_EP_SetStall>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bc0:	7bfb      	ldrb	r3, [r7, #15]
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f000 f8ea 	bl	8007d9c <USBD_Get_USB_Status>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bcc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3710      	adds	r7, #16
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}

08007bd6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b084      	sub	sp, #16
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
 8007bde:	460b      	mov	r3, r1
 8007be0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007be2:	2300      	movs	r3, #0
 8007be4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007be6:	2300      	movs	r3, #0
 8007be8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007bf0:	78fa      	ldrb	r2, [r7, #3]
 8007bf2:	4611      	mov	r1, r2
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f7fa f94f 	bl	8001e98 <HAL_PCD_EP_ClrStall>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bfe:	7bfb      	ldrb	r3, [r7, #15]
 8007c00:	4618      	mov	r0, r3
 8007c02:	f000 f8cb 	bl	8007d9c <USBD_Get_USB_Status>
 8007c06:	4603      	mov	r3, r0
 8007c08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3710      	adds	r7, #16
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b085      	sub	sp, #20
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c26:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007c28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	da0c      	bge.n	8007c4a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007c30:	78fb      	ldrb	r3, [r7, #3]
 8007c32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c36:	68f9      	ldr	r1, [r7, #12]
 8007c38:	1c5a      	adds	r2, r3, #1
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	4413      	add	r3, r2
 8007c40:	00db      	lsls	r3, r3, #3
 8007c42:	440b      	add	r3, r1
 8007c44:	3302      	adds	r3, #2
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	e00b      	b.n	8007c62 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007c4a:	78fb      	ldrb	r3, [r7, #3]
 8007c4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c50:	68f9      	ldr	r1, [r7, #12]
 8007c52:	4613      	mov	r3, r2
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	4413      	add	r3, r2
 8007c58:	00db      	lsls	r3, r3, #3
 8007c5a:	440b      	add	r3, r1
 8007c5c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007c60:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3714      	adds	r7, #20
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bc80      	pop	{r7}
 8007c6a:	4770      	bx	lr

08007c6c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	460b      	mov	r3, r1
 8007c76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c86:	78fa      	ldrb	r2, [r7, #3]
 8007c88:	4611      	mov	r1, r2
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7f9 ff3a 	bl	8001b04 <HAL_PCD_SetAddress>
 8007c90:	4603      	mov	r3, r0
 8007c92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c94:	7bfb      	ldrb	r3, [r7, #15]
 8007c96:	4618      	mov	r0, r3
 8007c98:	f000 f880 	bl	8007d9c <USBD_Get_USB_Status>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ca0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3710      	adds	r7, #16
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}

08007caa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b086      	sub	sp, #24
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	60f8      	str	r0, [r7, #12]
 8007cb2:	607a      	str	r2, [r7, #4]
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	72fb      	strb	r3, [r7, #11]
 8007cba:	4613      	mov	r3, r2
 8007cbc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007ccc:	893b      	ldrh	r3, [r7, #8]
 8007cce:	7af9      	ldrb	r1, [r7, #11]
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	f7fa f83e 	bl	8001d52 <HAL_PCD_EP_Transmit>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cda:	7dfb      	ldrb	r3, [r7, #23]
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f000 f85d 	bl	8007d9c <USBD_Get_USB_Status>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007ce6:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3718      	adds	r7, #24
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b086      	sub	sp, #24
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	607a      	str	r2, [r7, #4]
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	72fb      	strb	r3, [r7, #11]
 8007d00:	4613      	mov	r3, r2
 8007d02:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d04:	2300      	movs	r3, #0
 8007d06:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007d12:	893b      	ldrh	r3, [r7, #8]
 8007d14:	7af9      	ldrb	r1, [r7, #11]
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	f7f9 ffc7 	bl	8001caa <HAL_PCD_EP_Receive>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d20:	7dfb      	ldrb	r3, [r7, #23]
 8007d22:	4618      	mov	r0, r3
 8007d24:	f000 f83a 	bl	8007d9c <USBD_Get_USB_Status>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007d2c:	7dbb      	ldrb	r3, [r7, #22]
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3718      	adds	r7, #24
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b082      	sub	sp, #8
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
 8007d3e:	460b      	mov	r3, r1
 8007d40:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d48:	78fa      	ldrb	r2, [r7, #3]
 8007d4a:	4611      	mov	r1, r2
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7f9 ffe9 	bl	8001d24 <HAL_PCD_EP_GetRxCount>
 8007d52:	4603      	mov	r3, r0
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3708      	adds	r7, #8
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007d64:	4b02      	ldr	r3, [pc, #8]	; (8007d70 <USBD_static_malloc+0x14>)
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	370c      	adds	r7, #12
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bc80      	pop	{r7}
 8007d6e:	4770      	bx	lr
 8007d70:	200004d8 	.word	0x200004d8

08007d74 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b083      	sub	sp, #12
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]

}
 8007d7c:	bf00      	nop
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bc80      	pop	{r7}
 8007d84:	4770      	bx	lr

08007d86 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d86:	b480      	push	{r7}
 8007d88:	b083      	sub	sp, #12
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
 8007d8e:	460b      	mov	r3, r1
 8007d90:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007d92:	bf00      	nop
 8007d94:	370c      	adds	r7, #12
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bc80      	pop	{r7}
 8007d9a:	4770      	bx	lr

08007d9c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b085      	sub	sp, #20
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	4603      	mov	r3, r0
 8007da4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007da6:	2300      	movs	r3, #0
 8007da8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007daa:	79fb      	ldrb	r3, [r7, #7]
 8007dac:	2b03      	cmp	r3, #3
 8007dae:	d817      	bhi.n	8007de0 <USBD_Get_USB_Status+0x44>
 8007db0:	a201      	add	r2, pc, #4	; (adr r2, 8007db8 <USBD_Get_USB_Status+0x1c>)
 8007db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db6:	bf00      	nop
 8007db8:	08007dc9 	.word	0x08007dc9
 8007dbc:	08007dcf 	.word	0x08007dcf
 8007dc0:	08007dd5 	.word	0x08007dd5
 8007dc4:	08007ddb 	.word	0x08007ddb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	73fb      	strb	r3, [r7, #15]
    break;
 8007dcc:	e00b      	b.n	8007de6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007dce:	2302      	movs	r3, #2
 8007dd0:	73fb      	strb	r3, [r7, #15]
    break;
 8007dd2:	e008      	b.n	8007de6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	73fb      	strb	r3, [r7, #15]
    break;
 8007dd8:	e005      	b.n	8007de6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007dda:	2302      	movs	r3, #2
 8007ddc:	73fb      	strb	r3, [r7, #15]
    break;
 8007dde:	e002      	b.n	8007de6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007de0:	2302      	movs	r3, #2
 8007de2:	73fb      	strb	r3, [r7, #15]
    break;
 8007de4:	bf00      	nop
  }
  return usb_status;
 8007de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3714      	adds	r7, #20
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bc80      	pop	{r7}
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop

08007df4 <__libc_init_array>:
 8007df4:	b570      	push	{r4, r5, r6, lr}
 8007df6:	2600      	movs	r6, #0
 8007df8:	4d0c      	ldr	r5, [pc, #48]	; (8007e2c <__libc_init_array+0x38>)
 8007dfa:	4c0d      	ldr	r4, [pc, #52]	; (8007e30 <__libc_init_array+0x3c>)
 8007dfc:	1b64      	subs	r4, r4, r5
 8007dfe:	10a4      	asrs	r4, r4, #2
 8007e00:	42a6      	cmp	r6, r4
 8007e02:	d109      	bne.n	8007e18 <__libc_init_array+0x24>
 8007e04:	f001 f81c 	bl	8008e40 <_init>
 8007e08:	2600      	movs	r6, #0
 8007e0a:	4d0a      	ldr	r5, [pc, #40]	; (8007e34 <__libc_init_array+0x40>)
 8007e0c:	4c0a      	ldr	r4, [pc, #40]	; (8007e38 <__libc_init_array+0x44>)
 8007e0e:	1b64      	subs	r4, r4, r5
 8007e10:	10a4      	asrs	r4, r4, #2
 8007e12:	42a6      	cmp	r6, r4
 8007e14:	d105      	bne.n	8007e22 <__libc_init_array+0x2e>
 8007e16:	bd70      	pop	{r4, r5, r6, pc}
 8007e18:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e1c:	4798      	blx	r3
 8007e1e:	3601      	adds	r6, #1
 8007e20:	e7ee      	b.n	8007e00 <__libc_init_array+0xc>
 8007e22:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e26:	4798      	blx	r3
 8007e28:	3601      	adds	r6, #1
 8007e2a:	e7f2      	b.n	8007e12 <__libc_init_array+0x1e>
 8007e2c:	08008f8c 	.word	0x08008f8c
 8007e30:	08008f8c 	.word	0x08008f8c
 8007e34:	08008f8c 	.word	0x08008f8c
 8007e38:	08008f90 	.word	0x08008f90

08007e3c <memset>:
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	4402      	add	r2, r0
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d100      	bne.n	8007e46 <memset+0xa>
 8007e44:	4770      	bx	lr
 8007e46:	f803 1b01 	strb.w	r1, [r3], #1
 8007e4a:	e7f9      	b.n	8007e40 <memset+0x4>

08007e4c <iprintf>:
 8007e4c:	b40f      	push	{r0, r1, r2, r3}
 8007e4e:	4b0a      	ldr	r3, [pc, #40]	; (8007e78 <iprintf+0x2c>)
 8007e50:	b513      	push	{r0, r1, r4, lr}
 8007e52:	681c      	ldr	r4, [r3, #0]
 8007e54:	b124      	cbz	r4, 8007e60 <iprintf+0x14>
 8007e56:	69a3      	ldr	r3, [r4, #24]
 8007e58:	b913      	cbnz	r3, 8007e60 <iprintf+0x14>
 8007e5a:	4620      	mov	r0, r4
 8007e5c:	f000 f87a 	bl	8007f54 <__sinit>
 8007e60:	ab05      	add	r3, sp, #20
 8007e62:	4620      	mov	r0, r4
 8007e64:	9a04      	ldr	r2, [sp, #16]
 8007e66:	68a1      	ldr	r1, [r4, #8]
 8007e68:	9301      	str	r3, [sp, #4]
 8007e6a:	f000 f995 	bl	8008198 <_vfiprintf_r>
 8007e6e:	b002      	add	sp, #8
 8007e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e74:	b004      	add	sp, #16
 8007e76:	4770      	bx	lr
 8007e78:	20000180 	.word	0x20000180

08007e7c <putchar>:
 8007e7c:	b538      	push	{r3, r4, r5, lr}
 8007e7e:	4b08      	ldr	r3, [pc, #32]	; (8007ea0 <putchar+0x24>)
 8007e80:	4605      	mov	r5, r0
 8007e82:	681c      	ldr	r4, [r3, #0]
 8007e84:	b124      	cbz	r4, 8007e90 <putchar+0x14>
 8007e86:	69a3      	ldr	r3, [r4, #24]
 8007e88:	b913      	cbnz	r3, 8007e90 <putchar+0x14>
 8007e8a:	4620      	mov	r0, r4
 8007e8c:	f000 f862 	bl	8007f54 <__sinit>
 8007e90:	4629      	mov	r1, r5
 8007e92:	4620      	mov	r0, r4
 8007e94:	68a2      	ldr	r2, [r4, #8]
 8007e96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e9a:	f000 bc43 	b.w	8008724 <_putc_r>
 8007e9e:	bf00      	nop
 8007ea0:	20000180 	.word	0x20000180

08007ea4 <std>:
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	b510      	push	{r4, lr}
 8007ea8:	4604      	mov	r4, r0
 8007eaa:	e9c0 3300 	strd	r3, r3, [r0]
 8007eae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007eb2:	6083      	str	r3, [r0, #8]
 8007eb4:	8181      	strh	r1, [r0, #12]
 8007eb6:	6643      	str	r3, [r0, #100]	; 0x64
 8007eb8:	81c2      	strh	r2, [r0, #14]
 8007eba:	6183      	str	r3, [r0, #24]
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	2208      	movs	r2, #8
 8007ec0:	305c      	adds	r0, #92	; 0x5c
 8007ec2:	f7ff ffbb 	bl	8007e3c <memset>
 8007ec6:	4b05      	ldr	r3, [pc, #20]	; (8007edc <std+0x38>)
 8007ec8:	6224      	str	r4, [r4, #32]
 8007eca:	6263      	str	r3, [r4, #36]	; 0x24
 8007ecc:	4b04      	ldr	r3, [pc, #16]	; (8007ee0 <std+0x3c>)
 8007ece:	62a3      	str	r3, [r4, #40]	; 0x28
 8007ed0:	4b04      	ldr	r3, [pc, #16]	; (8007ee4 <std+0x40>)
 8007ed2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ed4:	4b04      	ldr	r3, [pc, #16]	; (8007ee8 <std+0x44>)
 8007ed6:	6323      	str	r3, [r4, #48]	; 0x30
 8007ed8:	bd10      	pop	{r4, pc}
 8007eda:	bf00      	nop
 8007edc:	080087d5 	.word	0x080087d5
 8007ee0:	080087f7 	.word	0x080087f7
 8007ee4:	0800882f 	.word	0x0800882f
 8007ee8:	08008853 	.word	0x08008853

08007eec <_cleanup_r>:
 8007eec:	4901      	ldr	r1, [pc, #4]	; (8007ef4 <_cleanup_r+0x8>)
 8007eee:	f000 b8af 	b.w	8008050 <_fwalk_reent>
 8007ef2:	bf00      	nop
 8007ef4:	08008b2d 	.word	0x08008b2d

08007ef8 <__sfmoreglue>:
 8007ef8:	b570      	push	{r4, r5, r6, lr}
 8007efa:	2568      	movs	r5, #104	; 0x68
 8007efc:	1e4a      	subs	r2, r1, #1
 8007efe:	4355      	muls	r5, r2
 8007f00:	460e      	mov	r6, r1
 8007f02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007f06:	f000 f8c5 	bl	8008094 <_malloc_r>
 8007f0a:	4604      	mov	r4, r0
 8007f0c:	b140      	cbz	r0, 8007f20 <__sfmoreglue+0x28>
 8007f0e:	2100      	movs	r1, #0
 8007f10:	e9c0 1600 	strd	r1, r6, [r0]
 8007f14:	300c      	adds	r0, #12
 8007f16:	60a0      	str	r0, [r4, #8]
 8007f18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007f1c:	f7ff ff8e 	bl	8007e3c <memset>
 8007f20:	4620      	mov	r0, r4
 8007f22:	bd70      	pop	{r4, r5, r6, pc}

08007f24 <__sfp_lock_acquire>:
 8007f24:	4801      	ldr	r0, [pc, #4]	; (8007f2c <__sfp_lock_acquire+0x8>)
 8007f26:	f000 b8b3 	b.w	8008090 <__retarget_lock_acquire_recursive>
 8007f2a:	bf00      	nop
 8007f2c:	20001734 	.word	0x20001734

08007f30 <__sfp_lock_release>:
 8007f30:	4801      	ldr	r0, [pc, #4]	; (8007f38 <__sfp_lock_release+0x8>)
 8007f32:	f000 b8ae 	b.w	8008092 <__retarget_lock_release_recursive>
 8007f36:	bf00      	nop
 8007f38:	20001734 	.word	0x20001734

08007f3c <__sinit_lock_acquire>:
 8007f3c:	4801      	ldr	r0, [pc, #4]	; (8007f44 <__sinit_lock_acquire+0x8>)
 8007f3e:	f000 b8a7 	b.w	8008090 <__retarget_lock_acquire_recursive>
 8007f42:	bf00      	nop
 8007f44:	2000172f 	.word	0x2000172f

08007f48 <__sinit_lock_release>:
 8007f48:	4801      	ldr	r0, [pc, #4]	; (8007f50 <__sinit_lock_release+0x8>)
 8007f4a:	f000 b8a2 	b.w	8008092 <__retarget_lock_release_recursive>
 8007f4e:	bf00      	nop
 8007f50:	2000172f 	.word	0x2000172f

08007f54 <__sinit>:
 8007f54:	b510      	push	{r4, lr}
 8007f56:	4604      	mov	r4, r0
 8007f58:	f7ff fff0 	bl	8007f3c <__sinit_lock_acquire>
 8007f5c:	69a3      	ldr	r3, [r4, #24]
 8007f5e:	b11b      	cbz	r3, 8007f68 <__sinit+0x14>
 8007f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f64:	f7ff bff0 	b.w	8007f48 <__sinit_lock_release>
 8007f68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007f6c:	6523      	str	r3, [r4, #80]	; 0x50
 8007f6e:	4b13      	ldr	r3, [pc, #76]	; (8007fbc <__sinit+0x68>)
 8007f70:	4a13      	ldr	r2, [pc, #76]	; (8007fc0 <__sinit+0x6c>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	62a2      	str	r2, [r4, #40]	; 0x28
 8007f76:	42a3      	cmp	r3, r4
 8007f78:	bf08      	it	eq
 8007f7a:	2301      	moveq	r3, #1
 8007f7c:	4620      	mov	r0, r4
 8007f7e:	bf08      	it	eq
 8007f80:	61a3      	streq	r3, [r4, #24]
 8007f82:	f000 f81f 	bl	8007fc4 <__sfp>
 8007f86:	6060      	str	r0, [r4, #4]
 8007f88:	4620      	mov	r0, r4
 8007f8a:	f000 f81b 	bl	8007fc4 <__sfp>
 8007f8e:	60a0      	str	r0, [r4, #8]
 8007f90:	4620      	mov	r0, r4
 8007f92:	f000 f817 	bl	8007fc4 <__sfp>
 8007f96:	2200      	movs	r2, #0
 8007f98:	2104      	movs	r1, #4
 8007f9a:	60e0      	str	r0, [r4, #12]
 8007f9c:	6860      	ldr	r0, [r4, #4]
 8007f9e:	f7ff ff81 	bl	8007ea4 <std>
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	2109      	movs	r1, #9
 8007fa6:	68a0      	ldr	r0, [r4, #8]
 8007fa8:	f7ff ff7c 	bl	8007ea4 <std>
 8007fac:	2202      	movs	r2, #2
 8007fae:	2112      	movs	r1, #18
 8007fb0:	68e0      	ldr	r0, [r4, #12]
 8007fb2:	f7ff ff77 	bl	8007ea4 <std>
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	61a3      	str	r3, [r4, #24]
 8007fba:	e7d1      	b.n	8007f60 <__sinit+0xc>
 8007fbc:	08008ef4 	.word	0x08008ef4
 8007fc0:	08007eed 	.word	0x08007eed

08007fc4 <__sfp>:
 8007fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fc6:	4607      	mov	r7, r0
 8007fc8:	f7ff ffac 	bl	8007f24 <__sfp_lock_acquire>
 8007fcc:	4b1e      	ldr	r3, [pc, #120]	; (8008048 <__sfp+0x84>)
 8007fce:	681e      	ldr	r6, [r3, #0]
 8007fd0:	69b3      	ldr	r3, [r6, #24]
 8007fd2:	b913      	cbnz	r3, 8007fda <__sfp+0x16>
 8007fd4:	4630      	mov	r0, r6
 8007fd6:	f7ff ffbd 	bl	8007f54 <__sinit>
 8007fda:	3648      	adds	r6, #72	; 0x48
 8007fdc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007fe0:	3b01      	subs	r3, #1
 8007fe2:	d503      	bpl.n	8007fec <__sfp+0x28>
 8007fe4:	6833      	ldr	r3, [r6, #0]
 8007fe6:	b30b      	cbz	r3, 800802c <__sfp+0x68>
 8007fe8:	6836      	ldr	r6, [r6, #0]
 8007fea:	e7f7      	b.n	8007fdc <__sfp+0x18>
 8007fec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ff0:	b9d5      	cbnz	r5, 8008028 <__sfp+0x64>
 8007ff2:	4b16      	ldr	r3, [pc, #88]	; (800804c <__sfp+0x88>)
 8007ff4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007ff8:	60e3      	str	r3, [r4, #12]
 8007ffa:	6665      	str	r5, [r4, #100]	; 0x64
 8007ffc:	f000 f847 	bl	800808e <__retarget_lock_init_recursive>
 8008000:	f7ff ff96 	bl	8007f30 <__sfp_lock_release>
 8008004:	2208      	movs	r2, #8
 8008006:	4629      	mov	r1, r5
 8008008:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800800c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008010:	6025      	str	r5, [r4, #0]
 8008012:	61a5      	str	r5, [r4, #24]
 8008014:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008018:	f7ff ff10 	bl	8007e3c <memset>
 800801c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008020:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008024:	4620      	mov	r0, r4
 8008026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008028:	3468      	adds	r4, #104	; 0x68
 800802a:	e7d9      	b.n	8007fe0 <__sfp+0x1c>
 800802c:	2104      	movs	r1, #4
 800802e:	4638      	mov	r0, r7
 8008030:	f7ff ff62 	bl	8007ef8 <__sfmoreglue>
 8008034:	4604      	mov	r4, r0
 8008036:	6030      	str	r0, [r6, #0]
 8008038:	2800      	cmp	r0, #0
 800803a:	d1d5      	bne.n	8007fe8 <__sfp+0x24>
 800803c:	f7ff ff78 	bl	8007f30 <__sfp_lock_release>
 8008040:	230c      	movs	r3, #12
 8008042:	603b      	str	r3, [r7, #0]
 8008044:	e7ee      	b.n	8008024 <__sfp+0x60>
 8008046:	bf00      	nop
 8008048:	08008ef4 	.word	0x08008ef4
 800804c:	ffff0001 	.word	0xffff0001

08008050 <_fwalk_reent>:
 8008050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008054:	4606      	mov	r6, r0
 8008056:	4688      	mov	r8, r1
 8008058:	2700      	movs	r7, #0
 800805a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800805e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008062:	f1b9 0901 	subs.w	r9, r9, #1
 8008066:	d505      	bpl.n	8008074 <_fwalk_reent+0x24>
 8008068:	6824      	ldr	r4, [r4, #0]
 800806a:	2c00      	cmp	r4, #0
 800806c:	d1f7      	bne.n	800805e <_fwalk_reent+0xe>
 800806e:	4638      	mov	r0, r7
 8008070:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008074:	89ab      	ldrh	r3, [r5, #12]
 8008076:	2b01      	cmp	r3, #1
 8008078:	d907      	bls.n	800808a <_fwalk_reent+0x3a>
 800807a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800807e:	3301      	adds	r3, #1
 8008080:	d003      	beq.n	800808a <_fwalk_reent+0x3a>
 8008082:	4629      	mov	r1, r5
 8008084:	4630      	mov	r0, r6
 8008086:	47c0      	blx	r8
 8008088:	4307      	orrs	r7, r0
 800808a:	3568      	adds	r5, #104	; 0x68
 800808c:	e7e9      	b.n	8008062 <_fwalk_reent+0x12>

0800808e <__retarget_lock_init_recursive>:
 800808e:	4770      	bx	lr

08008090 <__retarget_lock_acquire_recursive>:
 8008090:	4770      	bx	lr

08008092 <__retarget_lock_release_recursive>:
 8008092:	4770      	bx	lr

08008094 <_malloc_r>:
 8008094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008096:	1ccd      	adds	r5, r1, #3
 8008098:	f025 0503 	bic.w	r5, r5, #3
 800809c:	3508      	adds	r5, #8
 800809e:	2d0c      	cmp	r5, #12
 80080a0:	bf38      	it	cc
 80080a2:	250c      	movcc	r5, #12
 80080a4:	2d00      	cmp	r5, #0
 80080a6:	4606      	mov	r6, r0
 80080a8:	db01      	blt.n	80080ae <_malloc_r+0x1a>
 80080aa:	42a9      	cmp	r1, r5
 80080ac:	d903      	bls.n	80080b6 <_malloc_r+0x22>
 80080ae:	230c      	movs	r3, #12
 80080b0:	6033      	str	r3, [r6, #0]
 80080b2:	2000      	movs	r0, #0
 80080b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080b6:	f000 fdf9 	bl	8008cac <__malloc_lock>
 80080ba:	4921      	ldr	r1, [pc, #132]	; (8008140 <_malloc_r+0xac>)
 80080bc:	680a      	ldr	r2, [r1, #0]
 80080be:	4614      	mov	r4, r2
 80080c0:	b99c      	cbnz	r4, 80080ea <_malloc_r+0x56>
 80080c2:	4f20      	ldr	r7, [pc, #128]	; (8008144 <_malloc_r+0xb0>)
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	b923      	cbnz	r3, 80080d2 <_malloc_r+0x3e>
 80080c8:	4621      	mov	r1, r4
 80080ca:	4630      	mov	r0, r6
 80080cc:	f000 fb72 	bl	80087b4 <_sbrk_r>
 80080d0:	6038      	str	r0, [r7, #0]
 80080d2:	4629      	mov	r1, r5
 80080d4:	4630      	mov	r0, r6
 80080d6:	f000 fb6d 	bl	80087b4 <_sbrk_r>
 80080da:	1c43      	adds	r3, r0, #1
 80080dc:	d123      	bne.n	8008126 <_malloc_r+0x92>
 80080de:	230c      	movs	r3, #12
 80080e0:	4630      	mov	r0, r6
 80080e2:	6033      	str	r3, [r6, #0]
 80080e4:	f000 fde8 	bl	8008cb8 <__malloc_unlock>
 80080e8:	e7e3      	b.n	80080b2 <_malloc_r+0x1e>
 80080ea:	6823      	ldr	r3, [r4, #0]
 80080ec:	1b5b      	subs	r3, r3, r5
 80080ee:	d417      	bmi.n	8008120 <_malloc_r+0x8c>
 80080f0:	2b0b      	cmp	r3, #11
 80080f2:	d903      	bls.n	80080fc <_malloc_r+0x68>
 80080f4:	6023      	str	r3, [r4, #0]
 80080f6:	441c      	add	r4, r3
 80080f8:	6025      	str	r5, [r4, #0]
 80080fa:	e004      	b.n	8008106 <_malloc_r+0x72>
 80080fc:	6863      	ldr	r3, [r4, #4]
 80080fe:	42a2      	cmp	r2, r4
 8008100:	bf0c      	ite	eq
 8008102:	600b      	streq	r3, [r1, #0]
 8008104:	6053      	strne	r3, [r2, #4]
 8008106:	4630      	mov	r0, r6
 8008108:	f000 fdd6 	bl	8008cb8 <__malloc_unlock>
 800810c:	f104 000b 	add.w	r0, r4, #11
 8008110:	1d23      	adds	r3, r4, #4
 8008112:	f020 0007 	bic.w	r0, r0, #7
 8008116:	1ac2      	subs	r2, r0, r3
 8008118:	d0cc      	beq.n	80080b4 <_malloc_r+0x20>
 800811a:	1a1b      	subs	r3, r3, r0
 800811c:	50a3      	str	r3, [r4, r2]
 800811e:	e7c9      	b.n	80080b4 <_malloc_r+0x20>
 8008120:	4622      	mov	r2, r4
 8008122:	6864      	ldr	r4, [r4, #4]
 8008124:	e7cc      	b.n	80080c0 <_malloc_r+0x2c>
 8008126:	1cc4      	adds	r4, r0, #3
 8008128:	f024 0403 	bic.w	r4, r4, #3
 800812c:	42a0      	cmp	r0, r4
 800812e:	d0e3      	beq.n	80080f8 <_malloc_r+0x64>
 8008130:	1a21      	subs	r1, r4, r0
 8008132:	4630      	mov	r0, r6
 8008134:	f000 fb3e 	bl	80087b4 <_sbrk_r>
 8008138:	3001      	adds	r0, #1
 800813a:	d1dd      	bne.n	80080f8 <_malloc_r+0x64>
 800813c:	e7cf      	b.n	80080de <_malloc_r+0x4a>
 800813e:	bf00      	nop
 8008140:	200006f8 	.word	0x200006f8
 8008144:	200006fc 	.word	0x200006fc

08008148 <__sfputc_r>:
 8008148:	6893      	ldr	r3, [r2, #8]
 800814a:	b410      	push	{r4}
 800814c:	3b01      	subs	r3, #1
 800814e:	2b00      	cmp	r3, #0
 8008150:	6093      	str	r3, [r2, #8]
 8008152:	da07      	bge.n	8008164 <__sfputc_r+0x1c>
 8008154:	6994      	ldr	r4, [r2, #24]
 8008156:	42a3      	cmp	r3, r4
 8008158:	db01      	blt.n	800815e <__sfputc_r+0x16>
 800815a:	290a      	cmp	r1, #10
 800815c:	d102      	bne.n	8008164 <__sfputc_r+0x1c>
 800815e:	bc10      	pop	{r4}
 8008160:	f000 bb7c 	b.w	800885c <__swbuf_r>
 8008164:	6813      	ldr	r3, [r2, #0]
 8008166:	1c58      	adds	r0, r3, #1
 8008168:	6010      	str	r0, [r2, #0]
 800816a:	7019      	strb	r1, [r3, #0]
 800816c:	4608      	mov	r0, r1
 800816e:	bc10      	pop	{r4}
 8008170:	4770      	bx	lr

08008172 <__sfputs_r>:
 8008172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008174:	4606      	mov	r6, r0
 8008176:	460f      	mov	r7, r1
 8008178:	4614      	mov	r4, r2
 800817a:	18d5      	adds	r5, r2, r3
 800817c:	42ac      	cmp	r4, r5
 800817e:	d101      	bne.n	8008184 <__sfputs_r+0x12>
 8008180:	2000      	movs	r0, #0
 8008182:	e007      	b.n	8008194 <__sfputs_r+0x22>
 8008184:	463a      	mov	r2, r7
 8008186:	4630      	mov	r0, r6
 8008188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800818c:	f7ff ffdc 	bl	8008148 <__sfputc_r>
 8008190:	1c43      	adds	r3, r0, #1
 8008192:	d1f3      	bne.n	800817c <__sfputs_r+0xa>
 8008194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008198 <_vfiprintf_r>:
 8008198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800819c:	460d      	mov	r5, r1
 800819e:	4614      	mov	r4, r2
 80081a0:	4698      	mov	r8, r3
 80081a2:	4606      	mov	r6, r0
 80081a4:	b09d      	sub	sp, #116	; 0x74
 80081a6:	b118      	cbz	r0, 80081b0 <_vfiprintf_r+0x18>
 80081a8:	6983      	ldr	r3, [r0, #24]
 80081aa:	b90b      	cbnz	r3, 80081b0 <_vfiprintf_r+0x18>
 80081ac:	f7ff fed2 	bl	8007f54 <__sinit>
 80081b0:	4b89      	ldr	r3, [pc, #548]	; (80083d8 <_vfiprintf_r+0x240>)
 80081b2:	429d      	cmp	r5, r3
 80081b4:	d11b      	bne.n	80081ee <_vfiprintf_r+0x56>
 80081b6:	6875      	ldr	r5, [r6, #4]
 80081b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081ba:	07d9      	lsls	r1, r3, #31
 80081bc:	d405      	bmi.n	80081ca <_vfiprintf_r+0x32>
 80081be:	89ab      	ldrh	r3, [r5, #12]
 80081c0:	059a      	lsls	r2, r3, #22
 80081c2:	d402      	bmi.n	80081ca <_vfiprintf_r+0x32>
 80081c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081c6:	f7ff ff63 	bl	8008090 <__retarget_lock_acquire_recursive>
 80081ca:	89ab      	ldrh	r3, [r5, #12]
 80081cc:	071b      	lsls	r3, r3, #28
 80081ce:	d501      	bpl.n	80081d4 <_vfiprintf_r+0x3c>
 80081d0:	692b      	ldr	r3, [r5, #16]
 80081d2:	b9eb      	cbnz	r3, 8008210 <_vfiprintf_r+0x78>
 80081d4:	4629      	mov	r1, r5
 80081d6:	4630      	mov	r0, r6
 80081d8:	f000 fba4 	bl	8008924 <__swsetup_r>
 80081dc:	b1c0      	cbz	r0, 8008210 <_vfiprintf_r+0x78>
 80081de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081e0:	07dc      	lsls	r4, r3, #31
 80081e2:	d50e      	bpl.n	8008202 <_vfiprintf_r+0x6a>
 80081e4:	f04f 30ff 	mov.w	r0, #4294967295
 80081e8:	b01d      	add	sp, #116	; 0x74
 80081ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ee:	4b7b      	ldr	r3, [pc, #492]	; (80083dc <_vfiprintf_r+0x244>)
 80081f0:	429d      	cmp	r5, r3
 80081f2:	d101      	bne.n	80081f8 <_vfiprintf_r+0x60>
 80081f4:	68b5      	ldr	r5, [r6, #8]
 80081f6:	e7df      	b.n	80081b8 <_vfiprintf_r+0x20>
 80081f8:	4b79      	ldr	r3, [pc, #484]	; (80083e0 <_vfiprintf_r+0x248>)
 80081fa:	429d      	cmp	r5, r3
 80081fc:	bf08      	it	eq
 80081fe:	68f5      	ldreq	r5, [r6, #12]
 8008200:	e7da      	b.n	80081b8 <_vfiprintf_r+0x20>
 8008202:	89ab      	ldrh	r3, [r5, #12]
 8008204:	0598      	lsls	r0, r3, #22
 8008206:	d4ed      	bmi.n	80081e4 <_vfiprintf_r+0x4c>
 8008208:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800820a:	f7ff ff42 	bl	8008092 <__retarget_lock_release_recursive>
 800820e:	e7e9      	b.n	80081e4 <_vfiprintf_r+0x4c>
 8008210:	2300      	movs	r3, #0
 8008212:	9309      	str	r3, [sp, #36]	; 0x24
 8008214:	2320      	movs	r3, #32
 8008216:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800821a:	2330      	movs	r3, #48	; 0x30
 800821c:	f04f 0901 	mov.w	r9, #1
 8008220:	f8cd 800c 	str.w	r8, [sp, #12]
 8008224:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80083e4 <_vfiprintf_r+0x24c>
 8008228:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800822c:	4623      	mov	r3, r4
 800822e:	469a      	mov	sl, r3
 8008230:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008234:	b10a      	cbz	r2, 800823a <_vfiprintf_r+0xa2>
 8008236:	2a25      	cmp	r2, #37	; 0x25
 8008238:	d1f9      	bne.n	800822e <_vfiprintf_r+0x96>
 800823a:	ebba 0b04 	subs.w	fp, sl, r4
 800823e:	d00b      	beq.n	8008258 <_vfiprintf_r+0xc0>
 8008240:	465b      	mov	r3, fp
 8008242:	4622      	mov	r2, r4
 8008244:	4629      	mov	r1, r5
 8008246:	4630      	mov	r0, r6
 8008248:	f7ff ff93 	bl	8008172 <__sfputs_r>
 800824c:	3001      	adds	r0, #1
 800824e:	f000 80aa 	beq.w	80083a6 <_vfiprintf_r+0x20e>
 8008252:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008254:	445a      	add	r2, fp
 8008256:	9209      	str	r2, [sp, #36]	; 0x24
 8008258:	f89a 3000 	ldrb.w	r3, [sl]
 800825c:	2b00      	cmp	r3, #0
 800825e:	f000 80a2 	beq.w	80083a6 <_vfiprintf_r+0x20e>
 8008262:	2300      	movs	r3, #0
 8008264:	f04f 32ff 	mov.w	r2, #4294967295
 8008268:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800826c:	f10a 0a01 	add.w	sl, sl, #1
 8008270:	9304      	str	r3, [sp, #16]
 8008272:	9307      	str	r3, [sp, #28]
 8008274:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008278:	931a      	str	r3, [sp, #104]	; 0x68
 800827a:	4654      	mov	r4, sl
 800827c:	2205      	movs	r2, #5
 800827e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008282:	4858      	ldr	r0, [pc, #352]	; (80083e4 <_vfiprintf_r+0x24c>)
 8008284:	f000 fd04 	bl	8008c90 <memchr>
 8008288:	9a04      	ldr	r2, [sp, #16]
 800828a:	b9d8      	cbnz	r0, 80082c4 <_vfiprintf_r+0x12c>
 800828c:	06d1      	lsls	r1, r2, #27
 800828e:	bf44      	itt	mi
 8008290:	2320      	movmi	r3, #32
 8008292:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008296:	0713      	lsls	r3, r2, #28
 8008298:	bf44      	itt	mi
 800829a:	232b      	movmi	r3, #43	; 0x2b
 800829c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082a0:	f89a 3000 	ldrb.w	r3, [sl]
 80082a4:	2b2a      	cmp	r3, #42	; 0x2a
 80082a6:	d015      	beq.n	80082d4 <_vfiprintf_r+0x13c>
 80082a8:	4654      	mov	r4, sl
 80082aa:	2000      	movs	r0, #0
 80082ac:	f04f 0c0a 	mov.w	ip, #10
 80082b0:	9a07      	ldr	r2, [sp, #28]
 80082b2:	4621      	mov	r1, r4
 80082b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082b8:	3b30      	subs	r3, #48	; 0x30
 80082ba:	2b09      	cmp	r3, #9
 80082bc:	d94e      	bls.n	800835c <_vfiprintf_r+0x1c4>
 80082be:	b1b0      	cbz	r0, 80082ee <_vfiprintf_r+0x156>
 80082c0:	9207      	str	r2, [sp, #28]
 80082c2:	e014      	b.n	80082ee <_vfiprintf_r+0x156>
 80082c4:	eba0 0308 	sub.w	r3, r0, r8
 80082c8:	fa09 f303 	lsl.w	r3, r9, r3
 80082cc:	4313      	orrs	r3, r2
 80082ce:	46a2      	mov	sl, r4
 80082d0:	9304      	str	r3, [sp, #16]
 80082d2:	e7d2      	b.n	800827a <_vfiprintf_r+0xe2>
 80082d4:	9b03      	ldr	r3, [sp, #12]
 80082d6:	1d19      	adds	r1, r3, #4
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	9103      	str	r1, [sp, #12]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	bfbb      	ittet	lt
 80082e0:	425b      	neglt	r3, r3
 80082e2:	f042 0202 	orrlt.w	r2, r2, #2
 80082e6:	9307      	strge	r3, [sp, #28]
 80082e8:	9307      	strlt	r3, [sp, #28]
 80082ea:	bfb8      	it	lt
 80082ec:	9204      	strlt	r2, [sp, #16]
 80082ee:	7823      	ldrb	r3, [r4, #0]
 80082f0:	2b2e      	cmp	r3, #46	; 0x2e
 80082f2:	d10c      	bne.n	800830e <_vfiprintf_r+0x176>
 80082f4:	7863      	ldrb	r3, [r4, #1]
 80082f6:	2b2a      	cmp	r3, #42	; 0x2a
 80082f8:	d135      	bne.n	8008366 <_vfiprintf_r+0x1ce>
 80082fa:	9b03      	ldr	r3, [sp, #12]
 80082fc:	3402      	adds	r4, #2
 80082fe:	1d1a      	adds	r2, r3, #4
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	9203      	str	r2, [sp, #12]
 8008304:	2b00      	cmp	r3, #0
 8008306:	bfb8      	it	lt
 8008308:	f04f 33ff 	movlt.w	r3, #4294967295
 800830c:	9305      	str	r3, [sp, #20]
 800830e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80083f4 <_vfiprintf_r+0x25c>
 8008312:	2203      	movs	r2, #3
 8008314:	4650      	mov	r0, sl
 8008316:	7821      	ldrb	r1, [r4, #0]
 8008318:	f000 fcba 	bl	8008c90 <memchr>
 800831c:	b140      	cbz	r0, 8008330 <_vfiprintf_r+0x198>
 800831e:	2340      	movs	r3, #64	; 0x40
 8008320:	eba0 000a 	sub.w	r0, r0, sl
 8008324:	fa03 f000 	lsl.w	r0, r3, r0
 8008328:	9b04      	ldr	r3, [sp, #16]
 800832a:	3401      	adds	r4, #1
 800832c:	4303      	orrs	r3, r0
 800832e:	9304      	str	r3, [sp, #16]
 8008330:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008334:	2206      	movs	r2, #6
 8008336:	482c      	ldr	r0, [pc, #176]	; (80083e8 <_vfiprintf_r+0x250>)
 8008338:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800833c:	f000 fca8 	bl	8008c90 <memchr>
 8008340:	2800      	cmp	r0, #0
 8008342:	d03f      	beq.n	80083c4 <_vfiprintf_r+0x22c>
 8008344:	4b29      	ldr	r3, [pc, #164]	; (80083ec <_vfiprintf_r+0x254>)
 8008346:	bb1b      	cbnz	r3, 8008390 <_vfiprintf_r+0x1f8>
 8008348:	9b03      	ldr	r3, [sp, #12]
 800834a:	3307      	adds	r3, #7
 800834c:	f023 0307 	bic.w	r3, r3, #7
 8008350:	3308      	adds	r3, #8
 8008352:	9303      	str	r3, [sp, #12]
 8008354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008356:	443b      	add	r3, r7
 8008358:	9309      	str	r3, [sp, #36]	; 0x24
 800835a:	e767      	b.n	800822c <_vfiprintf_r+0x94>
 800835c:	460c      	mov	r4, r1
 800835e:	2001      	movs	r0, #1
 8008360:	fb0c 3202 	mla	r2, ip, r2, r3
 8008364:	e7a5      	b.n	80082b2 <_vfiprintf_r+0x11a>
 8008366:	2300      	movs	r3, #0
 8008368:	f04f 0c0a 	mov.w	ip, #10
 800836c:	4619      	mov	r1, r3
 800836e:	3401      	adds	r4, #1
 8008370:	9305      	str	r3, [sp, #20]
 8008372:	4620      	mov	r0, r4
 8008374:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008378:	3a30      	subs	r2, #48	; 0x30
 800837a:	2a09      	cmp	r2, #9
 800837c:	d903      	bls.n	8008386 <_vfiprintf_r+0x1ee>
 800837e:	2b00      	cmp	r3, #0
 8008380:	d0c5      	beq.n	800830e <_vfiprintf_r+0x176>
 8008382:	9105      	str	r1, [sp, #20]
 8008384:	e7c3      	b.n	800830e <_vfiprintf_r+0x176>
 8008386:	4604      	mov	r4, r0
 8008388:	2301      	movs	r3, #1
 800838a:	fb0c 2101 	mla	r1, ip, r1, r2
 800838e:	e7f0      	b.n	8008372 <_vfiprintf_r+0x1da>
 8008390:	ab03      	add	r3, sp, #12
 8008392:	9300      	str	r3, [sp, #0]
 8008394:	462a      	mov	r2, r5
 8008396:	4630      	mov	r0, r6
 8008398:	4b15      	ldr	r3, [pc, #84]	; (80083f0 <_vfiprintf_r+0x258>)
 800839a:	a904      	add	r1, sp, #16
 800839c:	f3af 8000 	nop.w
 80083a0:	4607      	mov	r7, r0
 80083a2:	1c78      	adds	r0, r7, #1
 80083a4:	d1d6      	bne.n	8008354 <_vfiprintf_r+0x1bc>
 80083a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083a8:	07d9      	lsls	r1, r3, #31
 80083aa:	d405      	bmi.n	80083b8 <_vfiprintf_r+0x220>
 80083ac:	89ab      	ldrh	r3, [r5, #12]
 80083ae:	059a      	lsls	r2, r3, #22
 80083b0:	d402      	bmi.n	80083b8 <_vfiprintf_r+0x220>
 80083b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083b4:	f7ff fe6d 	bl	8008092 <__retarget_lock_release_recursive>
 80083b8:	89ab      	ldrh	r3, [r5, #12]
 80083ba:	065b      	lsls	r3, r3, #25
 80083bc:	f53f af12 	bmi.w	80081e4 <_vfiprintf_r+0x4c>
 80083c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083c2:	e711      	b.n	80081e8 <_vfiprintf_r+0x50>
 80083c4:	ab03      	add	r3, sp, #12
 80083c6:	9300      	str	r3, [sp, #0]
 80083c8:	462a      	mov	r2, r5
 80083ca:	4630      	mov	r0, r6
 80083cc:	4b08      	ldr	r3, [pc, #32]	; (80083f0 <_vfiprintf_r+0x258>)
 80083ce:	a904      	add	r1, sp, #16
 80083d0:	f000 f882 	bl	80084d8 <_printf_i>
 80083d4:	e7e4      	b.n	80083a0 <_vfiprintf_r+0x208>
 80083d6:	bf00      	nop
 80083d8:	08008f18 	.word	0x08008f18
 80083dc:	08008f38 	.word	0x08008f38
 80083e0:	08008ef8 	.word	0x08008ef8
 80083e4:	08008f58 	.word	0x08008f58
 80083e8:	08008f62 	.word	0x08008f62
 80083ec:	00000000 	.word	0x00000000
 80083f0:	08008173 	.word	0x08008173
 80083f4:	08008f5e 	.word	0x08008f5e

080083f8 <_printf_common>:
 80083f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083fc:	4616      	mov	r6, r2
 80083fe:	4699      	mov	r9, r3
 8008400:	688a      	ldr	r2, [r1, #8]
 8008402:	690b      	ldr	r3, [r1, #16]
 8008404:	4607      	mov	r7, r0
 8008406:	4293      	cmp	r3, r2
 8008408:	bfb8      	it	lt
 800840a:	4613      	movlt	r3, r2
 800840c:	6033      	str	r3, [r6, #0]
 800840e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008412:	460c      	mov	r4, r1
 8008414:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008418:	b10a      	cbz	r2, 800841e <_printf_common+0x26>
 800841a:	3301      	adds	r3, #1
 800841c:	6033      	str	r3, [r6, #0]
 800841e:	6823      	ldr	r3, [r4, #0]
 8008420:	0699      	lsls	r1, r3, #26
 8008422:	bf42      	ittt	mi
 8008424:	6833      	ldrmi	r3, [r6, #0]
 8008426:	3302      	addmi	r3, #2
 8008428:	6033      	strmi	r3, [r6, #0]
 800842a:	6825      	ldr	r5, [r4, #0]
 800842c:	f015 0506 	ands.w	r5, r5, #6
 8008430:	d106      	bne.n	8008440 <_printf_common+0x48>
 8008432:	f104 0a19 	add.w	sl, r4, #25
 8008436:	68e3      	ldr	r3, [r4, #12]
 8008438:	6832      	ldr	r2, [r6, #0]
 800843a:	1a9b      	subs	r3, r3, r2
 800843c:	42ab      	cmp	r3, r5
 800843e:	dc28      	bgt.n	8008492 <_printf_common+0x9a>
 8008440:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008444:	1e13      	subs	r3, r2, #0
 8008446:	6822      	ldr	r2, [r4, #0]
 8008448:	bf18      	it	ne
 800844a:	2301      	movne	r3, #1
 800844c:	0692      	lsls	r2, r2, #26
 800844e:	d42d      	bmi.n	80084ac <_printf_common+0xb4>
 8008450:	4649      	mov	r1, r9
 8008452:	4638      	mov	r0, r7
 8008454:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008458:	47c0      	blx	r8
 800845a:	3001      	adds	r0, #1
 800845c:	d020      	beq.n	80084a0 <_printf_common+0xa8>
 800845e:	6823      	ldr	r3, [r4, #0]
 8008460:	68e5      	ldr	r5, [r4, #12]
 8008462:	f003 0306 	and.w	r3, r3, #6
 8008466:	2b04      	cmp	r3, #4
 8008468:	bf18      	it	ne
 800846a:	2500      	movne	r5, #0
 800846c:	6832      	ldr	r2, [r6, #0]
 800846e:	f04f 0600 	mov.w	r6, #0
 8008472:	68a3      	ldr	r3, [r4, #8]
 8008474:	bf08      	it	eq
 8008476:	1aad      	subeq	r5, r5, r2
 8008478:	6922      	ldr	r2, [r4, #16]
 800847a:	bf08      	it	eq
 800847c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008480:	4293      	cmp	r3, r2
 8008482:	bfc4      	itt	gt
 8008484:	1a9b      	subgt	r3, r3, r2
 8008486:	18ed      	addgt	r5, r5, r3
 8008488:	341a      	adds	r4, #26
 800848a:	42b5      	cmp	r5, r6
 800848c:	d11a      	bne.n	80084c4 <_printf_common+0xcc>
 800848e:	2000      	movs	r0, #0
 8008490:	e008      	b.n	80084a4 <_printf_common+0xac>
 8008492:	2301      	movs	r3, #1
 8008494:	4652      	mov	r2, sl
 8008496:	4649      	mov	r1, r9
 8008498:	4638      	mov	r0, r7
 800849a:	47c0      	blx	r8
 800849c:	3001      	adds	r0, #1
 800849e:	d103      	bne.n	80084a8 <_printf_common+0xb0>
 80084a0:	f04f 30ff 	mov.w	r0, #4294967295
 80084a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084a8:	3501      	adds	r5, #1
 80084aa:	e7c4      	b.n	8008436 <_printf_common+0x3e>
 80084ac:	2030      	movs	r0, #48	; 0x30
 80084ae:	18e1      	adds	r1, r4, r3
 80084b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80084b4:	1c5a      	adds	r2, r3, #1
 80084b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80084ba:	4422      	add	r2, r4
 80084bc:	3302      	adds	r3, #2
 80084be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80084c2:	e7c5      	b.n	8008450 <_printf_common+0x58>
 80084c4:	2301      	movs	r3, #1
 80084c6:	4622      	mov	r2, r4
 80084c8:	4649      	mov	r1, r9
 80084ca:	4638      	mov	r0, r7
 80084cc:	47c0      	blx	r8
 80084ce:	3001      	adds	r0, #1
 80084d0:	d0e6      	beq.n	80084a0 <_printf_common+0xa8>
 80084d2:	3601      	adds	r6, #1
 80084d4:	e7d9      	b.n	800848a <_printf_common+0x92>
	...

080084d8 <_printf_i>:
 80084d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084dc:	460c      	mov	r4, r1
 80084de:	7e27      	ldrb	r7, [r4, #24]
 80084e0:	4691      	mov	r9, r2
 80084e2:	2f78      	cmp	r7, #120	; 0x78
 80084e4:	4680      	mov	r8, r0
 80084e6:	469a      	mov	sl, r3
 80084e8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80084ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80084ee:	d807      	bhi.n	8008500 <_printf_i+0x28>
 80084f0:	2f62      	cmp	r7, #98	; 0x62
 80084f2:	d80a      	bhi.n	800850a <_printf_i+0x32>
 80084f4:	2f00      	cmp	r7, #0
 80084f6:	f000 80d9 	beq.w	80086ac <_printf_i+0x1d4>
 80084fa:	2f58      	cmp	r7, #88	; 0x58
 80084fc:	f000 80a4 	beq.w	8008648 <_printf_i+0x170>
 8008500:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008504:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008508:	e03a      	b.n	8008580 <_printf_i+0xa8>
 800850a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800850e:	2b15      	cmp	r3, #21
 8008510:	d8f6      	bhi.n	8008500 <_printf_i+0x28>
 8008512:	a001      	add	r0, pc, #4	; (adr r0, 8008518 <_printf_i+0x40>)
 8008514:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008518:	08008571 	.word	0x08008571
 800851c:	08008585 	.word	0x08008585
 8008520:	08008501 	.word	0x08008501
 8008524:	08008501 	.word	0x08008501
 8008528:	08008501 	.word	0x08008501
 800852c:	08008501 	.word	0x08008501
 8008530:	08008585 	.word	0x08008585
 8008534:	08008501 	.word	0x08008501
 8008538:	08008501 	.word	0x08008501
 800853c:	08008501 	.word	0x08008501
 8008540:	08008501 	.word	0x08008501
 8008544:	08008693 	.word	0x08008693
 8008548:	080085b5 	.word	0x080085b5
 800854c:	08008675 	.word	0x08008675
 8008550:	08008501 	.word	0x08008501
 8008554:	08008501 	.word	0x08008501
 8008558:	080086b5 	.word	0x080086b5
 800855c:	08008501 	.word	0x08008501
 8008560:	080085b5 	.word	0x080085b5
 8008564:	08008501 	.word	0x08008501
 8008568:	08008501 	.word	0x08008501
 800856c:	0800867d 	.word	0x0800867d
 8008570:	680b      	ldr	r3, [r1, #0]
 8008572:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008576:	1d1a      	adds	r2, r3, #4
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	600a      	str	r2, [r1, #0]
 800857c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008580:	2301      	movs	r3, #1
 8008582:	e0a4      	b.n	80086ce <_printf_i+0x1f6>
 8008584:	6825      	ldr	r5, [r4, #0]
 8008586:	6808      	ldr	r0, [r1, #0]
 8008588:	062e      	lsls	r6, r5, #24
 800858a:	f100 0304 	add.w	r3, r0, #4
 800858e:	d50a      	bpl.n	80085a6 <_printf_i+0xce>
 8008590:	6805      	ldr	r5, [r0, #0]
 8008592:	600b      	str	r3, [r1, #0]
 8008594:	2d00      	cmp	r5, #0
 8008596:	da03      	bge.n	80085a0 <_printf_i+0xc8>
 8008598:	232d      	movs	r3, #45	; 0x2d
 800859a:	426d      	negs	r5, r5
 800859c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085a0:	230a      	movs	r3, #10
 80085a2:	485e      	ldr	r0, [pc, #376]	; (800871c <_printf_i+0x244>)
 80085a4:	e019      	b.n	80085da <_printf_i+0x102>
 80085a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80085aa:	6805      	ldr	r5, [r0, #0]
 80085ac:	600b      	str	r3, [r1, #0]
 80085ae:	bf18      	it	ne
 80085b0:	b22d      	sxthne	r5, r5
 80085b2:	e7ef      	b.n	8008594 <_printf_i+0xbc>
 80085b4:	680b      	ldr	r3, [r1, #0]
 80085b6:	6825      	ldr	r5, [r4, #0]
 80085b8:	1d18      	adds	r0, r3, #4
 80085ba:	6008      	str	r0, [r1, #0]
 80085bc:	0628      	lsls	r0, r5, #24
 80085be:	d501      	bpl.n	80085c4 <_printf_i+0xec>
 80085c0:	681d      	ldr	r5, [r3, #0]
 80085c2:	e002      	b.n	80085ca <_printf_i+0xf2>
 80085c4:	0669      	lsls	r1, r5, #25
 80085c6:	d5fb      	bpl.n	80085c0 <_printf_i+0xe8>
 80085c8:	881d      	ldrh	r5, [r3, #0]
 80085ca:	2f6f      	cmp	r7, #111	; 0x6f
 80085cc:	bf0c      	ite	eq
 80085ce:	2308      	moveq	r3, #8
 80085d0:	230a      	movne	r3, #10
 80085d2:	4852      	ldr	r0, [pc, #328]	; (800871c <_printf_i+0x244>)
 80085d4:	2100      	movs	r1, #0
 80085d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80085da:	6866      	ldr	r6, [r4, #4]
 80085dc:	2e00      	cmp	r6, #0
 80085de:	bfa8      	it	ge
 80085e0:	6821      	ldrge	r1, [r4, #0]
 80085e2:	60a6      	str	r6, [r4, #8]
 80085e4:	bfa4      	itt	ge
 80085e6:	f021 0104 	bicge.w	r1, r1, #4
 80085ea:	6021      	strge	r1, [r4, #0]
 80085ec:	b90d      	cbnz	r5, 80085f2 <_printf_i+0x11a>
 80085ee:	2e00      	cmp	r6, #0
 80085f0:	d04d      	beq.n	800868e <_printf_i+0x1b6>
 80085f2:	4616      	mov	r6, r2
 80085f4:	fbb5 f1f3 	udiv	r1, r5, r3
 80085f8:	fb03 5711 	mls	r7, r3, r1, r5
 80085fc:	5dc7      	ldrb	r7, [r0, r7]
 80085fe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008602:	462f      	mov	r7, r5
 8008604:	42bb      	cmp	r3, r7
 8008606:	460d      	mov	r5, r1
 8008608:	d9f4      	bls.n	80085f4 <_printf_i+0x11c>
 800860a:	2b08      	cmp	r3, #8
 800860c:	d10b      	bne.n	8008626 <_printf_i+0x14e>
 800860e:	6823      	ldr	r3, [r4, #0]
 8008610:	07df      	lsls	r7, r3, #31
 8008612:	d508      	bpl.n	8008626 <_printf_i+0x14e>
 8008614:	6923      	ldr	r3, [r4, #16]
 8008616:	6861      	ldr	r1, [r4, #4]
 8008618:	4299      	cmp	r1, r3
 800861a:	bfde      	ittt	le
 800861c:	2330      	movle	r3, #48	; 0x30
 800861e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008622:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008626:	1b92      	subs	r2, r2, r6
 8008628:	6122      	str	r2, [r4, #16]
 800862a:	464b      	mov	r3, r9
 800862c:	4621      	mov	r1, r4
 800862e:	4640      	mov	r0, r8
 8008630:	f8cd a000 	str.w	sl, [sp]
 8008634:	aa03      	add	r2, sp, #12
 8008636:	f7ff fedf 	bl	80083f8 <_printf_common>
 800863a:	3001      	adds	r0, #1
 800863c:	d14c      	bne.n	80086d8 <_printf_i+0x200>
 800863e:	f04f 30ff 	mov.w	r0, #4294967295
 8008642:	b004      	add	sp, #16
 8008644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008648:	4834      	ldr	r0, [pc, #208]	; (800871c <_printf_i+0x244>)
 800864a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800864e:	680e      	ldr	r6, [r1, #0]
 8008650:	6823      	ldr	r3, [r4, #0]
 8008652:	f856 5b04 	ldr.w	r5, [r6], #4
 8008656:	061f      	lsls	r7, r3, #24
 8008658:	600e      	str	r6, [r1, #0]
 800865a:	d514      	bpl.n	8008686 <_printf_i+0x1ae>
 800865c:	07d9      	lsls	r1, r3, #31
 800865e:	bf44      	itt	mi
 8008660:	f043 0320 	orrmi.w	r3, r3, #32
 8008664:	6023      	strmi	r3, [r4, #0]
 8008666:	b91d      	cbnz	r5, 8008670 <_printf_i+0x198>
 8008668:	6823      	ldr	r3, [r4, #0]
 800866a:	f023 0320 	bic.w	r3, r3, #32
 800866e:	6023      	str	r3, [r4, #0]
 8008670:	2310      	movs	r3, #16
 8008672:	e7af      	b.n	80085d4 <_printf_i+0xfc>
 8008674:	6823      	ldr	r3, [r4, #0]
 8008676:	f043 0320 	orr.w	r3, r3, #32
 800867a:	6023      	str	r3, [r4, #0]
 800867c:	2378      	movs	r3, #120	; 0x78
 800867e:	4828      	ldr	r0, [pc, #160]	; (8008720 <_printf_i+0x248>)
 8008680:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008684:	e7e3      	b.n	800864e <_printf_i+0x176>
 8008686:	065e      	lsls	r6, r3, #25
 8008688:	bf48      	it	mi
 800868a:	b2ad      	uxthmi	r5, r5
 800868c:	e7e6      	b.n	800865c <_printf_i+0x184>
 800868e:	4616      	mov	r6, r2
 8008690:	e7bb      	b.n	800860a <_printf_i+0x132>
 8008692:	680b      	ldr	r3, [r1, #0]
 8008694:	6826      	ldr	r6, [r4, #0]
 8008696:	1d1d      	adds	r5, r3, #4
 8008698:	6960      	ldr	r0, [r4, #20]
 800869a:	600d      	str	r5, [r1, #0]
 800869c:	0635      	lsls	r5, r6, #24
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	d501      	bpl.n	80086a6 <_printf_i+0x1ce>
 80086a2:	6018      	str	r0, [r3, #0]
 80086a4:	e002      	b.n	80086ac <_printf_i+0x1d4>
 80086a6:	0671      	lsls	r1, r6, #25
 80086a8:	d5fb      	bpl.n	80086a2 <_printf_i+0x1ca>
 80086aa:	8018      	strh	r0, [r3, #0]
 80086ac:	2300      	movs	r3, #0
 80086ae:	4616      	mov	r6, r2
 80086b0:	6123      	str	r3, [r4, #16]
 80086b2:	e7ba      	b.n	800862a <_printf_i+0x152>
 80086b4:	680b      	ldr	r3, [r1, #0]
 80086b6:	1d1a      	adds	r2, r3, #4
 80086b8:	600a      	str	r2, [r1, #0]
 80086ba:	681e      	ldr	r6, [r3, #0]
 80086bc:	2100      	movs	r1, #0
 80086be:	4630      	mov	r0, r6
 80086c0:	6862      	ldr	r2, [r4, #4]
 80086c2:	f000 fae5 	bl	8008c90 <memchr>
 80086c6:	b108      	cbz	r0, 80086cc <_printf_i+0x1f4>
 80086c8:	1b80      	subs	r0, r0, r6
 80086ca:	6060      	str	r0, [r4, #4]
 80086cc:	6863      	ldr	r3, [r4, #4]
 80086ce:	6123      	str	r3, [r4, #16]
 80086d0:	2300      	movs	r3, #0
 80086d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086d6:	e7a8      	b.n	800862a <_printf_i+0x152>
 80086d8:	4632      	mov	r2, r6
 80086da:	4649      	mov	r1, r9
 80086dc:	4640      	mov	r0, r8
 80086de:	6923      	ldr	r3, [r4, #16]
 80086e0:	47d0      	blx	sl
 80086e2:	3001      	adds	r0, #1
 80086e4:	d0ab      	beq.n	800863e <_printf_i+0x166>
 80086e6:	6823      	ldr	r3, [r4, #0]
 80086e8:	079b      	lsls	r3, r3, #30
 80086ea:	d413      	bmi.n	8008714 <_printf_i+0x23c>
 80086ec:	68e0      	ldr	r0, [r4, #12]
 80086ee:	9b03      	ldr	r3, [sp, #12]
 80086f0:	4298      	cmp	r0, r3
 80086f2:	bfb8      	it	lt
 80086f4:	4618      	movlt	r0, r3
 80086f6:	e7a4      	b.n	8008642 <_printf_i+0x16a>
 80086f8:	2301      	movs	r3, #1
 80086fa:	4632      	mov	r2, r6
 80086fc:	4649      	mov	r1, r9
 80086fe:	4640      	mov	r0, r8
 8008700:	47d0      	blx	sl
 8008702:	3001      	adds	r0, #1
 8008704:	d09b      	beq.n	800863e <_printf_i+0x166>
 8008706:	3501      	adds	r5, #1
 8008708:	68e3      	ldr	r3, [r4, #12]
 800870a:	9903      	ldr	r1, [sp, #12]
 800870c:	1a5b      	subs	r3, r3, r1
 800870e:	42ab      	cmp	r3, r5
 8008710:	dcf2      	bgt.n	80086f8 <_printf_i+0x220>
 8008712:	e7eb      	b.n	80086ec <_printf_i+0x214>
 8008714:	2500      	movs	r5, #0
 8008716:	f104 0619 	add.w	r6, r4, #25
 800871a:	e7f5      	b.n	8008708 <_printf_i+0x230>
 800871c:	08008f69 	.word	0x08008f69
 8008720:	08008f7a 	.word	0x08008f7a

08008724 <_putc_r>:
 8008724:	b570      	push	{r4, r5, r6, lr}
 8008726:	460d      	mov	r5, r1
 8008728:	4614      	mov	r4, r2
 800872a:	4606      	mov	r6, r0
 800872c:	b118      	cbz	r0, 8008736 <_putc_r+0x12>
 800872e:	6983      	ldr	r3, [r0, #24]
 8008730:	b90b      	cbnz	r3, 8008736 <_putc_r+0x12>
 8008732:	f7ff fc0f 	bl	8007f54 <__sinit>
 8008736:	4b1c      	ldr	r3, [pc, #112]	; (80087a8 <_putc_r+0x84>)
 8008738:	429c      	cmp	r4, r3
 800873a:	d124      	bne.n	8008786 <_putc_r+0x62>
 800873c:	6874      	ldr	r4, [r6, #4]
 800873e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008740:	07d8      	lsls	r0, r3, #31
 8008742:	d405      	bmi.n	8008750 <_putc_r+0x2c>
 8008744:	89a3      	ldrh	r3, [r4, #12]
 8008746:	0599      	lsls	r1, r3, #22
 8008748:	d402      	bmi.n	8008750 <_putc_r+0x2c>
 800874a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800874c:	f7ff fca0 	bl	8008090 <__retarget_lock_acquire_recursive>
 8008750:	68a3      	ldr	r3, [r4, #8]
 8008752:	3b01      	subs	r3, #1
 8008754:	2b00      	cmp	r3, #0
 8008756:	60a3      	str	r3, [r4, #8]
 8008758:	da05      	bge.n	8008766 <_putc_r+0x42>
 800875a:	69a2      	ldr	r2, [r4, #24]
 800875c:	4293      	cmp	r3, r2
 800875e:	db1c      	blt.n	800879a <_putc_r+0x76>
 8008760:	b2eb      	uxtb	r3, r5
 8008762:	2b0a      	cmp	r3, #10
 8008764:	d019      	beq.n	800879a <_putc_r+0x76>
 8008766:	6823      	ldr	r3, [r4, #0]
 8008768:	1c5a      	adds	r2, r3, #1
 800876a:	6022      	str	r2, [r4, #0]
 800876c:	701d      	strb	r5, [r3, #0]
 800876e:	b2ed      	uxtb	r5, r5
 8008770:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008772:	07da      	lsls	r2, r3, #31
 8008774:	d405      	bmi.n	8008782 <_putc_r+0x5e>
 8008776:	89a3      	ldrh	r3, [r4, #12]
 8008778:	059b      	lsls	r3, r3, #22
 800877a:	d402      	bmi.n	8008782 <_putc_r+0x5e>
 800877c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800877e:	f7ff fc88 	bl	8008092 <__retarget_lock_release_recursive>
 8008782:	4628      	mov	r0, r5
 8008784:	bd70      	pop	{r4, r5, r6, pc}
 8008786:	4b09      	ldr	r3, [pc, #36]	; (80087ac <_putc_r+0x88>)
 8008788:	429c      	cmp	r4, r3
 800878a:	d101      	bne.n	8008790 <_putc_r+0x6c>
 800878c:	68b4      	ldr	r4, [r6, #8]
 800878e:	e7d6      	b.n	800873e <_putc_r+0x1a>
 8008790:	4b07      	ldr	r3, [pc, #28]	; (80087b0 <_putc_r+0x8c>)
 8008792:	429c      	cmp	r4, r3
 8008794:	bf08      	it	eq
 8008796:	68f4      	ldreq	r4, [r6, #12]
 8008798:	e7d1      	b.n	800873e <_putc_r+0x1a>
 800879a:	4629      	mov	r1, r5
 800879c:	4622      	mov	r2, r4
 800879e:	4630      	mov	r0, r6
 80087a0:	f000 f85c 	bl	800885c <__swbuf_r>
 80087a4:	4605      	mov	r5, r0
 80087a6:	e7e3      	b.n	8008770 <_putc_r+0x4c>
 80087a8:	08008f18 	.word	0x08008f18
 80087ac:	08008f38 	.word	0x08008f38
 80087b0:	08008ef8 	.word	0x08008ef8

080087b4 <_sbrk_r>:
 80087b4:	b538      	push	{r3, r4, r5, lr}
 80087b6:	2300      	movs	r3, #0
 80087b8:	4d05      	ldr	r5, [pc, #20]	; (80087d0 <_sbrk_r+0x1c>)
 80087ba:	4604      	mov	r4, r0
 80087bc:	4608      	mov	r0, r1
 80087be:	602b      	str	r3, [r5, #0]
 80087c0:	f000 fb28 	bl	8008e14 <_sbrk>
 80087c4:	1c43      	adds	r3, r0, #1
 80087c6:	d102      	bne.n	80087ce <_sbrk_r+0x1a>
 80087c8:	682b      	ldr	r3, [r5, #0]
 80087ca:	b103      	cbz	r3, 80087ce <_sbrk_r+0x1a>
 80087cc:	6023      	str	r3, [r4, #0]
 80087ce:	bd38      	pop	{r3, r4, r5, pc}
 80087d0:	20001738 	.word	0x20001738

080087d4 <__sread>:
 80087d4:	b510      	push	{r4, lr}
 80087d6:	460c      	mov	r4, r1
 80087d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087dc:	f000 fabe 	bl	8008d5c <_read_r>
 80087e0:	2800      	cmp	r0, #0
 80087e2:	bfab      	itete	ge
 80087e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80087e6:	89a3      	ldrhlt	r3, [r4, #12]
 80087e8:	181b      	addge	r3, r3, r0
 80087ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80087ee:	bfac      	ite	ge
 80087f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80087f2:	81a3      	strhlt	r3, [r4, #12]
 80087f4:	bd10      	pop	{r4, pc}

080087f6 <__swrite>:
 80087f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087fa:	461f      	mov	r7, r3
 80087fc:	898b      	ldrh	r3, [r1, #12]
 80087fe:	4605      	mov	r5, r0
 8008800:	05db      	lsls	r3, r3, #23
 8008802:	460c      	mov	r4, r1
 8008804:	4616      	mov	r6, r2
 8008806:	d505      	bpl.n	8008814 <__swrite+0x1e>
 8008808:	2302      	movs	r3, #2
 800880a:	2200      	movs	r2, #0
 800880c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008810:	f000 f9c8 	bl	8008ba4 <_lseek_r>
 8008814:	89a3      	ldrh	r3, [r4, #12]
 8008816:	4632      	mov	r2, r6
 8008818:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800881c:	81a3      	strh	r3, [r4, #12]
 800881e:	4628      	mov	r0, r5
 8008820:	463b      	mov	r3, r7
 8008822:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008826:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800882a:	f000 b869 	b.w	8008900 <_write_r>

0800882e <__sseek>:
 800882e:	b510      	push	{r4, lr}
 8008830:	460c      	mov	r4, r1
 8008832:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008836:	f000 f9b5 	bl	8008ba4 <_lseek_r>
 800883a:	1c43      	adds	r3, r0, #1
 800883c:	89a3      	ldrh	r3, [r4, #12]
 800883e:	bf15      	itete	ne
 8008840:	6560      	strne	r0, [r4, #84]	; 0x54
 8008842:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008846:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800884a:	81a3      	strheq	r3, [r4, #12]
 800884c:	bf18      	it	ne
 800884e:	81a3      	strhne	r3, [r4, #12]
 8008850:	bd10      	pop	{r4, pc}

08008852 <__sclose>:
 8008852:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008856:	f000 b8d3 	b.w	8008a00 <_close_r>
	...

0800885c <__swbuf_r>:
 800885c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800885e:	460e      	mov	r6, r1
 8008860:	4614      	mov	r4, r2
 8008862:	4605      	mov	r5, r0
 8008864:	b118      	cbz	r0, 800886e <__swbuf_r+0x12>
 8008866:	6983      	ldr	r3, [r0, #24]
 8008868:	b90b      	cbnz	r3, 800886e <__swbuf_r+0x12>
 800886a:	f7ff fb73 	bl	8007f54 <__sinit>
 800886e:	4b21      	ldr	r3, [pc, #132]	; (80088f4 <__swbuf_r+0x98>)
 8008870:	429c      	cmp	r4, r3
 8008872:	d12b      	bne.n	80088cc <__swbuf_r+0x70>
 8008874:	686c      	ldr	r4, [r5, #4]
 8008876:	69a3      	ldr	r3, [r4, #24]
 8008878:	60a3      	str	r3, [r4, #8]
 800887a:	89a3      	ldrh	r3, [r4, #12]
 800887c:	071a      	lsls	r2, r3, #28
 800887e:	d52f      	bpl.n	80088e0 <__swbuf_r+0x84>
 8008880:	6923      	ldr	r3, [r4, #16]
 8008882:	b36b      	cbz	r3, 80088e0 <__swbuf_r+0x84>
 8008884:	6923      	ldr	r3, [r4, #16]
 8008886:	6820      	ldr	r0, [r4, #0]
 8008888:	b2f6      	uxtb	r6, r6
 800888a:	1ac0      	subs	r0, r0, r3
 800888c:	6963      	ldr	r3, [r4, #20]
 800888e:	4637      	mov	r7, r6
 8008890:	4283      	cmp	r3, r0
 8008892:	dc04      	bgt.n	800889e <__swbuf_r+0x42>
 8008894:	4621      	mov	r1, r4
 8008896:	4628      	mov	r0, r5
 8008898:	f000 f948 	bl	8008b2c <_fflush_r>
 800889c:	bb30      	cbnz	r0, 80088ec <__swbuf_r+0x90>
 800889e:	68a3      	ldr	r3, [r4, #8]
 80088a0:	3001      	adds	r0, #1
 80088a2:	3b01      	subs	r3, #1
 80088a4:	60a3      	str	r3, [r4, #8]
 80088a6:	6823      	ldr	r3, [r4, #0]
 80088a8:	1c5a      	adds	r2, r3, #1
 80088aa:	6022      	str	r2, [r4, #0]
 80088ac:	701e      	strb	r6, [r3, #0]
 80088ae:	6963      	ldr	r3, [r4, #20]
 80088b0:	4283      	cmp	r3, r0
 80088b2:	d004      	beq.n	80088be <__swbuf_r+0x62>
 80088b4:	89a3      	ldrh	r3, [r4, #12]
 80088b6:	07db      	lsls	r3, r3, #31
 80088b8:	d506      	bpl.n	80088c8 <__swbuf_r+0x6c>
 80088ba:	2e0a      	cmp	r6, #10
 80088bc:	d104      	bne.n	80088c8 <__swbuf_r+0x6c>
 80088be:	4621      	mov	r1, r4
 80088c0:	4628      	mov	r0, r5
 80088c2:	f000 f933 	bl	8008b2c <_fflush_r>
 80088c6:	b988      	cbnz	r0, 80088ec <__swbuf_r+0x90>
 80088c8:	4638      	mov	r0, r7
 80088ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088cc:	4b0a      	ldr	r3, [pc, #40]	; (80088f8 <__swbuf_r+0x9c>)
 80088ce:	429c      	cmp	r4, r3
 80088d0:	d101      	bne.n	80088d6 <__swbuf_r+0x7a>
 80088d2:	68ac      	ldr	r4, [r5, #8]
 80088d4:	e7cf      	b.n	8008876 <__swbuf_r+0x1a>
 80088d6:	4b09      	ldr	r3, [pc, #36]	; (80088fc <__swbuf_r+0xa0>)
 80088d8:	429c      	cmp	r4, r3
 80088da:	bf08      	it	eq
 80088dc:	68ec      	ldreq	r4, [r5, #12]
 80088de:	e7ca      	b.n	8008876 <__swbuf_r+0x1a>
 80088e0:	4621      	mov	r1, r4
 80088e2:	4628      	mov	r0, r5
 80088e4:	f000 f81e 	bl	8008924 <__swsetup_r>
 80088e8:	2800      	cmp	r0, #0
 80088ea:	d0cb      	beq.n	8008884 <__swbuf_r+0x28>
 80088ec:	f04f 37ff 	mov.w	r7, #4294967295
 80088f0:	e7ea      	b.n	80088c8 <__swbuf_r+0x6c>
 80088f2:	bf00      	nop
 80088f4:	08008f18 	.word	0x08008f18
 80088f8:	08008f38 	.word	0x08008f38
 80088fc:	08008ef8 	.word	0x08008ef8

08008900 <_write_r>:
 8008900:	b538      	push	{r3, r4, r5, lr}
 8008902:	4604      	mov	r4, r0
 8008904:	4608      	mov	r0, r1
 8008906:	4611      	mov	r1, r2
 8008908:	2200      	movs	r2, #0
 800890a:	4d05      	ldr	r5, [pc, #20]	; (8008920 <_write_r+0x20>)
 800890c:	602a      	str	r2, [r5, #0]
 800890e:	461a      	mov	r2, r3
 8008910:	f000 fa8e 	bl	8008e30 <_write>
 8008914:	1c43      	adds	r3, r0, #1
 8008916:	d102      	bne.n	800891e <_write_r+0x1e>
 8008918:	682b      	ldr	r3, [r5, #0]
 800891a:	b103      	cbz	r3, 800891e <_write_r+0x1e>
 800891c:	6023      	str	r3, [r4, #0]
 800891e:	bd38      	pop	{r3, r4, r5, pc}
 8008920:	20001738 	.word	0x20001738

08008924 <__swsetup_r>:
 8008924:	4b32      	ldr	r3, [pc, #200]	; (80089f0 <__swsetup_r+0xcc>)
 8008926:	b570      	push	{r4, r5, r6, lr}
 8008928:	681d      	ldr	r5, [r3, #0]
 800892a:	4606      	mov	r6, r0
 800892c:	460c      	mov	r4, r1
 800892e:	b125      	cbz	r5, 800893a <__swsetup_r+0x16>
 8008930:	69ab      	ldr	r3, [r5, #24]
 8008932:	b913      	cbnz	r3, 800893a <__swsetup_r+0x16>
 8008934:	4628      	mov	r0, r5
 8008936:	f7ff fb0d 	bl	8007f54 <__sinit>
 800893a:	4b2e      	ldr	r3, [pc, #184]	; (80089f4 <__swsetup_r+0xd0>)
 800893c:	429c      	cmp	r4, r3
 800893e:	d10f      	bne.n	8008960 <__swsetup_r+0x3c>
 8008940:	686c      	ldr	r4, [r5, #4]
 8008942:	89a3      	ldrh	r3, [r4, #12]
 8008944:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008948:	0719      	lsls	r1, r3, #28
 800894a:	d42c      	bmi.n	80089a6 <__swsetup_r+0x82>
 800894c:	06dd      	lsls	r5, r3, #27
 800894e:	d411      	bmi.n	8008974 <__swsetup_r+0x50>
 8008950:	2309      	movs	r3, #9
 8008952:	6033      	str	r3, [r6, #0]
 8008954:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008958:	f04f 30ff 	mov.w	r0, #4294967295
 800895c:	81a3      	strh	r3, [r4, #12]
 800895e:	e03e      	b.n	80089de <__swsetup_r+0xba>
 8008960:	4b25      	ldr	r3, [pc, #148]	; (80089f8 <__swsetup_r+0xd4>)
 8008962:	429c      	cmp	r4, r3
 8008964:	d101      	bne.n	800896a <__swsetup_r+0x46>
 8008966:	68ac      	ldr	r4, [r5, #8]
 8008968:	e7eb      	b.n	8008942 <__swsetup_r+0x1e>
 800896a:	4b24      	ldr	r3, [pc, #144]	; (80089fc <__swsetup_r+0xd8>)
 800896c:	429c      	cmp	r4, r3
 800896e:	bf08      	it	eq
 8008970:	68ec      	ldreq	r4, [r5, #12]
 8008972:	e7e6      	b.n	8008942 <__swsetup_r+0x1e>
 8008974:	0758      	lsls	r0, r3, #29
 8008976:	d512      	bpl.n	800899e <__swsetup_r+0x7a>
 8008978:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800897a:	b141      	cbz	r1, 800898e <__swsetup_r+0x6a>
 800897c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008980:	4299      	cmp	r1, r3
 8008982:	d002      	beq.n	800898a <__swsetup_r+0x66>
 8008984:	4630      	mov	r0, r6
 8008986:	f000 f99d 	bl	8008cc4 <_free_r>
 800898a:	2300      	movs	r3, #0
 800898c:	6363      	str	r3, [r4, #52]	; 0x34
 800898e:	89a3      	ldrh	r3, [r4, #12]
 8008990:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008994:	81a3      	strh	r3, [r4, #12]
 8008996:	2300      	movs	r3, #0
 8008998:	6063      	str	r3, [r4, #4]
 800899a:	6923      	ldr	r3, [r4, #16]
 800899c:	6023      	str	r3, [r4, #0]
 800899e:	89a3      	ldrh	r3, [r4, #12]
 80089a0:	f043 0308 	orr.w	r3, r3, #8
 80089a4:	81a3      	strh	r3, [r4, #12]
 80089a6:	6923      	ldr	r3, [r4, #16]
 80089a8:	b94b      	cbnz	r3, 80089be <__swsetup_r+0x9a>
 80089aa:	89a3      	ldrh	r3, [r4, #12]
 80089ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80089b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089b4:	d003      	beq.n	80089be <__swsetup_r+0x9a>
 80089b6:	4621      	mov	r1, r4
 80089b8:	4630      	mov	r0, r6
 80089ba:	f000 f929 	bl	8008c10 <__smakebuf_r>
 80089be:	89a0      	ldrh	r0, [r4, #12]
 80089c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80089c4:	f010 0301 	ands.w	r3, r0, #1
 80089c8:	d00a      	beq.n	80089e0 <__swsetup_r+0xbc>
 80089ca:	2300      	movs	r3, #0
 80089cc:	60a3      	str	r3, [r4, #8]
 80089ce:	6963      	ldr	r3, [r4, #20]
 80089d0:	425b      	negs	r3, r3
 80089d2:	61a3      	str	r3, [r4, #24]
 80089d4:	6923      	ldr	r3, [r4, #16]
 80089d6:	b943      	cbnz	r3, 80089ea <__swsetup_r+0xc6>
 80089d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80089dc:	d1ba      	bne.n	8008954 <__swsetup_r+0x30>
 80089de:	bd70      	pop	{r4, r5, r6, pc}
 80089e0:	0781      	lsls	r1, r0, #30
 80089e2:	bf58      	it	pl
 80089e4:	6963      	ldrpl	r3, [r4, #20]
 80089e6:	60a3      	str	r3, [r4, #8]
 80089e8:	e7f4      	b.n	80089d4 <__swsetup_r+0xb0>
 80089ea:	2000      	movs	r0, #0
 80089ec:	e7f7      	b.n	80089de <__swsetup_r+0xba>
 80089ee:	bf00      	nop
 80089f0:	20000180 	.word	0x20000180
 80089f4:	08008f18 	.word	0x08008f18
 80089f8:	08008f38 	.word	0x08008f38
 80089fc:	08008ef8 	.word	0x08008ef8

08008a00 <_close_r>:
 8008a00:	b538      	push	{r3, r4, r5, lr}
 8008a02:	2300      	movs	r3, #0
 8008a04:	4d05      	ldr	r5, [pc, #20]	; (8008a1c <_close_r+0x1c>)
 8008a06:	4604      	mov	r4, r0
 8008a08:	4608      	mov	r0, r1
 8008a0a:	602b      	str	r3, [r5, #0]
 8008a0c:	f000 f9da 	bl	8008dc4 <_close>
 8008a10:	1c43      	adds	r3, r0, #1
 8008a12:	d102      	bne.n	8008a1a <_close_r+0x1a>
 8008a14:	682b      	ldr	r3, [r5, #0]
 8008a16:	b103      	cbz	r3, 8008a1a <_close_r+0x1a>
 8008a18:	6023      	str	r3, [r4, #0]
 8008a1a:	bd38      	pop	{r3, r4, r5, pc}
 8008a1c:	20001738 	.word	0x20001738

08008a20 <__sflush_r>:
 8008a20:	898a      	ldrh	r2, [r1, #12]
 8008a22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a26:	4605      	mov	r5, r0
 8008a28:	0710      	lsls	r0, r2, #28
 8008a2a:	460c      	mov	r4, r1
 8008a2c:	d458      	bmi.n	8008ae0 <__sflush_r+0xc0>
 8008a2e:	684b      	ldr	r3, [r1, #4]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	dc05      	bgt.n	8008a40 <__sflush_r+0x20>
 8008a34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	dc02      	bgt.n	8008a40 <__sflush_r+0x20>
 8008a3a:	2000      	movs	r0, #0
 8008a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a42:	2e00      	cmp	r6, #0
 8008a44:	d0f9      	beq.n	8008a3a <__sflush_r+0x1a>
 8008a46:	2300      	movs	r3, #0
 8008a48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008a4c:	682f      	ldr	r7, [r5, #0]
 8008a4e:	602b      	str	r3, [r5, #0]
 8008a50:	d032      	beq.n	8008ab8 <__sflush_r+0x98>
 8008a52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008a54:	89a3      	ldrh	r3, [r4, #12]
 8008a56:	075a      	lsls	r2, r3, #29
 8008a58:	d505      	bpl.n	8008a66 <__sflush_r+0x46>
 8008a5a:	6863      	ldr	r3, [r4, #4]
 8008a5c:	1ac0      	subs	r0, r0, r3
 8008a5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a60:	b10b      	cbz	r3, 8008a66 <__sflush_r+0x46>
 8008a62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a64:	1ac0      	subs	r0, r0, r3
 8008a66:	2300      	movs	r3, #0
 8008a68:	4602      	mov	r2, r0
 8008a6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a6c:	4628      	mov	r0, r5
 8008a6e:	6a21      	ldr	r1, [r4, #32]
 8008a70:	47b0      	blx	r6
 8008a72:	1c43      	adds	r3, r0, #1
 8008a74:	89a3      	ldrh	r3, [r4, #12]
 8008a76:	d106      	bne.n	8008a86 <__sflush_r+0x66>
 8008a78:	6829      	ldr	r1, [r5, #0]
 8008a7a:	291d      	cmp	r1, #29
 8008a7c:	d82c      	bhi.n	8008ad8 <__sflush_r+0xb8>
 8008a7e:	4a2a      	ldr	r2, [pc, #168]	; (8008b28 <__sflush_r+0x108>)
 8008a80:	40ca      	lsrs	r2, r1
 8008a82:	07d6      	lsls	r6, r2, #31
 8008a84:	d528      	bpl.n	8008ad8 <__sflush_r+0xb8>
 8008a86:	2200      	movs	r2, #0
 8008a88:	6062      	str	r2, [r4, #4]
 8008a8a:	6922      	ldr	r2, [r4, #16]
 8008a8c:	04d9      	lsls	r1, r3, #19
 8008a8e:	6022      	str	r2, [r4, #0]
 8008a90:	d504      	bpl.n	8008a9c <__sflush_r+0x7c>
 8008a92:	1c42      	adds	r2, r0, #1
 8008a94:	d101      	bne.n	8008a9a <__sflush_r+0x7a>
 8008a96:	682b      	ldr	r3, [r5, #0]
 8008a98:	b903      	cbnz	r3, 8008a9c <__sflush_r+0x7c>
 8008a9a:	6560      	str	r0, [r4, #84]	; 0x54
 8008a9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a9e:	602f      	str	r7, [r5, #0]
 8008aa0:	2900      	cmp	r1, #0
 8008aa2:	d0ca      	beq.n	8008a3a <__sflush_r+0x1a>
 8008aa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008aa8:	4299      	cmp	r1, r3
 8008aaa:	d002      	beq.n	8008ab2 <__sflush_r+0x92>
 8008aac:	4628      	mov	r0, r5
 8008aae:	f000 f909 	bl	8008cc4 <_free_r>
 8008ab2:	2000      	movs	r0, #0
 8008ab4:	6360      	str	r0, [r4, #52]	; 0x34
 8008ab6:	e7c1      	b.n	8008a3c <__sflush_r+0x1c>
 8008ab8:	6a21      	ldr	r1, [r4, #32]
 8008aba:	2301      	movs	r3, #1
 8008abc:	4628      	mov	r0, r5
 8008abe:	47b0      	blx	r6
 8008ac0:	1c41      	adds	r1, r0, #1
 8008ac2:	d1c7      	bne.n	8008a54 <__sflush_r+0x34>
 8008ac4:	682b      	ldr	r3, [r5, #0]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d0c4      	beq.n	8008a54 <__sflush_r+0x34>
 8008aca:	2b1d      	cmp	r3, #29
 8008acc:	d001      	beq.n	8008ad2 <__sflush_r+0xb2>
 8008ace:	2b16      	cmp	r3, #22
 8008ad0:	d101      	bne.n	8008ad6 <__sflush_r+0xb6>
 8008ad2:	602f      	str	r7, [r5, #0]
 8008ad4:	e7b1      	b.n	8008a3a <__sflush_r+0x1a>
 8008ad6:	89a3      	ldrh	r3, [r4, #12]
 8008ad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008adc:	81a3      	strh	r3, [r4, #12]
 8008ade:	e7ad      	b.n	8008a3c <__sflush_r+0x1c>
 8008ae0:	690f      	ldr	r7, [r1, #16]
 8008ae2:	2f00      	cmp	r7, #0
 8008ae4:	d0a9      	beq.n	8008a3a <__sflush_r+0x1a>
 8008ae6:	0793      	lsls	r3, r2, #30
 8008ae8:	bf18      	it	ne
 8008aea:	2300      	movne	r3, #0
 8008aec:	680e      	ldr	r6, [r1, #0]
 8008aee:	bf08      	it	eq
 8008af0:	694b      	ldreq	r3, [r1, #20]
 8008af2:	eba6 0807 	sub.w	r8, r6, r7
 8008af6:	600f      	str	r7, [r1, #0]
 8008af8:	608b      	str	r3, [r1, #8]
 8008afa:	f1b8 0f00 	cmp.w	r8, #0
 8008afe:	dd9c      	ble.n	8008a3a <__sflush_r+0x1a>
 8008b00:	4643      	mov	r3, r8
 8008b02:	463a      	mov	r2, r7
 8008b04:	4628      	mov	r0, r5
 8008b06:	6a21      	ldr	r1, [r4, #32]
 8008b08:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008b0a:	47b0      	blx	r6
 8008b0c:	2800      	cmp	r0, #0
 8008b0e:	dc06      	bgt.n	8008b1e <__sflush_r+0xfe>
 8008b10:	89a3      	ldrh	r3, [r4, #12]
 8008b12:	f04f 30ff 	mov.w	r0, #4294967295
 8008b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b1a:	81a3      	strh	r3, [r4, #12]
 8008b1c:	e78e      	b.n	8008a3c <__sflush_r+0x1c>
 8008b1e:	4407      	add	r7, r0
 8008b20:	eba8 0800 	sub.w	r8, r8, r0
 8008b24:	e7e9      	b.n	8008afa <__sflush_r+0xda>
 8008b26:	bf00      	nop
 8008b28:	20400001 	.word	0x20400001

08008b2c <_fflush_r>:
 8008b2c:	b538      	push	{r3, r4, r5, lr}
 8008b2e:	690b      	ldr	r3, [r1, #16]
 8008b30:	4605      	mov	r5, r0
 8008b32:	460c      	mov	r4, r1
 8008b34:	b913      	cbnz	r3, 8008b3c <_fflush_r+0x10>
 8008b36:	2500      	movs	r5, #0
 8008b38:	4628      	mov	r0, r5
 8008b3a:	bd38      	pop	{r3, r4, r5, pc}
 8008b3c:	b118      	cbz	r0, 8008b46 <_fflush_r+0x1a>
 8008b3e:	6983      	ldr	r3, [r0, #24]
 8008b40:	b90b      	cbnz	r3, 8008b46 <_fflush_r+0x1a>
 8008b42:	f7ff fa07 	bl	8007f54 <__sinit>
 8008b46:	4b14      	ldr	r3, [pc, #80]	; (8008b98 <_fflush_r+0x6c>)
 8008b48:	429c      	cmp	r4, r3
 8008b4a:	d11b      	bne.n	8008b84 <_fflush_r+0x58>
 8008b4c:	686c      	ldr	r4, [r5, #4]
 8008b4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d0ef      	beq.n	8008b36 <_fflush_r+0xa>
 8008b56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008b58:	07d0      	lsls	r0, r2, #31
 8008b5a:	d404      	bmi.n	8008b66 <_fflush_r+0x3a>
 8008b5c:	0599      	lsls	r1, r3, #22
 8008b5e:	d402      	bmi.n	8008b66 <_fflush_r+0x3a>
 8008b60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b62:	f7ff fa95 	bl	8008090 <__retarget_lock_acquire_recursive>
 8008b66:	4628      	mov	r0, r5
 8008b68:	4621      	mov	r1, r4
 8008b6a:	f7ff ff59 	bl	8008a20 <__sflush_r>
 8008b6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b70:	4605      	mov	r5, r0
 8008b72:	07da      	lsls	r2, r3, #31
 8008b74:	d4e0      	bmi.n	8008b38 <_fflush_r+0xc>
 8008b76:	89a3      	ldrh	r3, [r4, #12]
 8008b78:	059b      	lsls	r3, r3, #22
 8008b7a:	d4dd      	bmi.n	8008b38 <_fflush_r+0xc>
 8008b7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b7e:	f7ff fa88 	bl	8008092 <__retarget_lock_release_recursive>
 8008b82:	e7d9      	b.n	8008b38 <_fflush_r+0xc>
 8008b84:	4b05      	ldr	r3, [pc, #20]	; (8008b9c <_fflush_r+0x70>)
 8008b86:	429c      	cmp	r4, r3
 8008b88:	d101      	bne.n	8008b8e <_fflush_r+0x62>
 8008b8a:	68ac      	ldr	r4, [r5, #8]
 8008b8c:	e7df      	b.n	8008b4e <_fflush_r+0x22>
 8008b8e:	4b04      	ldr	r3, [pc, #16]	; (8008ba0 <_fflush_r+0x74>)
 8008b90:	429c      	cmp	r4, r3
 8008b92:	bf08      	it	eq
 8008b94:	68ec      	ldreq	r4, [r5, #12]
 8008b96:	e7da      	b.n	8008b4e <_fflush_r+0x22>
 8008b98:	08008f18 	.word	0x08008f18
 8008b9c:	08008f38 	.word	0x08008f38
 8008ba0:	08008ef8 	.word	0x08008ef8

08008ba4 <_lseek_r>:
 8008ba4:	b538      	push	{r3, r4, r5, lr}
 8008ba6:	4604      	mov	r4, r0
 8008ba8:	4608      	mov	r0, r1
 8008baa:	4611      	mov	r1, r2
 8008bac:	2200      	movs	r2, #0
 8008bae:	4d05      	ldr	r5, [pc, #20]	; (8008bc4 <_lseek_r+0x20>)
 8008bb0:	602a      	str	r2, [r5, #0]
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	f000 f91e 	bl	8008df4 <_lseek>
 8008bb8:	1c43      	adds	r3, r0, #1
 8008bba:	d102      	bne.n	8008bc2 <_lseek_r+0x1e>
 8008bbc:	682b      	ldr	r3, [r5, #0]
 8008bbe:	b103      	cbz	r3, 8008bc2 <_lseek_r+0x1e>
 8008bc0:	6023      	str	r3, [r4, #0]
 8008bc2:	bd38      	pop	{r3, r4, r5, pc}
 8008bc4:	20001738 	.word	0x20001738

08008bc8 <__swhatbuf_r>:
 8008bc8:	b570      	push	{r4, r5, r6, lr}
 8008bca:	460e      	mov	r6, r1
 8008bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bd0:	4614      	mov	r4, r2
 8008bd2:	2900      	cmp	r1, #0
 8008bd4:	461d      	mov	r5, r3
 8008bd6:	b096      	sub	sp, #88	; 0x58
 8008bd8:	da07      	bge.n	8008bea <__swhatbuf_r+0x22>
 8008bda:	2300      	movs	r3, #0
 8008bdc:	602b      	str	r3, [r5, #0]
 8008bde:	89b3      	ldrh	r3, [r6, #12]
 8008be0:	061a      	lsls	r2, r3, #24
 8008be2:	d410      	bmi.n	8008c06 <__swhatbuf_r+0x3e>
 8008be4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008be8:	e00e      	b.n	8008c08 <__swhatbuf_r+0x40>
 8008bea:	466a      	mov	r2, sp
 8008bec:	f000 f8c8 	bl	8008d80 <_fstat_r>
 8008bf0:	2800      	cmp	r0, #0
 8008bf2:	dbf2      	blt.n	8008bda <__swhatbuf_r+0x12>
 8008bf4:	9a01      	ldr	r2, [sp, #4]
 8008bf6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008bfa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008bfe:	425a      	negs	r2, r3
 8008c00:	415a      	adcs	r2, r3
 8008c02:	602a      	str	r2, [r5, #0]
 8008c04:	e7ee      	b.n	8008be4 <__swhatbuf_r+0x1c>
 8008c06:	2340      	movs	r3, #64	; 0x40
 8008c08:	2000      	movs	r0, #0
 8008c0a:	6023      	str	r3, [r4, #0]
 8008c0c:	b016      	add	sp, #88	; 0x58
 8008c0e:	bd70      	pop	{r4, r5, r6, pc}

08008c10 <__smakebuf_r>:
 8008c10:	898b      	ldrh	r3, [r1, #12]
 8008c12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c14:	079d      	lsls	r5, r3, #30
 8008c16:	4606      	mov	r6, r0
 8008c18:	460c      	mov	r4, r1
 8008c1a:	d507      	bpl.n	8008c2c <__smakebuf_r+0x1c>
 8008c1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008c20:	6023      	str	r3, [r4, #0]
 8008c22:	6123      	str	r3, [r4, #16]
 8008c24:	2301      	movs	r3, #1
 8008c26:	6163      	str	r3, [r4, #20]
 8008c28:	b002      	add	sp, #8
 8008c2a:	bd70      	pop	{r4, r5, r6, pc}
 8008c2c:	466a      	mov	r2, sp
 8008c2e:	ab01      	add	r3, sp, #4
 8008c30:	f7ff ffca 	bl	8008bc8 <__swhatbuf_r>
 8008c34:	9900      	ldr	r1, [sp, #0]
 8008c36:	4605      	mov	r5, r0
 8008c38:	4630      	mov	r0, r6
 8008c3a:	f7ff fa2b 	bl	8008094 <_malloc_r>
 8008c3e:	b948      	cbnz	r0, 8008c54 <__smakebuf_r+0x44>
 8008c40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c44:	059a      	lsls	r2, r3, #22
 8008c46:	d4ef      	bmi.n	8008c28 <__smakebuf_r+0x18>
 8008c48:	f023 0303 	bic.w	r3, r3, #3
 8008c4c:	f043 0302 	orr.w	r3, r3, #2
 8008c50:	81a3      	strh	r3, [r4, #12]
 8008c52:	e7e3      	b.n	8008c1c <__smakebuf_r+0xc>
 8008c54:	4b0d      	ldr	r3, [pc, #52]	; (8008c8c <__smakebuf_r+0x7c>)
 8008c56:	62b3      	str	r3, [r6, #40]	; 0x28
 8008c58:	89a3      	ldrh	r3, [r4, #12]
 8008c5a:	6020      	str	r0, [r4, #0]
 8008c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c60:	81a3      	strh	r3, [r4, #12]
 8008c62:	9b00      	ldr	r3, [sp, #0]
 8008c64:	6120      	str	r0, [r4, #16]
 8008c66:	6163      	str	r3, [r4, #20]
 8008c68:	9b01      	ldr	r3, [sp, #4]
 8008c6a:	b15b      	cbz	r3, 8008c84 <__smakebuf_r+0x74>
 8008c6c:	4630      	mov	r0, r6
 8008c6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c72:	f000 f897 	bl	8008da4 <_isatty_r>
 8008c76:	b128      	cbz	r0, 8008c84 <__smakebuf_r+0x74>
 8008c78:	89a3      	ldrh	r3, [r4, #12]
 8008c7a:	f023 0303 	bic.w	r3, r3, #3
 8008c7e:	f043 0301 	orr.w	r3, r3, #1
 8008c82:	81a3      	strh	r3, [r4, #12]
 8008c84:	89a0      	ldrh	r0, [r4, #12]
 8008c86:	4305      	orrs	r5, r0
 8008c88:	81a5      	strh	r5, [r4, #12]
 8008c8a:	e7cd      	b.n	8008c28 <__smakebuf_r+0x18>
 8008c8c:	08007eed 	.word	0x08007eed

08008c90 <memchr>:
 8008c90:	4603      	mov	r3, r0
 8008c92:	b510      	push	{r4, lr}
 8008c94:	b2c9      	uxtb	r1, r1
 8008c96:	4402      	add	r2, r0
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	d101      	bne.n	8008ca2 <memchr+0x12>
 8008c9e:	2000      	movs	r0, #0
 8008ca0:	e003      	b.n	8008caa <memchr+0x1a>
 8008ca2:	7804      	ldrb	r4, [r0, #0]
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	428c      	cmp	r4, r1
 8008ca8:	d1f6      	bne.n	8008c98 <memchr+0x8>
 8008caa:	bd10      	pop	{r4, pc}

08008cac <__malloc_lock>:
 8008cac:	4801      	ldr	r0, [pc, #4]	; (8008cb4 <__malloc_lock+0x8>)
 8008cae:	f7ff b9ef 	b.w	8008090 <__retarget_lock_acquire_recursive>
 8008cb2:	bf00      	nop
 8008cb4:	20001730 	.word	0x20001730

08008cb8 <__malloc_unlock>:
 8008cb8:	4801      	ldr	r0, [pc, #4]	; (8008cc0 <__malloc_unlock+0x8>)
 8008cba:	f7ff b9ea 	b.w	8008092 <__retarget_lock_release_recursive>
 8008cbe:	bf00      	nop
 8008cc0:	20001730 	.word	0x20001730

08008cc4 <_free_r>:
 8008cc4:	b538      	push	{r3, r4, r5, lr}
 8008cc6:	4605      	mov	r5, r0
 8008cc8:	2900      	cmp	r1, #0
 8008cca:	d043      	beq.n	8008d54 <_free_r+0x90>
 8008ccc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cd0:	1f0c      	subs	r4, r1, #4
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	bfb8      	it	lt
 8008cd6:	18e4      	addlt	r4, r4, r3
 8008cd8:	f7ff ffe8 	bl	8008cac <__malloc_lock>
 8008cdc:	4a1e      	ldr	r2, [pc, #120]	; (8008d58 <_free_r+0x94>)
 8008cde:	6813      	ldr	r3, [r2, #0]
 8008ce0:	4610      	mov	r0, r2
 8008ce2:	b933      	cbnz	r3, 8008cf2 <_free_r+0x2e>
 8008ce4:	6063      	str	r3, [r4, #4]
 8008ce6:	6014      	str	r4, [r2, #0]
 8008ce8:	4628      	mov	r0, r5
 8008cea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cee:	f7ff bfe3 	b.w	8008cb8 <__malloc_unlock>
 8008cf2:	42a3      	cmp	r3, r4
 8008cf4:	d90a      	bls.n	8008d0c <_free_r+0x48>
 8008cf6:	6821      	ldr	r1, [r4, #0]
 8008cf8:	1862      	adds	r2, r4, r1
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	bf01      	itttt	eq
 8008cfe:	681a      	ldreq	r2, [r3, #0]
 8008d00:	685b      	ldreq	r3, [r3, #4]
 8008d02:	1852      	addeq	r2, r2, r1
 8008d04:	6022      	streq	r2, [r4, #0]
 8008d06:	6063      	str	r3, [r4, #4]
 8008d08:	6004      	str	r4, [r0, #0]
 8008d0a:	e7ed      	b.n	8008ce8 <_free_r+0x24>
 8008d0c:	461a      	mov	r2, r3
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	b10b      	cbz	r3, 8008d16 <_free_r+0x52>
 8008d12:	42a3      	cmp	r3, r4
 8008d14:	d9fa      	bls.n	8008d0c <_free_r+0x48>
 8008d16:	6811      	ldr	r1, [r2, #0]
 8008d18:	1850      	adds	r0, r2, r1
 8008d1a:	42a0      	cmp	r0, r4
 8008d1c:	d10b      	bne.n	8008d36 <_free_r+0x72>
 8008d1e:	6820      	ldr	r0, [r4, #0]
 8008d20:	4401      	add	r1, r0
 8008d22:	1850      	adds	r0, r2, r1
 8008d24:	4283      	cmp	r3, r0
 8008d26:	6011      	str	r1, [r2, #0]
 8008d28:	d1de      	bne.n	8008ce8 <_free_r+0x24>
 8008d2a:	6818      	ldr	r0, [r3, #0]
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	4401      	add	r1, r0
 8008d30:	6011      	str	r1, [r2, #0]
 8008d32:	6053      	str	r3, [r2, #4]
 8008d34:	e7d8      	b.n	8008ce8 <_free_r+0x24>
 8008d36:	d902      	bls.n	8008d3e <_free_r+0x7a>
 8008d38:	230c      	movs	r3, #12
 8008d3a:	602b      	str	r3, [r5, #0]
 8008d3c:	e7d4      	b.n	8008ce8 <_free_r+0x24>
 8008d3e:	6820      	ldr	r0, [r4, #0]
 8008d40:	1821      	adds	r1, r4, r0
 8008d42:	428b      	cmp	r3, r1
 8008d44:	bf01      	itttt	eq
 8008d46:	6819      	ldreq	r1, [r3, #0]
 8008d48:	685b      	ldreq	r3, [r3, #4]
 8008d4a:	1809      	addeq	r1, r1, r0
 8008d4c:	6021      	streq	r1, [r4, #0]
 8008d4e:	6063      	str	r3, [r4, #4]
 8008d50:	6054      	str	r4, [r2, #4]
 8008d52:	e7c9      	b.n	8008ce8 <_free_r+0x24>
 8008d54:	bd38      	pop	{r3, r4, r5, pc}
 8008d56:	bf00      	nop
 8008d58:	200006f8 	.word	0x200006f8

08008d5c <_read_r>:
 8008d5c:	b538      	push	{r3, r4, r5, lr}
 8008d5e:	4604      	mov	r4, r0
 8008d60:	4608      	mov	r0, r1
 8008d62:	4611      	mov	r1, r2
 8008d64:	2200      	movs	r2, #0
 8008d66:	4d05      	ldr	r5, [pc, #20]	; (8008d7c <_read_r+0x20>)
 8008d68:	602a      	str	r2, [r5, #0]
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	f000 f84a 	bl	8008e04 <_read>
 8008d70:	1c43      	adds	r3, r0, #1
 8008d72:	d102      	bne.n	8008d7a <_read_r+0x1e>
 8008d74:	682b      	ldr	r3, [r5, #0]
 8008d76:	b103      	cbz	r3, 8008d7a <_read_r+0x1e>
 8008d78:	6023      	str	r3, [r4, #0]
 8008d7a:	bd38      	pop	{r3, r4, r5, pc}
 8008d7c:	20001738 	.word	0x20001738

08008d80 <_fstat_r>:
 8008d80:	b538      	push	{r3, r4, r5, lr}
 8008d82:	2300      	movs	r3, #0
 8008d84:	4d06      	ldr	r5, [pc, #24]	; (8008da0 <_fstat_r+0x20>)
 8008d86:	4604      	mov	r4, r0
 8008d88:	4608      	mov	r0, r1
 8008d8a:	4611      	mov	r1, r2
 8008d8c:	602b      	str	r3, [r5, #0]
 8008d8e:	f000 f821 	bl	8008dd4 <_fstat>
 8008d92:	1c43      	adds	r3, r0, #1
 8008d94:	d102      	bne.n	8008d9c <_fstat_r+0x1c>
 8008d96:	682b      	ldr	r3, [r5, #0]
 8008d98:	b103      	cbz	r3, 8008d9c <_fstat_r+0x1c>
 8008d9a:	6023      	str	r3, [r4, #0]
 8008d9c:	bd38      	pop	{r3, r4, r5, pc}
 8008d9e:	bf00      	nop
 8008da0:	20001738 	.word	0x20001738

08008da4 <_isatty_r>:
 8008da4:	b538      	push	{r3, r4, r5, lr}
 8008da6:	2300      	movs	r3, #0
 8008da8:	4d05      	ldr	r5, [pc, #20]	; (8008dc0 <_isatty_r+0x1c>)
 8008daa:	4604      	mov	r4, r0
 8008dac:	4608      	mov	r0, r1
 8008dae:	602b      	str	r3, [r5, #0]
 8008db0:	f000 f818 	bl	8008de4 <_isatty>
 8008db4:	1c43      	adds	r3, r0, #1
 8008db6:	d102      	bne.n	8008dbe <_isatty_r+0x1a>
 8008db8:	682b      	ldr	r3, [r5, #0]
 8008dba:	b103      	cbz	r3, 8008dbe <_isatty_r+0x1a>
 8008dbc:	6023      	str	r3, [r4, #0]
 8008dbe:	bd38      	pop	{r3, r4, r5, pc}
 8008dc0:	20001738 	.word	0x20001738

08008dc4 <_close>:
 8008dc4:	2258      	movs	r2, #88	; 0x58
 8008dc6:	4b02      	ldr	r3, [pc, #8]	; (8008dd0 <_close+0xc>)
 8008dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8008dcc:	601a      	str	r2, [r3, #0]
 8008dce:	4770      	bx	lr
 8008dd0:	20001738 	.word	0x20001738

08008dd4 <_fstat>:
 8008dd4:	2258      	movs	r2, #88	; 0x58
 8008dd6:	4b02      	ldr	r3, [pc, #8]	; (8008de0 <_fstat+0xc>)
 8008dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ddc:	601a      	str	r2, [r3, #0]
 8008dde:	4770      	bx	lr
 8008de0:	20001738 	.word	0x20001738

08008de4 <_isatty>:
 8008de4:	2258      	movs	r2, #88	; 0x58
 8008de6:	4b02      	ldr	r3, [pc, #8]	; (8008df0 <_isatty+0xc>)
 8008de8:	2000      	movs	r0, #0
 8008dea:	601a      	str	r2, [r3, #0]
 8008dec:	4770      	bx	lr
 8008dee:	bf00      	nop
 8008df0:	20001738 	.word	0x20001738

08008df4 <_lseek>:
 8008df4:	2258      	movs	r2, #88	; 0x58
 8008df6:	4b02      	ldr	r3, [pc, #8]	; (8008e00 <_lseek+0xc>)
 8008df8:	f04f 30ff 	mov.w	r0, #4294967295
 8008dfc:	601a      	str	r2, [r3, #0]
 8008dfe:	4770      	bx	lr
 8008e00:	20001738 	.word	0x20001738

08008e04 <_read>:
 8008e04:	2258      	movs	r2, #88	; 0x58
 8008e06:	4b02      	ldr	r3, [pc, #8]	; (8008e10 <_read+0xc>)
 8008e08:	f04f 30ff 	mov.w	r0, #4294967295
 8008e0c:	601a      	str	r2, [r3, #0]
 8008e0e:	4770      	bx	lr
 8008e10:	20001738 	.word	0x20001738

08008e14 <_sbrk>:
 8008e14:	4b04      	ldr	r3, [pc, #16]	; (8008e28 <_sbrk+0x14>)
 8008e16:	4602      	mov	r2, r0
 8008e18:	6819      	ldr	r1, [r3, #0]
 8008e1a:	b909      	cbnz	r1, 8008e20 <_sbrk+0xc>
 8008e1c:	4903      	ldr	r1, [pc, #12]	; (8008e2c <_sbrk+0x18>)
 8008e1e:	6019      	str	r1, [r3, #0]
 8008e20:	6818      	ldr	r0, [r3, #0]
 8008e22:	4402      	add	r2, r0
 8008e24:	601a      	str	r2, [r3, #0]
 8008e26:	4770      	bx	lr
 8008e28:	20000700 	.word	0x20000700
 8008e2c:	20001740 	.word	0x20001740

08008e30 <_write>:
 8008e30:	2258      	movs	r2, #88	; 0x58
 8008e32:	4b02      	ldr	r3, [pc, #8]	; (8008e3c <_write+0xc>)
 8008e34:	f04f 30ff 	mov.w	r0, #4294967295
 8008e38:	601a      	str	r2, [r3, #0]
 8008e3a:	4770      	bx	lr
 8008e3c:	20001738 	.word	0x20001738

08008e40 <_init>:
 8008e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e42:	bf00      	nop
 8008e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e46:	bc08      	pop	{r3}
 8008e48:	469e      	mov	lr, r3
 8008e4a:	4770      	bx	lr

08008e4c <_fini>:
 8008e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e4e:	bf00      	nop
 8008e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e52:	bc08      	pop	{r3}
 8008e54:	469e      	mov	lr, r3
 8008e56:	4770      	bx	lr
